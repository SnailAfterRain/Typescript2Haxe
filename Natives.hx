// Generated Fri Sep 15 17:53:49 MSK 2017
import haxe.extern.EitherType;

extern class Natives {
    
    /**
    * Aborts the current message in the text chat.
    */
    @:pure static inline function AbortTextChat(): Void { return untyped __lua__('AbortTextChat')(); }
    @:pure static inline function Absf(value: Int): Int { return untyped __lua__('Absf')(value); }
    @:pure static inline function Absi(value: Int): Int { return untyped __lua__('Absi')(value); }
    @:pure static inline function Acos(p0: Int): Int { return untyped __lua__('Acos')(p0); }
    @:pure static inline function ActivateDamageTrackerOnNetworkId(netID: Int, p1: Bool): Void { return untyped __lua__('ActivateDamageTrackerOnNetworkId')(netID, p1); }
    
    /**
    * Does stuff like this:
    * gyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617
    * Example:
    * int GetHash = GET_HASH_KEY("fe_menu_version_corona_lobby");
    * ACTIVATE_FRONTEND_MENU(GetHash, 0, -1);
    * BOOL p1 is a toggle to define the game in pause.
    * int p2 is unknown but -1 always works, not sure why though.
    * [30/03/2017] ins1de :
    * the int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.
    * Example : Function.Call(Hash.ACTIVATE_FRONTEND_MENU,-1171018317, 0, 42);
    * Result : Opens the "Online" tab without pausing the menu, with -1 it opens the map.
    */
    @:pure static inline function ActivateFrontendMenu(menuhash: EitherType<String, Int>, Toggle_Pause: Bool, component: Int): Void { return untyped __lua__('ActivateFrontendMenu')(menuhash, Toggle_Pause, component); }
    
    /**
    * seems to be frequently used with the NETWORK::NET_TO_x natives, particularly with vehicles. It is often the only ROPE:: native in a script.
    */
    @:pure static inline function ActivatePhysics(entity: Int): Void { return untyped __lua__('ActivatePhysics')(entity); }
    
    /**
    * Show Rockstar Editor Menu
    * by I'm Not MentaL
    * ----------
    * "new_editor" menu
    */
    @:pure static inline function ActivateRockstarEditor(): Void { return untyped __lua__('ActivateRockstarEditor')(); }
    
    /**
    * Show Rockstar Editor Menu
    * by I'm Not MentaL
    * ----------
    * "new_editor" menu
    */
    @:pure static inline function N_0x49da8145672b2725(): Void { return untyped __lua__('N_0x49da8145672b2725')(); }
    @:pure static inline function AddAmmoToPed(ped: Int, weaponHash: EitherType<String, Int>, ammo: Int): Void { return untyped __lua__('AddAmmoToPed')(ped, weaponHash, ammo); }
    
    /**
    * Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.
    */
    @:pure static inline function AddArmourToPed(ped: Int, amount: Int): Void { return untyped __lua__('AddArmourToPed')(ped, amount); }
    
    /**
    * Creates an orange ( default ) Blip-object. Returns a Blip-object which can then be modified.
    */
    @:pure static inline function AddBlipForCoord(x: Int, y: Int, z: Int): Int { return untyped __lua__('AddBlipForCoord')(x, y, z); }
    
    /**
    * Returns red ( default ) blip attached to entity.
    * Example:
    * Blip blip; //Put this outside your case or option
    * blip = UI::ADD_BLIP_FOR_ENTITY(YourPedOrBodyguardName);
    * UI::SET_BLIP_AS_FRIENDLY(blip, true);
    */
    @:pure static inline function AddBlipForEntity(entity: Int): Int { return untyped __lua__('AddBlipForEntity')(entity); }
    @:pure static inline function AddBlipForPickup(pickup: Int): Int { return untyped __lua__('AddBlipForPickup')(pickup); }
    @:pure static inline function AddBlipForRadius(posX: Int, posY: Int, posZ: Int, radius: Int): Int { return untyped __lua__('AddBlipForRadius')(posX, posY, posZ, radius); }
    
    /**
    * I filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct.
    * p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one
    * p8 big values ~100 will slow down the camera movement before reaching this node
    * p9 != 0 seems to override the rotation/pitch (bool?)
    */
    @:pure static inline function AddCamSplineNode(camera: Int, x: Int, y: Int, z: Int, xRot: Int, yRot: Int, zRot: Int, length: Int, p8: Int, p9: Int): Void { return untyped __lua__('AddCamSplineNode')(camera, x, y, z, xRot, yRot, zRot, length, p8, p9); }
    
    /**
    * Now has 15 parameters, previous declaration:
    * BOOL _0x428BDCB9DA58DA53(Any p0, Any p1, Any p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11, float p12, Any p13)
    * boneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone. They are usually rotations and measurements. Haven't reversed which are what yet.
    * Scale is how big the decal will be.
    * p13 is always 0.
    * For alpha, 200 seems to match what the game is doing, I think. I don't have access to the new scripts to see what this parameter is, but based on guessing this seems (kind of) accurate.
    */
    @:pure static inline function AddClanDecalToVehicle(vehicle: Int, ped: Int, boneIndex: Int, x1: Int, x2: Int, x3: Int, y1: Int, y2: Int, y3: Int, z1: Int, z2: Int, z3: Int, scale: Int, p13: Int, alpha: Int): Int { return untyped __lua__('AddClanDecalToVehicle')(vehicle, ped, boneIndex, x1, x2, x3, y1, y2, y3, z1, z2, z3, scale, p13, alpha); }
    @:pure static inline function AddCoverBlockingArea(playerX: Int, playerY: Int, playerZ: Int, radiusX: Int, radiusY: Int, radiusZ: Int, p6: Bool, p7: Bool, p8: Bool, p9: Bool): Void { return untyped __lua__('AddCoverBlockingArea')(playerX, playerY, playerZ, radiusX, radiusY, radiusZ, p6, p7, p8, p9); }
    @:pure static inline function AddCoverPoint(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Bool): Int { return untyped __lua__('AddCoverPoint')(p0, p1, p2, p3, p4, p5, p6, p7); }
    
    /**
    * decal types:
    * public enum DecalTypes
    * {
    * splatters_blood = 1010,
    * splatters_blood_dir = 1015,
    * splatters_blood_mist = 1017,
    * splatters_mud = 1020,
    * splatters_paint = 1030,
    * splatters_water = 1040,
    * splatters_water_hydrant = 1050,
    * splatters_blood2 = 1110,
    * weapImpact_metal = 4010,
    * weapImpact_concrete = 4020,
    * weapImpact_mattress = 4030,
    * weapImpact_mud = 4032,
    * weapImpact_wood = 4050,
    * weapImpact_sand = 4053,
    * weapImpact_cardboard = 4040,
    * weapImpact_melee_glass = 4100,
    * weapImpact_glass_blood = 4102,
    * weapImpact_glass_blood2 = 4104,
    * weapImpact_shotgun_paper = 4200,
    * weapImpact_shotgun_mattress,
    * weapImpact_shotgun_metal,
    * weapImpact_shotgun_wood,
    * weapImpact_shotgun_dirt,
    * weapImpact_shotgun_tvscreen,
    * weapImpact_shotgun_tvscreen2,
    * weapImpact_shotgun_tvscreen3,
    * weapImpact_melee_concrete = 4310,
    * weapImpact_melee_wood = 4312,
    * weapImpact_melee_metal = 4314,
    * burn1 = 4421,
    * burn2,
    * burn3,
    * burn4,
    * burn5,
    * bang_concrete_bang = 5000,
    * bang_concrete_bang2,
    * bang_bullet_bang,
    * bang_bullet_bang2 = 5004,
    * bang_glass = 5031,
    * bang_glass2,
    * solidPool_water = 9000,
    * solidPool_blood,
    * solidPool_oil,
    * solidPool_petrol,
    * solidPool_mud,
    * porousPool_water,
    * porousPool_blood,
    * porousPool_oil,
    * porousPool_petrol,
    * porousPool_mud,
    * porousPool_water_ped_drip,
    * liquidTrail_water = 9050
    * }
    */
    @:pure static inline function AddDecal(decalType: Int, posX: Int, posY: Int, posZ: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int, width: Int, height: Int, rCoef: Int, gCoef: Int, bCoef: Int, opacity: Int, timeout: Int, p17: Bool, p18: Bool, p19: Bool): Int { return untyped __lua__('AddDecal')(decalType, posX, posY, posZ, p4, p5, p6, p7, p8, p9, width, height, rCoef, gCoef, bCoef, opacity, timeout, p17, p18, p19); }
    @:pure static inline function AddDoorToSystem(doorHash: EitherType<String, Int>, modelHash: EitherType<String, Int>, x: Int, y: Int, z: Int, p5: Bool, p6: Bool, p7: Bool): Void { return untyped __lua__('AddDoorToSystem')(doorHash, modelHash, x, y, z, p5, p6, p7); }
    
    /**
    * Example:
    * GRAPHICS::ADD_ENTITY_ICON(a_0, "MP_Arrow");
    * I tried this and nothing happened...
    */
    @:pure static inline function AddEntityIcon(entity: Int, icon: String): Int { return untyped __lua__('AddEntityIcon')(entity, icon); }
    
    /**
    * BOOL isAudible = If explosion makes a sound.
    * BOOL isInvisible = If the explosion is invisible or not.
    * this native is missing a new argument: noDamage
    * nodamage = false: damage || nodamage = true: no damage
    * enum ExplosionTypes
    * {
    * EXPLOSION_GRENADE,
    * EXPLOSION_GRENADELAUNCHER,
    * EXPLOSION_STICKYBOMB,
    * EXPLOSION_MOLOTOV,
    * EXPLOSION_ROCKET,
    * EXPLOSION_TANKSHELL,
    * EXPLOSION_HI_OCTANE,
    * EXPLOSION_CAR,
    * EXPLOSION_PLANE,
    * EXPLOSION_PETROL_PUMP,
    * EXPLOSION_BIKE,
    * EXPLOSION_DIR_STEAM,
    * EXPLOSION_DIR_FLAME,
    * EXPLOSION_DIR_WATER_HYDRANT,
    * EXPLOSION_DIR_GAS_CANISTER,
    * EXPLOSION_BOAT,
    * EXPLOSION_SHIP_DESTROY,
    * EXPLOSION_TRUCK,
    * EXPLOSION_BULLET,
    * EXPLOSION_SMOKEGRENADELAUNCHER,
    * EXPLOSION_SMOKEGRENADE,
    * EXPLOSION_BZGAS,
    * EXPLOSION_FLARE,
    * EXPLOSION_GAS_CANISTER,
    * EXPLOSION_EXTINGUISHER,
    * EXPLOSION_PROGRAMMABLEAR,
    * EXPLOSION_TRAIN,
    * EXPLOSION_BARREL,
    * EXPLOSION_PROPANE,
    * EXPLOSION_BLIMP,
    * EXPLOSION_DIR_FLAME_EXPLODE,
    * EXPLOSION_TANKER,
    * EXPLOSION_PLANE_ROCKET,
    * EXPLOSION_VEHICLE_BULLET,
    * EXPLOSION_GAS_TANK,
    * EXPLOSION_BIRD_CRAP
    * };
    */
    @:pure static inline function AddExplosion(x: Int, y: Int, z: Int, explosionType: Int, damageScale: Int, isAudible: Bool, isInvisible: Bool, cameraShake: Int): Void { return untyped __lua__('AddExplosion')(x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake); }
    @:pure static inline function AddExplosionWithUserVfx(x: Int, y: Int, z: Int, explosionType: Int, explosionFx: EitherType<String, Int>, damageScale: Int, isAudible: Bool, isInvisible: Bool, cameraShake: Int): Void { return untyped __lua__('AddExplosionWithUserVfx')(x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake); }
    @:pure static inline function AddSpecfxExplosion(x: Int, y: Int, z: Int, explosionType: Int, explosionFx: EitherType<String, Int>, damageScale: Int, isAudible: Bool, isInvisible: Bool, cameraShake: Int): Void { return untyped __lua__('AddSpecfxExplosion')(x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake); }
    
    /**
    * Seems to add/set the current menu context (to show/hide buttons?)
    * Pausemenu.xml:
    * &lt;Contexts&gt;*ALL*, DISPLAY_CORONA_BUTTONS, *NONE*, BET_LOCKED, BET_AVAILABLE, SCROLL_OPTION&lt;/Contexts&gt;
    * Code:
    * if (...) {
    * sub_bbd34(a_0, 0, "FM_BET_HELP");
    * UI::_DD564BDD0472C936(${bet_available}); // This native
    * UI::OBJECT_DECAL_TOGGLE(${bet_locked});
    * } else {
    * sub_bbd34(a_0, 0, "");
    * UI::OBJECT_DECAL_TOGGLE(${bet_available});
    * UI::_DD564BDD0472C936(${bet_locked}); // This native
    * }
    * OBJECT_DECAL_TOGGLE seems to remove a context, It also has a hash collision
    * // Old
    * Scripts do not make this native's purpose clear. However, this native most likely has something to do with decals since in nearly every instance, "OBJECT_DECAL_TOGGLE" is called prior.
    */
    @:pure static inline function AddFrontendMenuContext(hash: EitherType<String, Int>): Void { return untyped __lua__('AddFrontendMenuContext')(hash); }
    
    /**
    * Seems to add/set the current menu context (to show/hide buttons?)
    * Pausemenu.xml:
    * &lt;Contexts&gt;*ALL*, DISPLAY_CORONA_BUTTONS, *NONE*, BET_LOCKED, BET_AVAILABLE, SCROLL_OPTION&lt;/Contexts&gt;
    * Code:
    * if (...) {
    * sub_bbd34(a_0, 0, "FM_BET_HELP");
    * UI::_DD564BDD0472C936(${bet_available}); // This native
    * UI::OBJECT_DECAL_TOGGLE(${bet_locked});
    * } else {
    * sub_bbd34(a_0, 0, "");
    * UI::OBJECT_DECAL_TOGGLE(${bet_available});
    * UI::_DD564BDD0472C936(${bet_locked}); // This native
    * }
    * OBJECT_DECAL_TOGGLE seems to remove a context, It also has a hash collision
    * // Old
    * Scripts do not make this native's purpose clear. However, this native most likely has something to do with decals since in nearly every instance, "OBJECT_DECAL_TOGGLE" is called prior.
    */
    @:pure static inline function N_0xdd564bdd0472c936(hash: EitherType<String, Int>): Void { return untyped __lua__('N_0xdd564bdd0472c936')(hash); }
    
    /**
    * Returns the index of the newly created hospital spawn point.
    * p3 might be radius?
    */
    @:pure static inline function AddHospitalRestart(x: Int, y: Int, z: Int, p3: Int, p4: Int): Int { return untyped __lua__('AddHospitalRestart')(x, y, z, p3, p4); }
    
    /**
    * NOTE: ones that are -1, 0 - 35 are determined by a function where it gets a TextLabel from a global then runs,
    * _GET_TEXT_SUBSTRING and depending on what the result is it goes in check order of 0 - 9 then A - Z then z (lowercase). So it will then return 0 - 35 or -1 if it's 'z'. The func to handle that ^^ is func_67 in dialog_handler.c atleast in TU27 Xbox360 scripts.
    * p0 is -1, 0
    * p1 is a char or string (whatever you wanna call it)
    * p2 is Global 10597 + i * 6. 'i' is a while(i &lt; 70) loop
    * p3 is again -1, 0 - 35
    * p4 is again -1, 0 - 35
    * p5 is either 0 or 1 (bool ?)
    * p6 is either 0 or 1 (The func to determine this is bool)
    * p7 is either 0 or 1 (The func to determine this is bool)
    * p8 is either 0 or 1 (The func to determine this is bool)
    * p9 is 0 - 3 (Determined by func_60 in dialogue_handler.c)
    * p10 is either 0 or 1 (The func to determine this is bool)
    * p11 is either 0 or 1 (The func to determine this is bool)
    * p12 is unknown as in TU27 X360 scripts it only goes to p11.
    */
    @:pure static inline function AddLineToConversation(p0: Int, p1: String, p2: String, p3: Int, p4: Int, p5: Bool, p6: Bool, p7: Bool, p8: Bool, p9: Int, p10: Bool, p11: Bool, p12: Bool): Void { return untyped __lua__('AddLineToConversation')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12); }
    @:pure static inline function AddNavmeshBlockingObject(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Bool, p8: Int): Int { return untyped __lua__('AddNavmeshBlockingObject')(p0, p1, p2, p3, p4, p5, p6, p7, p8); }
    @:pure static inline function AddNavmeshRequiredRegion(x: Int, y: Int, radius: Int): Void { return untyped __lua__('AddNavmeshRequiredRegion')(x, y, radius); }
    
    /**
    * hash collision?
    */
    @:pure static inline function AddNextMessageToPreviousBriefs(p0: Bool): Void { return untyped __lua__('AddNextMessageToPreviousBriefs')(p0); }
    
    /**
    * enum ExplosionTypes
    * {
    * EXPLOSION_GRENADE,
    * EXPLOSION_GRENADELAUNCHER,
    * EXPLOSION_STICKYBOMB,
    * EXPLOSION_MOLOTOV,
    * EXPLOSION_ROCKET,
    * EXPLOSION_TANKSHELL,
    * EXPLOSION_HI_OCTANE,
    * EXPLOSION_CAR,
    * EXPLOSION_PLANE,
    * EXPLOSION_PETROL_PUMP,
    * EXPLOSION_BIKE,
    * EXPLOSION_DIR_STEAM,
    * EXPLOSION_DIR_FLAME,
    * EXPLOSION_DIR_WATER_HYDRANT,
    * EXPLOSION_DIR_GAS_CANISTER,
    * EXPLOSION_BOAT,
    * EXPLOSION_SHIP_DESTROY,
    * EXPLOSION_TRUCK,
    * EXPLOSION_BULLET,
    * EXPLOSION_SMOKEGRENADELAUNCHER,
    * EXPLOSION_SMOKEGRENADE,
    * EXPLOSION_BZGAS,
    * EXPLOSION_FLARE,
    * EXPLOSION_GAS_CANISTER,
    * EXPLOSION_EXTINGUISHER,
    * EXPLOSION_PROGRAMMABLEAR,
    * EXPLOSION_TRAIN,
    * EXPLOSION_BARREL,
    * EXPLOSION_PROPANE,
    * EXPLOSION_BLIMP,
    * EXPLOSION_DIR_FLAME_EXPLODE,
    * EXPLOSION_TANKER,
    * EXPLOSION_PLANE_ROCKET,
    * EXPLOSION_VEHICLE_BULLET,
    * EXPLOSION_GAS_TANK,
    * EXPLOSION_BIRD_CRAP
    * };
    * BOOL isAudible = If explosion makes a sound.
    * BOOL isInvisible = If the explosion is invisible or not.
    */
    @:pure static inline function AddOwnedExplosion(ped: Int, x: Int, y: Int, z: Int, explosionType: Int, damageScale: Int, isAudible: Bool, isInvisible: Bool, cameraShake: Int): Void { return untyped __lua__('AddOwnedExplosion')(ped, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake); }
    @:pure static inline function AddPatrolRouteLink(p0: Int, p1: Int): Void { return untyped __lua__('AddPatrolRouteLink')(p0, p1); }
    
    /**
    * Example:
    * AI::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", -193.4915, -2378.864990234375, 10.9719, -193.4915, -2378.864990234375, 10.9719, 3000);
    * p0 is between 0 and 4 in the scripts.
    * p1 is "WORLD_HUMAN_GUARD_STAND" or "StandGuard".
    * p2, p3 and p4 is only one parameter sometimes in the scripts. Most likely a Vector3 hence p2, p3 and p4 are coordinates.
    * Examples:
    * AI::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_739[7 -- [[3]] ], 0.0, 0.0, 0.0, 0);
    * AI::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_B0[17 -- [[44]] ]._f3, l_B0[17 -- [[44]] ]._f3, 2000);
    * p5, p6 and p7 are for example set to: 1599.0406494140625, 2713.392578125, 44.4309.
    * p8 is an int, often random set to for example: GAMEPLAY::GET_RANDOM_INT_IN_RANGE(5000, 10000).
    */
    @:pure static inline function AddPatrolRouteNode(p0: Int, p1: String, x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, p8: Int): Void { return untyped __lua__('AddPatrolRouteNode')(p0, p1, x1, y1, z1, x2, y2, z2, p8); }
    
    /**
    * 4 calls in the b617d scripts. The only one with p0 and p2 in clear text:
    * AUDIO::ADD_PED_TO_CONVERSATION(5, l_AF, "DINAPOLI");
    * =================================================
    * One of the 2 calls in dialogue_handler.c p0 is in a while-loop, and so is determined to also possibly be 0 - 15.
    * Based on it asking if does_entity_exist for the global I have determined that p1 is, in fact, the ped, but could be wrong.
    */
    @:pure static inline function AddPedToConversation(p0: Int, ped: Int, p2: String): Void { return untyped __lua__('AddPedToConversation')(p0, ped, p2); }
    @:pure static inline function AddPetrolDecal(x: Int, y: Int, z: Int, groundLvl: Int, width: Int, transparency: Int): Int { return untyped __lua__('AddPetrolDecal')(x, y, z, groundLvl, width, transparency); }
    @:pure static inline function AddPickupToInteriorRoomByName(pickup: Int, roomName: String): Void { return untyped __lua__('AddPickupToInteriorRoomByName')(pickup, roomName); }
    @:pure static inline function AddPoliceRestart(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Int { return untyped __lua__('AddPoliceRestart')(p0, p1, p2, p3, p4); }
    
    /**
    * Can't select void. This function returns nothing. The hash of the created relationship group is output in the second parameter.
    */
    @:pure static inline function AddRelationshipGroup(name: String, groupHash: Int): Int { return untyped __lua__('AddRelationshipGroup')(name, groupHash); }
    
    /**
    * Creates a rope at the specific position, that extends in the specified direction when not attached to any entities.
    * __
    * Add_Rope(pos.x,pos.y,pos.z,0.0,0.0,0.0,20.0,4,20.0,1.0,0.0,false,false,false,5.0,false,NULL)
    * When attached, Position&lt;vector&gt; does not matter
    * When attached, Angle&lt;vector&gt; does not matter
    * Rope Type:
    * 4 and bellow is a thick rope
    * 5 and up are small metal wires
    * 0 crashes the game
    * Max_length - Rope is forced to this length, generally best to keep this the same as your rope length.
    * Rigid - If max length is zero, and this is set to false the rope will become rigid (it will force a specific distance, what ever length is, between the objects).
    * breakable - Whether or not shooting the rope will break it.
    * unkPtr - unknown ptr, always 0 in orig scripts
    * __
    * Lengths can be calculated like so:
    * float distance = abs(x1 - x2) + abs(y1 - y2) + abs(z1 - z2); // Rope length
    * NOTES:
    * Rope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).
    * Rope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring.
    */
    @:pure static inline function AddRope(x: Int, y: Int, z: Int, rotX: Int, rotY: Int, rotZ: Int, length: Int, ropeType: Int, maxLength: Int, minLength: Int, p10: Int, p11: Bool, p12: Bool, rigid: Bool, p14: Int, breakWhenShot: Bool, unkPtr: Int): Int { return untyped __lua__('AddRope')(x, y, z, rotX, rotY, rotZ, length, ropeType, maxLength, minLength, p10, p11, p12, rigid, p14, breakWhenShot, unkPtr); }
    @:pure static inline function AddScenarioBlockingArea(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Bool, p7: Bool, p8: Bool, p9: Bool): Int { return untyped __lua__('AddScenarioBlockingArea')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); }
    
    /**
    * BRAIN::ADD_SCRIPT_TO_RANDOM_PED("pb_prostitute", ${s_f_y_hooker_01}, 100, 0);
    * -----
    * Hardcoded to not work in Multiplayer.
    */
    @:pure static inline function AddScriptToRandomPed(name: String, model: EitherType<String, Int>, p2: Int, p3: Int): Void { return untyped __lua__('AddScriptToRandomPed')(name, model, p2, p3); }
    
    /**
    * duration is float here
    * Event types- camx.me/gtav/tasks/shockingevents.txt
    */
    @:pure static inline function AddShockingEventAtPosition(type: Int, x: Int, y: Int, z: Int, duration: Int): Int { return untyped __lua__('AddShockingEventAtPosition')(type, x, y, z, duration); }
    
    /**
    * duration is float here
    * Event types - camx.me/gtav/tasks/shockingevents.txt
    */
    @:pure static inline function AddShockingEventForEntity(type: Int, entity: Int, duration: Int): Int { return untyped __lua__('AddShockingEventForEntity')(type, entity, duration); }
    @:pure static inline function AddStuntJump(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int, p10: Int, p11: Int, p12: Int, p13: Int, p14: Int, p15: Int, p16: Int): Int { return untyped __lua__('AddStuntJump')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16); }
    @:pure static inline function AddStuntJumpAngled(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int, p10: Int, p11: Int, p12: Int, p13: Int, p14: Int, p15: Int, p16: Int, p17: Int, p18: Int): Int { return untyped __lua__('AddStuntJumpAngled')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18); }
    
    /**
    * p1 was always -1.
    * used for phone applications; scaleform
    */
    @:pure static inline function AddTextComponentAppTitle(p0: String, p1: Int): Void { return untyped __lua__('AddTextComponentAppTitle')(p0, p1); }
    
    /**
    * p1 was always -1.
    * used for phone applications; scaleform
    */
    @:pure static inline function N_0x761b77454205a61d(p0: String, p1: Int): Void { return untyped __lua__('N_0x761b77454205a61d')(p0, p1); }
    @:pure static inline function AddTextComponentFloat(value: Int, decimalPlaces: Int): Void { return untyped __lua__('AddTextComponentFloat')(value, decimalPlaces); }
    @:pure static inline function AddTextComponentFormattedInteger(value: Int, commaSeparated: Bool): Void { return untyped __lua__('AddTextComponentFormattedInteger')(value, commaSeparated); }
    @:pure static inline function N_0x0e4c749ff9de9cc4(value: Int, commaSeparated: Bool): Void { return untyped __lua__('N_0x0e4c749ff9de9cc4')(value, commaSeparated); }
    @:pure static inline function AddTextComponentInteger(value: Int): Void { return untyped __lua__('AddTextComponentInteger')(value); }
    
    /**
    * This native (along with 0x6C188BE134E074AA and 0x94CF4AC034C9C986) do not actually filter anything. They simply add the provided text (as of 944)
    * did you even check the disassembly?
    */
    @:pure static inline function AddTextComponentScaleform(p0: String): Void { return untyped __lua__('AddTextComponentScaleform')(p0); }
    
    /**
    * This native (along with 0x6C188BE134E074AA and 0x94CF4AC034C9C986) do not actually filter anything. They simply add the provided text (as of 944)
    * did you even check the disassembly?
    */
    @:pure static inline function AddTextComponentString3(p0: String): Void { return untyped __lua__('AddTextComponentString3')(p0); }
    @:pure static inline function AddTextComponentSubstringBlipName(blip: Int): Void { return untyped __lua__('AddTextComponentSubstringBlipName')(blip); }
    @:pure static inline function N_0x80ead8e2e1d5d52e(blip: Int): Void { return untyped __lua__('N_0x80ead8e2e1d5d52e')(blip); }
    
    /**
    * ??? Description :
    * Processes a string and removes the player name(max len 99)
    * You can use this function to create notifications/subtitles
    * --------------------------------------------------------------------
    * ??? Usage(Colors) :
    * ~r~ = red
    * ~y~ = yellow
    * ~g~ = green
    * ~b~ = light blue
    * ~w~ = white
    * ~p~ = purple
    * ~n~ = new line
    * --------------------------------------------------------------------
    * ??? Usage(Input) :
    * ~INPUT_CONTEXT~ will show button symbol (regarding last input device -&gt; keyboard/gamepad)
    * example:
    * string info = "Context action is assigned to ~INPUT_CONTEXT~!";
    * --------------------------------------------------------------------
    * ??? Example (C++):
    * void ShowNotification(char *text)
    * {
    * UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
    * UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * UI::_DRAW_NOTIFICATION(FALSE, FALSE); // if first param = 1, the message flashes 1 or 2 times
    * }
    * ??? Colors example :
    * string red = "~r~Red test";
    * string white_and_yellow = "~w~White and ~y~yellow";
    * string text_with_double_line = "First line.~n~Second line";
    * This native (along with 0x5F68520888E69014 and 0x94CF4AC034C9C986) do not actually filter anything. They simply add the provided text (as of 944)
    * Used to be known as _ADD_TEXT_COMPONENT_STRING
    */
    @:pure static inline function AddTextComponentSubstringPlayerName(text: String): Void { return untyped __lua__('AddTextComponentSubstringPlayerName')(text); }
    
    /**
    * ??? Description :
    * Processes a string and removes the player name(max len 99)
    * You can use this function to create notifications/subtitles
    * --------------------------------------------------------------------
    * ??? Usage(Colors) :
    * ~r~ = red
    * ~y~ = yellow
    * ~g~ = green
    * ~b~ = light blue
    * ~w~ = white
    * ~p~ = purple
    * ~n~ = new line
    * --------------------------------------------------------------------
    * ??? Usage(Input) :
    * ~INPUT_CONTEXT~ will show button symbol (regarding last input device -&gt; keyboard/gamepad)
    * example:
    * string info = "Context action is assigned to ~INPUT_CONTEXT~!";
    * --------------------------------------------------------------------
    * ??? Example (C++):
    * void ShowNotification(char *text)
    * {
    * UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
    * UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * UI::_DRAW_NOTIFICATION(FALSE, FALSE); // if first param = 1, the message flashes 1 or 2 times
    * }
    * ??? Colors example :
    * string red = "~r~Red test";
    * string white_and_yellow = "~w~White and ~y~yellow";
    * string text_with_double_line = "First line.~n~Second line";
    * This native (along with 0x5F68520888E69014 and 0x94CF4AC034C9C986) do not actually filter anything. They simply add the provided text (as of 944)
    * Used to be known as _ADD_TEXT_COMPONENT_STRING
    */
    @:pure static inline function AddTextComponentString(text: String): Void { return untyped __lua__('AddTextComponentString')(text); }
    @:pure static inline function AddTextComponentSubstringTextLabel(labelName: String): Void { return untyped __lua__('AddTextComponentSubstringTextLabel')(labelName); }
    @:pure static inline function AddTextComponentItemString(labelName: String): Void { return untyped __lua__('AddTextComponentItemString')(labelName); }
    
    /**
    * It adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY("ES_HELP"), adds "Continue". Just uses a text labels hash key
    */
    @:pure static inline function AddTextComponentSubstringTextLabelHashKey(gxtEntryHash: EitherType<String, Int>): Void { return untyped __lua__('AddTextComponentSubstringTextLabelHashKey')(gxtEntryHash); }
    
    /**
    * It adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY("ES_HELP"), adds "Continue". Just uses a text labels hash key
    */
    @:pure static inline function N_0x17299b63c7683a2b(gxtEntryHash: EitherType<String, Int>): Void { return untyped __lua__('N_0x17299b63c7683a2b')(gxtEntryHash); }
    
    /**
    * Adds a timer (e.g. "00:00:00:000"). The appearance of the timer depends on the flags, which needs more research.
    */
    @:pure static inline function AddTextComponentSubstringTime(timestamp: Int, flags: Int): Void { return untyped __lua__('AddTextComponentSubstringTime')(timestamp, flags); }
    
    /**
    * This native (along with 0x5F68520888E69014 and 0x6C188BE134E074AA) do not actually filter anything. They simply add the provided text (as of 944)
    */
    @:pure static inline function AddTextComponentSubstringWebsite(website: String): Void { return untyped __lua__('AddTextComponentSubstringWebsite')(website); }
    
    /**
    * This native (along with 0x5F68520888E69014 and 0x6C188BE134E074AA) do not actually filter anything. They simply add the provided text (as of 944)
    */
    @:pure static inline function AddTextComponentString2(website: String): Void { return untyped __lua__('AddTextComponentString2')(website); }
    @:pure static inline function AddTextEntry(entryKey: String, entryText: String): Void { return untyped __lua__('AddTextEntry')(entryKey, entryText); }
    @:pure static inline function AddTextEntryByHash(entryKey: EitherType<String, Int>, entryText: String): Void { return untyped __lua__('AddTextEntryByHash')(entryKey, entryText); }
    @:pure static inline function AddToClockTime(hours: Int, minutes: Int, seconds: Int): Void { return untyped __lua__('AddToClockTime')(hours, minutes, seconds); }
    @:pure static inline function AddToItemset(p0: Int, p1: Int): Int { return untyped __lua__('AddToItemset')(p0, p1); }
    
    /**
    * Hash collision!
    * _IS_MP_GAMER_TAG_ACTIVE_2
    */
    @:pure static inline function AddTrevorRandomModifier(gamerTagId: Int): Int { return untyped __lua__('AddTrevorRandomModifier')(gamerTagId); }
    @:pure static inline function AddVehicleStuckCheckWithWarp(p0: Int, p1: Int, p2: Int, p3: Bool, p4: Bool, p5: Bool, p6: Int): Void { return untyped __lua__('AddVehicleStuckCheckWithWarp')(p0, p1, p2, p3, p4, p5, p6); }
    
    /**
    * x, y, z: offset in world coords from some entity.
    */
    @:pure static inline function AddVehicleSubtaskAttackCoord(ped: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('AddVehicleSubtaskAttackCoord')(ped, x, y, z); }
    @:pure static inline function AddVehicleSubtaskAttackPed(ped: Int, ped2: Int): Void { return untyped __lua__('AddVehicleSubtaskAttackPed')(ped, ped2); }
    @:pure static inline function AddVehicleUpsidedownCheck(vehicle: Int): Void { return untyped __lua__('AddVehicleUpsidedownCheck')(vehicle); }
    @:pure static inline function AdvanceClockTimeTo(hour: Int, minute: Int, second: Int): Void { return untyped __lua__('AdvanceClockTimeTo')(hour, minute, second); }
    
    /**
    * Seems to animate the gameplay camera zoom.
    * Eg. _ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1000f);
    * will animate the camera zooming in from 1000 meters away.
    * Game scripts use it like this:
    * // Setting this to 1 prevents V key from changing zoom
    * PLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1);
    * // These restrict how far you can move cam up/down left/right
    * CAM::_CLAMP_GAMEPLAY_CAM_YAW(-20f, 50f);
    * CAM::_CLAMP_GAMEPLAY_CAM_PITCH(-60f, 0f);
    * CAM::_ANIMATE_GAMEPLAY_CAM_ZOOM(1f, 1f);
    */
    @:pure static inline function AnimateGameplayCamZoom(p0: Int, distance: Int): Void { return untyped __lua__('AnimateGameplayCamZoom')(p0, distance); }
    
    /**
    * Example from michael2 script.
    * CAM::ANIMATED_SHAKE_CAM(l_5069, "shake_cam_all@", "light", "", 1f);
    */
    @:pure static inline function AnimatedShakeCam(cam: Int, p1: String, p2: String, p3: String, amplitude: Int): Void { return untyped __lua__('AnimatedShakeCam')(cam, p1, p2, p3, amplitude); }
    @:pure static inline function AnyPassengersRappeling(vehicle: Int): Int { return untyped __lua__('AnyPassengersRappeling')(vehicle); }
    @:pure static inline function N_0x291e373d483e7ee7(vehicle: Int): Int { return untyped __lua__('N_0x291e373d483e7ee7')(vehicle); }
    @:pure static inline function AppClearBlock(): Void { return untyped __lua__('AppClearBlock')(); }
    @:pure static inline function AppCloseApp(): Void { return untyped __lua__('AppCloseApp')(); }
    @:pure static inline function AppCloseBlock(): Void { return untyped __lua__('AppCloseBlock')(); }
    @:pure static inline function AppDataValid(): Int { return untyped __lua__('AppDataValid')(); }
    @:pure static inline function AppDeleteAppData(appName: String): Int { return untyped __lua__('AppDeleteAppData')(appName); }
    @:pure static inline function AppGetDeletedFileStatus(): Int { return untyped __lua__('AppGetDeletedFileStatus')(); }
    @:pure static inline function AppGetFloat(property: String): Int { return untyped __lua__('AppGetFloat')(property); }
    @:pure static inline function AppGetInt(property: String): Int { return untyped __lua__('AppGetInt')(property); }
    @:pure static inline function AppGetString(property: String): String { return untyped __lua__('AppGetString')(property); }
    @:pure static inline function AppHasLinkedSocialClubAccount(): Int { return untyped __lua__('AppHasLinkedSocialClubAccount')(); }
    @:pure static inline function AppHasSyncedData(appName: String): Int { return untyped __lua__('AppHasSyncedData')(appName); }
    @:pure static inline function AppSaveData(): Void { return untyped __lua__('AppSaveData')(); }
    
    /**
    * Called in the gamescripts like:
    * APP::APP_SET_APP("car");
    * APP::APP_SET_APP("dog");
    */
    @:pure static inline function AppSetApp(appName: String): Void { return untyped __lua__('AppSetApp')(appName); }
    @:pure static inline function AppSetBlock(blockName: String): Void { return untyped __lua__('AppSetBlock')(blockName); }
    @:pure static inline function AppSetFloat(property: String, value: Int): Void { return untyped __lua__('AppSetFloat')(property, value); }
    @:pure static inline function AppSetInt(property: String, value: Int): Void { return untyped __lua__('AppSetInt')(property, value); }
    @:pure static inline function AppSetString(property: String, value: String): Void { return untyped __lua__('AppSetString')(property, value); }
    @:pure static inline function ApplyDamageToPed(ped: Int, damageAmount: Int, p2: Bool): Void { return untyped __lua__('ApplyDamageToPed')(ped, damageAmount, p2); }
    
    /**
    * forceType - 0 to 5 (any number greater then 5 force does nothing)
    * p8 - no effect (a quick disassembly will tell us what it does)
    * isRel - specifies if the force direction is relative to direction entity is facing (true), or static world direction (false).
    * p11/highForce - setting false will make the force really low
    * enum ForceTypes
    * {
    * MIN_FORCE = 0,
    * MAX_FORCE_ROT = 1,
    * MIN_FORCE_2 = 2,
    * MAX_FORCE_ROT_2 = 3, //stable, good for custom handling
    * FORCE_NO_ROT = 4,
    * FORCE_ROT_PLUS_FORCE = 5
    * };
    * gtaforums.com/topic/885669-precisely-define-object-physics/
    * gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/
    */
    @:pure static inline function ApplyForceToEntity(entity: Int, forceType: Int, x: Int, y: Int, z: Int, xRot: Int, yRot: Int, zRot: Int, p8: Int, isRel: Bool, p10: Bool, highForce: Bool, p12: Bool, p13: Bool): Void { return untyped __lua__('ApplyForceToEntity')(entity, forceType, x, y, z, xRot, yRot, zRot, p8, isRel, p10, highForce, p12, p13); }
    
    /**
    * p6/relative - makes the xyz force not relative to world coords, but to something else
    * p7/highForce - setting false will make the force really low
    */
    @:pure static inline function ApplyForceToEntityCenterOfMass(entity: Int, forceType: Int, x: Int, y: Int, z: Int, p5: Bool, isRel: Bool, highForce: Bool, p8: Bool): Void { return untyped __lua__('ApplyForceToEntityCenterOfMass')(entity, forceType, x, y, z, p5, isRel, highForce, p8); }
    @:pure static inline function ApplyImpulseToCloth(posX: Int, posY: Int, posZ: Int, vecX: Int, vecY: Int, vecZ: Int, impulse: Int): Void { return untyped __lua__('ApplyImpulseToCloth')(posX, posY, posZ, vecX, vecY, vecZ, impulse); }
    
    /**
    * Found one occurence in re_crashrescue.c4
    * PED::APPLY_PED_BLOOD(l_4B, 3, 0.0, 0.0, 0.0, "wound_sheet");
    */
    @:pure static inline function ApplyPedBlood(ped: Int, boneIndex: Int, xRot: Int, yRot: Int, zRot: Int, woundType: String): Void { return untyped __lua__('ApplyPedBlood')(ped, boneIndex, xRot, yRot, zRot, woundType); }
    @:pure static inline function ApplyPedBloodByZone(ped: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('ApplyPedBloodByZone')(ped, p1, p2, p3, p4); }
    @:pure static inline function N_0x3311e47b91edcbbc(ped: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('N_0x3311e47b91edcbbc')(ped, p1, p2, p3, p4); }
    @:pure static inline function ApplyPedBloodDamageByZone(ped: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('ApplyPedBloodDamageByZone')(ped, p1, p2, p3, p4); }
    @:pure static inline function N_0x816f6981c60bf53b(ped: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('N_0x816f6981c60bf53b')(ped, p1, p2, p3, p4); }
    @:pure static inline function ApplyPedBloodSpecific(ped: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int): Void { return untyped __lua__('ApplyPedBloodSpecific')(ped, p1, p2, p3, p4, p5, p6, p7, p8); }
    @:pure static inline function N_0xef0d582cbf2d9b0f(ped: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int): Void { return untyped __lua__('N_0xef0d582cbf2d9b0f')(ped, p1, p2, p3, p4, p5, p6, p7, p8); }
    
    /**
    * APPLY_PED_DAMAGE_DECAL(ped, 1, 0.5f, 0.513f, 0f, 1f, unk, 0, 0, "blushing");
    */
    @:pure static inline function ApplyPedDamageDecal(ped: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Bool, p9: String): Void { return untyped __lua__('ApplyPedDamageDecal')(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9); }
    
    /**
    * Damage Packs:
    * "SCR_TrevorTreeBang"
    * "HOSPITAL_0"
    * "HOSPITAL_1"
    * "HOSPITAL_2"
    * "HOSPITAL_3"
    * "HOSPITAL_4"
    * "HOSPITAL_5"
    * "HOSPITAL_6"
    * "HOSPITAL_7"
    * "HOSPITAL_8"
    * "HOSPITAL_9"
    * "SCR_Dumpster"
    * "BigHitByVehicle"
    * "SCR_Finale_Michael_Face"
    * "SCR_Franklin_finb"
    * "SCR_Finale_Michael"
    * "SCR_Franklin_finb2"
    * "Explosion_Med"
    * "SCR_Torture"
    * "SCR_TracySplash"
    * "Skin_Melee_0"
    * Additional damage packs:
    * gist.github.com/alexguirre/f3f47f75ddcf617f416f3c8a55ae2227
    */
    @:pure static inline function ApplyPedDamagePack(ped: Int, damagePack: String, damage: Int, mult: Int): Void { return untyped __lua__('ApplyPedDamagePack')(ped, damagePack, damage, mult); }
    @:pure static inline function AreAllNavmeshRegionsLoaded(): Int { return untyped __lua__('AreAllNavmeshRegionsLoaded')(); }
    
    /**
    * Appears to return false if any window is broken.
    */
    @:pure static inline function AreAllVehicleWindowsIntact(vehicle: Int): Int { return untyped __lua__('AreAllVehicleWindowsIntact')(vehicle); }
    
    /**
    * Appears to return false if any window is broken.
    */
    
    /**
    * Returns false if every seat is occupied.
    */
    @:pure static inline function AreAnyVehicleSeatsFree(vehicle: Int): Int { return untyped __lua__('AreAnyVehicleSeatsFree')(vehicle); }
    
    /**
    * Returns false if every seat is occupied.
    */
    @:pure static inline function IsAnyVehicleSeatEmpty(vehicle: Int): Int { return untyped __lua__('IsAnyVehicleSeatEmpty')(vehicle); }
    
    /**
    * Returns true if the coords are colliding with the outdoors, and false if they collide with an interior.
    */
    @:pure static inline function AreCoordsCollidingWithExterior(x: Int, y: Int, z: Int): Int { return untyped __lua__('AreCoordsCollidingWithExterior')(x, y, z); }
    
    /**
    * Returns true if the coords are colliding with the outdoors, and false if they collide with an interior.
    */
    @:pure static inline function N_0xeea5ac2eda7c33e8(x: Int, y: Int, z: Int): Int { return untyped __lua__('N_0xeea5ac2eda7c33e8')(x, y, z); }
    @:pure static inline function ArePlayerFlashingStarsAboutToDrop(player: Int): Int { return untyped __lua__('ArePlayerFlashingStarsAboutToDrop')(player); }
    @:pure static inline function ArePlayerStarsGreyedOut(player: Int): Int { return untyped __lua__('ArePlayerStarsGreyedOut')(player); }
    
    /**
    * Found this in the decompiled scripts, I'd do more research before changing the name --
    * if (!ENTITY::IS_ENTITY_DEAD(l_1911)) {
    * if (!VEHICLE::_755D6D5267CBBD7E(l_1911)) {
    * sub_1ba80("TRAFFICKING AIR: FAILING - PROPELLERS ARE DAMAGED");
    * l_12CE = 9;
    * }
    * }
    */
    @:pure static inline function ArePropellersUndamaged(vehicle: Int): Int { return untyped __lua__('ArePropellersUndamaged')(vehicle); }
    
    /**
    * Found this in the decompiled scripts, I'd do more research before changing the name --
    * if (!ENTITY::IS_ENTITY_DEAD(l_1911)) {
    * if (!VEHICLE::_755D6D5267CBBD7E(l_1911)) {
    * sub_1ba80("TRAFFICKING AIR: FAILING - PROPELLERS ARE DAMAGED");
    * l_12CE = 9;
    * }
    * }
    */
    @:pure static inline function N_0x755d6d5267cbbd7e(vehicle: Int): Int { return untyped __lua__('N_0x755d6d5267cbbd7e')(vehicle); }
    
    /**
    * is this like strcmp??
    */
    @:pure static inline function AreStringsEqual(string1: String, string2: String): Int { return untyped __lua__('AreStringsEqual')(string1, string2); }
    
    /**
    * ADD_A_MARKER_OVER_VEHICLE was a hash collision!!!
    * Can be used for planes only!
    */
    @:pure static inline function AreVehicleWingsIntact(vehicle: Int): Int { return untyped __lua__('AreVehicleWingsIntact')(vehicle); }
    
    /**
    * ADD_A_MARKER_OVER_VEHICLE was a hash collision!!!
    * Can be used for planes only!
    */
    @:pure static inline function N_0x5991a01434ce9677(vehicle: Int): Int { return untyped __lua__('N_0x5991a01434ce9677')(vehicle); }
    
    /**
    * ADD_A_MARKER_OVER_VEHICLE was a hash collision!!!
    * Can be used for planes only!
    */
    @:pure static inline function AddAMarkerOverVehicle(vehicle: Int): Int { return untyped __lua__('AddAMarkerOverVehicle')(vehicle); }
    @:pure static inline function ArrayValueAddBoolean(value: Bool): Int { return untyped __lua__('ArrayValueAddBoolean')(value); }
    @:pure static inline function ArrayValueAddFloat(value: Int): Int { return untyped __lua__('ArrayValueAddFloat')(value); }
    @:pure static inline function ArrayValueAddInteger(value: Int): Int { return untyped __lua__('ArrayValueAddInteger')(value); }
    @:pure static inline function ArrayValueAddObject(arrayData: Int): Int { return untyped __lua__('ArrayValueAddObject')(arrayData); }
    @:pure static inline function ArrayValueAddString(value: String): Int { return untyped __lua__('ArrayValueAddString')(value); }
    @:pure static inline function ArrayValueAddVector3(valueX: Int, valueY: Int, valueZ: Int): Int { return untyped __lua__('ArrayValueAddVector3')(valueX, valueY, valueZ); }
    @:pure static inline function ArrayValueGetBoolean(arrayIndex: Int): { a0: Int, a1: Int } { return untyped __lua__('ArrayValueGetBoolean')(arrayIndex); }
    @:pure static inline function ArrayValueGetFloat(arrayIndex: Int): { a0: Int, a1: Int } { return untyped __lua__('ArrayValueGetFloat')(arrayIndex); }
    @:pure static inline function ArrayValueGetInteger(arrayIndex: Int): { a0: Int, a1: Int } { return untyped __lua__('ArrayValueGetInteger')(arrayIndex); }
    @:pure static inline function ArrayValueGetObject(arrayIndex: Int): { a0: Int, a1: Int } { return untyped __lua__('ArrayValueGetObject')(arrayIndex); }
    @:pure static inline function ArrayValueGetSize(arrayData: Int): Int { return untyped __lua__('ArrayValueGetSize')(arrayData); }
    @:pure static inline function ArrayValueGetString(arrayIndex: Int): { a0: String, a1: Int } { return untyped __lua__('ArrayValueGetString')(arrayIndex); }
    
    /**
    * Types:
    * 1 = Boolean
    * 2 = Integer
    * 3 = Float
    * 4 = String
    * 5 = Vector3
    * 6 = Object
    * 7 = Array
    */
    @:pure static inline function ArrayValueGetType(arrayIndex: Int): { a0: Int, a1: Int } { return untyped __lua__('ArrayValueGetType')(arrayIndex); }
    @:pure static inline function ArrayValueGetVector3(arrayIndex: Int): { a0: Array<Int>, a1: Int } { return untyped __lua__('ArrayValueGetVector3')(arrayIndex); }
    @:pure static inline function Asin(p0: Int): Int { return untyped __lua__('Asin')(p0); }
    @:pure static inline function AssistedMovementCloseRoute(): Void { return untyped __lua__('AssistedMovementCloseRoute')(); }
    @:pure static inline function AssistedMovementFlushRoute(): Void { return untyped __lua__('AssistedMovementFlushRoute')(); }
    @:pure static inline function AssistedMovementIsRouteLoaded(route: String): Int { return untyped __lua__('AssistedMovementIsRouteLoaded')(route); }
    @:pure static inline function AssistedMovementOverrideLoadDistanceThisFrame(dist: Int): Void { return untyped __lua__('AssistedMovementOverrideLoadDistanceThisFrame')(dist); }
    @:pure static inline function AssistedMovementRemoveRoute(route: String): Void { return untyped __lua__('AssistedMovementRemoveRoute')(route); }
    
    /**
    * Routes: "1_FIBStairs", "2_FIBStairs", "3_FIBStairs", "4_FIBStairs", "5_FIBStairs", "5_TowardsFire", "6a_FIBStairs", "7_FIBStairs", "8_FIBStairs", "Aprtmnt_1", "AssAfterLift", "ATM_1", "coroner2", "coroner_stairs", "f5_jimmy1", "fame1", "family5b", "family5c", "Family5d", "family5d", "FIB_Glass1", "FIB_Glass2", "FIB_Glass3", "finaBroute1A", "finalb1st", "finalB1sta", "finalbround", "finalbroute2", "Hairdresser1", "jan_foyet_ft_door", "Jo_3", "Lemar1", "Lemar2", "mansion_1", "Mansion_1", "pols_1", "pols_2", "pols_3", "pols_4", "pols_5", "pols_6", "pols_7", "pols_8", "Pro_S1", "Pro_S1a", "Pro_S2", "Towards_case", "trev_steps", "tunrs1", "tunrs2", "tunrs3", "Wave01457s"
    */
    @:pure static inline function AssistedMovementRequestRoute(route: String): Void { return untyped __lua__('AssistedMovementRequestRoute')(route); }
    @:pure static inline function AssistedMovementSetRouteProperties(route: String, props: Int): Void { return untyped __lua__('AssistedMovementSetRouteProperties')(route, props); }
    @:pure static inline function Atan(p0: Int): Int { return untyped __lua__('Atan')(p0); }
    @:pure static inline function Atan2(p0: Int, p1: Int): Int { return untyped __lua__('Atan2')(p0, p1); }
    
    /**
    * Last param determines if its relative to the Entity
    */
    @:pure static inline function AttachCamToEntity(cam: Int, entity: Int, xOffset: Int, yOffset: Int, zOffset: Int, isRelative: Bool): Void { return untyped __lua__('AttachCamToEntity')(cam, entity, xOffset, yOffset, zOffset, isRelative); }
    @:pure static inline function AttachCamToPedBone(cam: Int, ped: Int, boneIndex: Int, x: Int, y: Int, z: Int, heading: Bool): Void { return untyped __lua__('AttachCamToPedBone')(cam, ped, boneIndex, x, y, z, heading); }
    
    /**
    * Attaches entity 1 to entity 2.
    */
    @:pure static inline function AttachEntitiesToRope(rope: Int, ent1: Int, ent2: Int, ent1_x: Int, ent1_y: Int, ent1_z: Int, ent2_x: Int, ent2_y: Int, ent2_z: Int, length: Int, p10: Bool, p11: Bool): { a0: Int, a1: Int } { return untyped __lua__('AttachEntitiesToRope')(rope, ent1, ent2, ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length, p10, p11); }
    
    /**
    * Attaches entity1 to bone (boneIndex) of entity2.
    * boneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.
    * useSoftPinning - if set to false attached entity will not detach when fixed
    * collision - controls collision between the two entities (FALSE disables collision).
    * isPed - pitch doesnt work when false and roll will only work on negative numbers (only peds)
    * vertexIndex - position of vertex
    * fixedRot - if false it ignores entity vector
    */
    @:pure static inline function AttachEntityToEntity(entity1: Int, entity2: Int, boneIndex: Int, xPos: Int, yPos: Int, zPos: Int, xRot: Int, yRot: Int, zRot: Int, p9: Bool, useSoftPinning: Bool, collision: Bool, isPed: Bool, vertexIndex: Int, fixedRot: Bool): Void { return untyped __lua__('AttachEntityToEntity')(entity1, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot); }
    
    /**
    * breakForce is the amount of force required to break the bond.
    * p14 - is always 1 in scripts
    * p15 - is 1 or 0 in scripts - unknoun what it does
    * p16 - controls collision between the two entities (FALSE disables collision).
    * p17 - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)
    * p18 - is always 2 in scripts.
    */
    @:pure static inline function AttachEntityToEntityPhysically(entity1: Int, entity2: Int, boneIndex1: Int, boneIndex2: Int, xPos1: Int, yPos1: Int, zPos1: Int, xPos2: Int, yPos2: Int, zPos2: Int, xRot: Int, yRot: Int, zRot: Int, breakForce: Int, fixedRot: Bool, p15: Bool, collision: Bool, p17: Bool, p18: Int): Void { return untyped __lua__('AttachEntityToEntityPhysically')(entity1, entity2, boneIndex1, boneIndex2, xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce, fixedRot, p15, collision, p17, p18); }
    @:pure static inline function AttachPortablePickupToPed(ped: Int, p1: Int): Void { return untyped __lua__('AttachPortablePickupToPed')(ped, p1); }
    
    /**
    * The position supplied can be anywhere, and the entity should anchor relative to that point from it's origin.
    */
    @:pure static inline function AttachRopeToEntity(rope: Int, entity: Int, x: Int, y: Int, z: Int, p5: Bool): Void { return untyped __lua__('AttachRopeToEntity')(rope, entity, x, y, z, p5); }
    @:pure static inline function AttachSynchronizedSceneToEntity(sceneID: Int, entity: Int, boneIndex: Int): Void { return untyped __lua__('AttachSynchronizedSceneToEntity')(sceneID, entity, boneIndex); }
    
    /**
    * Might be more appropriate in AUDIO?
    */
    @:pure static inline function AttachTvAudioToEntity(entity: Int): Void { return untyped __lua__('AttachTvAudioToEntity')(entity); }
    @:pure static inline function AttachVehicleToCargobob(vehicle: Int, cargobob: Int, p2: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('AttachVehicleToCargobob')(vehicle, cargobob, p2, x, y, z); }
    
    /**
    * HookOffset defines where the hook is attached. leave at 0 for default attachment.
    */
    @:pure static inline function AttachVehicleToTowTruck(towTruck: Int, vehicle: Int, rear: Bool, hookOffsetX: Int, hookOffsetY: Int, hookOffsetZ: Int): Void { return untyped __lua__('AttachVehicleToTowTruck')(towTruck, vehicle, rear, hookOffsetX, hookOffsetY, hookOffsetZ); }
    @:pure static inline function AttachVehicleToTrailer(vehicle: Int, trailer: Int, radius: Int): Void { return untyped __lua__('AttachVehicleToTrailer')(vehicle, trailer, radius); }
    @:pure static inline function AudioIsScriptedMusicPlaying(): Int { return untyped __lua__('AudioIsScriptedMusicPlaying')(); }
    @:pure static inline function BadSportPlayerLeftDetected(event: Int, amountReceived: Int): { a0: Int, a1: Int } { return untyped __lua__('BadSportPlayerLeftDetected')(event, amountReceived); }
    @:pure static inline function N_0xec5e3af5289dca81(event: Int, amountReceived: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0xec5e3af5289dca81')(event, amountReceived); }
    
    /**
    * MulleDK19: Starts a new enumeration of the current threads.
    * Call this first, then _GET_ID_OF_NEXT_THREAD_IN_ENUMERATION (0x30B4FA1C82DD4B9F)
    * -----------------------------------------------------------------------
    * Some other guy: See _GET_ID_OF_NEXT_THREAD_IN_ENUMERATION (0x30B4FA1C82DD4B9F) for an example
    */
    @:pure static inline function BeginEnumeratingThreads(): Void { return untyped __lua__('BeginEnumeratingThreads')(); }
    
    /**
    * MulleDK19: Starts a new enumeration of the current threads.
    * Call this first, then _GET_ID_OF_NEXT_THREAD_IN_ENUMERATION (0x30B4FA1C82DD4B9F)
    * -----------------------------------------------------------------------
    * Some other guy: See _GET_ID_OF_NEXT_THREAD_IN_ENUMERATION (0x30B4FA1C82DD4B9F) for an example
    */
    @:pure static inline function N_0xdadfada5a20143a8(): Void { return untyped __lua__('N_0xdadfada5a20143a8')(); }
    @:pure static inline function BeginReplayStats(p0: Int, p1: Int): Void { return untyped __lua__('BeginReplayStats')(p0, p1); }
    @:pure static inline function BeginSrl(): Void { return untyped __lua__('BeginSrl')(); }
    
    /**
    * clears a print text command with this text
    */
    @:pure static inline function BeginTextCommandClearPrint(text: String): Void { return untyped __lua__('BeginTextCommandClearPrint')(text); }
    
    /**
    * clears a print text command with this text
    */
    @:pure static inline function N_0xe124fa80a759019c(text: String): Void { return untyped __lua__('N_0xe124fa80a759019c')(text); }
    
    /**
    * Used to be known as _SET_TEXT_COMPONENT_FORMAT
    */
    @:pure static inline function BeginTextCommandDisplayHelp(inputType: String): Void { return untyped __lua__('BeginTextCommandDisplayHelp')(inputType); }
    
    /**
    * Used to be known as _SET_TEXT_COMPONENT_FORMAT
    */
    @:pure static inline function SetTextComponentFormat(inputType: String): Void { return untyped __lua__('SetTextComponentFormat')(inputType); }
    
    /**
    * The following were found in the decompiled script files:
    * STRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3
    * ESDOLLA
    * ESMINDOLLA - cash (negative)
    * Used to be known as _SET_TEXT_ENTRY
    */
    @:pure static inline function BeginTextCommandDisplayText(text: String): Void { return untyped __lua__('BeginTextCommandDisplayText')(text); }
    
    /**
    * The following were found in the decompiled script files:
    * STRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3
    * ESDOLLA
    * ESMINDOLLA - cash (negative)
    * Used to be known as _SET_TEXT_ENTRY
    */
    @:pure static inline function SetTextEntry(text: String): Void { return untyped __lua__('SetTextEntry')(text); }
    
    /**
    * nothin doin.
    * BOOL Message(char* text)
    * {
    * BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED("STRING");
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * return END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();
    * }
    */
    @:pure static inline function BeginTextCommandIsMessageDisplayed(text: String): Void { return untyped __lua__('BeginTextCommandIsMessageDisplayed')(text); }
    
    /**
    * nothin doin.
    * BOOL Message(char* text)
    * {
    * BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED("STRING");
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * return END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();
    * }
    */
    @:pure static inline function N_0x853648fd1063a213(text: String): Void { return untyped __lua__('N_0x853648fd1063a213')(text); }
    
    /**
    * BOOL IsContextActive(char *ctx)
    * {
    * BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(ctx);
    * return END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(0);
    * }
    */
    @:pure static inline function BeginTextCommandIsThisHelpMessageBeingDisplayed(labelName: String): Void { return untyped __lua__('BeginTextCommandIsThisHelpMessageBeingDisplayed')(labelName); }
    
    /**
    * BOOL IsContextActive(char *ctx)
    * {
    * BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(ctx);
    * return END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(0);
    * }
    */
    @:pure static inline function N_0x0a24da3a41b718f5(labelName: String): Void { return untyped __lua__('N_0x0a24da3a41b718f5')(labelName); }
    
    /**
    * get's line count
    * int GetLineCount(char *text, float x, float y)
    * {
    * _BEGIN_TEXT_COMMAND_LINE_COUNT("STRING");
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * return _END_TEXT_COMMAND_GET_LINE_COUNT(x, y);
    * }
    */
    @:pure static inline function BeginTextCommandLineCount(entry: String): Void { return untyped __lua__('BeginTextCommandLineCount')(entry); }
    
    /**
    * get's line count
    * int GetLineCount(char *text, float x, float y)
    * {
    * _BEGIN_TEXT_COMMAND_LINE_COUNT("STRING");
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * return _END_TEXT_COMMAND_GET_LINE_COUNT(x, y);
    * }
    */
    @:pure static inline function SetTextGxtEntry(entry: String): Void { return untyped __lua__('SetTextGxtEntry')(entry); }
    
    /**
    * nothin doin.
    * void message()
    * {
    * _BEGIN_TEXT_COMMAND_OBJECTIVE("AHT_RTIT");
    * _END_TEXT_COMMAND_OBJECTIVE(0);
    * }
    */
    @:pure static inline function BeginTextCommandObjective(p0: String): Void { return untyped __lua__('BeginTextCommandObjective')(p0); }
    
    /**
    * nothin doin.
    * void message()
    * {
    * _BEGIN_TEXT_COMMAND_OBJECTIVE("AHT_RTIT");
    * _END_TEXT_COMMAND_OBJECTIVE(0);
    * }
    */
    @:pure static inline function N_0x23d69e0465570028(p0: String): Void { return untyped __lua__('N_0x23d69e0465570028')(p0); }
    
    /**
    * Used to be known as _SET_TEXT_ENTRY_2
    * void ShowSubtitle(char *text)
    * {
    * BEGIN_TEXT_COMMAND_PRINT("STRING");
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * END_TEXT_COMMAND_PRINT(2000, 1);
    * }
    */
    @:pure static inline function BeginTextCommandPrint(GxtEntry: String): Void { return untyped __lua__('BeginTextCommandPrint')(GxtEntry); }
    
    /**
    * Used to be known as _SET_TEXT_ENTRY_2
    * void ShowSubtitle(char *text)
    * {
    * BEGIN_TEXT_COMMAND_PRINT("STRING");
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * END_TEXT_COMMAND_PRINT(2000, 1);
    * }
    */
    @:pure static inline function SetTextEntry_2(GxtEntry: String): Void { return untyped __lua__('SetTextEntry_2')(GxtEntry); }
    
    /**
    * Called prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.
    * Examples:
    * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("NUMBER");
    * UI::ADD_TEXT_COMPONENT_INTEGER(GAMEPLAY::ABSI(a_1));
    * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
    * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRING");
    * UI::_ADD_TEXT_COMPONENT_STRING(a_2);
    * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
    * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM2");
    * UI::_0x17299B63C7683A2B(v_3);
    * UI::_0x17299B63C7683A2B(v_4);
    * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
    * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM1");
    * UI::_0x17299B63C7683A2B(v_3);
    * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
    */
    @:pure static inline function BeginTextCommandScaleformString(componentType: String): Void { return untyped __lua__('BeginTextCommandScaleformString')(componentType); }
    
    /**
    * Called prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.
    * Examples:
    * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("NUMBER");
    * UI::ADD_TEXT_COMPONENT_INTEGER(GAMEPLAY::ABSI(a_1));
    * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
    * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRING");
    * UI::_ADD_TEXT_COMPONENT_STRING(a_2);
    * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
    * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM2");
    * UI::_0x17299B63C7683A2B(v_3);
    * UI::_0x17299B63C7683A2B(v_4);
    * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
    * GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM1");
    * UI::_0x17299B63C7683A2B(v_3);
    * GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
    */
    @:pure static inline function BeginTextComponent(componentType: String): Void { return untyped __lua__('BeginTextComponent')(componentType); }
    
    /**
    * example:
    * UI::BEGIN_TEXT_COMMAND_SET_BLIP_NAME("STRING");
    * UI::_ADD_TEXT_COMPONENT_STRING("Name");
    * UI::END_TEXT_COMMAND_SET_BLIP_NAME(blip);
    */
    @:pure static inline function BeginTextCommandSetBlipName(gxtentry: String): Void { return untyped __lua__('BeginTextCommandSetBlipName')(gxtentry); }
    
    /**
    * void message(char *text)
    * {
    * _BEGIN_TEXT_COMMAND_TIMER("STRING");
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * _END_TEXT_COMMAND_TIMER(0);
    * }
    */
    @:pure static inline function BeginTextCommandTimer(p0: String): Void { return untyped __lua__('BeginTextCommandTimer')(p0); }
    
    /**
    * void message(char *text)
    * {
    * _BEGIN_TEXT_COMMAND_TIMER("STRING");
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * _END_TEXT_COMMAND_TIMER(0);
    * }
    */
    @:pure static inline function N_0x8f9ee5687f8eeccd(p0: String): Void { return untyped __lua__('N_0x8f9ee5687f8eeccd')(p0); }
    
    /**
    * Example:
    * _BEGIN_TEXT_COMMAND_WIDTH("NUMBER");
    * ADD_TEXT_COMPONENT_FLOAT(69.420f, 2);
    * float width = _END_TEXT_COMMAND_GET_WIDTH(1);
    */
    @:pure static inline function BeginTextCommandWidth(text: String): Void { return untyped __lua__('BeginTextCommandWidth')(text); }
    
    /**
    * Example:
    * _BEGIN_TEXT_COMMAND_WIDTH("NUMBER");
    * ADD_TEXT_COMPONENT_FLOAT(69.420f, 2);
    * float width = _END_TEXT_COMMAND_GET_WIDTH(1);
    */
    @:pure static inline function SetTextEntryForWidth(text: String): Void { return untyped __lua__('SetTextEntryForWidth')(text); }
    
    /**
    * Plays the siren sound of a vehicle which is otherwise activated when fastly double-pressing the horn key.
    * Only works on vehicles with a police siren.
    */
    @:pure static inline function BlipSiren(vehicle: Int): Void { return untyped __lua__('BlipSiren')(vehicle); }
    @:pure static inline function BlockDecisionMakerEvent(name: EitherType<String, Int>, type: Int): Void { return untyped __lua__('BlockDecisionMakerEvent')(name, type); }
    @:pure static inline function BreakEntityGlass(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int, p10: Bool): Void { return untyped __lua__('BreakEntityGlass')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); }
    
    /**
    * Calculates the travel distance between a set of points.
    * Doesn't seem to correlate with distance on gps sometimes.
    */
    @:pure static inline function CalculateTravelDistanceBetweenPoints(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int): Int { return untyped __lua__('CalculateTravelDistanceBetweenPoints')(x1, y1, z1, x2, y2, z2); }
    
    /**
    * Calls the Scaleform function and passes the parameters as floats.
    * The number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0.
    */
    @:pure static inline function CallScaleformMovieFunctionFloatParams(scaleform: Int, functionName: String, param1: Int, param2: Int, param3: Int, param4: Int, param5: Int): Void { return untyped __lua__('CallScaleformMovieFunctionFloatParams')(scaleform, functionName, param1, param2, param3, param4, param5); }
    
    /**
    * Calls the Scaleform function and passes both float and string parameters (in their respective order).
    * The number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL).
    * NOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters.
    * Examples:
    * // function MY_FUNCTION(floatParam1, floatParam2, stringParam)
    * GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, "MY_FUNCTION", 10.0, 20.0, -1.0, -1.0, -1.0, "String param", 0, 0, 0, 0);
    * // function MY_FUNCTION_2(floatParam, stringParam1, stringParam2)
    * GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(scaleform, "MY_FUNCTION_2", 10.0, -1.0, -1.0, -1.0, -1.0, "String param #1", "String param #2", 0, 0, 0);
    */
    @:pure static inline function CallScaleformMovieFunctionMixedParams(scaleform: Int, functionName: String, floatParam1: Int, floatParam2: Int, floatParam3: Int, floatParam4: Int, floatParam5: Int, stringParam1: String, stringParam2: String, stringParam3: String, stringParam4: String, stringParam5: String): Void { return untyped __lua__('CallScaleformMovieFunctionMixedParams')(scaleform, functionName, floatParam1, floatParam2, floatParam3, floatParam4, floatParam5, stringParam1, stringParam2, stringParam3, stringParam4, stringParam5); }
    
    /**
    * Calls the Scaleform function and passes the parameters as strings.
    * The number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL).
    */
    @:pure static inline function CallScaleformMovieFunctionStringParams(scaleform: Int, functionName: String, param1: String, param2: String, param3: String, param4: String, param5: String): Void { return untyped __lua__('CallScaleformMovieFunctionStringParams')(scaleform, functionName, param1, param2, param3, param4, param5); }
    
    /**
    * Calls the Scaleform function.
    */
    @:pure static inline function CallScaleformMovieMethod(scaleform: Int, method: String): Void { return untyped __lua__('CallScaleformMovieMethod')(scaleform, method); }
    
    /**
    * Calls the Scaleform function.
    */
    @:pure static inline function CallScaleformMovieFunctionVoid(scaleform: Int, method: String): Void { return untyped __lua__('CallScaleformMovieFunctionVoid')(scaleform, method); }
    @:pure static inline function CanCreateRandomBikeRider(): Int { return untyped __lua__('CanCreateRandomBikeRider')(); }
    @:pure static inline function CanCreateRandomCops(): Int { return untyped __lua__('CanCreateRandomCops')(); }
    @:pure static inline function CanCreateRandomDriver(): Int { return untyped __lua__('CanCreateRandomDriver')(); }
    @:pure static inline function CanCreateRandomPed(unk: Bool): Int { return untyped __lua__('CanCreateRandomPed')(unk); }
    @:pure static inline function CanKnockPedOffVehicle(ped: Int): Int { return untyped __lua__('CanKnockPedOffVehicle')(ped); }
    @:pure static inline function CanPedHearPlayer(player: Int, ped: Int): Int { return untyped __lua__('CanPedHearPlayer')(player, ped); }
    @:pure static inline function CanPedInCombatSeeTarget(ped: Int, target: Int): Int { return untyped __lua__('CanPedInCombatSeeTarget')(ped, target); }
    
    /**
    * Prevents the ped from going limp.
    * [Example: Can prevent peds from falling when standing on moving vehicles.]
    */
    @:pure static inline function CanPedRagdoll(ped: Int): Int { return untyped __lua__('CanPedRagdoll')(ped); }
    
    /**
    * Checks if the ped can play the speech or has the speech file, last parameter is usually 0
    */
    @:pure static inline function CanPedSpeak(ped: Int, speechName: String, unk: Bool): Int { return untyped __lua__('CanPedSpeak')(ped, speechName, unk); }
    
    /**
    * Checks if the ped can play the speech or has the speech file, last parameter is usually 0
    */
    @:pure static inline function N_0x49b99bf3fda89a7a(ped: Int, speechName: String, unk: Bool): Int { return untyped __lua__('N_0x49b99bf3fda89a7a')(ped, speechName, unk); }
    
    /**
    * This one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away.
    * I can confirm the above. This function is hard-coded to always return 1.
    */
    @:pure static inline function CanPhoneBeSeenOnScreen(): Int { return untyped __lua__('CanPhoneBeSeenOnScreen')(); }
    
    /**
    * if(_CAN_PLAY_ONLINE() == 0) means the player is banned(Social Club or Rockstar)
    */
    @:pure static inline function CanPlayOnline(): Int { return untyped __lua__('CanPlayOnline')(); }
    
    /**
    * if(_CAN_PLAY_ONLINE() == 0) means the player is banned(Social Club or Rockstar)
    */
    @:pure static inline function IsPlayerBanned(): Int { return untyped __lua__('IsPlayerBanned')(); }
    @:pure static inline function CanPlayerStartMission(player: Int): Int { return untyped __lua__('CanPlayerStartMission')(player); }
    @:pure static inline function CanRegisterMissionEntities(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('CanRegisterMissionEntities')(p0, p1, p2, p3); }
    @:pure static inline function CanRegisterMissionObjects(p0: Int): Int { return untyped __lua__('CanRegisterMissionObjects')(p0); }
    @:pure static inline function CanRegisterMissionPeds(p0: Int): Int { return untyped __lua__('CanRegisterMissionPeds')(p0); }
    @:pure static inline function CanRegisterMissionVehicles(p0: Int): Int { return untyped __lua__('CanRegisterMissionVehicles')(p0); }
    
    /**
    * modelHash (p1) was always 0 in R* scripts
    */
    @:pure static inline function CanSetEnterStateForRegisteredEntity(cutsceneEntName: String, modelHash: EitherType<String, Int>): Int { return untyped __lua__('CanSetEnterStateForRegisteredEntity')(cutsceneEntName, modelHash); }
    @:pure static inline function CanSetExitStateForCamera(p0: Bool): Int { return untyped __lua__('CanSetExitStateForCamera')(p0); }
    @:pure static inline function CanSetExitStateForRegisteredEntity(cutsceneEntName: String, modelHash: EitherType<String, Int>): Int { return untyped __lua__('CanSetExitStateForRegisteredEntity')(cutsceneEntName, modelHash); }
    @:pure static inline function CanShuffleSeat(vehicle: Int, p1: Int): Int { return untyped __lua__('CanShuffleSeat')(vehicle, p1); }
    @:pure static inline function CanUseWeaponOnParachute(weaponHash: EitherType<String, Int>): Int { return untyped __lua__('CanUseWeaponOnParachute')(weaponHash); }
    
    /**
    * Cancels the currently executing event. See https://wiki.fivem.net/wiki/CancelEvent
    */
    @:pure static inline function CancelEvent(): Void { return untyped __lua__('CancelEvent')(); }
    
    /**
    * All music event names found in the b617d scripts: pastebin.com/GnYt0R3P
    */
    @:pure static inline function CancelMusicEvent(eventName: String): Int { return untyped __lua__('CancelMusicEvent')(eventName); }
    @:pure static inline function CancelStuntJump(): Void { return untyped __lua__('CancelStuntJump')(); }
    
    /**
    * Does something similar to INTERIOR::DISABLE_INTERIOR
    */
    @:pure static inline function CapInterior(interiorID: Int, toggle: Bool): Void { return untyped __lua__('CapInterior')(interiorID, toggle); }
    
    /**
    * I'm guessing this rounds a float value up to the next whole number, and FLOOR rounds it down
    */
    @:pure static inline function Ceil(value: Int): Int { return untyped __lua__('Ceil')(value); }
    @:pure static inline function CellCamActivate(p0: Bool, p1: Bool): Void { return untyped __lua__('CellCamActivate')(p0, p1); }
    @:pure static inline function CellCamIsCharVisibleNoFaceCheck(entity: Int): Int { return untyped __lua__('CellCamIsCharVisibleNoFaceCheck')(entity); }
    
    /**
    * When calling this, the current frame will have the players "arrow icon" be focused on the dead center of the radar.
    */
    @:pure static inline function CenterPlayerOnRadarThisFrame(): Void { return untyped __lua__('CenterPlayerOnRadarThisFrame')(); }
    
    /**
    * b2 and/or b3 maybe got something to do with keeping values from the last ped. Both of them set to 1 works great. <br/><br/>Examples from the decompiled scripts:<br/><br/>PLAYER::CHANGE_PLAYER_PED(PLAYER::PLAYER_ID(), l_5C0[4 -- [[14]] ], 0, 1);<br/>PLAYER::CHANGE_PLAYER_PED(PLAYER::PLAYER_ID(), a_0[a_0._f7 -- [[1]] ], a_2, 0);<br/><br/><br/>===========================================================<br/>The only way I ever got this to work in GTA Online once is by setting both to 0, 0. However, when you switch from your online character to whomever, your character will start walking away 'as if you left the game.' If from there you attempt to call this native once more to switch back to you online ped. You will freeze or if you try changing to another ped. I've tried all posibilities so far.<br/>1, 1 (Freeze), 0, 0(Works Once), 1, 0 &amp; 0, 1 (Freeze). Note of course trying to call this on another online player will crash. Anyone have any idea if implementing a blr within the xex itself on a possible check if it would prevent this freezing?<br/>===========================================================
    */
    @:pure static inline function ChangePlayerPed(player: Int, ped: Int, b2: Bool, b3: Bool): Void { return untyped __lua__('ChangePlayerPed')(player, ped, b2, b3); }
    
    /**
    * minimum: Degrees between -90f and 90f.
    * maximum: Degrees between -90f and 90f.
    * Clamps the gameplay camera's current pitch.
    * Eg. _CLAMP_GAMEPLAY_CAM_PITCH(0.0f, 0.0f) will set the vertical angle directly behind the player.
    */
    @:pure static inline function ClampGameplayCamPitch(minimum: Int, maximum: Int): Int { return untyped __lua__('ClampGameplayCamPitch')(minimum, maximum); }
    
    /**
    * minimum: Degrees between -180f and 180f.
    * maximum: Degrees between -180f and 180f.
    * Clamps the gameplay camera's current yaw.
    * Eg. _CLAMP_GAMEPLAY_CAM_YAW(0.0f, 0.0f) will set the horizontal angle directly behind the player.
    */
    @:pure static inline function ClampGameplayCamYaw(minimum: Int, maximum: Int): Int { return untyped __lua__('ClampGameplayCamYaw')(minimum, maximum); }
    @:pure static inline function CleanItemset(p0: Int): Void { return untyped __lua__('CleanItemset')(p0); }
    @:pure static inline function ClearAdditionalText(p0: Int, p1: Bool): Void { return untyped __lua__('ClearAdditionalText')(p0, p1); }
    @:pure static inline function ClearAllBrokenGlass(): Int { return untyped __lua__('ClearAllBrokenGlass')(); }
    @:pure static inline function ClearAllHelpMessages(): Void { return untyped __lua__('ClearAllHelpMessages')(); }
    
    /**
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function ClearAllPedProps(ped: Int): Void { return untyped __lua__('ClearAllPedProps')(ped); }
    @:pure static inline function ClearAmbientZoneListState(p1: Bool): Int { return untyped __lua__('ClearAmbientZoneListState')(p1); }
    
    /**
    * This function also has a p2, unknown. Signature AUDIO::CLEAR_AMBIENT_ZONE_STATE(char* zoneName, bool p1, Any p2);
    * Still needs more research.
    * Here are the names I've found: pastebin.com/AfA0Qjyv
    */
    @:pure static inline function ClearAmbientZoneState(zoneName: String, p1: Bool): Void { return untyped __lua__('ClearAmbientZoneState')(zoneName, p1); }
    @:pure static inline function ClearAngledAreaOfVehicles(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Bool, p8: Bool, p9: Bool, p10: Bool, p11: Bool): Void { return untyped __lua__('ClearAngledAreaOfVehicles')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
    
    /**
    * Example: CLEAR_AREA(0, 0, 0, 30, true, false, false, false);
    */
    @:pure static inline function ClearArea(X: Int, Y: Int, Z: Int, radius: Int, p4: Bool, ignoreCopCars: Bool, ignoreObjects: Bool, p7: Bool): Void { return untyped __lua__('ClearArea')(X, Y, Z, radius, p4, ignoreCopCars, ignoreObjects, p7); }
    
    /**
    * flags appears to always be 0
    */
    @:pure static inline function ClearAreaOfCops(x: Int, y: Int, z: Int, radius: Int, flags: Int): Void { return untyped __lua__('ClearAreaOfCops')(x, y, z, radius, flags); }
    
    /**
    * GAMEPLAY::_0x957838AAF91BD12D(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything.
    */
    @:pure static inline function ClearAreaOfEverything(x: Int, y: Int, z: Int, radius: Int, p4: Bool, p5: Bool, p6: Bool, p7: Bool): Void { return untyped __lua__('ClearAreaOfEverything')(x, y, z, radius, p4, p5, p6, p7); }
    
    /**
    * GAMEPLAY::_0x957838AAF91BD12D(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything.
    */
    @:pure static inline function N_0x957838aaf91bd12d(x: Int, y: Int, z: Int, radius: Int, p4: Bool, p5: Bool, p6: Bool, p7: Bool): Void { return untyped __lua__('N_0x957838aaf91bd12d')(x, y, z, radius, p4, p5, p6, p7); }
    
    /**
    * I looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag.
    */
    @:pure static inline function ClearAreaOfObjects(x: Int, y: Int, z: Int, radius: Int, flags: Int): Void { return untyped __lua__('ClearAreaOfObjects')(x, y, z, radius, flags); }
    
    /**
    * Example: 		CLEAR_AREA_OF_PEDS(0, 0, 0, 10000, 1);
    */
    @:pure static inline function ClearAreaOfPeds(x: Int, y: Int, z: Int, radius: Int, flags: Int): Void { return untyped __lua__('ClearAreaOfPeds')(x, y, z, radius, flags); }
    
    /**
    * flags is usually 0 in the scripts.
    */
    @:pure static inline function ClearAreaOfProjectiles(x: Int, y: Int, z: Int, radius: Int, flags: Int): Void { return untyped __lua__('ClearAreaOfProjectiles')(x, y, z, radius, flags); }
    
    /**
    * Example: 		CLEAR_AREA_OF_VEHICLES(0, 0, 0, 10000, false, false, false, false, false);
    */
    @:pure static inline function ClearAreaOfVehicles(x: Int, y: Int, z: Int, radius: Int, p4: Bool, p5: Bool, p6: Bool, p7: Bool, p8: Bool): Void { return untyped __lua__('ClearAreaOfVehicles')(x, y, z, radius, p4, p5, p6, p7, p8); }
    
    /**
    * This sets bit [offset] of [address] to off.
    * Example:
    * GAMEPLAY::CLEAR_BIT(&amp;bitAddress, 1);
    * To check if this bit has been enabled:
    * GAMEPLAY::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards
    */
    @:pure static inline function ClearBit(offset: Int): Int { return untyped __lua__('ClearBit')(offset); }
    @:pure static inline function ClearBrief(): Void { return untyped __lua__('ClearBrief')(); }
    @:pure static inline function ClearCloudHat(): Void { return untyped __lua__('ClearCloudHat')(); }
    @:pure static inline function ClearDecisionMakerEventResponse(name: EitherType<String, Int>, type: Int): Void { return untyped __lua__('ClearDecisionMakerEventResponse')(name, type); }
    
    /**
    * Resets the screen's draw-origin which was changed by the function GRAPHICS::SET_DRAW_ORIGIN(...) back to x=0,y=0.
    * See GRAPHICS::SET_DRAW_ORIGIN(...) for further information.
    */
    @:pure static inline function ClearDrawOrigin(): Void { return untyped __lua__('ClearDrawOrigin')(); }
    @:pure static inline function ClearDrivebyTaskUnderneathDrivingTask(ped: Int): Void { return untyped __lua__('ClearDrivebyTaskUnderneathDrivingTask')(ped); }
    @:pure static inline function ClearEntityLastDamageEntity(entity: Int): Int { return untyped __lua__('ClearEntityLastDamageEntity')(entity); }
    @:pure static inline function ClearEntityLastWeaponDamage(entity: Int): Void { return untyped __lua__('ClearEntityLastWeaponDamage')(entity); }
    @:pure static inline function ClearFacialIdleAnimOverride(ped: Int): Void { return untyped __lua__('ClearFacialIdleAnimOverride')(ped); }
    
    /**
    * p0 looks like int in script
    */
    @:pure static inline function ClearFloatingHelp(p0: Int, p1: Bool): Void { return untyped __lua__('ClearFloatingHelp')(p0, p1); }
    @:pure static inline function ClearFocus(): Void { return untyped __lua__('ClearFocus')(); }
    
    /**
    * Clears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them.
    * Doesn't seem like the flags are actually read by the game at all.
    */
    @:pure static inline function ClearGpsFlags(): Void { return untyped __lua__('ClearGpsFlags')(); }
    @:pure static inline function ClearGpsPlayerWaypoint(): Void { return untyped __lua__('ClearGpsPlayerWaypoint')(); }
    @:pure static inline function ClearGpsRaceTrack(): Void { return untyped __lua__('ClearGpsRaceTrack')(); }
    @:pure static inline function ClearHdArea(): Void { return untyped __lua__('ClearHdArea')(); }
    @:pure static inline function ClearHelp(toggle: Bool): Void { return untyped __lua__('ClearHelp')(toggle); }
    
    /**
    * _CLEAR_NOTIFICATIONS_POS(0.5f);
    */
    @:pure static inline function ClearNotificationsPos(pos: Int): Void { return untyped __lua__('ClearNotificationsPos')(pos); }
    
    /**
    * _CLEAR_NOTIFICATIONS_POS(0.5f);
    */
    @:pure static inline function N_0x55598d21339cb998(pos: Int): Void { return untyped __lua__('N_0x55598d21339cb998')(pos); }
    @:pure static inline function ClearOverrideWeather(): Void { return untyped __lua__('ClearOverrideWeather')(); }
    @:pure static inline function ClearPedAlternateMovementAnim(ped: Int, stance: Int, p2: Int): Void { return untyped __lua__('ClearPedAlternateMovementAnim')(ped, stance, p2); }
    @:pure static inline function ClearPedAlternateWalkAnim(ped: Int, p1: Int): Void { return untyped __lua__('ClearPedAlternateWalkAnim')(ped, p1); }
    @:pure static inline function ClearPedBloodDamage(ped: Int): Void { return untyped __lua__('ClearPedBloodDamage')(ped); }
    
    /**
    * Somehow related to changing ped's clothes.
    */
    @:pure static inline function ClearPedBloodDamageByZone(ped: Int, p1: Int): Void { return untyped __lua__('ClearPedBloodDamageByZone')(ped, p1); }
    
    /**
    * Somehow related to changing ped's clothes.
    */
    @:pure static inline function N_0x56e3b78c5408d9f4(ped: Int, p1: Int): Void { return untyped __lua__('N_0x56e3b78c5408d9f4')(ped, p1); }
    
    /**
    * p1: from 0 to 5 in the b617d scripts.
    * p2: "blushing" and "ALL" found in the b617d scripts.
    */
    @:pure static inline function ClearPedDamageDecalByZone(ped: Int, p1: Int, p2: String): Void { return untyped __lua__('ClearPedDamageDecalByZone')(ped, p1, p2); }
    
    /**
    * p1: from 0 to 5 in the b617d scripts.
    * p2: "blushing" and "ALL" found in the b617d scripts.
    */
    @:pure static inline function N_0x523c79aeefcc4a2a(ped: Int, p1: Int, p2: String): Void { return untyped __lua__('N_0x523c79aeefcc4a2a')(ped, p1, p2); }
    @:pure static inline function ClearPedDecorations(ped: Int): Void { return untyped __lua__('ClearPedDecorations')(ped); }
    @:pure static inline function ClearPedDriveByClipsetOverride(ped: Int): Void { return untyped __lua__('ClearPedDriveByClipsetOverride')(ped); }
    @:pure static inline function ClearPedFacialDecorations(ped: Int): Void { return untyped __lua__('ClearPedFacialDecorations')(ped); }
    @:pure static inline function N_0xe3b27e70ceab9f0c(ped: Int): Void { return untyped __lua__('N_0xe3b27e70ceab9f0c')(ped); }
    @:pure static inline function ClearPedInPauseMenu(): Void { return untyped __lua__('ClearPedInPauseMenu')(); }
    @:pure static inline function ClearPedLastDamageBone(ped: Int): Void { return untyped __lua__('ClearPedLastDamageBone')(ped); }
    @:pure static inline function ClearPedLastWeaponDamage(ped: Int): Void { return untyped __lua__('ClearPedLastWeaponDamage')(ped); }
    @:pure static inline function ClearPedNonCreationArea(): Void { return untyped __lua__('ClearPedNonCreationArea')(); }
    
    /**
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function ClearPedProp(ped: Int, propId: Int): Void { return untyped __lua__('ClearPedProp')(ped, propId); }
    @:pure static inline function ClearPedSecondaryTask(ped: Int): Void { return untyped __lua__('ClearPedSecondaryTask')(ped); }
    @:pure static inline function ClearPedTasks(ped: Int): Void { return untyped __lua__('ClearPedTasks')(ped); }
    
    /**
    * Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.
    */
    @:pure static inline function ClearPedTasksImmediately(ped: Int): Void { return untyped __lua__('ClearPedTasksImmediately')(ped); }
    
    /**
    * It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
    */
    @:pure static inline function ClearPedWetness(ped: Int): Void { return untyped __lua__('ClearPedWetness')(ped); }
    @:pure static inline function ClearPlayerHasDamagedAtLeastOneNonAnimalPed(player: Int): Void { return untyped __lua__('ClearPlayerHasDamagedAtLeastOneNonAnimalPed')(player); }
    @:pure static inline function ClearPlayerHasDamagedAtLeastOnePed(player: Int): Void { return untyped __lua__('ClearPlayerHasDamagedAtLeastOnePed')(player); }
    @:pure static inline function ClearPlayerParachuteModelOverride(player: Int): Void { return untyped __lua__('ClearPlayerParachuteModelOverride')(player); }
    @:pure static inline function ClearPlayerParachutePackModelOverride(player: Int): Void { return untyped __lua__('ClearPlayerParachutePackModelOverride')(player); }
    @:pure static inline function ClearPlayerParachuteVariationOverride(player: Int): Void { return untyped __lua__('ClearPlayerParachuteVariationOverride')(player); }
    
    /**
    * This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);
    * PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible.
    */
    @:pure static inline function ClearPlayerWantedLevel(player: Int): Void { return untyped __lua__('ClearPlayerWantedLevel')(player); }
    
    /**
    * Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
    * Modified example from "am_imp_exp.c4", line 6418:
    *  -- [[ popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
    * etc.
    * ]]
    * STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash);
    * ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]);
    */
    @:pure static inline function ClearPopscheduleOverrideVehicleModel(scheduleId: Int): Void { return untyped __lua__('ClearPopscheduleOverrideVehicleModel')(scheduleId); }
    @:pure static inline function ClearPrints(): Void { return untyped __lua__('ClearPrints')(); }
    
    /**
    * Clears the relationship between two groups. This should be called twice (once for each group).
    * Relationship types:
    * 0 = Companion
    * 1 = Respect
    * 2 = Like
    * 3 = Neutral
    * 4 = Dislike
    * 5 = Hate
    * 255 = Pedestrians
    * (Credits: Inco)
    * Example:
    * PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
    * PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
    */
    @:pure static inline function ClearRelationshipBetweenGroups(relationship: Int, group1: EitherType<String, Int>, group2: EitherType<String, Int>): Void { return untyped __lua__('ClearRelationshipBetweenGroups')(relationship, group1, group2); }
    @:pure static inline function ClearReminderMessage(): Void { return untyped __lua__('ClearReminderMessage')(); }
    @:pure static inline function N_0xb57d8dd645cfa2cf(): Void { return untyped __lua__('N_0xb57d8dd645cfa2cf')(); }
    @:pure static inline function ClearReplayStats(): Void { return untyped __lua__('ClearReplayStats')(); }
    @:pure static inline function ClearRoomForEntity(entity: Int): Void { return untyped __lua__('ClearRoomForEntity')(entity); }
    @:pure static inline function ClearSequenceTask(taskSequence: Int): Int { return untyped __lua__('ClearSequenceTask')(taskSequence); }
    @:pure static inline function ClearSmallPrints(): Void { return untyped __lua__('ClearSmallPrints')(); }
    
    /**
    * p0: found arguments in the b617d scripts: pastebin.com/X5akCN7z
    */
    @:pure static inline function ClearThisPrint(p0: String): Void { return untyped __lua__('ClearThisPrint')(p0); }
    @:pure static inline function ClearTimecycleModifier(): Void { return untyped __lua__('ClearTimecycleModifier')(); }
    @:pure static inline function ClearVehicleCustomPrimaryColour(vehicle: Int): Int { return untyped __lua__('ClearVehicleCustomPrimaryColour')(vehicle); }
    @:pure static inline function ClearVehicleCustomSecondaryColour(vehicle: Int): Int { return untyped __lua__('ClearVehicleCustomSecondaryColour')(vehicle); }
    @:pure static inline function ClearWeatherTypePersist(): Void { return untyped __lua__('ClearWeatherTypePersist')(); }
    
    /**
    * p3 - last parameter does not mean ped handle is returned
    * maybe a quick view in disassembly will tell us what is actually does
    * Example of Cloning Your Player:
    * CLONE_PED(PLAYER_PED_ID(), GET_ENTITY_HEADING(PLAYER_PED_ID()), 0, 1);
    */
    @:pure static inline function ClonePed(ped: Int, heading: Int, isNetwork: Bool, p3: Bool): Int { return untyped __lua__('ClonePed')(ped, heading, isNetwork, p3); }
    
    /**
    * What exactly is the difference? What does this exactly do by chance?
    */
    @:pure static inline function ClonePedToTarget(ped: Int, targetPed: Int): Void { return untyped __lua__('ClonePedToTarget')(ped, targetPed); }
    
    /**
    * What exactly is the difference? What does this exactly do by chance?
    */
    @:pure static inline function AssignPlayerToPed(ped: Int, targetPed: Int): Void { return untyped __lua__('AssignPlayerToPed')(ped, targetPed); }
    @:pure static inline function CloseBombBayDoors(vehicle: Int): Void { return untyped __lua__('CloseBombBayDoors')(vehicle); }
    @:pure static inline function N_0x3556041742a0dc74(vehicle: Int): Void { return untyped __lua__('N_0x3556041742a0dc74')(vehicle); }
    @:pure static inline function ClosePatrolRoute(): Void { return untyped __lua__('ClosePatrolRoute')(); }
    @:pure static inline function CloseSequenceTask(taskSequence: Int): Int { return untyped __lua__('CloseSequenceTask')(taskSequence); }
    
    /**
    * Compares two strings up to a specified number of characters.
    * Parameters:
    * str1 - String to be compared.
    * str2 - String to be compared.
    * matchCase - Comparison will be case-sensitive.
    * maxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length.
    * Returns:
    * A value indicating the relationship between the strings:
    * &lt;0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'A' &lt; 'B', so result = -1)
    * 0 - The contents of both strings are equal.
    * &gt;0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'B' &gt; 'A', so result = 1)
    * Examples:
    * GAMEPLAY::COMPARE_STRINGS("STRING", "string", false, -1); // 0; equal
    * GAMEPLAY::COMPARE_STRINGS("TESTING", "test", false, 4); // 0; equal
    * GAMEPLAY::COMPARE_STRINGS("R2D2", "R2xx", false, 2); // 0; equal
    * GAMEPLAY::COMPARE_STRINGS("foo", "bar", false, -1); // 4; 'f' &gt; 'b'
    * GAMEPLAY::COMPARE_STRINGS("A", "A", true, 1); // 0; equal
    * When comparing case-sensitive strings, lower-case characters are greater than upper-case characters:
    * GAMEPLAY::COMPARE_STRINGS("A", "a", true, 1); // -1; 'A' &lt; 'a'
    * GAMEPLAY::COMPARE_STRINGS("a", "A", true, 1); // 1; 'a' &gt; 'A'
    */
    @:pure static inline function CompareStrings(str1: String, str2: String, matchCase: Bool, maxLength: Int): Int { return untyped __lua__('CompareStrings')(str1, str2, matchCase, maxLength); }
    
    /**
    * Works for vehicles with a retractable landing gear
    * landing gear states:
    * 0: Deployed
    * 1: Closing
    * 2: Opening
    * 3: Retracted
    */
    @:pure static inline function ControlLandingGear(vehicle: Int, state: Int): Void { return untyped __lua__('ControlLandingGear')(vehicle, state); }
    
    /**
    * Works for vehicles with a retractable landing gear
    * landing gear states:
    * 0: Deployed
    * 1: Closing
    * 2: Opening
    * 3: Retracted
    */
    @:pure static inline function SetVehicleLandingGear(vehicle: Int, state: Int): Void { return untyped __lua__('SetVehicleLandingGear')(vehicle, state); }
    
    /**
    * Forces the ped to use the mounted weapon.
    * Returns false if task is not possible.
    */
    @:pure static inline function ControlMountedWeapon(ped: Int): Int { return untyped __lua__('ControlMountedWeapon')(ped); }
    @:pure static inline function Cos(value: Int): Int { return untyped __lua__('Cos')(value); }
    
    /**
    * Used for doing money drop
    * Pickup hashes: pastebin.com/8EuSv2r1
    */
    @:pure static inline function CreateAmbientPickup(pickupHash: EitherType<String, Int>, posX: Int, posY: Int, posZ: Int, p4: Int, value: Int, modelHash: EitherType<String, Int>, p7: Bool, p8: Bool): Int { return untyped __lua__('CreateAmbientPickup')(pickupHash, posX, posY, posZ, p4, value, modelHash, p7, p8); }
    
    /**
    * "DEFAULT_SCRIPTED_CAMERA"
    * "DEFAULT_ANIMATED_CAMERA"
    * "DEFAULT_SPLINE_CAMERA"
    * "DEFAULT_SCRIPTED_FLY_CAMERA"
    * "TIMED_SPLINE_CAMERA"
    */
    @:pure static inline function CreateCam(camName: String, p1: Bool): Int { return untyped __lua__('CreateCam')(camName, p1); }
    
    /**
    * camName is always set to "DEFAULT_SCRIPTED_CAMERA" in Rockstar's scripts.
    * ------------
    * Camera names found in the b617d scripts:
    * "DEFAULT_ANIMATED_CAMERA"
    * "DEFAULT_SCRIPTED_CAMERA"
    * "DEFAULT_SCRIPTED_FLY_CAMERA"
    * "DEFAULT_SPLINE_CAMERA"
    * ------------
    * Side Note: It seems p8 is basically to represent what would be the bool p1 within CREATE_CAM native. As well as the p9 since it's always 2 in scripts seems to represent what would be the last param within SET_CAM_ROT native which normally would be 2.
    */
    @:pure static inline function CreateCamWithParams(camName: String, posX: Int, posY: Int, posZ: Int, rotX: Int, rotY: Int, rotZ: Int, fov: Int, p8: Bool, p9: Int): Int { return untyped __lua__('CreateCamWithParams')(camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9); }
    @:pure static inline function CreateCamera(camHash: EitherType<String, Int>, p1: Bool): Int { return untyped __lua__('CreateCamera')(camHash, p1); }
    
    /**
    * CAM::_GET_GAMEPLAY_CAM_COORDS can be used instead of posX,Y,Z
    * CAM::_GET_GAMEPLAY_CAM_ROT can be used instead of rotX,Y,Z
    * CAM::_80EC114669DAEFF4() can be used instead of p7 (Possible p7 is FOV parameter. )
    * p8 ???
    * p9 uses 2 by default
    */
    @:pure static inline function CreateCameraWithParams(camHash: EitherType<String, Int>, posX: Int, posY: Int, posZ: Int, rotX: Int, rotY: Int, rotZ: Int, fov: Int, p8: Bool, p9: Int): Int { return untyped __lua__('CreateCameraWithParams')(camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9); }
    
    /**
    * Creates a checkpoint. Returns the handle of the checkpoint.
    * 20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers.
    * Parameters:
    * * type - The type of checkpoint to create. See below for a list of checkpoint types.
    * * pos1 - The position of the checkpoint.
    * * pos2 - The position of the next checkpoint to point to.
    * * radius - The radius of the checkpoint.
    * * color - The color of the checkpoint.
    * * reserved - Special parameter, see below for details. Usually set to 0 in the scripts.
    * Checkpoint types:
    * 0-4---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
    * 5-9---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
    * 10-14-------Ring: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
    * 15-19-------1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
    * 20-24-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
    * 25-29-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
    * 30-34-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
    * 35-38-------Ring: Airplane Up, Left, Right, UpsideDown
    * 39----------?
    * 40----------Ring: just a ring
    * 41----------?
    * 42-44-------Cylinder w/ number (uses 'reserved' parameter)
    * 45-47-------Cylinder no arrow or number
    * If using type 42-44, reserved sets number / number and shape to display
    * 0-99------------Just numbers (0-99)
    * 100-109-----------------Arrow (0-9)
    * 110-119------------Two arrows (0-9)
    * 120-129----------Three arrows (0-9)
    * 130-139----------------Circle (0-9)
    * 140-149------------CycleArrow (0-9)
    * 150-159----------------Circle (0-9)
    * 160-169----Circle  w/ pointer (0-9)
    * 170-179-------Perforated ring (0-9)
    * 180-189----------------Sphere (0-9)
    */
    @:pure static inline function CreateCheckpoint(type: Int, posX1: Int, posY1: Int, posZ1: Int, posX2: Int, posY2: Int, posZ2: Int, radius: Int, red: Int, green: Int, blue: Int, alpha: Int, reserved: Int): Int { return untyped __lua__('CreateCheckpoint')(type, posX1, posY1, posZ1, posX2, posY2, posZ2, radius, red, green, blue, alpha, reserved); }
    @:pure static inline function CreateCinematicShot(p0: Int, p1: Int, p2: Int, entity: Int): Void { return untyped __lua__('CreateCinematicShot')(p0, p1, p2, entity); }
    @:pure static inline function CreateForcedObject(x: Int, y: Int, z: Int, p3: Int, modelHash: EitherType<String, Int>, p5: Bool): Void { return untyped __lua__('CreateForcedObject')(x, y, z, p3, modelHash, p5); }
    
    /**
    * Creates a new ped group.
    * Groups can contain up to 8 peds.
    * The parameter is unused.
    * Returns a handle to the created group, or 0 if a group couldn't be created.
    */
    @:pure static inline function CreateGroup(unused: Int): Int { return untyped __lua__('CreateGroup')(unused); }
    
    /**
    * p0 could be type
    * =====================================================
    * enum IncidentTypes{
    * FireDepartment = 3,
    * Paramedics = 5,
    * Police = 7,
    * PedsInCavalcades = 11,
    * Merryweather = 14
    * };
    * As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades &amp; Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.
    * Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
    * Side Note 2: I say it breaks as if you call this proper,
    * if(CREATE_INCIDENT) etc it will return false if you do as I said above.
    * =====================================================
    */
    @:pure static inline function CreateIncident(incidentType: Int, x: Int, y: Int, z: Int, p5: Int, radius: Int, outIncidentID: Int): Int { return untyped __lua__('CreateIncident')(incidentType, x, y, z, p5, radius, outIncidentID); }
    
    /**
    * p0 could be type (valueused in scripts: 14, 7, 5, 3, 11)
    * p1 is a return from get_player_ped() in am_gang_call.c, but player_ped_id() in other (non am) scripts.
    * p3 is usually 0f or 3f
    * =====================================================
    * enum IncidentTypes{
    * FireDepartment = 3,
    * Paramedics = 5,
    * Police = 7,
    * PedsInCavalcades = 11,
    * Merryweather = 14
    * };
    * As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades &amp; Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f.
    * Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
    * Side Note 2: I say it breaks as if you call this proper,
    * if(CREATE_INCIDENT) etc it will return false if you do as I said above.
    * =====================================================
    */
    @:pure static inline function CreateIncidentWithEntity(incidentType: Int, ped: Int, amountOfPeople: Int, radius: Int, outIncidentID: Int): Int { return untyped __lua__('CreateIncidentWithEntity')(incidentType, ped, amountOfPeople, radius, outIncidentID); }
    @:pure static inline function CreateItemset(): { a0: Int, a1: Array<Int> } { return untyped __lua__('CreateItemset')(); }
    
    /**
    * creates single lightning+thunder at random position
    */
    @:pure static inline function CreateLightningThunder(): Void { return untyped __lua__('CreateLightningThunder')(); }
    
    /**
    * Train models HAVE TO be loaded (requested) before you use this.
    * For variation 15 - request:
    * freight
    * freightcar
    * freightgrain
    * freightcont1
    * freightcont2
    * freighttrailer
    */
    @:pure static inline function CreateMissionTrain(variation: Int, x: Int, y: Int, z: Int, direction: Bool): Int { return untyped __lua__('CreateMissionTrain')(variation, x, y, z, direction); }
    
    /**
    * Creates a mobile phone of the specified type.
    * Possible phone types:
    * 0 - Default phone / Michael's phone
    * 1 - Trevor's phone
    * 2 - Franklin's phone
    * 4 - Prologue phone
    * These values represent bit flags, so a value of '3' would toggle Trevor and Franklin's phones together, causing unexpected behavior and most likely crash the game.
    */
    @:pure static inline function CreateMobilePhone(phoneType: Int): Void { return untyped __lua__('CreateMobilePhone')(phoneType); }
    
    /**
    * p5 = sets as true in scripts
    * Same as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well.
    * Network players do not see changes done with this.
    */
    @:pure static inline function CreateModelHide(x: Int, y: Int, z: Int, radius: Int, model: EitherType<String, Int>, p5: Bool): Void { return untyped __lua__('CreateModelHide')(x, y, z, radius, model, p5); }
    @:pure static inline function CreateModelHideExcludingScriptObjects(x: Int, y: Int, z: Int, radius: Int, model: EitherType<String, Int>, p5: Bool): Void { return untyped __lua__('CreateModelHideExcludingScriptObjects')(x, y, z, radius, model, p5); }
    
    /**
    * Only works with objects!
    * Network players do not see changes done with this.
    */
    @:pure static inline function CreateModelSwap(x: Int, y: Int, z: Int, radius: Int, originalModel: EitherType<String, Int>, newModel: EitherType<String, Int>, p6: Bool): Void { return untyped __lua__('CreateModelSwap')(x, y, z, radius, originalModel, newModel, p6); }
    
    /**
    * Spawns one or more money pickups.
    * x: The X-component of the world position to spawn the money pickups at.
    * y: The Y-component of the world position to spawn the money pickups at.
    * z: The Z-component of the world position to spawn the money pickups at.
    * value: The combined value of the pickups (in dollars).
    * amount: The number of pickups to spawn.
    * model: The model to use, or 0 for default money model.
    * Example:
    * CREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae);
    * Spawns 3 spray cans that'll collectively give $1000 when picked up. (Three spray cans, each giving $334, $334, $332 = $1000).
    * ==============================================
    * Max is 2000 in MP. So if you put the amount to 20, but the value to $400,000 eg. They will only be able to pickup 20 - $2,000 bags. So, $40,000
    */
    @:pure static inline function CreateMoneyPickups(x: Int, y: Int, z: Int, value: Int, amount: Int, model: EitherType<String, Int>): Void { return untyped __lua__('CreateMoneyPickups')(x, y, z, value, amount, model); }
    
    /**
    * p0 was the return of NET_TO_PED in fm_mission_controler.
    * p4 was always "".
    * returns headDisplayId
    */
    @:pure static inline function CreateMpGamerTag(ped: Int, username: String, pointedClanTag: Bool, isRockstarClan: Bool, clanTag: String, p5: Int): Int { return untyped __lua__('CreateMpGamerTag')(ped, username, pointedClanTag, isRockstarClan, clanTag, p5); }
    
    /**
    * p0 was the return of NET_TO_PED in fm_mission_controler.
    * p4 was always "".
    * returns headDisplayId
    */
    @:pure static inline function N_0xbfefe3321a3f5015(ped: Int, username: String, pointedClanTag: Bool, isRockstarClan: Bool, clanTag: String, p5: Int): Int { return untyped __lua__('N_0xbfefe3321a3f5015')(ped, username, pointedClanTag, isRockstarClan, clanTag, p5); }
    
    /**
    * shouldn't this return an int?
    */
    @:pure static inline function CreateMpGamerTagColor(headDisplayId: Int, username: String, pointedClanTag: Bool, isRockstarClan: Bool, clanTag: String, p5: Int, r: Int, g: Int, b: Int): Void { return untyped __lua__('CreateMpGamerTagColor')(headDisplayId, username, pointedClanTag, isRockstarClan, clanTag, p5, r, g, b); }
    
    /**
    * shouldn't this return an int?
    */
    @:pure static inline function N_0x6dd05e9d83efa4c9(headDisplayId: Int, username: String, pointedClanTag: Bool, isRockstarClan: Bool, clanTag: String, p5: Int, r: Int, g: Int, b: Int): Void { return untyped __lua__('N_0x6dd05e9d83efa4c9')(headDisplayId, username, pointedClanTag, isRockstarClan, clanTag, p5, r, g, b); }
    @:pure static inline function CreateNewScriptedConversation(): Void { return untyped __lua__('CreateNewScriptedConversation')(); }
    
    /**
    * Creates a new NaturalMotion message.
    * startImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized.
    * messageId: The ID of the NaturalMotion message.
    * If a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE.
    */
    @:pure static inline function CreateNmMessage(startImmediately: Bool, messageId: Int): Void { return untyped __lua__('CreateNmMessage')(startImmediately, messageId); }
    
    /**
    * p5 - last parameter does not mean object handle is returned
    * maybe a quick view in disassembly will tell us what is actually does
    * ----------
    * prop_tt_screenstatic (0xE2E039BC) is handled different. Not sure how yet but it I know it is.
    * thx fr Xenus.oida
    */
    @:pure static inline function CreateObject(modelHash: Int, x: Int, y: Int, z: Int, isNetwork: Bool, p5: Bool, dynamic_: Bool): Int { return untyped __lua__('CreateObject')(modelHash, x, y, z, isNetwork, p5, dynamic_); }
    
    /**
    * p5 - does not mean object handle is returned
    * maybe a quick view in disassembly will tell us what is actually does
    */
    @:pure static inline function CreateObjectNoOffset(modelHash: EitherType<String, Int>, x: Int, y: Int, z: Int, isNetwork: Bool, p5: Bool, dynamic_: Bool): Int { return untyped __lua__('CreateObjectNoOffset')(modelHash, x, y, z, isNetwork, p5, dynamic_); }
    @:pure static inline function CreatePatrolRoute(): Void { return untyped __lua__('CreatePatrolRoute')(); }
    
    /**
    * p7 - last parameter does not mean ped handle is returned
    * maybe a quick view in disassembly will tell us what is actually does
    * *Heading*: 0.0
    * *Heading* is the Z axis spawn rotation of the ped 0-&gt;5th parameter.
    * Ped Types:
    * [Player,1|Male,4|Female,5|Cop,6|Human,26|SWAT,27|Animal,28|Army,29]
    * You can also use GET_PED_TYPE
    */
    @:pure static inline function CreatePed(pedType: Int, modelHash: EitherType<String, Int>, x: Int, y: Int, z: Int, heading: Int, isNetwork: Bool, p7: Bool): Int { return untyped __lua__('CreatePed')(pedType, modelHash, x, y, z, heading, isNetwork, p7); }
    
    /**
    * p5 - last parameter does not mean ped handle is returned
    * maybe a quick view in disassembly will tell us what is actually does
    * Ped Types:
    * Player = 1
    * Male = 4
    * Female = 5
    * Cop = 6
    * Taxi Driver = 25 (sfink)
    * Human = 26
    * SWAT = 27
    * Animal = 28
    * Army = 29
    */
    @:pure static inline function CreatePedInsideVehicle(vehicle: Int, pedType: Int, modelHash: EitherType<String, Int>, seat: Int, isNetwork: Bool, p5: Bool): Int { return untyped __lua__('CreatePedInsideVehicle')(vehicle, pedType, modelHash, seat, isNetwork, p5); }
    
    /**
    * Drops the Hook/Magnet on a cargobob
    * state
    * enum eCargobobHook
    * {
    * CARGOBOB_HOOK = 0,
    * CARGOBOB_MAGNET = 1,
    * };
    */
    @:pure static inline function CreatePickUpRopeForCargobob(cargobob: Int, state: Int): Void { return untyped __lua__('CreatePickUpRopeForCargobob')(cargobob, state); }
    
    /**
    * Drops the Hook/Magnet on a cargobob
    * state
    * enum eCargobobHook
    * {
    * CARGOBOB_HOOK = 0,
    * CARGOBOB_MAGNET = 1,
    * };
    */
    @:pure static inline function EnableCargobobHook(cargobob: Int, state: Int): Void { return untyped __lua__('EnableCargobobHook')(cargobob, state); }
    
    /**
    * Pickup hashes: pastebin.com/8EuSv2r1
    */
    @:pure static inline function CreatePickup(pickupHash: EitherType<String, Int>, posX: Int, posY: Int, posZ: Int, p4: Int, value: Int, p6: Bool, modelHash: EitherType<String, Int>): Int { return untyped __lua__('CreatePickup')(pickupHash, posX, posY, posZ, p4, value, p6, modelHash); }
    
    /**
    * Pickup hashes: pastebin.com/8EuSv2r1
    * flags:
    * 8 (1 &lt;&lt; 3): place on ground
    * 512 (1 &lt;&lt; 9): spin around
    */
    @:pure static inline function CreatePickupRotate(pickupHash: EitherType<String, Int>, posX: Int, posY: Int, posZ: Int, rotX: Int, rotY: Int, rotZ: Int, flag: Int, amount: Int, p9: Int, p10: Bool, modelHash: EitherType<String, Int>): Int { return untyped __lua__('CreatePickupRotate')(pickupHash, posX, posY, posZ, rotX, rotY, rotZ, flag, amount, p9, p10, modelHash); }
    
    /**
    * Pickup hashes: pastebin.com/8EuSv2r1
    */
    @:pure static inline function CreatePortablePickup(pickupHash: EitherType<String, Int>, x: Int, y: Int, z: Int, placeOnGround: Bool, modelHash: EitherType<String, Int>): Int { return untyped __lua__('CreatePortablePickup')(pickupHash, x, y, z, placeOnGround, modelHash); }
    @:pure static inline function CreatePortablePickup_2(pickupHash: EitherType<String, Int>, x: Int, y: Int, z: Int, placeOnGround: Bool, modelHash: EitherType<String, Int>): Int { return untyped __lua__('CreatePortablePickup_2')(pickupHash, x, y, z, placeOnGround, modelHash); }
    @:pure static inline function N_0x125494b98a21aaf7(pickupHash: EitherType<String, Int>, x: Int, y: Int, z: Int, placeOnGround: Bool, modelHash: EitherType<String, Int>): Int { return untyped __lua__('N_0x125494b98a21aaf7')(pickupHash, x, y, z, placeOnGround, modelHash); }
    
    /**
    * vb.net
    * Dim ped_handle As Integer
    * With Game.Player.Character
    * Dim pos As Vector3 = .Position + .ForwardVector * 3
    * ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z)
    * End With
    * Creates a Ped at the specified location, returns the Ped Handle.
    * Ped will not act until SET_PED_AS_NO_LONGER_NEEDED is called.
    */
    @:pure static inline function CreateRandomPed(posX: Int, posY: Int, posZ: Int): Int { return untyped __lua__('CreateRandomPed')(posX, posY, posZ); }
    @:pure static inline function CreateRandomPedAsDriver(vehicle: Int, returnHandle: Bool): Int { return untyped __lua__('CreateRandomPedAsDriver')(vehicle, returnHandle); }
    
    /**
    * Creates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown.
    * Parameters:
    * x/y/z - Generator position
    * heading - Generator heading
    * p4 - Unknown (always 5.0)
    * p5 - Unknown (always 3.0)
    * modelHash - Vehicle model hash
    * p7/8/9/10 - Unknown (always -1)
    * p11 - Unknown (usually TRUE, only one instance of FALSE)
    * p12/13 - Unknown (always FALSE)
    * p14 - Unknown (usally FALSE, only two instances of TRUE)
    * p15 - Unknown (always TRUE)
    * p16 - Unknown (always -1)
    * Vector3 coords = GET_ENTITY_COORDS(PLAYER_PED_ID(), 0);	CREATE_SCRIPT_VEHICLE_GENERATOR(coords.x, coords.y, coords.z, 1.0f, 5.0f, 3.0f, GET_HASH_KEY("adder"), -1. -1, -1, -1, -1, true, false, false, false, true, -1);
    */
    @:pure static inline function CreateScriptVehicleGenerator(x: Int, y: Int, z: Int, heading: Int, p4: Int, p5: Int, modelHash: EitherType<String, Int>, p7: Int, p8: Int, p9: Int, p10: Int, p11: Bool, p12: Bool, p13: Bool, p14: Bool, p15: Bool, p16: Int): Int { return untyped __lua__('CreateScriptVehicleGenerator')(x, y, z, heading, p4, p5, modelHash, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16); }
    
    /**
    * p6 always 2 (but it doesnt seem to matter...)
    * roll and pitch 0
    * yaw to Ped.rotation
    */
    @:pure static inline function CreateSynchronizedScene(x: Int, y: Int, z: Int, roll: Int, pitch: Int, yaw: Int, p6: Int): Int { return untyped __lua__('CreateSynchronizedScene')(x, y, z, roll, pitch, yaw, p6); }
    
    /**
    * Creates a tracked point, useful for checking the visibility of a 3D point on screen.
    */
    @:pure static inline function CreateTrackedPoint(): Int { return untyped __lua__('CreateTrackedPoint')(); }
    
    /**
    * p6 - last parameter does not mean vehicle handle is returned
    * maybe a quick view in disassembly will tell us what is actually does
    * p6 seems to check for something with the script in the disassembly
    */
    @:pure static inline function CreateVehicle(modelHash: EitherType<String, Int>, x: Int, y: Int, z: Int, heading: Int, isNetwork: Bool, p6: Bool): Int { return untyped __lua__('CreateVehicle')(modelHash, x, y, z, heading, isNetwork, p6); }
    
    /**
    * Now has 8 params.
    */
    @:pure static inline function CreateWeaponObject(weaponHash: EitherType<String, Int>, ammoCount: Int, x: Int, y: Int, z: Int, showWorldModel: Bool, heading: Int, p7: Int): Int { return untyped __lua__('CreateWeaponObject')(weaponHash, ammoCount, x, y, z, showWorldModel, heading, p7); }
    
    /**
    * some camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
    */
    @:pure static inline function CustomMenuCoordinates(p0: Int): Void { return untyped __lua__('CustomMenuCoordinates')(p0); }
    
    /**
    * some camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
    */
    @:pure static inline function N_0x487a82c650eb7799(p0: Int): Void { return untyped __lua__('N_0x487a82c650eb7799')(p0); }
    @:pure static inline function DatafileCreate(): Void { return untyped __lua__('DatafileCreate')(); }
    @:pure static inline function DatafileDelete(): Void { return untyped __lua__('DatafileDelete')(); }
    @:pure static inline function DatafileGetFileDict(): String { return untyped __lua__('DatafileGetFileDict')(); }
    @:pure static inline function N_0x906b778ca1dc72b6(): String { return untyped __lua__('N_0x906b778ca1dc72b6')(); }
    
    /**
    * Example:
    * if (!DATAFILE::_BEDB96A7584AA8CF())
    * {
    * if (!g_109E3)
    * {
    * if (((sub_d4f() == 2) == 0) &amp;&amp; (!NETWORK::NETWORK_IS_GAME_IN_PROGRESS()))
    * {
    * if (NETWORK::NETWORK_IS_CLOUD_AVAILABLE())
    * {
    * g_17A8B = 0;
    * }
    * if (!g_D52C)
    * {
    * sub_730();
    * }
    * }
    * }
    * }
    */
    @:pure static inline function DatafileIsSavePending(): Int { return untyped __lua__('DatafileIsSavePending')(); }
    
    /**
    * Example:
    * if (!DATAFILE::_BEDB96A7584AA8CF())
    * {
    * if (!g_109E3)
    * {
    * if (((sub_d4f() == 2) == 0) &amp;&amp; (!NETWORK::NETWORK_IS_GAME_IN_PROGRESS()))
    * {
    * if (NETWORK::NETWORK_IS_CLOUD_AVAILABLE())
    * {
    * g_17A8B = 0;
    * }
    * if (!g_D52C)
    * {
    * sub_730();
    * }
    * }
    * }
    * }
    */
    @:pure static inline function N_0xbedb96a7584aa8cf(): Int { return untyped __lua__('N_0xbedb96a7584aa8cf')(); }
    
    /**
    * Returns whether or not the specified property is set for the entity.
    */
    @:pure static inline function DecorExistOn(entity: Int, propertyName: String): Int { return untyped __lua__('DecorExistOn')(entity, propertyName); }
    @:pure static inline function DecorGetBool(entity: Int, propertyName: String): Int { return untyped __lua__('DecorGetBool')(entity, propertyName); }
    
    /**
    * Console Hash: 0x8DE5382F
    * The native name is correct but the db automatically prefixes "_" to unknown natives when changed.
    */
    @:pure static inline function DecorGetFloat(entity: Int, propertyName: String): Int { return untyped __lua__('DecorGetFloat')(entity, propertyName); }
    @:pure static inline function DecorGetInt(entity: Int, propertyName: String): Int { return untyped __lua__('DecorGetInt')(entity, propertyName); }
    
    /**
    * Is property of that type.
    * 1
    * 2
    * 3
    * 5
    */
    @:pure static inline function DecorIsRegisteredAsType(propertyName: String, type: Int): Int { return untyped __lua__('DecorIsRegisteredAsType')(propertyName, type); }
    
    /**
    * Found this in standard_global_init.c4 line 1898
    * void sub_523a() {
    * DECORATOR::DECOR_REGISTER("Player_Vehicle", 3);
    * DECORATOR::DECOR_REGISTER("PV_Slot", 3);
    * DECORATOR::DECOR_REGISTER("Previous_Owner", 3);
    * DECORATOR::DECOR_REGISTER("Sprayed_Vehicle_Decorator", 2);
    * DECORATOR::DECOR_REGISTER("Sprayed_Vehicle_Timer_Dec", 5);
    * DECORATOR::DECOR_REGISTER("Vehicle_Reward", 3);
    * DECORATOR::DECOR_REGISTER("Vehicle_Reward_Teams", 3);
    * DECORATOR::DECOR_REGISTER("Skill_Blocker", 2);
    * DECORATOR::DECOR_REGISTER("TargetPlayerForTeam", 3);
    * DECORATOR::DECOR_REGISTER("XP_Blocker", 2);
    * DECORATOR::DECOR_REGISTER("CrowdControlSetUp", 3);
    * DECORATOR::DECOR_REGISTER("Bought_Drugs", 2);
    * DECORATOR::DECOR_REGISTER("HeroinInPossession", 1);
    * DECORATOR::DECOR_REGISTER("CokeInPossession", 1);
    * DECORATOR::DECOR_REGISTER("WeedInPossession", 1);
    * DECORATOR::DECOR_REGISTER("MethInPossession", 1);
    * DECORATOR::DECOR_REGISTER("bombdec", 3);
    * DECORATOR::DECOR_REGISTER("bombdec1", 3);
    * DECORATOR::DECOR_REGISTER("bombowner", 3);
    * DECORATOR::DECOR_REGISTER("noPlateScan", 2);
    * DECORATOR::DECOR_REGISTER("prisonBreakBoss", 2);
    * DECORATOR::DECOR_REGISTER("cashondeadbody", 3);
    * DECORATOR::DECOR_REGISTER("MissionType", 3);
    * DECORATOR::DECOR_REGISTER("MatchId", 3);
    * DECORATOR::DECOR_REGISTER("TeamId", 3);
    * DECORATOR::DECOR_REGISTER("Not_Allow_As_Saved_Veh", 3);
    * DECORATOR::DECOR_REGISTER("Veh_Modded_By_Player", 3);
    * DECORATOR::DECOR_REGISTER("MPBitset", 3);
    * DECORATOR::DECOR_REGISTER("MC_EntityID", 3);
    * DECORATOR::DECOR_REGISTER("MC_ChasePedID", 3);
    * DECORATOR::DECOR_REGISTER("MC_Team0_VehDeliveredRules", 3);
    * DECORATOR::DECOR_REGISTER("MC_Team1_VehDeliveredRules", 3);
    * DECORATOR::DECOR_REGISTER("MC_Team2_VehDeliveredRules", 3);
    * DECORATOR::DECOR_REGISTER("MC_Team3_VehDeliveredRules", 3);
    * DECORATOR::DECOR_REGISTER("AttributeDamage", 3);
    * DECORATOR::DECOR_REGISTER("GangBackup", 3);
    * DECORATOR::DECOR_REGISTER("CreatedByPegasus", 2);
    * DECORATOR::DECOR_REGISTER("BeforeCorona_0", 2);
    * }
    * -----------------------------------------------------------------------
    * Defines type of property for property name.
    * 1 - float,
    * 2 - bool,
    * 3
    * 5
    */
    @:pure static inline function DecorRegister(propertyName: String, type: Int): Void { return untyped __lua__('DecorRegister')(propertyName, type); }
    
    /**
    * Called after all decorator type initializations.
    */
    @:pure static inline function DecorRegisterLock(): Void { return untyped __lua__('DecorRegisterLock')(); }
    @:pure static inline function DecorRemove(entity: Int, propertyName: String): Int { return untyped __lua__('DecorRemove')(entity, propertyName); }
    
    /**
    * This function sets metadata of type bool to specified entity.
    */
    @:pure static inline function DecorSetBool(entity: Int, propertyName: String, value: Bool): Int { return untyped __lua__('DecorSetBool')(entity, propertyName, value); }
    
    /**
    * Console Hash: 0xBC7BD5CB
    * The native name is correct but the db automatically prefixes "_" to unknown natives when changed.
    */
    @:pure static inline function DecorSetFloat(entity: Int, propertyName: String, value: Int): Int { return untyped __lua__('DecorSetFloat')(entity, propertyName, value); }
    
    /**
    * Sets property to int.
    */
    @:pure static inline function DecorSetInt(entity: Int, propertyName: String, value: Int): Int { return untyped __lua__('DecorSetInt')(entity, propertyName, value); }
    @:pure static inline function DecorSetTime(entity: Int, propertyName: String, timestamp: Int): Int { return untyped __lua__('DecorSetTime')(entity, propertyName, timestamp); }
    @:pure static inline function DeleteAllTrains(): Void { return untyped __lua__('DeleteAllTrains')(); }
    @:pure static inline function DeleteCheckpoint(checkpoint: Int): Void { return untyped __lua__('DeleteCheckpoint')(checkpoint); }
    @:pure static inline function DeleteChildRope(rope: Int): Int { return untyped __lua__('DeleteChildRope')(rope); }
    
    /**
    * Deletes the specified entity, then sets the handle pointed to by the pointer to NULL.
    */
    @:pure static inline function DeleteEntity(entity: Int): Void { return untyped __lua__('DeleteEntity')(entity); }
    @:pure static inline function DeleteFunctionReference(referenceIdentity: String): Void { return untyped __lua__('DeleteFunctionReference')(referenceIdentity); }
    
    /**
    * Delete an incident with a given id.
    * =======================================================
    * Correction, I have change this to int, instead of int*
    * as it doesn't use a pointer to the createdIncident.
    * If you try it you will crash (or) freeze.
    * =======================================================
    */
    @:pure static inline function DeleteIncident(incidentId: Int): Void { return untyped __lua__('DeleteIncident')(incidentId); }
    @:pure static inline function DeleteMissionTrain(train: Int): Void { return untyped __lua__('DeleteMissionTrain')(train); }
    
    /**
    * Deletes the specified object, then sets the handle pointed to by the pointer to NULL.
    */
    @:pure static inline function DeleteObject(object: Int): Void { return untyped __lua__('DeleteObject')(object); }
    
    /**
    * From the b617d scripts:
    * AI::DELETE_PATROL_ROUTE("miss_merc0");
    * AI::DELETE_PATROL_ROUTE("miss_merc1");
    * AI::DELETE_PATROL_ROUTE("miss_merc2");
    * AI::DELETE_PATROL_ROUTE("miss_dock");
    */
    @:pure static inline function DeletePatrolRoute(patrolRoute: String): Void { return untyped __lua__('DeletePatrolRoute')(patrolRoute); }
    
    /**
    * Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
    */
    @:pure static inline function DeletePed(ped: Int): Void { return untyped __lua__('DeletePed')(ped); }
    @:pure static inline function DeleteResourceKvp(key: String): Void { return untyped __lua__('DeleteResourceKvp')(key); }
    @:pure static inline function DeleteRope(rope: Int): Void { return untyped __lua__('DeleteRope')(rope); }
    @:pure static inline function DeleteScriptVehicleGenerator(vehicleGenerator: Int): Void { return untyped __lua__('DeleteScriptVehicleGenerator')(vehicleGenerator); }
    @:pure static inline function DeleteStuntJump(p0: Int): Void { return untyped __lua__('DeleteStuntJump')(p0); }
    
    /**
    * Deletes a vehicle.
    * The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
    * eg how to use:
    * SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
    * DELETE_VEHICLE(&amp;vehicle);
    * Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
    */
    @:pure static inline function DeleteVehicle(vehicle: Int): Void { return untyped __lua__('DeleteVehicle')(vehicle); }
    
    /**
    * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
    */
    @:pure static inline function DestroyAllCams(thisScriptCheck: Bool): Void { return untyped __lua__('DestroyAllCams')(thisScriptCheck); }
    
    /**
    * BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
    */
    @:pure static inline function DestroyCam(cam: Int, thisScriptCheck: Bool): Void { return untyped __lua__('DestroyCam')(cam, thisScriptCheck); }
    @:pure static inline function DestroyItemset(p0: Int): Void { return untyped __lua__('DestroyItemset')(p0); }
    
    /**
    * Destroys the currently active mobile phone.
    */
    @:pure static inline function DestroyMobilePhone(): Void { return untyped __lua__('DestroyMobilePhone')(); }
    
    /**
    * Hash collision
    */
    @:pure static inline function DestroyPlayerInPauseMenu(): Int { return untyped __lua__('DestroyPlayerInPauseMenu')(); }
    @:pure static inline function DestroyTrackedPoint(point: Int): Void { return untyped __lua__('DestroyTrackedPoint')(point); }
    @:pure static inline function DetachCam(cam: Int): Void { return untyped __lua__('DetachCam')(cam); }
    
    /**
    * p1 and p2 have no effect
    * maybe a quick disassembly will tell us what they do
    * if p2 is set to true, the both entities won't collide with the other until the distance between them is above 4 meters.
    * p1?
    */
    @:pure static inline function DetachEntity(entity: Int, p1: Bool, collision: Bool): Void { return untyped __lua__('DetachEntity')(entity, p1, collision); }
    @:pure static inline function DetachPortablePickupFromPed(ped: Int): Void { return untyped __lua__('DetachPortablePickupFromPed')(ped); }
    @:pure static inline function DetachRopeFromEntity(rope: Int, entity: Int): Void { return untyped __lua__('DetachRopeFromEntity')(rope, entity); }
    @:pure static inline function DetachSynchronizedScene(sceneID: Int): Void { return untyped __lua__('DetachSynchronizedScene')(sceneID); }
    @:pure static inline function DetachVehicleFromAnyCargobob(vehicle: Int): Int { return untyped __lua__('DetachVehicleFromAnyCargobob')(vehicle); }
    @:pure static inline function DetachVehicleFromAnyTowTruck(vehicle: Int): Int { return untyped __lua__('DetachVehicleFromAnyTowTruck')(vehicle); }
    @:pure static inline function DetachVehicleFromCargobob(vehicle: Int, cargobob: Int): Void { return untyped __lua__('DetachVehicleFromCargobob')(vehicle, cargobob); }
    
    /**
    * First two parameters swapped. Scripts verify that towTruck is the first parameter, not the second.
    */
    @:pure static inline function DetachVehicleFromTowTruck(towTruck: Int, vehicle: Int): Void { return untyped __lua__('DetachVehicleFromTowTruck')(towTruck, vehicle); }
    
    /**
    * Public Sub detatchTrailer(vh1 As Vehicle)
    * Native.Function.Call(Hash.DETACH_VEHICLE_FROM_TRAILER, vh1)
    * End Sub
    */
    @:pure static inline function DetachVehicleFromTrailer(vehicle: Int): Void { return untyped __lua__('DetachVehicleFromTrailer')(vehicle); }
    
    /**
    * Detaches the vehicle's windscreen.
    * For further information, see : gtaforums.com/topic/859570-glass/#entry1068894566
    */
    @:pure static inline function DetachVehicleWindscreen(vehicle: Int): Void { return untyped __lua__('DetachVehicleWindscreen')(vehicle); }
    @:pure static inline function DisableAimCamThisUpdate(): Void { return untyped __lua__('DisableAimCamThisUpdate')(); }
    @:pure static inline function N_0x1a31fe0049e542f6(): Void { return untyped __lua__('N_0x1a31fe0049e542f6')(); }
    @:pure static inline function DisableAllControlActions(inputGroup: Int): Void { return untyped __lua__('DisableAllControlActions')(inputGroup); }
    @:pure static inline function DisableAutomaticRespawn(disableRespawn: Bool): Void { return untyped __lua__('DisableAutomaticRespawn')(disableRespawn); }
    
    /**
    * Hash collision!!!
    * Returns a blip handle.
    */
    @:pure static inline function DisableBlipNameForVar(): Int { return untyped __lua__('DisableBlipNameForVar')(); }
    
    /**
    * control values and meaning: github.com/crosire/scripthookvdotnet/blob/dev_v3/source/scripting/Controls.cs
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    * Control values from the decompiled scripts: 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,
    * 28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,5
    * 4,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,
    * 79,80,81,82,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,103,105,
    * 107,108,109,110,111,112,113,114,115,116,117,118,119,123,126,129,130,131,132,
    * 133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,
    * 153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,171,172
    * ,177,187,188,189,190,195,196,199,200,201,202,203,205,207,208,209,211,212,213, 217,219,220,221,225,226,230,234,235,236,237,238,239,240,241,242,243,244,257,
    * 261,262,263,264,265,270,271,272,273,274,278,279,280,281,282,283,284,285,286,
    * 287,288,289,337.
    * Example: CONTROLS::DISABLE_CONTROL_ACTION(2, 19, true) disables the switching UI from appearing both when using a keyboard and Xbox 360 controller. Needs to be executed each frame.
    * Control group 1 and 0 gives the same results as 2. Same results for all players.
    */
    @:pure static inline function DisableControlAction(inputGroup: Int, control: Int, disable: Bool): Void { return untyped __lua__('DisableControlAction')(inputGroup, control, disable); }
    
    /**
    * Disables first person camera for the current frame.
    * Found in decompiled scripts:
    * GRAPHICS::DRAW_DEBUG_TEXT_2D("Disabling First Person Cam", 0.5, 0.8, 0.0, 0, 0, 255, 255);
    * CAM::_DE2EF5DA284CC8DF();
    */
    @:pure static inline function DisableFirstPersonCamThisFrame(): Void { return untyped __lua__('DisableFirstPersonCamThisFrame')(); }
    @:pure static inline function DisableFrontendThisFrame(): Void { return untyped __lua__('DisableFrontendThisFrame')(); }
    
    /**
    * The game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were.
    * Doesn't work....
    */
    @:pure static inline function DisableHospitalRestart(hospitalIndex: Int, toggle: Bool): Void { return untyped __lua__('DisableHospitalRestart')(hospitalIndex, toggle); }
    @:pure static inline function DisableInputGroup(inputGroup: Int): Void { return untyped __lua__('DisableInputGroup')(inputGroup); }
    @:pure static inline function N_0x7f4724035fdca1dd(inputGroup: Int): Void { return untyped __lua__('N_0x7f4724035fdca1dd')(inputGroup); }
    
    /**
    * Example:
    * This removes the interior from the strip club and when trying to walk inside the player just falls:
    * INTERIOR::DISABLE_INTERIOR(118018, true);
    */
    @:pure static inline function DisableInterior(interiorID: Int, toggle: Bool): Void { return untyped __lua__('DisableInterior')(interiorID, toggle); }
    @:pure static inline function DisableInteriorProp(interiorID: Int, propName: String): Void { return untyped __lua__('DisableInteriorProp')(interiorID, propName); }
    @:pure static inline function N_0x420bd37289eee162(interiorID: Int, propName: String): Void { return untyped __lua__('N_0x420bd37289eee162')(interiorID, propName); }
    @:pure static inline function DisableNavmeshInArea(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Void { return untyped __lua__('DisableNavmeshInArea')(p0, p1, p2, p3, p4, p5, p6); }
    @:pure static inline function DisablePedPainAudio(ped: Int, toggle: Bool): Void { return untyped __lua__('DisablePedPainAudio')(ped, toggle); }
    
    /**
    * Disables the phone up-button, oddly enough.
    * i.e.: When the phone is out, and this method is called with false as it's parameter, the phone will not be able to scroll up. However, when you use the down arrow key, it's functionality still, works on the phone.
    * When the phone is not out, and this method is called with false as it's parameter, you will not be able to bring up the phone. Although the up arrow key still works for whatever functionality it's used for, just not for the phone.
    * This can be used for creating menu's when trying to disable the phone from being used.
    * You do not have to call the function again with false as a parameter, as soon as the function stops being called, the phone will again be usable.
    */
    @:pure static inline function DisablePhoneThisFrame(toggle: Bool): Void { return untyped __lua__('DisablePhoneThisFrame')(toggle); }
    
    /**
    * Disables the phone up-button, oddly enough.
    * i.e.: When the phone is out, and this method is called with false as it's parameter, the phone will not be able to scroll up. However, when you use the down arrow key, it's functionality still, works on the phone.
    * When the phone is not out, and this method is called with false as it's parameter, you will not be able to bring up the phone. Although the up arrow key still works for whatever functionality it's used for, just not for the phone.
    * This can be used for creating menu's when trying to disable the phone from being used.
    * You do not have to call the function again with false as a parameter, as soon as the function stops being called, the phone will again be usable.
    */
    @:pure static inline function N_0x015c49a93e3e086e(toggle: Bool): Void { return untyped __lua__('N_0x015c49a93e3e086e')(toggle); }
    
    /**
    * hash collision??? - Don't think so. I fits alphabetically and it used with a plane in the scripts
    */
    @:pure static inline function DisablePlaneAileron(vehicle: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('DisablePlaneAileron')(vehicle, p1, p2); }
    
    /**
    * Inhibits the player from using any method of combat including melee and firearms.
    * NOTE: Only disables the firing for one frame
    */
    @:pure static inline function DisablePlayerFiring(player: Int, toggle: Bool): Void { return untyped __lua__('DisablePlayerFiring')(player, toggle); }
    @:pure static inline function DisablePlayerVehicleRewards(player: Int): Void { return untyped __lua__('DisablePlayerVehicleRewards')(player); }
    @:pure static inline function DisablePoliceReports(): Void { return untyped __lua__('DisablePoliceReports')(); }
    @:pure static inline function N_0xb4f90faf7670b16f(): Void { return untyped __lua__('N_0xb4f90faf7670b16f')(); }
    
    /**
    * Disables the spawn point at the police house on the specified index.
    * policeIndex: The police house index.
    * toggle: true to enable the spawn point, false to disable.
    */
    @:pure static inline function DisablePoliceRestart(policeIndex: Int, toggle: Bool): Void { return untyped __lua__('DisablePoliceRestart')(policeIndex, toggle); }
    
    /**
    * confirmed working
    */
    @:pure static inline function DisableRadarThisFrame(): Void { return untyped __lua__('DisableRadarThisFrame')(); }
    @:pure static inline function DisableScriptBrainSet(brainSet: Int): Void { return untyped __lua__('DisableScriptBrainSet')(brainSet); }
    @:pure static inline function DisableStuntJumpSet(p0: Int): Void { return untyped __lua__('DisableStuntJumpSet')(p0); }
    @:pure static inline function DisableVehicleDistantlights(toggle: Bool): Void { return untyped __lua__('DisableVehicleDistantlights')(toggle); }
    @:pure static inline function DisableVehicleFirstPersonCamThisFrame(): Void { return untyped __lua__('DisableVehicleFirstPersonCamThisFrame')(); }
    
    /**
    * if set to true, prevents vehicle sirens from having sound, leaving only the lights.
    * HASH COLLISION !!! Please change to _SET_VEHICLE_SIREN_SOUND
    */
    @:pure static inline function DisableVehicleImpactExplosionActivation(vehicle: Int, toggle: Bool): Void { return untyped __lua__('DisableVehicleImpactExplosionActivation')(vehicle, toggle); }
    @:pure static inline function DisableVehicleWeapon(disabled: Bool, weaponHash: EitherType<String, Int>, vehicle: Int, owner: Int): Void { return untyped __lua__('DisableVehicleWeapon')(disabled, weaponHash, vehicle, owner); }
    @:pure static inline function DisplayAmmoThisFrame(display: Bool): Void { return untyped __lua__('DisplayAmmoThisFrame')(display); }
    @:pure static inline function DisplayAreaName(toggle: Bool): Void { return untyped __lua__('DisplayAreaName')(toggle); }
    
    /**
    * "DISPLAY_CASH(false);" makes the cash amount render on the screen when appropriate
    * "DISPLAY_CASH(true);" disables cash amount rendering
    */
    @:pure static inline function DisplayCash(toggle: Bool): Void { return untyped __lua__('DisplayCash')(toggle); }
    
    /**
    * Toggles to render distant vehicles. They may not be vehicles but images to look like vehicles.
    */
    @:pure static inline function DisplayDistantVehicles(toggle: Bool): Void { return untyped __lua__('DisplayDistantVehicles')(toggle); }
    
    /**
    * Toggles to render distant vehicles. They may not be vehicles but images to look like vehicles.
    */
    @:pure static inline function N_0xf796359a959df65d(toggle: Bool): Void { return untyped __lua__('N_0xf796359a959df65d')(toggle); }
    
    /**
    * The messages are localized strings.
    * Examples:
    * "No_bus_money"
    * "Enter_bus"
    * "Tour_help"
    * "LETTERS_HELP2"
    * "Dummy"
    * **The bool appears to always be false (if it even is a bool, as it's represented by a zero)**
    * --------
    * p1 doesn't seem to make a difference, regardless of the state it's in.
    * picture of where this is displayed?
    */
    @:pure static inline function DisplayHelpTextThisFrame(message: String, p1: Bool): Void { return untyped __lua__('DisplayHelpTextThisFrame')(message, p1); }
    
    /**
    * If Hud should be displayed
    */
    @:pure static inline function DisplayHud(toggle: Bool): Void { return untyped __lua__('DisplayHud')(toggle); }
    
    /**
    * sfink: note, p0 is set to 6 for PC platform in at least 1 script, or to `unk::_get_ui_language_id() == 0` otherwise.
    * NOTE: windowTitle uses text labels, and an invalid value will display nothing.
    * www.gtaforums.com/topic/788343-vrel-script-hook-v/?p=1067380474
    * windowTitle's
    * -----------------
    * CELL_EMAIL_BOD	=	"Enter your Eyefind message"
    * CELL_EMAIL_BODE	=	"Message too long. Try again"
    * CELL_EMAIL_BODF	=	"Forbidden message. Try again"
    * CELL_EMAIL_SOD	=	"Enter your Eyefind subject"
    * CELL_EMAIL_SODE	=	"Subject too long. Try again"
    * CELL_EMAIL_SODF	=	"Forbidden text. Try again"
    * CELL_EMASH_BOD	=	"Enter your Eyefind message"
    * CELL_EMASH_BODE	=	"Message too long. Try again"
    * CELL_EMASH_BODF	=	"Forbidden message. Try again"
    * CELL_EMASH_SOD	=	"Enter your Eyefind subject"
    * CELL_EMASH_SODE	=	"Subject too long. Try again"
    * CELL_EMASH_SODF	=	"Forbidden Text. Try again"
    * FMMC_KEY_TIP10	=	"Enter Synopsis"
    * FMMC_KEY_TIP12	=	"Enter Custom Team Name"
    * FMMC_KEY_TIP12F	=	"Forbidden Text. Try again"
    * FMMC_KEY_TIP12N	=	"Custom Team Name"
    * FMMC_KEY_TIP8	=	"Enter Message"
    * FMMC_KEY_TIP8F	=	"Forbidden Text. Try again"
    * FMMC_KEY_TIP8FS	=	"Invalid Message. Try again"
    * FMMC_KEY_TIP8S	=	"Enter Message"
    * FMMC_KEY_TIP9	=	"Enter Outfit Name"
    * FMMC_KEY_TIP9F	=	"Invalid Outfit Name. Try again"
    * FMMC_KEY_TIP9N	=	"Outfit Name"
    * PM_NAME_CHALL	=	"Enter Challenge Name"
    */
    @:pure static inline function DisplayOnscreenKeyboard(p0: Int, windowTitle: String, p2: String, defaultText: String, defaultConcat1: String, defaultConcat2: String, defaultConcat3: String, maxInputLength: Int): Void { return untyped __lua__('DisplayOnscreenKeyboard')(p0, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength); }
    
    /**
    * only documented to be continued...
    */
    @:pure static inline function DisplayOnscreenKeyboard_2(p0: Int, windowTitle: String, defaultText: String, defaultConcat1: String, defaultConcat2: String, defaultConcat3: String, defaultConcat4: String, defaultConcat5: String, defaultConcat6: String, defaultConcat7: String, maxInputLength: Int): Int { return untyped __lua__('DisplayOnscreenKeyboard_2')(p0, windowTitle, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength); }
    
    /**
    * only documented to be continued...
    */
    @:pure static inline function N_0xca78cfa0366592fe(p0: Int, windowTitle: String, defaultText: String, defaultConcat1: String, defaultConcat2: String, defaultConcat3: String, defaultConcat4: String, defaultConcat5: String, defaultConcat6: String, defaultConcat7: String, maxInputLength: Int): Int { return untyped __lua__('N_0xca78cfa0366592fe')(p0, windowTitle, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7, maxInputLength); }
    
    /**
    * If Minimap / Radar should be displayed.
    */
    @:pure static inline function DisplayRadar(Toggle: Bool): Int { return untyped __lua__('DisplayRadar')(Toggle); }
    
    /**
    * Displays the crosshair for this frame.
    */
    @:pure static inline function DisplaySniperScopeThisFrame(): Void { return untyped __lua__('DisplaySniperScopeThisFrame')(); }
    
    /**
    * Purpose of the BOOL currently unknown.
    * Both, true and false, work
    */
    @:pure static inline function DisplaySystemSigninUi(unk: Bool): Void { return untyped __lua__('DisplaySystemSigninUi')(unk); }
    @:pure static inline function DisposeSynchronizedScene(scene: Int): Void { return untyped __lua__('DisposeSynchronizedScene')(scene); }
    @:pure static inline function N_0xcd9cc7e200a52a6f(scene: Int): Void { return untyped __lua__('N_0xcd9cc7e200a52a6f')(scene); }
    @:pure static inline function DoAutoSave(): Void { return untyped __lua__('DoAutoSave')(); }
    
    /**
    * Fades the screen in.
    * duration: The time the fade should take, in milliseconds.
    */
    @:pure static inline function DoScreenFadeIn(duration: Int): Void { return untyped __lua__('DoScreenFadeIn')(duration); }
    
    /**
    * Fades the screen out.
    * duration: The time the fade should take, in milliseconds.
    */
    @:pure static inline function DoScreenFadeOut(duration: Int): Void { return untyped __lua__('DoScreenFadeOut')(duration); }
    @:pure static inline function DoesAnimDictExist(animDict: String): Int { return untyped __lua__('DoesAnimDictExist')(animDict); }
    @:pure static inline function DoesBlipExist(blip: Int): Int { return untyped __lua__('DoesBlipExist')(blip); }
    
    /**
    * Returns whether or not the passed camera handle exists.
    */
    @:pure static inline function DoesCamExist(cam: Int): Int { return untyped __lua__('DoesCamExist')(cam); }
    
    /**
    * Returns true only when the hook is active, will return false if the magnet is active
    */
    @:pure static inline function DoesCargobobHavePickUpRope(cargobob: Int): Int { return untyped __lua__('DoesCargobobHavePickUpRope')(cargobob); }
    
    /**
    * Returns true only when the hook is active, will return false if the magnet is active
    */
    @:pure static inline function IsCargobobHookActive(cargobob: Int): Int { return untyped __lua__('IsCargobobHookActive')(cargobob); }
    
    /**
    * Returns true only when the magnet is active, will return false if the hook is active
    * console hash 0x4778CA0A
    */
    @:pure static inline function DoesCargobobHavePickupMagnet(cargobob: Int): Int { return untyped __lua__('DoesCargobobHavePickupMagnet')(cargobob); }
    
    /**
    * Returns true only when the magnet is active, will return false if the hook is active
    * console hash 0x4778CA0A
    */
    @:pure static inline function IsCargobobMagnetActive(cargobob: Int): Int { return untyped __lua__('IsCargobobMagnetActive')(cargobob); }
    @:pure static inline function DoesCutsceneEntityExist(cutsceneEntName: String, modelHash: EitherType<String, Int>): Int { return untyped __lua__('DoesCutsceneEntityExist')(cutsceneEntName, modelHash); }
    
    /**
    * Returns true if a destructible object with this handle exists, false otherwise.
    */
    @:pure static inline function DoesDesObjectExist(handle: Int): Int { return untyped __lua__('DoesDesObjectExist')(handle); }
    
    /**
    * Returns true if a destructible object with this handle exists, false otherwise.
    */
    @:pure static inline function N_0x52af537a0c5b8aad(handle: Int): Int { return untyped __lua__('N_0x52af537a0c5b8aad')(handle); }
    
    /**
    * Always used prior a door functions Example
    * if (OBJECT::_DOES_DOOR_EXIST(doorHash))
    * {
    * OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);
    * }
    */
    @:pure static inline function DoesDoorExist(doorHash: EitherType<String, Int>): Int { return untyped __lua__('DoesDoorExist')(doorHash); }
    
    /**
    * Always used prior a door functions Example
    * if (OBJECT::_DOES_DOOR_EXIST(doorHash))
    * {
    * OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);
    * }
    */
    @:pure static inline function N_0xc153c43ea202c8c1(doorHash: EitherType<String, Int>): Int { return untyped __lua__('N_0xc153c43ea202c8c1')(doorHash); }
    @:pure static inline function DoesEntityBelongToThisScript(entity: Int, p1: Bool): Int { return untyped __lua__('DoesEntityBelongToThisScript')(entity, p1); }
    
    /**
    * Checks if the Entity exists
    */
    @:pure static inline function DoesEntityExist(entity: Int): Int { return untyped __lua__('DoesEntityExist')(entity); }
    @:pure static inline function DoesEntityHaveDrawable(entity: Int): Int { return untyped __lua__('DoesEntityHaveDrawable')(entity); }
    @:pure static inline function DoesEntityHavePhysics(entity: Int): Int { return untyped __lua__('DoesEntityHavePhysics')(entity); }
    
    /**
    * Checks via CVehicleModelInfo
    */
    @:pure static inline function DoesExtraExist(vehicle: Int, extraId: Int): Int { return untyped __lua__('DoesExtraExist')(vehicle, extraId); }
    @:pure static inline function DoesGroupExist(groupId: Int): Int { return untyped __lua__('DoesGroupExist')(groupId); }
    @:pure static inline function DoesNavmeshBlockingObjectExist(p0: Int): Int { return untyped __lua__('DoesNavmeshBlockingObjectExist')(p0); }
    @:pure static inline function N_0x0eaeb0db4b132399(p0: Int): Int { return untyped __lua__('N_0x0eaeb0db4b132399')(p0); }
    
    /**
    * p5 is usually 0.
    */
    @:pure static inline function DoesObjectOfTypeExistAtCoords(x: Int, y: Int, z: Int, radius: Int, hash: EitherType<String, Int>, p5: Bool): Int { return untyped __lua__('DoesObjectOfTypeExistAtCoords')(x, y, z, radius, hash, p5); }
    @:pure static inline function DoesParticleFxLoopedExist(ptfxHandle: Int): Int { return untyped __lua__('DoesParticleFxLoopedExist')(ptfxHandle); }
    
    /**
    * Returns whether the ped's blip is controlled by the game.
    * It's the default blip you can see on enemies during freeroam in singleplayer (the one that fades out quickly).
    */
    @:pure static inline function DoesPedHaveAiBlip(ped: Int): Int { return untyped __lua__('DoesPedHaveAiBlip')(ped); }
    @:pure static inline function DoesPickupExist(pickup: Int): Int { return untyped __lua__('DoesPickupExist')(pickup); }
    @:pure static inline function DoesPickupObjectExist(pickupObject: Int): Int { return untyped __lua__('DoesPickupObjectExist')(pickupObject); }
    
    /**
    * Ptr is correct
    */
    @:pure static inline function DoesRopeExist(rope: Int): Int { return untyped __lua__('DoesRopeExist')(rope); }
    @:pure static inline function DoesScenarioExistInArea(x: Int, y: Int, z: Int, radius: Int, b: Bool): Int { return untyped __lua__('DoesScenarioExistInArea')(x, y, z, radius, b); }
    
    /**
    * Occurrences in the b617d scripts:
    * "ARMY_GUARD",
    * "ARMY_HELI",
    * "Cinema_Downtown",
    * "Cinema_Morningwood",
    * "Cinema_Textile",
    * "City_Banks",
    * "Countryside_Banks",
    * "DEALERSHIP",
    * "GRAPESEED_PLANES",
    * "KORTZ_SECURITY",
    * "LOST_BIKERS",
    * "LSA_Planes",
    * "LSA_Planes",
    * "MP_POLICE",
    * "Observatory_Bikers",
    * "POLICE_POUND1",
    * "POLICE_POUND2",
    * "POLICE_POUND3",
    * "POLICE_POUND4",
    * "POLICE_POUND5"
    * "QUARRY",
    * "SANDY_PLANES",
    * "SCRAP_SECURITY",
    * "SEW_MACHINE",
    * "SOLOMON_GATE",
    * "Triathlon_1_Start",
    * "Triathlon_2_Start",
    * "Triathlon_3_Start"
    * Sometimes used with IS_SCENARIO_GROUP_ENABLED:
    * if (AI::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") &amp;&amp; (!AI::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
    * else if (AI::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {
    */
    @:pure static inline function DoesScenarioGroupExist(scenarioGroup: String): Int { return untyped __lua__('DoesScenarioGroupExist')(scenarioGroup); }
    @:pure static inline function DoesScenarioOfTypeExistInArea(p0: Int, p1: Int, p2: Int, p4: Int, p5: Bool): { a0: Int, a1: Int } { return untyped __lua__('DoesScenarioOfTypeExistInArea')(p0, p1, p2, p4, p5); }
    
    /**
    * For a full list, see here: pastebin.com/yLNWicUi
    */
    @:pure static inline function DoesScriptExist(scriptName: String): Int { return untyped __lua__('DoesScriptExist')(scriptName); }
    @:pure static inline function DoesScriptVehicleGeneratorExist(vehicleGenerator: Int): Int { return untyped __lua__('DoesScriptVehicleGeneratorExist')(vehicleGenerator); }
    
    /**
    * formerly _IS_STREAMED_SCRIPT_RUNNING
    * Jenkins hash: 0x19EAE282
    */
    @:pure static inline function DoesScriptWithNameHashExist(scriptHash: EitherType<String, Int>): Int { return untyped __lua__('DoesScriptWithNameHashExist')(scriptHash); }
    
    /**
    * formerly _IS_STREAMED_SCRIPT_RUNNING
    * Jenkins hash: 0x19EAE282
    */
    @:pure static inline function N_0xf86aa3c56ba31381(scriptHash: EitherType<String, Int>): Int { return untyped __lua__('N_0xf86aa3c56ba31381')(scriptHash); }
    
    /**
    * Checks if there is a cover point at position
    */
    @:pure static inline function DoesScriptedCoverPointExistAtCoords(x: Int, y: Int, z: Int): Int { return untyped __lua__('DoesScriptedCoverPointExistAtCoords')(x, y, z); }
    @:pure static inline function DoesTextBlockExist(gxt: String): Int { return untyped __lua__('DoesTextBlockExist')(gxt); }
    
    /**
    * Checks if the passed gxt name exists in the game files.
    */
    @:pure static inline function DoesTextLabelExist(gxt: String): Int { return untyped __lua__('DoesTextLabelExist')(gxt); }
    @:pure static inline function DoesVehicleExistWithDecorator(decorator: String): Int { return untyped __lua__('DoesVehicleExistWithDecorator')(decorator); }
    
    /**
    * This function is called before ADD_CLAN_DECAL_TO_VEHICLE to see if it needs to run. IDK if it's for clan decal or not, but the 2nd parameter might be decal index? It's always passed 0. Not sure what this function really does. But it does return 0 if the clan tag is not on, and 1 if it is.
    */
    @:pure static inline function DoesVehicleHaveDecal(vehicle: Int, p1: Int): Int { return untyped __lua__('DoesVehicleHaveDecal')(vehicle, p1); }
    
    /**
    * This function is called before ADD_CLAN_DECAL_TO_VEHICLE to see if it needs to run. IDK if it's for clan decal or not, but the 2nd parameter might be decal index? It's always passed 0. Not sure what this function really does. But it does return 0 if the clan tag is not on, and 1 if it is.
    */
    @:pure static inline function HasVehicleGotDecal(vehicle: Int, p1: Int): Int { return untyped __lua__('HasVehicleGotDecal')(vehicle, p1); }
    @:pure static inline function DoesVehicleHaveRoof(vehicle: Int): Int { return untyped __lua__('DoesVehicleHaveRoof')(vehicle); }
    
    /**
    * Maximum amount of vehicles with vehicle stuck check appears to be 16.
    */
    @:pure static inline function DoesVehicleHaveStuckVehicleCheck(vehicle: Int): Int { return untyped __lua__('DoesVehicleHaveStuckVehicleCheck')(vehicle); }
    @:pure static inline function DoesVehicleHaveWeapons(vehicle: Int): Int { return untyped __lua__('DoesVehicleHaveWeapons')(vehicle); }
    @:pure static inline function DoesWeaponTakeWeaponComponent(weaponHash: EitherType<String, Int>, componentHash: EitherType<String, Int>): Int { return untyped __lua__('DoesWeaponTakeWeaponComponent')(weaponHash, componentHash); }
    
    /**
    * when you set locked to 0 the door open and to 1 the door close
    * OBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0);  //door open
    * OBJECT::_9B12F9A24FABEDB0(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0);  //door close
    * p5-7 - Rot?
    */
    @:pure static inline function DoorControl(doorHash: EitherType<String, Int>, x: Int, y: Int, z: Int, locked: Bool, p5: Int, p6: Int, p7: Int): Void { return untyped __lua__('DoorControl')(doorHash, x, y, z, locked, p5, p6, p7); }
    
    /**
    * Downloads prod.cloud.rockstargames.com/titles/gta5/&lt;platform&gt;/check.json in the same manner that NETWORK_REQUEST_CLOUD_TUNABLES downloads the tunables.
    */
    @:pure static inline function DownloadCheck(): Void { return untyped __lua__('DownloadCheck')(); }
    
    /**
    * Downloads prod.cloud.rockstargames.com/titles/gta5/&lt;platform&gt;/check.json in the same manner that NETWORK_REQUEST_CLOUD_TUNABLES downloads the tunables.
    */
    @:pure static inline function N_0x4f18196c8d38768d(): Void { return untyped __lua__('N_0x4f18196c8d38768d')(); }
    
    /**
    * x,y,z = start pos
    * x2,y2,z2 = end pos
    * Draw's a 3D Box between the two x,y,z coords.
    * --------------
    * Keep in mind that the edges of the box do only align to the worlds base-vectors. Therefore something like rotation cannot be applied. That means this function is pretty much useless, unless you want a static unicolor box somewhere.
    * I recommend using a predefined function to call this.
    * [VB.NET]
    * Public Sub DrawBox(a As Vector3, b As Vector3, col As Color)
    * [Function].Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A)
    * End Sub
    * [C#]
    * public void DrawBox(Vector3 a, Vector3 b, Color col)
    * {
    * Function.Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A);
    * }
    */
    @:pure static inline function DrawBox(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('DrawBox')(x1, y1, z1, x2, y2, z2, red, green, blue, alpha); }
    
    /**
    * NOTE: Debugging functions are not present in the retail version of the game.
    */
    @:pure static inline function DrawDebugBox(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('DrawDebugBox')(x1, y1, z1, x2, y2, z2, red, green, blue, alpha); }
    
    /**
    * NOTE: Debugging functions are not present in the retail version of the game.
    */
    @:pure static inline function DrawDebugCross(x: Int, y: Int, z: Int, size: Int, red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('DrawDebugCross')(x, y, z, size, red, green, blue, alpha); }
    
    /**
    * NOTE: Debugging functions are not present in the retail version of the game.
    */
    @:pure static inline function DrawDebugLine(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('DrawDebugLine')(x1, y1, z1, x2, y2, z2, red, green, blue, alpha); }
    
    /**
    * NOTE: Debugging functions are not present in the retail version of the game.
    */
    @:pure static inline function DrawDebugLineWithTwoColours(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, r1: Int, g1: Int, b1: Int, r2: Int, g2: Int, b2: Int, alpha1: Int, alpha2: Int): Void { return untyped __lua__('DrawDebugLineWithTwoColours')(x1, y1, z1, x2, y2, z2, r1, g1, b1, r2, g2, b2, alpha1, alpha2); }
    
    /**
    * NOTE: Debugging functions are not present in the retail version of the game.
    */
    @:pure static inline function DrawDebugSphere(x: Int, y: Int, z: Int, radius: Int, red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('DrawDebugSphere')(x, y, z, radius, red, green, blue, alpha); }
    
    /**
    * NOTE: Debugging functions are not present in the retail version of the game.
    */
    @:pure static inline function DrawDebugText(text: String, x: Int, y: Int, z: Int, red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('DrawDebugText')(text, x, y, z, red, green, blue, alpha); }
    
    /**
    * NOTE: Debugging functions are not present in the retail version of the game.
    */
    @:pure static inline function DrawDebugText_2d(text: String, x: Int, y: Int, z: Int, red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('DrawDebugText_2d')(text, x, y, z, red, green, blue, alpha); }
    @:pure static inline function DrawLightWithRange(posX: Int, posY: Int, posZ: Int, colorR: Int, colorG: Int, colorB: Int, range: Int, intensity: Int): Void { return untyped __lua__('DrawLightWithRange')(posX, posY, posZ, colorR, colorG, colorB, range, intensity); }
    @:pure static inline function DrawLightWithRangeAndShadow(x: Int, y: Int, z: Int, r: Int, g: Int, b: Int, range: Int, intensity: Int, shadow: Int): Void { return untyped __lua__('DrawLightWithRangeAndShadow')(x, y, z, r, g, b, range, intensity, shadow); }
    @:pure static inline function DrawLightWithRangeWithShadow(x: Int, y: Int, z: Int, r: Int, g: Int, b: Int, range: Int, intensity: Int, shadow: Int): Void { return untyped __lua__('DrawLightWithRangeWithShadow')(x, y, z, r, g, b, range, intensity, shadow); }
    
    /**
    * Draws a depth-tested line from one point to another.
    * ----------------
    * x1, y1, z1 : Coordinates for the first point
    * x2, y2, z2 : Coordinates for the second point
    * r, g, b, alpha : Color with RGBA-Values
    * I recommend using a predefined function to call this.
    * [VB.NET]
    * Public Sub DrawLine(from As Vector3, [to] As Vector3, col As Color)
    * [Function].Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, [to].X, [to].Y, [to].Z, col.R, col.G, col.B, col.A)
    * End Sub
    * [C#]
    * public void DrawLine(Vector3 from, Vector3 to, Color col)
    * {
    * Function.Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, to.X, to.Y, to.Z, col.R, col.G, col.B, col.A);
    * }
    */
    @:pure static inline function DrawLine(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('DrawLine')(x1, y1, z1, x2, y2, z2, red, green, blue, alpha); }
    
    /**
    * enum MarkerTypes
    * {
    * MarkerTypeUpsideDownCone = 0,
    * MarkerTypeVerticalCylinder = 1,
    * MarkerTypeThickChevronUp = 2,
    * MarkerTypeThinChevronUp = 3,
    * MarkerTypeCheckeredFlagRect = 4,
    * MarkerTypeCheckeredFlagCircle = 5,
    * MarkerTypeVerticleCircle = 6,
    * MarkerTypePlaneModel = 7,
    * MarkerTypeLostMCDark = 8,
    * MarkerTypeLostMCLight = 9,
    * MarkerTypeNumber0 = 10,
    * MarkerTypeNumber1 = 11,
    * MarkerTypeNumber2 = 12,
    * MarkerTypeNumber3 = 13,
    * MarkerTypeNumber4 = 14,
    * MarkerTypeNumber5 = 15,
    * MarkerTypeNumber6 = 16,
    * MarkerTypeNumber7 = 17,
    * MarkerTypeNumber8 = 18,
    * MarkerTypeNumber9 = 19,
    * MarkerTypeChevronUpx1 = 20,
    * MarkerTypeChevronUpx2 = 21,
    * MarkerTypeChevronUpx3 = 22,
    * MarkerTypeHorizontalCircleFat = 23,
    * MarkerTypeReplayIcon = 24,
    * MarkerTypeHorizontalCircleSkinny = 25,
    * MarkerTypeHorizontalCircleSkinny_Arrow = 26,
    * MarkerTypeHorizontalSplitArrowCircle = 27,
    * MarkerTypeDebugSphere = 28,
    * MarkerTypeDallorSign = 29,
    * MarkerTypeHorizontalBars = 30,
    * MarkerTypeWolfHead = 31
    * };
    * dirX/Y/Z represent a heading on each axis in which the marker should face, alternatively you can rotate each axis independently with rotX/Y/Z (and set dirX/Y/Z all to 0).
    * faceCamera - Rotates only the y-axis (the heading) towards the camera
    * p19 - no effect, default value in script is 2
    * rotate - Rotates only on the y-axis (the heading)
    * textureDict - Name of texture dictionary to load texture from (e.g. "GolfPutting")
    * textureName - Name of texture inside dictionary to load (e.g. "PuttingMarker")
    * drawOnEnts - Draws the marker onto any entities that intersect it
    * basically what he said, except textureDict and textureName are totally not char*, or if so, then they are always set to 0/NULL/nullptr in every script I checked, eg:
    * bj.c: graphics::draw_marker(6, vParam0, 0f, 0f, 1f, 0f, 0f, 0f, 4f, 4f, 4f, 240, 200, 80, iVar1, 0, 0, 2, 0, 0, 0, false);
    * his is what I used to draw an amber downward pointing chevron "V", has to be redrawn every frame.  The 180 is for 180 degrees rotation around the Y axis, the 50 is alpha, assuming max is 100, but it will accept 255.
    * GRAPHICS::DRAW_MARKER(2, v.x, v.y, v.z + 2, 0, 0, 0, 0, 180, 0, 2, 2, 2, 255, 128, 0, 50, 0, 1, 1, 0, 0, 0, 0);
    */
    @:pure static inline function DrawMarker(type: Int, posX: Int, posY: Int, posZ: Int, dirX: Int, dirY: Int, dirZ: Int, rotX: Int, rotY: Int, rotZ: Int, scaleX: Int, scaleY: Int, scaleZ: Int, red: Int, green: Int, blue: Int, alpha: Int, bobUpAndDown: Bool, faceCamera: Bool, p19: Int, rotate: Bool, textureDict: String, textureName: String, drawOnEnts: Bool): Void { return untyped __lua__('DrawMarker')(type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts); }
    
    /**
    * Draws a notification above the map and returns the notifications handle
    * Color syntax:
    * ~r~ = Red
    * ~b~ = Blue
    * ~g~ = Green
    * ~y~ = Yellow
    * ~p~ = Purple
    * ~o~ = Orange
    * ~c~ = Grey
    * ~m~ = Darker Grey
    * ~u~ = Black
    * ~n~ = New Line
    * ~s~ = Default White
    * ~w~ = White
    * ~h~ = Bold Text
    * ~nrt~ = ???
    * Special characters:
    * ?? = Rockstar Verified Icon (U+00A6:Broken Bar - Alt+0166)
    * ?? = Rockstar Icon (U+00F7:Division Sign - Alt+0247)
    * ??? = Rockstar Icon 2 (U+2211:N-Ary Summation)
    * Example C#:
    * Function.Call(Hash._ADD_TEXT_COMPONENT_STRING3, "Now I need you to bring the ~b~vehicle~w~ back to me!");
    */
    @:pure static inline function DrawNotification(blink: Bool, p1: Bool): Int { return untyped __lua__('DrawNotification')(blink, p1); }
    
    /**
    * Example:
    * UI::_SET_NOTIFICATION_TEXT_ENTRY("HUNT");
    * UI::_0xAA295B6F28BD587D("Hunting", "Hunting_Gold_128", 0, 109, "HUD_MED_UNLKED");
    */
    @:pure static inline function DrawNotificationIcon(p0: String, p1: String, p2: Int, p3: Int, p4: String): Int { return untyped __lua__('DrawNotificationIcon')(p0, p1, p2, p3, p4); }
    
    /**
    * Example:
    * UI::_SET_NOTIFICATION_TEXT_ENTRY("HUNT");
    * UI::_0xAA295B6F28BD587D("Hunting", "Hunting_Gold_128", 0, 109, "HUD_MED_UNLKED");
    */
    @:pure static inline function N_0xaa295b6f28bd587d(p0: String, p1: String, p2: Int, p3: Int, p4: String): Int { return untyped __lua__('N_0xaa295b6f28bd587d')(p0, p1, p2, p3, p4); }
    @:pure static inline function DrawNotification_2(blink: Bool, p1: Bool): Int { return untyped __lua__('DrawNotification_2')(blink, p1); }
    @:pure static inline function DrawNotification_3(blink: Bool, p1: Bool): Int { return untyped __lua__('DrawNotification_3')(blink, p1); }
    @:pure static inline function DrawNotification_4(blink: Bool, p1: Bool): Int { return untyped __lua__('DrawNotification_4')(blink, p1); }
    
    /**
    * x/y/z - Location of a vertex (in world coords), presumably.
    * ----------------
    * x1, y1, z1     : Coordinates for the first point
    * x2, y2, z2     : Coordinates for the second point
    * x3, y3, z3     : Coordinates for the third point
    * r, g, b, alpha : Color with RGBA-Values
    * Keep in mind that only one side of the drawn triangle is visible: It's the side, in which the vector-product of the vectors heads to: (b-a)x(c-a) Or (b-a)x(c-b).
    * But be aware: The function seems to work somehow differently. I have trouble having them drawn in rotated orientation. Try it yourself and if you somehow succeed, please edit this and post your solution.
    * I recommend using a predefined function to call this.
    * [VB.NET]
    * Public Sub DrawPoly(a As Vector3, b As Vector3, c As Vector3, col As Color)
    * [Function].Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A)
    * End Sub
    * [C#]
    * public void DrawPoly(Vector3 a, Vector3 b, Vector3 c, Color col)
    * {
    * Function.Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A);
    * }
    * BTW: Intersecting triangles are not supported: They overlap in the order they were called.
    */
    @:pure static inline function DrawPoly(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, x3: Int, y3: Int, z3: Int, red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('DrawPoly')(x1, y1, z1, x2, y2, z2, x3, y3, z3, red, green, blue, alpha); }
    
    /**
    * Draws a rectangle on the screen.
    * -x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)
    * -y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)
    * -width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)
    * -height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)
    * -R: Red part of the color. (0-255)
    * -G: Green part of the color. (0-255)
    * -B: Blue part of the color. (0-255)
    * -A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)
    * The total number of rectangles to be drawn in one frame is apparently limited to 399.
    */
    @:pure static inline function DrawRect(x: Int, y: Int, width: Int, height: Int, r: Int, g: Int, b: Int, a: Int): Void { return untyped __lua__('DrawRect')(x, y, width, height, r, g, b, a); }
    @:pure static inline function DrawScaleformMovie(scaleformHandle: Int, x: Int, y: Int, width: Int, height: Int, red: Int, green: Int, blue: Int, alpha: Int, unk: Int): Void { return untyped __lua__('DrawScaleformMovie')(scaleformHandle, x, y, width, height, red, green, blue, alpha, unk); }
    
    /**
    * unk is not used so no need
    */
    @:pure static inline function DrawScaleformMovieFullscreen(scaleform: Int, red: Int, green: Int, blue: Int, alpha: Int, unk: Int): Void { return untyped __lua__('DrawScaleformMovieFullscreen')(scaleform, red, green, blue, alpha, unk); }
    @:pure static inline function DrawScaleformMovieFullscreenMasked(scaleform1: Int, scaleform2: Int, red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('DrawScaleformMovieFullscreenMasked')(scaleform1, scaleform2, red, green, blue, alpha); }
    @:pure static inline function DrawScaleformMovie_3d(scaleform: Int, posX: Int, posY: Int, posZ: Int, rotX: Int, rotY: Int, rotZ: Int, p7: Int, p8: Int, p9: Int, scaleX: Int, scaleY: Int, scaleZ: Int, p13: Int): Void { return untyped __lua__('DrawScaleformMovie_3d')(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, p13); }
    @:pure static inline function N_0x87d51d72255d4e78(scaleform: Int, posX: Int, posY: Int, posZ: Int, rotX: Int, rotY: Int, rotZ: Int, p7: Int, p8: Int, p9: Int, scaleX: Int, scaleY: Int, scaleZ: Int, p13: Int): Void { return untyped __lua__('N_0x87d51d72255d4e78')(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, p13); }
    
    /**
    * what the heck does this one do differently from the one above?
    */
    @:pure static inline function DrawScaleformMovie_3dNonAdditive(scaleform: Int, posX: Int, posY: Int, posZ: Int, rotX: Int, rotY: Int, rotZ: Int, p7: Int, p8: Int, p9: Int, scaleX: Int, scaleY: Int, scaleZ: Int, p13: Int): Void { return untyped __lua__('DrawScaleformMovie_3dNonAdditive')(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, p13); }
    
    /**
    * what the heck does this one do differently from the one above?
    */
    @:pure static inline function N_0x1ce592fdc749d6f5(scaleform: Int, posX: Int, posY: Int, posZ: Int, rotX: Int, rotY: Int, rotZ: Int, p7: Int, p8: Int, p9: Int, scaleX: Int, scaleY: Int, scaleZ: Int, p13: Int): Void { return untyped __lua__('N_0x1ce592fdc749d6f5')(scaleform, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ, p13); }
    
    /**
    * Parameters:
    * * pos - coordinate where the spotlight is located
    * * dir - the direction vector the spotlight should aim at from its current position
    * * r,g,b - color of the spotlight
    * * distance - the maximum distance the light can reach
    * * brightness - the brightness of the light
    * * roundness - "smoothness" of the circle edge
    * * radius - the radius size of the spotlight
    * * falloff - the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg)
    * Example in C# (spotlight aims at the closest vehicle):
    * Vector3 myPos = Game.Player.Character.Position;
    * Vehicle nearest = World.GetClosestVehicle(myPos , 1000f);
    * Vector3 destinationCoords = nearest.Position;
    * Vector3 dirVector = destinationCoords - myPos;
    * dirVector.Normalize();
    * Function.Call(Hash.DRAW_SPOT_LIGHT, pos.X, pos.Y, pos.Z, dirVector.X, dirVector.Y, dirVector.Z, 255, 255, 255, 100.0f, 1f, 0.0f, 13.0f, 1f);
    */
    @:pure static inline function DrawSpotLight(posX: Int, posY: Int, posZ: Int, dirX: Int, dirY: Int, dirZ: Int, colorR: Int, colorG: Int, colorB: Int, distance: Int, brightness: Int, roundness: Int, radius: Int, falloff: Int): Void { return untyped __lua__('DrawSpotLight')(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff); }
    @:pure static inline function DrawSpotLightWithShadow(posX: Int, posY: Int, posZ: Int, dirX: Int, dirY: Int, dirZ: Int, colorR: Int, colorG: Int, colorB: Int, distance: Int, brightness: Int, roundness: Int, radius: Int, falloff: Int, shadow: Int): Void { return untyped __lua__('DrawSpotLightWithShadow')(posX, posY, posZ, dirX, dirY, dirZ, colorR, colorG, colorB, distance, brightness, roundness, radius, falloff, shadow); }
    
    /**
    * Draws a 2D sprite on the screen.
    * Parameters:
    * textureDict - Name of texture dictionary to load texture from (e.g. "CommonMenu", "MPWeaponsCommon", etc.)
    * textureName - Name of texture to load from texture dictionary (e.g. "last_team_standing_icon", "tennis_icon", etc.)
    * screenX/Y - Screen offset (0.5 = center)
    * scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)
    * heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees
    * red,green,blue - Sprite color (default = 255/255/255)
    * alpha - if set to '2' it will grab all entitys in the game on call
    * alpha - why would it do that and where would it output the entites. And shouldn't it the alpha color for this param?
    */
    @:pure static inline function DrawSprite(textureDict: String, textureName: String, screenX: Int, screenY: Int, width: Int, height: Int, heading: Int, red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('DrawSprite')(textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha); }
    
    /**
    * All calls to this native are preceded by calls to GRAPHICS::_0x61BB1D9B3A95D802 and GRAPHICS::_0xC6372ECD45D73BCD, respectively.
    * "act_cinema.ysc", line 1483:
    * UI::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375);
    * UI::SET_TEXT_RENDER_ID(l_AE);
    * GRAPHICS::_0x61BB1D9B3A95D802(4);
    * GRAPHICS::_0xC6372ECD45D73BCD(1);
    * if (GRAPHICS::_0x0AD973CA1E077B60(${movie_arthouse})) {
    * GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255);
    * } else {
    * GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
    * }
    * "am_mp_property_int.ysc", line 102545:
    * if (ENTITY::DOES_ENTITY_EXIST(a_2._f3)) {
    * if (UI::IS_NAMED_RENDERTARGET_LINKED(ENTITY::GET_ENTITY_MODEL(a_2._f3))) {
    * UI::SET_TEXT_RENDER_ID(a_2._f1);
    * GRAPHICS::_0x61BB1D9B3A95D802(4);
    * GRAPHICS::_0xC6372ECD45D73BCD(1);
    * GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
    * if (GRAPHICS::GET_TV_CHANNEL() == -1) {
    * sub_a8fa5(a_2, 1);
    * } else {
    * sub_a8fa5(a_2, 1);
    * GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a_2._f3);
    * }
    * UI::SET_TEXT_RENDER_ID(UI::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID());
    * }
    * }
    */
    @:pure static inline function DrawTvChannel(xPos: Int, yPos: Int, xScale: Int, yScale: Int, rotation: Int, red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('DrawTvChannel')(xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha); }
    @:pure static inline function DuplicateFunctionReference(referenceIdentity: String): String { return untyped __lua__('DuplicateFunctionReference')(referenceIdentity); }
    
    /**
    * All found occurrences in b678d:
    * pastebin.com/ceu67jz8
    * Still not sure on the functionality of this native but it has something to do with dynamic mixer groups defined in dynamix.dat15
    */
    @:pure static inline function DynamicMixerRelatedFn(p0: Int, p1: String, p2: Int): Void { return untyped __lua__('DynamicMixerRelatedFn')(p0, p1, p2); }
    
    /**
    * All found occurrences in b678d:
    * pastebin.com/ceu67jz8
    * Still not sure on the functionality of this native but it has something to do with dynamic mixer groups defined in dynamix.dat15
    */
    @:pure static inline function N_0x153973ab99fe8980(p0: Int, p1: String, p2: Int): Void { return untyped __lua__('N_0x153973ab99fe8980')(p0, p1, p2); }
    @:pure static inline function EjectJb700Roof(vehicle: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('EjectJb700Roof')(vehicle, x, y, z); }
    @:pure static inline function N_0xe38cb9d7d39fdbcc(vehicle: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('N_0xe38cb9d7d39fdbcc')(vehicle, x, y, z); }
    @:pure static inline function EnableAlienBloodVfx(Toggle: Bool): Void { return untyped __lua__('EnableAlienBloodVfx')(Toggle); }
    @:pure static inline function N_0x9dce1f0f78260875(Toggle: Bool): Void { return untyped __lua__('N_0x9dce1f0f78260875')(Toggle); }
    @:pure static inline function EnableAllControlActions(inputGroup: Int): Void { return untyped __lua__('EnableAllControlActions')(inputGroup); }
    
    /**
    * Creates cartoon effect when Michel smokes the weed
    */
    @:pure static inline function EnableClownBloodVfx(toggle: Bool): Void { return untyped __lua__('EnableClownBloodVfx')(toggle); }
    
    /**
    * Creates cartoon effect when Michel smokes the weed
    */
    @:pure static inline function SetCameraEndtime(toggle: Bool): Void { return untyped __lua__('SetCameraEndtime')(toggle); }
    
    /**
    * control values and meaning: github.com/crosire/scripthookvdotnet/blob/dev/source/scripting/Controls.hpp
    * 0, 1 and 2 used in the scripts.
    * Control values from the decompiled scripts:
    * 0,1,2,3,4,5,6,8,9,10,11,14,15,16,17,19,21,22,24,25,26,30,31,32,33,34,35,36,
    * 37,44,46,47,59,60,65,68,69,70,71,72,73,74,75,76,79,80,81,82,86,95,98,99,100
    * ,101,114,140,141,143,172,173,174,175,176,177,178,179,180,181,187,188,189,19
    * 0,195,196,197,198,199,201,202,203,204,205,206,207,208,209,210,217,218,219,2
    * 20,221,225,228,229,230,231,234,235,236,237,238,239,240,241,242,245,246,257,
    * 261,262,263,264,286,287,288,289,337,338,339,340,341,342,343
    * INPUTGROUP_MOVE
    * INPUTGROUP_LOOK
    * INPUTGROUP_WHEEL
    * INPUTGROUP_CELLPHONE_NAVIGATE
    * INPUTGROUP_CELLPHONE_NAVIGATE_UD
    * INPUTGROUP_CELLPHONE_NAVIGATE_LR
    * INPUTGROUP_FRONTEND_DPAD_ALL
    * INPUTGROUP_FRONTEND_DPAD_UD
    * INPUTGROUP_FRONTEND_DPAD_LR
    * INPUTGROUP_FRONTEND_LSTICK_ALL
    * INPUTGROUP_FRONTEND_RSTICK_ALL
    * INPUTGROUP_FRONTEND_GENERIC_UD
    * INPUTGROUP_FRONTEND_GENERIC_LR
    * INPUTGROUP_FRONTEND_GENERIC_ALL
    * INPUTGROUP_FRONTEND_BUMPERS
    * INPUTGROUP_FRONTEND_TRIGGERS
    * INPUTGROUP_FRONTEND_STICKS
    * INPUTGROUP_SCRIPT_DPAD_ALL
    * INPUTGROUP_SCRIPT_DPAD_UD
    * INPUTGROUP_SCRIPT_DPAD_LR
    * INPUTGROUP_SCRIPT_LSTICK_ALL
    * INPUTGROUP_SCRIPT_RSTICK_ALL
    * INPUTGROUP_SCRIPT_BUMPERS
    * INPUTGROUP_SCRIPT_TRIGGERS
    * INPUTGROUP_WEAPON_WHEEL_CYCLE
    * INPUTGROUP_FLY
    * INPUTGROUP_SUB
    * INPUTGROUP_VEH_MOVE_ALL
    * INPUTGROUP_CURSOR
    * INPUTGROUP_CURSOR_SCROLL
    * INPUTGROUP_SNIPER_ZOOM_SECONDARY
    * INPUTGROUP_VEH_HYDRAULICS_CONTROL
    * Took those in IDA Pro.Not sure in which order they go
    */
    @:pure static inline function EnableControlAction(inputGroup: Int, control: Int, enable: Bool): Void { return untyped __lua__('EnableControlAction')(inputGroup, control, enable); }
    
    /**
    * Shows the crosshair even if it wouldn't show normally. Only works for one frame, so make sure to call it repeatedly.
    */
    @:pure static inline function EnableCrosshairThisFrame(): Void { return untyped __lua__('EnableCrosshairThisFrame')(); }
    
    /**
    * Please change back to _0x4895BDEA16E7C080 (hash collision)
    */
    @:pure static inline function EnableDeathbloodSeethrough(p0: Bool): Void { return untyped __lua__('EnableDeathbloodSeethrough')(p0); }
    
    /**
    * Found dispatch service types in the exe:
    * enum eDispatchServiceType
    * {
    * PoliceAutomobileDispatch = 1,
    * PoliceHelicopterDispatch = 2,
    * FireDepartmentDispatch = 3,
    * SwatAutomobileDispatch = 4,
    * AmbulanceDepartmentDispatch = 5,
    * PoliceRidersDispatch = 6,
    * PoliceVehicleRequest = 7,
    * PoliceRoadBlockDispatch = 8,
    * GangDispatch = 11,
    * SwatHelicopterDispatch = 12,
    * PoliceBoatDispatch = 13,
    * ArmyVehicleDispatch = 14,
    * BikerBackupDispatch = 15
    * };
    * By making toggle false it disables the dispatch.
    * curious if this is what they used when you toggled on and off cops in a GTA IV freemode you hosted. Sad they got rid of the option to make a private session without cops.
    * Also on x360 seems with or without neverWanted on, setting these to all false in SP of course doesn't seem to work. I would understand getting stars, but cops are still dispatched and combat you.
    */
    @:pure static inline function EnableDispatchService(dispatchService: Int, toggle: Bool): Void { return untyped __lua__('EnableDispatchService')(dispatchService, toggle); }
    
    /**
    * Found dispatch service types in the exe:
    * enum eDispatchServiceType
    * {
    * PoliceAutomobileDispatch = 1,
    * PoliceHelicopterDispatch = 2,
    * FireDepartmentDispatch = 3,
    * SwatAutomobileDispatch = 4,
    * AmbulanceDepartmentDispatch = 5,
    * PoliceRidersDispatch = 6,
    * PoliceVehicleRequest = 7,
    * PoliceRoadBlockDispatch = 8,
    * GangDispatch = 11,
    * SwatHelicopterDispatch = 12,
    * PoliceBoatDispatch = 13,
    * ArmyVehicleDispatch = 14,
    * BikerBackupDispatch = 15
    * };
    * By making toggle false it disables the dispatch.
    * curious if this is what they used when you toggled on and off cops in a GTA IV freemode you hosted. Sad they got rid of the option to make a private session without cops.
    * Also on x360 seems with or without neverWanted on, setting these to all false in SP of course doesn't seem to work. I would understand getting stars, but cops are still dispatched and combat you.
    */
    @:pure static inline function N_0xdc0f817884cdd856(dispatchService: Int, toggle: Bool): Void { return untyped __lua__('N_0xdc0f817884cdd856')(dispatchService, toggle); }
    
    /**
    * More info: http://gtaforums.com/topic/836367-adding-props-to-interiors/
    */
    @:pure static inline function EnableInteriorProp(interiorID: Int, propName: String): Void { return untyped __lua__('EnableInteriorProp')(interiorID, propName); }
    
    /**
    * More info: http://gtaforums.com/topic/836367-adding-props-to-interiors/
    */
    @:pure static inline function N_0x55e86af2712b36a1(interiorID: Int, propName: String): Void { return untyped __lua__('N_0x55e86af2712b36a1')(interiorID, propName); }
    
    /**
    * Enables laser sight on any weapon.
    * It doesn't work. Neither on tick nor OnKeyDown
    */
    @:pure static inline function EnableLaserSightRendering(toggle: Bool): Void { return untyped __lua__('EnableLaserSightRendering')(toggle); }
    @:pure static inline function EnableMovieSubtitles(toggle: Bool): Void { return untyped __lua__('EnableMovieSubtitles')(toggle); }
    @:pure static inline function EnableScriptBrainSet(brainSet: Int): Void { return untyped __lua__('EnableScriptBrainSet')(brainSet); }
    @:pure static inline function EnableSpecialAbility(player: Int, toggle: Bool): Void { return untyped __lua__('EnableSpecialAbility')(player, toggle); }
    @:pure static inline function EnableStuntJumpSet(p0: Int): Void { return untyped __lua__('EnableStuntJumpSet')(p0); }
    
    /**
    * Makes the ped jump around like they're in a tennis match
    */
    @:pure static inline function EnableTennisMode(ped: Int, toggle: Bool, p2: Bool): Void { return untyped __lua__('EnableTennisMode')(ped, toggle, p2); }
    @:pure static inline function EndFindKvp(handle: Int): Void { return untyped __lua__('EndFindKvp')(handle); }
    @:pure static inline function EndFindObject(findHandle: Int): Void { return untyped __lua__('EndFindObject')(findHandle); }
    @:pure static inline function EndFindPed(findHandle: Int): Void { return untyped __lua__('EndFindPed')(findHandle); }
    @:pure static inline function EndFindPickup(findHandle: Int): Void { return untyped __lua__('EndFindPickup')(findHandle); }
    @:pure static inline function EndFindVehicle(findHandle: Int): Void { return untyped __lua__('EndFindVehicle')(findHandle); }
    @:pure static inline function EndReplayStats(): Void { return untyped __lua__('EndReplayStats')(); }
    @:pure static inline function EndSrl(): Void { return untyped __lua__('EndSrl')(); }
    @:pure static inline function EndTextCommandClearPrint(): Void { return untyped __lua__('EndTextCommandClearPrint')(); }
    @:pure static inline function N_0xfcc75460aba29378(): Void { return untyped __lua__('N_0xfcc75460aba29378')(); }
    
    /**
    * shape goes from -1 to 50 (may be more).
    * p0 is always 0.
    * Example:
    * void FloatingHelpText(char* text)
    * {
    * BEGIN_TEXT_COMMAND_DISPLAY_HELP("STRING");
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * END_TEXT_COMMAND_DISPLAY_HELP (0, 0, 1, -1);
    * }
    * Image:
    * - imgbin.org/images/26209.jpg
    * more inputs/icons:
    * - pastebin.com/nqNYWMSB
    * Used to be known as _DISPLAY_HELP_TEXT_FROM_STRING_LABEL
    */
    @:pure static inline function EndTextCommandDisplayHelp(p0: Int, loop: Bool, beep: Bool, shape: Int): Void { return untyped __lua__('EndTextCommandDisplayHelp')(p0, loop, beep, shape); }
    
    /**
    * shape goes from -1 to 50 (may be more).
    * p0 is always 0.
    * Example:
    * void FloatingHelpText(char* text)
    * {
    * BEGIN_TEXT_COMMAND_DISPLAY_HELP("STRING");
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * END_TEXT_COMMAND_DISPLAY_HELP (0, 0, 1, -1);
    * }
    * Image:
    * - imgbin.org/images/26209.jpg
    * more inputs/icons:
    * - pastebin.com/nqNYWMSB
    * Used to be known as _DISPLAY_HELP_TEXT_FROM_STRING_LABEL
    */
    @:pure static inline function DisplayHelpTextFromStringLabel(p0: Int, loop: Bool, beep: Bool, shape: Int): Void { return untyped __lua__('DisplayHelpTextFromStringLabel')(p0, loop, beep, shape); }
    
    /**
    * After applying the properties to the text (See UI::SET_TEXT_), this will draw the text in the applied position. Also 0.0f &lt; x, y &lt; 1.0f, percentage of the axis.
    * Used to be known as _DRAW_TEXT
    */
    @:pure static inline function EndTextCommandDisplayText(x: Int, y: Int): Void { return untyped __lua__('EndTextCommandDisplayText')(x, y); }
    
    /**
    * After applying the properties to the text (See UI::SET_TEXT_), this will draw the text in the applied position. Also 0.0f &lt; x, y &lt; 1.0f, percentage of the axis.
    * Used to be known as _DRAW_TEXT
    */
    @:pure static inline function DrawText(x: Int, y: Int): Void { return untyped __lua__('DrawText')(x, y); }
    
    /**
    * Determines how many lines the text string will use when drawn on screen.
    * Must use 0x521FB041D93DD0E4 for setting up
    */
    @:pure static inline function EndTextCommandGetLineCount(x: Int, y: Int): Int { return untyped __lua__('EndTextCommandGetLineCount')(x, y); }
    
    /**
    * Determines how many lines the text string will use when drawn on screen.
    * Must use 0x521FB041D93DD0E4 for setting up
    */
    @:pure static inline function N_0x9040dfb09be75706(x: Int, y: Int): Int { return untyped __lua__('N_0x9040dfb09be75706')(x, y); }
    
    /**
    * In scripts font most of the time is passed as 1.
    * Use _BEGIN_TEXT_COMMAND_WIDTH
    * param is not font from what i've tested
    */
    @:pure static inline function EndTextCommandGetWidth(font: Int): Int { return untyped __lua__('EndTextCommandGetWidth')(font); }
    
    /**
    * In scripts font most of the time is passed as 1.
    * Use _BEGIN_TEXT_COMMAND_WIDTH
    * param is not font from what i've tested
    */
    @:pure static inline function GetTextScreenWidth(font: Int): Int { return untyped __lua__('GetTextScreenWidth')(font); }
    @:pure static inline function EndTextCommandIsMessageDisplayed(): Int { return untyped __lua__('EndTextCommandIsMessageDisplayed')(); }
    @:pure static inline function N_0x8a9ba1ab3e237613(): Int { return untyped __lua__('N_0x8a9ba1ab3e237613')(); }
    @:pure static inline function EndTextCommandIsThisHelpMessageBeingDisplayed(p0: Int): Int { return untyped __lua__('EndTextCommandIsThisHelpMessageBeingDisplayed')(p0); }
    @:pure static inline function N_0x10bddbfc529428dd(p0: Int): Int { return untyped __lua__('N_0x10bddbfc529428dd')(p0); }
    @:pure static inline function EndTextCommandObjective(p0: Bool): Void { return untyped __lua__('EndTextCommandObjective')(p0); }
    @:pure static inline function N_0xcfdbdf5ae59ba0f4(p0: Bool): Void { return untyped __lua__('N_0xcfdbdf5ae59ba0f4')(p0); }
    
    /**
    * Draws the subtitle at middle center of the screen.
    * int duration = time in milliseconds to show text on screen before disappearing
    * drawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished
    * Used to be known as _DRAW_SUBTITLE_TIMED
    */
    @:pure static inline function EndTextCommandPrint(duration: Int, drawImmediately: Bool): Void { return untyped __lua__('EndTextCommandPrint')(duration, drawImmediately); }
    
    /**
    * Draws the subtitle at middle center of the screen.
    * int duration = time in milliseconds to show text on screen before disappearing
    * drawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished
    * Used to be known as _DRAW_SUBTITLE_TIMED
    */
    @:pure static inline function DrawSubtitleTimed(duration: Int, drawImmediately: Bool): Void { return untyped __lua__('DrawSubtitleTimed')(duration, drawImmediately); }
    @:pure static inline function EndTextCommandScaleformString(): Void { return untyped __lua__('EndTextCommandScaleformString')(); }
    @:pure static inline function EndTextComponent(): Void { return untyped __lua__('EndTextComponent')(); }
    @:pure static inline function EndTextCommandScaleformString_2(): Void { return untyped __lua__('EndTextCommandScaleformString_2')(); }
    @:pure static inline function N_0xae4e8157d9ecf087(): Void { return untyped __lua__('N_0xae4e8157d9ecf087')(); }
    @:pure static inline function EndTextCommandSetBlipName(blip: Int): Void { return untyped __lua__('EndTextCommandSetBlipName')(blip); }
    @:pure static inline function EndTextCommandTimer(p0: Bool): Void { return untyped __lua__('EndTextCommandTimer')(p0); }
    @:pure static inline function N_0xa86911979638106f(p0: Bool): Void { return untyped __lua__('N_0xa86911979638106f')(p0); }
    @:pure static inline function ExecuteCommand(commandString: String): Void { return untyped __lua__('ExecuteCommand')(commandString); }
    
    /**
    * Appears only 3 times in the scripts, more specifically in michael1.ysc
    * Console hash: 0x64ddb07d
    */
    @:pure static inline function ExpandWorldLimits(x: Int, y: Int, z: Int): Void { return untyped __lua__('ExpandWorldLimits')(x, y, z); }
    
    /**
    * Appears only 3 times in the scripts, more specifically in michael1.ysc
    * Console hash: 0x64ddb07d
    */
    @:pure static inline function N_0x5006d96c995a5827(x: Int, y: Int, z: Int): Void { return untyped __lua__('N_0x5006d96c995a5827')(x, y, z); }
    
    /**
    * Forces the ped to fall back and kills it.
    */
    @:pure static inline function ExplodePedHead(ped: Int, weaponHash: EitherType<String, Int>): Void { return untyped __lua__('ExplodePedHead')(ped, weaponHash); }
    @:pure static inline function ExplodeProjectiles(ped: Int, weaponHash: EitherType<String, Int>, p2: Bool): Void { return untyped __lua__('ExplodeProjectiles')(ped, weaponHash, p2); }
    
    /**
    * Explodes a selected vehicle.
    * Vehicle vehicle = Vehicle you want to explode.
    * BOOL isAudible = If explosion makes a sound.
    * BOOL isInvisible = If the explosion is invisible or not.
    * First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
    */
    @:pure static inline function ExplodeVehicle(vehicle: Int, isAudible: Bool, isInvisible: Bool): Void { return untyped __lua__('ExplodeVehicle')(vehicle, isAudible, isInvisible); }
    @:pure static inline function ExplodeVehicleInCutscene(vehicle: Int, p1: Bool): Void { return untyped __lua__('ExplodeVehicleInCutscene')(vehicle, p1); }
    
    /**
    * Fades nearby decals within the range specified
    */
    @:pure static inline function FadeDecalsInRange(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('FadeDecalsInRange')(p0, p1, p2, p3, p4); }
    
    /**
    * Hardcoded to not work in SP.
    */
    @:pure static inline function FadeOutLocalPlayer(p0: Bool): Void { return untyped __lua__('FadeOutLocalPlayer')(p0); }
    @:pure static inline function FilloutPmPlayerList(p1: Int, p2: Int): { a0: Int, a1: Int } { return untyped __lua__('FilloutPmPlayerList')(p1, p2); }
    @:pure static inline function FilloutPmPlayerListWithNames(p2: Int, p3: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('FilloutPmPlayerListWithNames')(p2, p3); }
    
    /**
    * In the script "player_scene_t_bbfight.c4":
    * "if (ENTITY::FIND_ANIM_EVENT_PHASE(&amp;l_16E, &amp;l_19F[v_4 -- [[16]] ], v_9, &amp;v_A, &amp;v_B))"
    * -- &amp;l_16E (p0) is requested as an anim dictionary earlier in the script.
    * -- &amp;l_19F[v_4 -- [[16]] ] (p1) is used in other natives in the script as the "animation" param.
    * -- v_9 (p2) is instantiated as "victim_fall"; I'm guessing that's another anim
    * --v_A and v_B (p3 &amp; p4) are both set as -1.0, but v_A is used immediately after this native for:
    * "if (v_A &lt; ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))"
    * Both v_A and v_B are seemingly used to contain both Vector3's and floats, so I can't say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though
    * -alphazolam
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    */
    @:pure static inline function FindAnimEventPhase(animDictionary: String, animName: String, p2: String): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('FindAnimEventPhase')(animDictionary, animName, p2); }
    @:pure static inline function FindFirstObject(outEntity: Int): Int { return untyped __lua__('FindFirstObject')(outEntity); }
    @:pure static inline function FindFirstPed(outEntity: Int): Int { return untyped __lua__('FindFirstPed')(outEntity); }
    @:pure static inline function FindFirstPickup(outEntity: Int): Int { return untyped __lua__('FindFirstPickup')(outEntity); }
    @:pure static inline function FindFirstVehicle(outEntity: Int): Int { return untyped __lua__('FindFirstVehicle')(outEntity); }
    @:pure static inline function FindKvp(handle: Int): String { return untyped __lua__('FindKvp')(handle); }
    @:pure static inline function FindNextObject(findHandle: Int, outEntity: Int): Int { return untyped __lua__('FindNextObject')(findHandle, outEntity); }
    @:pure static inline function FindNextPed(findHandle: Int, outEntity: Int): Int { return untyped __lua__('FindNextPed')(findHandle, outEntity); }
    @:pure static inline function FindNextPickup(findHandle: Int, outEntity: Int): Int { return untyped __lua__('FindNextPickup')(findHandle, outEntity); }
    @:pure static inline function FindNextVehicle(findHandle: Int, outEntity: Int): Int { return untyped __lua__('FindNextVehicle')(findHandle, outEntity); }
    @:pure static inline function FindRadioStationIndex(station: Int): Int { return untyped __lua__('FindRadioStationIndex')(station); }
    
    /**
    * Finds a position ahead of the player by predicting the players next actions.
    * The positions match path finding node positions.
    * When roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take.
    * =======================================================
    * I may sort this with alter research, but if someone
    * already knows please tell what the difference in
    * X2, Y2, Z2 is. I doubt it's rotation. Is it like
    * checkpoints where X1, Y1, Z1 is your/a position and
    * X2, Y2, Z2 is a given position ahead of that position?
    * =======================================================
    */
    @:pure static inline function FindSpawnPointInDirection(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, distance: Int): { a0: Int, a1: Array<Int> } { return untyped __lua__('FindSpawnPointInDirection')(x1, y1, z1, x2, y2, z2, distance); }
    @:pure static inline function FixVehicleWindow(vehicle: Int, index: Int): Int { return untyped __lua__('FixVehicleWindow')(vehicle, index); }
    
    /**
    * If set to true ability bar will flash
    */
    @:pure static inline function FlashAbilityBar(toggle: Bool): Void { return untyped __lua__('FlashAbilityBar')(toggle); }
    
    /**
    * adds a short flash to the Radar/Minimap
    * Usage: UI.FLASH_MINIMAP_DISPLAY
    */
    @:pure static inline function FlashMinimapDisplay(): Void { return untyped __lua__('FlashMinimapDisplay')(); }
    @:pure static inline function FlashWantedDisplay(p0: Bool): Int { return untyped __lua__('FlashWantedDisplay')(p0); }
    @:pure static inline function Floor(value: Int): Int { return untyped __lua__('Floor')(value); }
    
    /**
    * if value is set to true, and ambient siren sound will be played.
    * -------------------------------------------------------------------------
    * Appears to enable/disable an audio flag.
    */
    @:pure static inline function ForceAmbientSiren(value: Bool): Void { return untyped __lua__('ForceAmbientSiren')(value); }
    
    /**
    * if value is set to true, and ambient siren sound will be played.
    * -------------------------------------------------------------------------
    * Appears to enable/disable an audio flag.
    */
    @:pure static inline function N_0x552369f549563ad5(value: Bool): Void { return untyped __lua__('N_0x552369f549563ad5')(value); }
    
    /**
    * used with 1,2,8,64,128 in the scripts
    */
    @:pure static inline function ForceCleanup(cleanupFlags: Int): Void { return untyped __lua__('ForceCleanup')(cleanupFlags); }
    
    /**
    * PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME("pb_prostitute", 1); // Found in decompilation
    */
    @:pure static inline function ForceCleanupForAllThreadsWithThisName(name: String, cleanupFlags: Int): Void { return untyped __lua__('ForceCleanupForAllThreadsWithThisName')(name, cleanupFlags); }
    @:pure static inline function ForceCleanupForThreadWithThisId(id: Int, cleanupFlags: Int): Void { return untyped __lua__('ForceCleanupForThreadWithThisId')(id, cleanupFlags); }
    
    /**
    * Based on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter.
    */
    @:pure static inline function ForceEntityAiAndAnimationUpdate(entity: Int): Void { return untyped __lua__('ForceEntityAiAndAnimationUpdate')(entity); }
    
    /**
    * Some motionstate hashes are
    * 0xec17e58 (standing idle), 0xbac0f10b (nothing?), 0x3f67c6af (aiming with pistol 2-h), 0x422d7a25 (stealth), 0xbd8817db, 0x916e828c
    * and those for the strings
    * "motionstate_idle", "motionstate_walk", "motionstate_run", "motionstate_actionmode_idle", and "motionstate_actionmode_walk".
    * Regarding p2, p3 and p4: Most common is 0, 0, 0); followed by 0, 1, 0); and 1, 1, 0); in the scripts. p4 is very rarely something other than 0.
    * [31/03/2017] ins1de :
    * enum MotionState
    * {
    * StopRunning = -530524,
    * StopWalking = -668482597,
    * Idle = 247561816, // 1, 1, 0
    * Idl2 = -1871534317,
    * SkyDive =-1161760501, // 0, 1, 0
    * Stealth = 1110276645,
    * Sprint = -1115154469,
    * Swim = -1855028596,
    * Unknown1 = 1063765679,
    * Unknown2 = -633298724,
    * }
    */
    @:pure static inline function ForcePedMotionState(ped: Int, motionStateHash: EitherType<String, Int>, p2: Bool, p3: Bool, p4: Bool): Int { return untyped __lua__('ForcePedMotionState')(ped, motionStateHash, p2, p3, p4); }
    @:pure static inline function ForcePedToOpenParachute(ped: Int): Void { return untyped __lua__('ForcePedToOpenParachute')(ped); }
    
    /**
    * Does anyone know what this does? I know online modding isn't generally supported especially by the owner of this db, but I first thought this could be used to force ourselves into someones apartment, but I see now that isn't possible.
    */
    @:pure static inline function ForceRoomForEntity(entity: Int, interiorID: Int, roomHashKey: EitherType<String, Int>): Void { return untyped __lua__('ForceRoomForEntity')(entity, interiorID, roomHashKey); }
    
    /**
    * Exits the game and downloads a fresh social club update on next restart.
    */
    @:pure static inline function ForceSocialClubUpdate(): Void { return untyped __lua__('ForceSocialClubUpdate')(); }
    @:pure static inline function FormatFocusHeading(x: Int, y: Int, z: Int, rad: Int, p4: Int, p5: Int): Int { return untyped __lua__('FormatFocusHeading')(x, y, z, rad, p4, p5); }
    @:pure static inline function N_0x219c7b8d53e429fd(x: Int, y: Int, z: Int, rad: Int, p4: Int, p5: Int): Int { return untyped __lua__('N_0x219c7b8d53e429fd')(x, y, z, rad, p4, p5); }
    @:pure static inline function FreezeEntityPosition(entity: Int, toggle: Bool): Void { return untyped __lua__('FreezeEntityPosition')(entity, toggle); }
    @:pure static inline function FreezePedCameraRotation(ped: Int): Void { return untyped __lua__('FreezePedCameraRotation')(ped); }
    @:pure static inline function N_0xff287323b0e2c69a(ped: Int): Void { return untyped __lua__('N_0xff287323b0e2c69a')(ped); }
    @:pure static inline function FreezeRadioStation(radioStation: String): Void { return untyped __lua__('FreezeRadioStation')(radioStation); }
    
    /**
    * Usage example:
    * Public Function GenerateDirectionsToCoord(Pos As Vector3) As Tuple(Of String, Single, Single)
    * Dim f4, f5, f6 As New OutputArgument()
    * Native.Function.Call(Hash.GENERATE_DIRECTIONS_TO_COORD, Pos.X, Pos.Y, Pos.Z, True, f4, f5, f6)
    * Dim direction As String = f4.GetResult(Of Single)()
    * Return New Tuple(Of String, Single, Single)(direction.Substring(0, 1), f5.GetResult(Of Single)(), f6.GetResult(Of Single)())
    * End Function
    * p3 I use 1
    * direction:
    * 0 = You Have Arrive
    * 1 = Recalculating Route, Please make a u-turn where safe
    * 2 = Please Proceed the Highlighted Route
    * 3 = Keep Left (unsure)
    * 4 = In (distToNxJunction) Turn Left
    * 5 = In (distToNxJunction) Turn Right
    * 6 = Keep Right (unsure)
    * 7 = In (distToNxJunction) Go Straight Ahead
    * 8 = In (distToNxJunction) Join the freeway
    * 9 = In (distToNxJunction) Exit Freeway
    * return value set to 0 always
    */
    @:pure static inline function GenerateDirectionsToCoord(x: Int, y: Int, z: Int, p3: Bool): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('GenerateDirectionsToCoord')(x, y, z, p3); }
    
    /**
    * Returns current screen resolution.
    */
    @:pure static inline function GetActiveScreenResolution(): { a0: Int, a1: Int } { return untyped __lua__('GetActiveScreenResolution')(); }
    
    /**
    * Returns current screen resolution.
    */
    @:pure static inline function GetScreenActiveResolution(): { a0: Int, a1: Int } { return untyped __lua__('GetScreenActiveResolution')(); }
    @:pure static inline function GetActiveVehicleMissionType(veh: Int): Int { return untyped __lua__('GetActiveVehicleMissionType')(veh); }
    @:pure static inline function GetAllocatedStackSize(): Int { return untyped __lua__('GetAllocatedStackSize')(); }
    @:pure static inline function GetAmmoInClip(ped: Int, weaponHash: EitherType<String, Int>, ammo: Int): Int { return untyped __lua__('GetAmmoInClip')(ped, weaponHash, ammo); }
    
    /**
    * WEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0)
    * From decompiled scripts
    * Returns total ammo in weapon
    * GTALua Example :
    * natives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)
    */
    @:pure static inline function GetAmmoInPedWeapon(ped: Int, weaponhash: EitherType<String, Int>): Int { return untyped __lua__('GetAmmoInPedWeapon')(ped, weaponhash); }
    @:pure static inline function GetAngleBetween_2dVectors(x1: Int, y1: Int, x2: Int, y2: Int): Int { return untyped __lua__('GetAngleBetween_2dVectors')(x1, y1, x2, y2); }
    
    /**
    * Console Hash: 0x8B5E3E3D = GET_ANIM_DURATION
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    */
    @:pure static inline function GetAnimDuration(animDict: String, animName: String): Int { return untyped __lua__('GetAnimDuration')(animDict, animName); }
    @:pure static inline function GetAnimInitialOffsetPosition(animDict: String, animName: String, x: Int, y: Int, z: Int, xRot: Int, yRot: Int, zRot: Int, p8: Int, p9: Int): Array<Int> { return untyped __lua__('GetAnimInitialOffsetPosition')(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9); }
    @:pure static inline function GetAnimInitialOffsetRotation(animDict: String, animName: String, x: Int, y: Int, z: Int, xRot: Int, yRot: Int, zRot: Int, p8: Int, p9: Int): Array<Int> { return untyped __lua__('GetAnimInitialOffsetRotation')(animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9); }
    @:pure static inline function GetAspectRatio(b: Bool): Int { return untyped __lua__('GetAspectRatio')(b); }
    @:pure static inline function GetScreenAspectRatio(b: Bool): Int { return untyped __lua__('GetScreenAspectRatio')(b); }
    @:pure static inline function GetAudibleMusicTrackTextId(): Int { return untyped __lua__('GetAudibleMusicTrackTextId')(); }
    
    /**
    * p1 is always 0 in the scripts.
    */
    @:pure static inline function GetBestPedWeapon(ped: Int, p1: Bool): Int { return untyped __lua__('GetBestPedWeapon')(ped, p1); }
    @:pure static inline function GetBitsInRange(var_: Int, rangeStart: Int, rangeEnd: Int): Int { return untyped __lua__('GetBitsInRange')(var_, rangeStart, rangeEnd); }
    @:pure static inline function GetBlipAlpha(blip: Int): Int { return untyped __lua__('GetBlipAlpha')(blip); }
    @:pure static inline function GetBlipColour(blip: Int): Int { return untyped __lua__('GetBlipColour')(blip); }
    @:pure static inline function GetBlipCoords(blip: Int): Array<Int> { return untyped __lua__('GetBlipCoords')(blip); }
    
    /**
    * Returns the Blip handle of given Entity.
    */
    @:pure static inline function GetBlipFromEntity(entity: Int): Int { return untyped __lua__('GetBlipFromEntity')(entity); }
    @:pure static inline function GetBlipHudColour(blip: Int): Int { return untyped __lua__('GetBlipHudColour')(blip); }
    @:pure static inline function GetBlipInfoIdCoord(blip: Int): Array<Int> { return untyped __lua__('GetBlipInfoIdCoord')(blip); }
    @:pure static inline function GetBlipInfoIdDisplay(blip: Int): Int { return untyped __lua__('GetBlipInfoIdDisplay')(blip); }
    @:pure static inline function GetBlipInfoIdEntityIndex(blip: Int): Int { return untyped __lua__('GetBlipInfoIdEntityIndex')(blip); }
    @:pure static inline function GetBlipInfoIdIterator(): Int { return untyped __lua__('GetBlipInfoIdIterator')(); }
    
    /**
    * This function is hard-coded to always return 0.
    */
    @:pure static inline function GetBlipInfoIdPickupIndex(blip: Int): Int { return untyped __lua__('GetBlipInfoIdPickupIndex')(blip); }
    
    /**
    * Returns a value based on what the blip is attached to
    * 1
    * 2
    * 3
    * 4
    * 5
    * 6
    * 7
    */
    @:pure static inline function GetBlipInfoIdType(blip: Int): Int { return untyped __lua__('GetBlipInfoIdType')(blip); }
    
    /**
    * Blips Images + IDs:
    * gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
    */
    @:pure static inline function GetBlipSprite(blip: Int): Int { return untyped __lua__('GetBlipSprite')(blip); }
    
    /**
    * Console Hash: 0xE97A4F5E
    */
    @:pure static inline function GetBoatAnchor(vehicle: Int): Int { return untyped __lua__('GetBoatAnchor')(vehicle); }
    @:pure static inline function GetCamAnimCurrentPhase(cam: Int): Int { return untyped __lua__('GetCamAnimCurrentPhase')(cam); }
    @:pure static inline function GetCamCoord(cam: Int): Array<Int> { return untyped __lua__('GetCamCoord')(cam); }
    @:pure static inline function GetCamFarClip(cam: Int): Int { return untyped __lua__('GetCamFarClip')(cam); }
    @:pure static inline function GetCamFarDof(cam: Int): Int { return untyped __lua__('GetCamFarDof')(cam); }
    @:pure static inline function GetCamFov(cam: Int): Int { return untyped __lua__('GetCamFov')(cam); }
    
    /**
    * Returns the world matrix of the specified camera. To turn this into a view matrix, calculate the inverse.
    */
    @:pure static inline function GetCamMatrix(camera: Int): { a0: Array<Int>, a1: Array<Int>, a2: Array<Int>, a3: Array<Int> } { return untyped __lua__('GetCamMatrix')(camera); }
    @:pure static inline function GetCamNearClip(cam: Int): Int { return untyped __lua__('GetCamNearClip')(cam); }
    
    /**
    * The last parameter, as in other "ROT" methods, is usually 2.
    */
    @:pure static inline function GetCamRot(cam: Int, rotationOrder: Int): Array<Int> { return untyped __lua__('GetCamRot')(cam, rotationOrder); }
    
    /**
    * I named the beginning from Any to BOOL as this native is used in an if statement as well.
    */
    @:pure static inline function GetCamSplineNodeIndex(cam: Int): Int { return untyped __lua__('GetCamSplineNodeIndex')(cam); }
    
    /**
    * I'm pretty sure the parameter is the camera as usual, but I am not certain so I'm going to leave it as is.
    */
    @:pure static inline function GetCamSplineNodePhase(cam: Int): Int { return untyped __lua__('GetCamSplineNodePhase')(cam); }
    
    /**
    * Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.
    * (returns 1.0f when no nodes has been added, reached end of non existing spline)
    */
    @:pure static inline function GetCamSplinePhase(cam: Int): Int { return untyped __lua__('GetCamSplinePhase')(cam); }
    
    /**
    * Gets the position of the cargobob hook, in world coords.
    */
    @:pure static inline function GetCargobobHookPosition(cargobob: Int): Array<Int> { return untyped __lua__('GetCargobobHookPosition')(cargobob); }
    
    /**
    * Gets the position of the cargobob hook, in world coords.
    */
    @:pure static inline function N_0xcbdb9b923cacc92d(cargobob: Int): Array<Int> { return untyped __lua__('N_0xcbdb9b923cacc92d')(cargobob); }
    @:pure static inline function GetCauseOfMostRecentForceCleanup(): Int { return untyped __lua__('GetCauseOfMostRecentForceCleanup')(); }
    @:pure static inline function GetCgoffset(rope: Int): Array<Int> { return untyped __lua__('GetCgoffset')(rope); }
    @:pure static inline function GetClipSetForScriptedGunTask(p0: Int): String { return untyped __lua__('GetClipSetForScriptedGunTask')(p0); }
    @:pure static inline function GetClockDayOfMonth(): Int { return untyped __lua__('GetClockDayOfMonth')(); }
    
    /**
    * Gets the current day of the week.
    * 0: Sunday
    * 1: Monday
    * 2: Tuesday
    * 3: Wednesday
    * 4: Thursday
    * 5: Friday
    * 6: Saturday
    */
    @:pure static inline function GetClockDayOfWeek(): Int { return untyped __lua__('GetClockDayOfWeek')(); }
    
    /**
    * Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
    */
    @:pure static inline function GetClockHours(): Int { return untyped __lua__('GetClockHours')(); }
    
    /**
    * Gets the current ingame clock minute.
    */
    @:pure static inline function GetClockMinutes(): Int { return untyped __lua__('GetClockMinutes')(); }
    @:pure static inline function GetClockMonth(): Int { return untyped __lua__('GetClockMonth')(); }
    
    /**
    * Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life.
    */
    @:pure static inline function GetClockSeconds(): Int { return untyped __lua__('GetClockSeconds')(); }
    @:pure static inline function GetClockYear(): Int { return untyped __lua__('GetClockYear')(); }
    
    /**
    * Returns TRUE if it found something. FALSE if not.
    */
    @:pure static inline function GetClosestFirePos(x: Int, y: Int, z: Int): { a0: Int, a1: Array<Int> } { return untyped __lua__('GetClosestFirePos')(x, y, z); }
    
    /**
    * Get the closest vehicle node to a given position, unknown1 = 3.0, unknown2 = 0
    */
    @:pure static inline function GetClosestMajorVehicleNode(x: Int, y: Int, z: Int, unknown1: Int, unknown2: Int): { a0: Int, a1: Array<Int> } { return untyped __lua__('GetClosestMajorVehicleNode')(x, y, z, unknown1, unknown2); }
    
    /**
    * Has 8 params in the latest patches.
    * isMission - if true doesn't return mission objects
    */
    @:pure static inline function GetClosestObjectOfType(x: Int, y: Int, z: Int, radius: Int, modelHash: EitherType<String, Int>, isMission: Bool, p6: Bool, p7: Bool): Int { return untyped __lua__('GetClosestObjectOfType')(x, y, z, radius, modelHash, isMission, p6, p7); }
    
    /**
    * Gets the closest ped in a radius.
    * Ped Types:
    * Any ped = -1
    * Player = 1
    * Male = 4
    * Female = 5
    * Cop = 6
    * Human = 26
    * SWAT = 27
    * Animal = 28
    * Army = 29
    * ------------------
    * P4 P5 P7 P8
    * 1  0  x  x  = return nearest walking Ped
    * 1  x  0  x  = return nearest walking Ped
    * x  1  1  x  = return Ped you are using
    * 0  0  x  x  = no effect
    * 0  x  0  x  = no effect
    * x = can be 1 or 0. Does not have any obvious changes.
    * This function does not return ped who is:
    * 1. Standing still
    * 2. Driving
    * 3. Fleeing
    * 4. Attacking
    * This function only work if the ped is:
    * 1. walking normally.
    * 2. waiting to cross a road.
    * Note: PED::GET_PED_NEARBY_PEDS works for more peds.
    */
    @:pure static inline function GetClosestPed(x: Int, y: Int, z: Int, radius: Int, p4: Bool, p5: Bool, p7: Bool, p8: Bool, pedType: Int): { a0: Int, a1: Int } { return untyped __lua__('GetClosestPed')(x, y, z, radius, p4, p5, p7, p8, pedType); }
    
    /**
    * p1 seems to be always 1.0f in the scripts
    */
    @:pure static inline function GetClosestRoad(x: Int, y: Int, z: Int, p3: Int, p4: Int, p10: Bool): { a0: Int, a1: Array<Int>, a2: Array<Int>, a3: Int, a4: Int, a5: Int } { return untyped __lua__('GetClosestRoad')(x, y, z, p3, p4, p10); }
    
    /**
    * Example usage
    * VEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70)
    * x, y, z: Position to get closest vehicle to.
    * radius: Max radius to get a vehicle.
    * modelHash: Limit to vehicles with this model. 0 for any.
    * flags: The bitwise flags altering the function's behaviour.
    * Does not return police cars or helicopters.
    * It seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason
    * Only returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above.
    * These flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359.
    * Converted to binary, each bit probably represents a flag as explained regarding another native here: gtaforums.com/topic/822314-guide-driving-styles
    * Conversion of found flags to binary: pastebin.com/kghNFkRi
    * At exactly 16384 which is 0100000000000000 in binary and 4000 in hexadecimal only planes are returned.
    * It's probably more convenient to use worldGetAllVehicles(int *arr, int arrSize) and check the shortest distance yourself and sort if you want by checking the vehicle type with for example VEHICLE::IS_THIS_MODEL_A_BOAT
    * -------------------------------------------------------------------------
    * Conclusion: This native is not worth trying to use. Use something like this instead: pastebin.com/xiFdXa7h
    */
    @:pure static inline function GetClosestVehicle(x: Int, y: Int, z: Int, radius: Int, modelHash: EitherType<String, Int>, flags: Int): Int { return untyped __lua__('GetClosestVehicle')(x, y, z, radius, modelHash, flags); }
    
    /**
    * FYI: When falling through the map (or however you got under it) you will respawn when your player ped's height is &lt;= -200.0 meters (I think you all know this) and when in a vehicle you will actually respawn at the closest vehicle node.
    * ----------
    * Vector3 nodePos;
    * GET_CLOSEST_VEHICLE_NODE(x,y,z,&amp;nodePos,...)
    * p4 is either 0, 1 or 8. 1 means any path/road. 0 means node in the middle of the closest main (asphalt) road.
    * p5, p6 are always the same:
    * 0x40400000 (3.0), 0
    * p5 can also be 100.0 and p6 can be 2.5:
    * PATHFIND::GET_CLOSEST_VEHICLE_NODE(a_0, &amp;v_5, v_9, 100.0, 2.5)
    * Known node types: simple path/asphalt road, only asphalt road, water, under the map at always the same coords.
    * The node types follows a pattern. For example, every fourth node is of the type water i.e. 3, 7, 11, 15, 19, 23, 27, 31, 35, 39... 239. Could not see any difference between nodes within certain types.
    * Starting at 2, every fourth node is under the map, always same coords.
    * Same with only asphalt road (0, 4, 8, etc) and simple path/asphalt road (1, 5, 9, etc).
    * gtaforums.com/topic/843561-pathfind-node-types
    */
    @:pure static inline function GetClosestVehicleNode(x: Int, y: Int, z: Int, nodeType: Int, p5: Int, p6: Int): { a0: Int, a1: Array<Int> } { return untyped __lua__('GetClosestVehicleNode')(x, y, z, nodeType, p5, p6); }
    
    /**
    * p5, p6 and p7 seems to be about the same as p4, p5 and p6 for GET_CLOSEST_VEHICLE_NODE. p6 and/or p7 has something to do with finding a node on the same path/road and same direction(at least for this native, something to do with the heading maybe). Edit this when you find out more.
    * p5 is either 1 or 12. 1 means any path/road. 12, 8, 0 means node in the middle of the closest main (asphalt) road.
    * p6 is always 3.0
    * p7 is always 0.
    * Known node types: simple path/asphalt road, only asphalt road, water, under the map at always the same coords.
    * The node types follows a pattern. For example, every fourth node is of the type water i.e. 3, 7, 11, 15, 19, 23, 27, 31, 35, 39... 239. Could not see any difference between nodes within certain types.
    * Starting at 2, every fourth node is under the map, always same coords.
    * Same with only asphalt road (0, 4, 8, etc) and simple path/asphalt road (1, 5, 9, etc).
    * gtaforums.com/topic/843561-pathfind-node-types
    * Example of usage, moving vehicle to closest path/road:
    * Vector3 coords = ENTITY::GET_ENTITY_COORDS(playerVeh, true);
    * Vector3 closestVehicleNodeCoords;
    * float roadHeading;
    * PATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(coords.x, coords.y, coords.z, &amp;closestVehicleNodeCoords, &amp;roadHeading, 1, 3, 0);
    * ENTITY::SET_ENTITY_HEADING(playerVeh, roadHeading);
    * ENTITY::SET_ENTITY_COORDS(playerVeh, closestVehicleNodeCoords.x, closestVehicleNodeCoords.y, closestVehicleNodeCoords.z, 1, 0, 0, 1);
    * VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(playerVeh);
    * ------------------------------------------------------------------
    * C# Example (ins1de) : pastebin.com/fxtMWAHD
    */
    @:pure static inline function GetClosestVehicleNodeWithHeading(x: Int, y: Int, z: Int, nodeType: Int, p6: Int, p7: Int): { a0: Int, a1: Array<Int>, a2: Int } { return untyped __lua__('GetClosestVehicleNodeWithHeading')(x, y, z, nodeType, p6, p7); }
    @:pure static inline function GetCloudHatOpacity(): Int { return untyped __lua__('GetCloudHatOpacity')(); }
    @:pure static inline function N_0x20ac25e781ae4a84(): Int { return untyped __lua__('N_0x20ac25e781ae4a84')(); }
    @:pure static inline function GetCollisionNormalOfLastHitForEntity(entity: Int): Array<Int> { return untyped __lua__('GetCollisionNormalOfLastHitForEntity')(entity); }
    
    /**
    * p0: Ped Handle
    * p1: int i | 0 &lt;= i &lt;= 27
    * p1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:
    * &lt;BlindFireChance value="0.1"/&gt;
    * &lt;WeaponShootRateModifier value="1.0"/&gt;
    * &lt;TimeBetweenBurstsInCover value="1.25"/&gt;
    * &lt;BurstDurationInCover value="2.0"/&gt;
    * &lt;TimeBetweenPeeks value="10.0"/&gt;
    * &lt;WeaponAccuracy value="0.18"/&gt;
    * &lt;FightProficiency value="0.8"/&gt;
    * &lt;StrafeWhenMovingChance value="1.0"/&gt;
    * &lt;WalkWhenStrafingChance value="0.0"/&gt;
    * &lt;AttackWindowDistanceForCover value="55.0"/&gt;
    * &lt;TimeToInvalidateInjuredTarget value="9.0"/&gt;
    * &lt;TriggerChargeTime_Near value="4.0"/&gt;
    * &lt;TriggerChargeTime_Far value="10.0"/&gt;
    * -------------Confirmed by editing combatbehavior.meta:
    * p1:
    * 0=BlindFireChance
    * 1=BurstDurationInCover
    * 3=TimeBetweenBurstsInCover
    * 4=TimeBetweenPeeks
    * 5=StrafeWhenMovingChance
    * 8=WalkWhenStrafingChance
    * 11=AttackWindowDistanceForCover
    * 12=TimeToInvalidateInjuredTarget
    * 16=OptimalCoverDistance
    */
    @:pure static inline function GetCombatFloat(ped: Int, p1: Int): Int { return untyped __lua__('GetCombatFloat')(ped, p1); }
    @:pure static inline function GetContentCategory(p0: Int): Int { return untyped __lua__('GetContentCategory')(p0); }
    @:pure static inline function N_0xa7bab11e7c9c6c5a(p0: Int): Int { return untyped __lua__('N_0xa7bab11e7c9c6c5a')(p0); }
    @:pure static inline function GetContentDescriptionHash(p0: Int): Int { return untyped __lua__('GetContentDescriptionHash')(p0); }
    @:pure static inline function N_0x7cf0448787b23758(p0: Int): Int { return untyped __lua__('N_0x7cf0448787b23758')(p0); }
    @:pure static inline function GetContentFileVersion(p0: Int, p1: Int): Int { return untyped __lua__('GetContentFileVersion')(p0, p1); }
    @:pure static inline function N_0x37025b27d9b658b1(p0: Int, p1: Int): Int { return untyped __lua__('N_0x37025b27d9b658b1')(p0, p1); }
    
    /**
    * Return the mission id of a job.
    */
    @:pure static inline function GetContentId(p0: Int): String { return untyped __lua__('GetContentId')(p0); }
    
    /**
    * Return the mission id of a job.
    */
    @:pure static inline function N_0x55aa95f481d694d2(p0: Int): String { return untyped __lua__('N_0x55aa95f481d694d2')(p0); }
    @:pure static inline function GetContentUserId(p0: Int): String { return untyped __lua__('GetContentUserId')(p0); }
    @:pure static inline function N_0xcd67ad041a394c9c(p0: Int): String { return untyped __lua__('N_0xcd67ad041a394c9c')(p0); }
    
    /**
    * formerly called _GET_CONTROL_ACTION_NAME incorrectly
    * p2 appears to always be true.
    * p2 is unused variable in function.
    * EG:
    * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1)  -- [[INPUT_FRONTEND_ACCEPT (e.g. Enter button)]]
    * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1)  -- [[INPUT_FRONTEND_CANCEL (e.g. ESC button)]]
    * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1)  -- [[INPUT_CONTEXT (e.g. E button)]]
    * gtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function GetControlInstructionalButton(inputGroup: Int, control: Int, p2: Bool): String { return untyped __lua__('GetControlInstructionalButton')(inputGroup, control, p2); }
    
    /**
    * formerly called _GET_CONTROL_ACTION_NAME incorrectly
    * p2 appears to always be true.
    * p2 is unused variable in function.
    * EG:
    * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1)  -- [[INPUT_FRONTEND_ACCEPT (e.g. Enter button)]]
    * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1)  -- [[INPUT_FRONTEND_CANCEL (e.g. ESC button)]]
    * GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1)  -- [[INPUT_CONTEXT (e.g. E button)]]
    * gtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function N_0x0499d7b09fc9b407(inputGroup: Int, control: Int, p2: Bool): String { return untyped __lua__('N_0x0499d7b09fc9b407')(inputGroup, control, p2); }
    
    /**
    * Returns the value of CONTROLS::GET_CONTROL_VALUE Normalized (ie a real number value between -1 and 1)
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function GetControlNormal(inputGroup: Int, control: Int): Int { return untyped __lua__('GetControlNormal')(inputGroup, control); }
    
    /**
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function GetControlValue(inputGroup: Int, control: Int): Int { return untyped __lua__('GetControlValue')(inputGroup, control); }
    
    /**
    * 0 -&gt; up
    * 1 -&gt; lowering down
    * 2 -&gt; down
    * 3 -&gt; raising up
    */
    @:pure static inline function GetConvertibleRoofState(vehicle: Int): Int { return untyped __lua__('GetConvertibleRoofState')(vehicle); }
    
    /**
    * if (UI::_2309595AD6145265() == ${fe_menu_version_empty_no_background})
    * Seems to get the current frontend menu
    */
    @:pure static inline function GetCurrentFrontendMenu(): Int { return untyped __lua__('GetCurrentFrontendMenu')(); }
    
    /**
    * if (UI::_2309595AD6145265() == ${fe_menu_version_empty_no_background})
    * Seems to get the current frontend menu
    */
    @:pure static inline function N_0x2309595ad6145265(): Int { return untyped __lua__('N_0x2309595ad6145265')(); }
    
    /**
    * american = 0
    * french = 1
    * german = 2
    * italian =3
    * spanish = 4
    * portuguese = 5
    * polish = 6
    * russian = 7
    * korean = 8
    * chinese = 9
    * japanese = 10
    * mexican = 11
    */
    @:pure static inline function GetCurrentLanguageId(): Int { return untyped __lua__('GetCurrentLanguageId')(); }
    
    /**
    * american = 0
    * french = 1
    * german = 2
    * italian =3
    * spanish = 4
    * portuguese = 5
    * polish = 6
    * russian = 7
    * korean = 8
    * chinese = 9
    * japanese = 10
    * mexican = 11
    */
    @:pure static inline function GetUiLanguageId(): Int { return untyped __lua__('GetUiLanguageId')(); }
    
    /**
    * Returns the handle for the notification currently displayed on the screen.
    */
    @:pure static inline function GetCurrentNotification(): Int { return untyped __lua__('GetCurrentNotification')(); }
    
    /**
    * Returns the handle for the notification currently displayed on the screen.
    */
    @:pure static inline function N_0x82352748437638ca(): Int { return untyped __lua__('N_0x82352748437638ca')(); }
    
    /**
    * Example in VB
    * Public Shared Function GetVehicleCurrentWeapon(Ped As Ped) As Integer
    * Dim arg As New OutputArgument()
    * Native.Function.Call(Hash.GET_CURRENT_PED_VEHICLE_WEAPON, Ped, arg)
    * Return arg.GetResult(Of Integer)()
    * End Function
    * Usage:
    * If GetVehicleCurrentWeapon(Game.Player.Character) = -821520672 Then ...Do something
    * Note: -821520672 = VEHICLE_WEAPON_PLANE_ROCKET
    */
    @:pure static inline function GetCurrentPedVehicleWeapon(ped: Int, weaponHash: Int): Int { return untyped __lua__('GetCurrentPedVehicleWeapon')(ped, weaponHash); }
    
    /**
    * The return value seems to indicate returns true if the hash of the weapon object weapon equals the weapon hash.
    * p2 seems to be 1 most of the time.
    * p2 is not implemented
    * disassembly said that?
    */
    @:pure static inline function GetCurrentPedWeapon(ped: Int, p2: Bool): { a0: Int, a1: Int } { return untyped __lua__('GetCurrentPedWeapon')(ped, p2); }
    @:pure static inline function GetCurrentPedWeaponEntityIndex(ped: Int): Int { return untyped __lua__('GetCurrentPedWeaponEntityIndex')(ped); }
    @:pure static inline function GetCurrentPlaybackForVehicle(p0: Int): Int { return untyped __lua__('GetCurrentPlaybackForVehicle')(p0); }
    
    /**
    * Returns the name of the currently executing resource.
    * @return The name of the resource.
    */
    @:pure static inline function GetCurrentResourceName(): String { return untyped __lua__('GetCurrentResourceName')(); }
    @:pure static inline function GetCurrentScriptedConversationLine(): Int { return untyped __lua__('GetCurrentScriptedConversationLine')(); }
    @:pure static inline function GetCurrentWebsiteId(): Int { return untyped __lua__('GetCurrentWebsiteId')(); }
    @:pure static inline function GetCutsceneSectionPlaying(): Int { return untyped __lua__('GetCutsceneSectionPlaying')(); }
    @:pure static inline function GetCutsceneTime(): Int { return untyped __lua__('GetCutsceneTime')(); }
    @:pure static inline function GetCutsceneTotalDuration(): Int { return untyped __lua__('GetCutsceneTotalDuration')(); }
    
    /**
    * Takes the specified time and writes it to the structure specified in the second argument.
    * struct date_time
    * {
    * int year;
    * int PADDING1;
    * int month;
    * int PADDING2;
    * int day;
    * int PADDING3;
    * int hour;
    * int PADDING4;
    * int minute;
    * int PADDING5;
    * int second;
    * int PADDING6;
    * };
    */
    @:pure static inline function GetDateAndTimeFromUnixEpoch(unixEpoch: Int, timeStructure: Int): Void { return untyped __lua__('GetDateAndTimeFromUnixEpoch')(unixEpoch, timeStructure); }
    @:pure static inline function GetDeadPedPickupCoords(ped: Int, p1: Int, p2: Int): Array<Int> { return untyped __lua__('GetDeadPedPickupCoords')(ped, p1, p2); }
    @:pure static inline function GetDecalWashLevel(decal: Int): Int { return untyped __lua__('GetDecalWashLevel')(decal); }
    
    /**
    * This function is hard-coded to always return 1.
    */
    @:pure static inline function GetDefaultScriptRendertargetRenderId(): Int { return untyped __lua__('GetDefaultScriptRendertargetRenderId')(); }
    
    /**
    * Gets a destructible object's handle
    * Example:
    * OBJECT::_B48FCED898292E52(-809.9619750976562, 170.919, 75.7406997680664, 3.0, "des_tvsmash");
    * All found arguments for p4 starts with "des_" like "DES_FIB_Floor" and "des_shipsink".
    */
    @:pure static inline function GetDesObject(x: Int, y: Int, z: Int, rotation: Int, name: String): Int { return untyped __lua__('GetDesObject')(x, y, z, rotation, name); }
    
    /**
    * Gets a destructible object's handle
    * Example:
    * OBJECT::_B48FCED898292E52(-809.9619750976562, 170.919, 75.7406997680664, 3.0, "des_tvsmash");
    * All found arguments for p4 starts with "des_" like "DES_FIB_Floor" and "des_shipsink".
    */
    @:pure static inline function N_0xb48fced898292e52(x: Int, y: Int, z: Int, rotation: Int, name: String): Int { return untyped __lua__('N_0xb48fced898292e52')(x, y, z, rotation, name); }
    
    /**
    * Get a destrictible object's state.
    * Substract 1 to get the real state.
    * See _SET_DES_OBJECT_STATE to see the different states
    * For example, if the object just spawned (state 2), the native will return 3.
    */
    @:pure static inline function GetDesObjectState(handle: Int): Int { return untyped __lua__('GetDesObjectState')(handle); }
    
    /**
    * Get a destrictible object's state.
    * Substract 1 to get the real state.
    * See _SET_DES_OBJECT_STATE to see the different states
    * For example, if the object just spawned (state 2), the native will return 3.
    */
    @:pure static inline function N_0x899ba936634a322e(handle: Int): Int { return untyped __lua__('N_0x899ba936634a322e')(handle); }
    
    /**
    * control - c# works with (int)GTA.Control.CursorY / (int)GTA.Control.CursorX and returns the mouse movement (additive).
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function GetDisabledControlNormal(inputGroup: Int, control: Int): Int { return untyped __lua__('GetDisabledControlNormal')(inputGroup, control); }
    
    /**
    * Returns model name of vehicle in all caps. Needs to be displayed through localizing text natives to get proper display name.
    * -----------------------------------------------------------------------------------------------------------------------------------------
    * While often the case, this does not simply return the model name of the vehicle (which could be hashed to return the model hash). Variations of the same vehicle may also use the same display name.
    * -----------------------------------------------------------------------------------------------------------------------------------------
    * Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.
    * Using UI::_GET_LABEL_TEXT, you can get the localized name.
    * For a full list, see here: pastebin.com/wvpyS4kS (pastebin.com/dA3TbkZw)
    */
    @:pure static inline function GetDisplayNameFromVehicleModel(modelHash: EitherType<String, Int>): String { return untyped __lua__('GetDisplayNameFromVehicleModel')(modelHash); }
    
    /**
    * If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.
    * Consider using this faster native instead: SYSTEM::VDIST - DVIST always takes in consideration the 3D coordinates.
    */
    @:pure static inline function GetDistanceBetweenCoords(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, useZ: Bool): Int { return untyped __lua__('GetDistanceBetweenCoords')(x1, y1, z1, x2, y2, z2, useZ); }
    
    /**
    * dlcVehicleIndex takes a number from 0 - GET_NUM_DLC_VEHICLES() - 1.
    * outData is a struct of 3 8-byte items.
    * The Second item in the struct *(Hash *)(outData + 1) is the vehicle hash.
    */
    @:pure static inline function GetDlcVehicleData(dlcVehicleIndex: Int, outData: Int): Int { return untyped __lua__('GetDlcVehicleData')(dlcVehicleIndex, outData); }
    @:pure static inline function GetDlcVehicleFlags(dlcVehicleIndex: Int): Int { return untyped __lua__('GetDlcVehicleFlags')(dlcVehicleIndex); }
    
    /**
    * dlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS()
    */
    @:pure static inline function GetDlcVehicleModel(dlcVehicleIndex: Int): Int { return untyped __lua__('GetDlcVehicleModel')(dlcVehicleIndex); }
    
    /**
    * p0 seems to be the weapon index
    * p1 seems to be the weapon component index
    * struct DlcComponentData{
    * int attachBone;
    * int padding1;
    * int bActiveByDefault;
    * int padding2;
    * int unk;
    * int padding3;
    * int componentHash;
    * int padding4;
    * int unk2;
    * int padding5;
    * int componentCost;
    * int padding6;
    * char nameLabel[64];
    * char descLabel[64];
    * };
    */
    @:pure static inline function GetDlcWeaponComponentData(dlcWeaponIndex: Int, dlcWeapCompIndex: Int, ComponentDataPtr: Int): Int { return untyped __lua__('GetDlcWeaponComponentData')(dlcWeaponIndex, dlcWeapCompIndex, ComponentDataPtr); }
    
    /**
    * dlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.
    * struct DlcWeaponData
    * {
    * int emptyCheck; //use DLC1::_IS_DLC_DATA_EMPTY on this
    * int padding1;
    * int weaponHash;
    * int padding2;
    * int unk;
    * int padding3;
    * int weaponCost;
    * int padding4;
    * int ammoCost;
    * int padding5;
    * int ammoType;
    * int padding6;
    * int defaultClipSize;
    * int padding7;
    * char nameLabel[64];
    * char descLabel[64];
    * char desc2Label[64]; // usually "the" + name
    * char upperCaseNameLabel[64];
    * };
    */
    @:pure static inline function GetDlcWeaponData(dlcWeaponIndex: Int, outData: Int): Int { return untyped __lua__('GetDlcWeaponData')(dlcWeaponIndex, outData); }
    @:pure static inline function GetEntityAlpha(entity: Int): Int { return untyped __lua__('GetEntityAlpha')(entity); }
    
    /**
    * Returns a float value representing animation's current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1.
    * Example:
    * 0.000000 - mark the starting of animation.
    * 0.500000 - mark the midpoint of the animation.
    * 1.000000 - mark the end of animation.
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    */
    @:pure static inline function GetEntityAnimCurrentTime(entity: Int, animDict: String, animName: String): Int { return untyped __lua__('GetEntityAnimCurrentTime')(entity, animDict, animName); }
    
    /**
    * Returns a float value representing animation's total playtime in milliseconds.
    * Example:
    * GET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),"amb@world_human_yoga@female@base","base_b")
    * return 20800.000000
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    */
    @:pure static inline function GetEntityAnimTotalTime(entity: Int, animDict: String, animName: String): Int { return untyped __lua__('GetEntityAnimTotalTime')(entity, animDict, animName); }
    @:pure static inline function GetEntityAttachedTo(entity: Int): Int { return untyped __lua__('GetEntityAttachedTo')(entity); }
    @:pure static inline function GetEntityAttachedToTowTruck(towTruck: Int): Int { return untyped __lua__('GetEntityAttachedToTowTruck')(towTruck); }
    
    /**
    * Returns the index of the bone. If the bone was not found, -1 will be returned.
    * list:
    * pastebin.com/D7JMnX1g
    * BoneNames:
    * chassis,
    * windscreen,
    * seat_pside_r,
    * seat_dside_r,
    * bodyshell,
    * suspension_lm,
    * suspension_lr,
    * platelight,
    * attach_female,
    * attach_male,
    * bonnet,
    * boot,
    * chassis_dummy,	//Center of the dummy
    * chassis_Control,	//Not found yet
    * door_dside_f,	//Door left, front
    * door_dside_r,	//Door left, back
    * door_pside_f,	//Door right, front
    * door_pside_r,	//Door right, back
    * Gun_GripR,
    * windscreen_f,
    * platelight,	//Position where the light above the numberplate is located
    * VFX_Emitter,
    * window_lf,	//Window left, front
    * window_lr,	//Window left, back
    * window_rf,	//Window right, front
    * window_rr,	//Window right, back
    * engine,	//Position of the engine
    * gun_ammo,
    * ROPE_ATTATCH,	//Not misspelled. In script "finale_heist2b.c4".
    * wheel_lf,	//Wheel left, front
    * wheel_lr,	//Wheel left, back
    * wheel_rf,	//Wheel right, front
    * wheel_rr,	//Wheel right, back
    * exhaust,	//Exhaust. shows only the position of the stock-exhaust
    * overheat,	//A position on the engine(not exactly sure, how to name it)
    * misc_e,	//Not a car-bone.
    * seat_dside_f,	//Driver-seat
    * seat_pside_f,	//Seat next to driver
    * Gun_Nuzzle,
    * seat_r
    * I doubt that the function is case-sensitive, since I found a "Chassis" and a "chassis". - Just tested: Definitely not case-sensitive.
    */
    @:pure static inline function GetEntityBoneIndexByName(entity: Int, boneName: String): Int { return untyped __lua__('GetEntityBoneIndexByName')(entity, boneName); }
    
    /**
    * console hash: 0xE8C0C629
    */
    @:pure static inline function GetEntityCollisonDisabled(entity: Int): Int { return untyped __lua__('GetEntityCollisonDisabled')(entity); }
    
    /**
    * console hash: 0xE8C0C629
    */
    @:pure static inline function N_0xccf1e97befdae480(entity: Int): Int { return untyped __lua__('N_0xccf1e97befdae480')(entity); }
    
    /**
    * p1 = !IS_ENTITY_DEAD
    */
    @:pure static inline function GetEntityCoords(entity: Int, alive: Bool): Array<Int> { return untyped __lua__('GetEntityCoords')(entity, alive); }
    
    /**
    * Gets the entity's forward vector.
    */
    @:pure static inline function GetEntityForwardVector(entity: Int): Array<Int> { return untyped __lua__('GetEntityForwardVector')(entity); }
    
    /**
    * Gets the X-component of the entity's forward vector.
    */
    @:pure static inline function GetEntityForwardX(entity: Int): Int { return untyped __lua__('GetEntityForwardX')(entity); }
    
    /**
    * Gets the Y-component of the entity's forward vector.
    */
    @:pure static inline function GetEntityForwardY(entity: Int): Int { return untyped __lua__('GetEntityForwardY')(entity); }
    
    /**
    * Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.
    */
    @:pure static inline function GetEntityHeading(entity: Int): Int { return untyped __lua__('GetEntityHeading')(entity); }
    
    /**
    * Returns an integer value of entity's current health.
    * Example of range for ped:
    * - Player [0 to 200]
    * - Ped [100 to 200]
    * - Vehicle [0 to 1000]
    * - Object [0 to 1000]
    * Health is actually a float value but this native casts it to int.
    * In order to get the actual value, do:
    * float health = *(float *)(entityAddress + 0x280);
    */
    @:pure static inline function GetEntityHealth(entity: Int): Int { return untyped __lua__('GetEntityHealth')(entity); }
    @:pure static inline function GetEntityHeight(entity: Int, X: Int, Y: Int, Z: Int, atTop: Bool, inWorldCoords: Bool): Int { return untyped __lua__('GetEntityHeight')(entity, X, Y, Z, atTop, inWorldCoords); }
    
    /**
    * Return height (z-dimension) above ground.
    * Example: The pilot in a titan plane is 1.844176 above ground.
    * How can i convert it to meters?
    * Everything seems to be in meters, probably this too.
    */
    @:pure static inline function GetEntityHeightAboveGround(entity: Int): Int { return untyped __lua__('GetEntityHeightAboveGround')(entity); }
    @:pure static inline function GetEntityIndexOfCutsceneEntity(cutsceneEntName: String, modelHash: EitherType<String, Int>): Int { return untyped __lua__('GetEntityIndexOfCutsceneEntity')(cutsceneEntName, modelHash); }
    @:pure static inline function GetEntityIndexOfRegisteredEntity(cutsceneEntName: String, modelHash: EitherType<String, Int>): Int { return untyped __lua__('GetEntityIndexOfRegisteredEntity')(cutsceneEntName, modelHash); }
    
    /**
    * Returns the LOD distance of an entity.
    */
    @:pure static inline function GetEntityLodDist(entity: Int): Int { return untyped __lua__('GetEntityLodDist')(entity); }
    @:pure static inline function GetEntityMatrix(entity: Int): { a0: Array<Int>, a1: Array<Int>, a2: Array<Int>, a3: Array<Int> } { return untyped __lua__('GetEntityMatrix')(entity); }
    
    /**
    * Return an integer value of entity's maximum health.
    * Example:
    * - Player = 200
    */
    @:pure static inline function GetEntityMaxHealth(entity: Int): Int { return untyped __lua__('GetEntityMaxHealth')(entity); }
    
    /**
    * Returns the model hash from the entity
    */
    @:pure static inline function GetEntityModel(entity: Int): Int { return untyped __lua__('GetEntityModel')(entity); }
    
    /**
    * Gets the heading of the entity physics in degrees, which tends to be more accurate than just "GET_ENTITY_HEADING". This can be clearly seen while, for example, ragdolling a ped/player.
    * NOTE: The name and description of this native are based on independent research. If you find this native to be more suitable under a different name and/or described differently, please feel free to do so.
    */
    @:pure static inline function GetEntityPhysicsHeading(entity: Int): Int { return untyped __lua__('GetEntityPhysicsHeading')(entity); }
    
    /**
    * Gets the heading of the entity physics in degrees, which tends to be more accurate than just "GET_ENTITY_HEADING". This can be clearly seen while, for example, ragdolling a ped/player.
    * NOTE: The name and description of this native are based on independent research. If you find this native to be more suitable under a different name and/or described differently, please feel free to do so.
    */
    @:pure static inline function N_0x846bf6291198a71e(entity: Int): Int { return untyped __lua__('N_0x846bf6291198a71e')(entity); }
    @:pure static inline function GetEntityPitch(entity: Int): Int { return untyped __lua__('GetEntityPitch')(entity); }
    
    /**
    * Returns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it.
    * Returns false if no entity found.
    */
    @:pure static inline function GetEntityPlayerIsFreeAimingAt(player: Int, entity: Int): Int { return untyped __lua__('GetEntityPlayerIsFreeAimingAt')(player, entity); }
    
    /**
    * Console Hash: 0xFC30DDFF
    * Returns range from 0-10
    * --------------------------------------------------------------
    * The type name can be retrieved by using this:
    * typedef LPSTR(__fastcall *GetEntityPopulationTypeName_t)(unsigned __int16 entityPopulationType, bool scriptName);
    * GetEntityPopulationTypeName_t GetEntityPopulationTypeName = (GetEntityPopulationTypeName_t)FindPattern("44 0F B7 C1 4C 8D 0D ?? ?? ?? ?? 41 83 F8 07");
    */
    @:pure static inline function GetEntityPopulationType(entity: Int): Int { return untyped __lua__('GetEntityPopulationType')(entity); }
    
    /**
    * w is the correct parameter name!
    */
    @:pure static inline function GetEntityQuaternion(entity: Int): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('GetEntityQuaternion')(entity); }
    
    /**
    * Displays the current ROLL axis of the entity [-180.0000/180.0000+]
    * (Sideways Roll) such as a vehicle tipped on its side
    */
    @:pure static inline function GetEntityRoll(entity: Int): Int { return untyped __lua__('GetEntityRoll')(entity); }
    
    /**
    * rotationOrder refers to the order yaw pitch roll is applied
    * value ranges from 0 to 5. What you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation.
    * Unsure what value corresponds to what rotation order, more testing will be needed for that.
    * ------
    * rotationOrder is usually 2 in scripts
    * ------
    * ENTITY::GET_ENTITY_ROTATION(Any p0, false or true);
    * if false than return from -180 to 180
    * if true than return from -90 to 90
    * ---
    * As said above, the value of p1 affects the outcome. R* uses 1 and 2 instead of 0 and 1, so I marked it as an int.
    * What it returns is the yaw on the z part of the vector, which makes sense considering R* considers z as vertical. Here's a picture for those of you who don't understand pitch, yaw, and roll:
    * www.allstar.fiu.edu/aero/images/pic5-1.gif
    * I don't know why it returns a Vec3, but sometimes the values x and y go negative, yet they're always zero. Just use GET_ENTITY_PITCH and GET_ENTITY_ROLL for pitch and roll.
    */
    @:pure static inline function GetEntityRotation(entity: Int, rotationOrder: Int): Array<Int> { return untyped __lua__('GetEntityRotation')(entity, rotationOrder); }
    @:pure static inline function GetEntityRotationVelocity(entity: Int): Array<Int> { return untyped __lua__('GetEntityRotationVelocity')(entity); }
    
    /**
    * All ambient entities in-world seem to have the same value for the second argument (Any *script), depending on when the scripthook was activated/re-activated. I've seen numbers from ~5 to almost 70 when the value was translated with to_string. The function return value seems to always be 0.
    */
    @:pure static inline function GetEntityScript(entity: Int, script: Int): String { return untyped __lua__('GetEntityScript')(entity, script); }
    
    /**
    * result is in meters per second
    * ------------------------------------------------------------
    * So would the conversion to mph and km/h, be along the lines of this.
    * float speed = GET_ENTITY_SPEED(veh);
    * float kmh = (speed * 3.6);
    * float mph = (speed * 2.236936);
    */
    @:pure static inline function GetEntitySpeed(entity: Int): Int { return untyped __lua__('GetEntitySpeed')(entity); }
    
    /**
    * Relative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed).
    */
    @:pure static inline function GetEntitySpeedVector(entity: Int, relative: Bool): Array<Int> { return untyped __lua__('GetEntitySpeedVector')(entity, relative); }
    
    /**
    * Get how much of the entity is submerged.  1.0f is whole entity.
    */
    @:pure static inline function GetEntitySubmergedLevel(entity: Int): Int { return untyped __lua__('GetEntitySubmergedLevel')(entity); }
    
    /**
    * Returns:
    * 0 = no entity
    * 1 = ped
    * 2 = vehicle
    * 3 = object
    */
    @:pure static inline function GetEntityType(entity: Int): Int { return untyped __lua__('GetEntityType')(entity); }
    @:pure static inline function GetEntityUprightValue(entity: Int): Int { return untyped __lua__('GetEntityUprightValue')(entity); }
    @:pure static inline function GetEntityVelocity(entity: Int): Array<Int> { return untyped __lua__('GetEntityVelocity')(entity); }
    @:pure static inline function GetEventAtIndex(p0: Bool, eventNum: Int): Int { return untyped __lua__('GetEventAtIndex')(p0, eventNum); }
    @:pure static inline function GetEventData(p0: Bool, eventNum: Int, argStructSize: Int): { a0: Int, a1: Int } { return untyped __lua__('GetEventData')(p0, eventNum, argStructSize); }
    @:pure static inline function GetEventExists(p0: Bool, p1: Int): Int { return untyped __lua__('GetEventExists')(p0, p1); }
    @:pure static inline function GetFakeWantedLevel(): Int { return untyped __lua__('GetFakeWantedLevel')(); }
    @:pure static inline function N_0x4c9296cbcd1b971e(): Int { return untyped __lua__('N_0x4c9296cbcd1b971e')(); }
    @:pure static inline function GetFirstBlipInfoId(blipSprite: Int): Int { return untyped __lua__('GetFirstBlipInfoId')(blipSprite); }
    
    /**
    * Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
    * Used when calling SET_PED_HEAD_BLEND_DATA.
    */
    @:pure static inline function GetFirstParentIdForPedType(type: Int): Int { return untyped __lua__('GetFirstParentIdForPedType')(type); }
    
    /**
    * Returns
    * 0 - Third Person Close
    * 1 - Third Person Mid
    * 2 - Third Person Far
    * 4 - First Person
    */
    @:pure static inline function GetFollowPedCamViewMode(): Int { return untyped __lua__('GetFollowPedCamViewMode')(); }
    @:pure static inline function GetFollowPedCamZoomLevel(): Int { return untyped __lua__('GetFollowPedCamZoomLevel')(); }
    
    /**
    * Returns the type of camera:
    * 0 - Third Person Close
    * 1 - Third Person Mid
    * 2 - Third Person Far
    * 4 - First Person
    */
    @:pure static inline function GetFollowVehicleCamViewMode(): Int { return untyped __lua__('GetFollowVehicleCamViewMode')(); }
    @:pure static inline function GetFollowVehicleCamZoomLevel(): Int { return untyped __lua__('GetFollowVehicleCamZoomLevel')(); }
    @:pure static inline function GetForcedComponent(componentHash: EitherType<String, Int>, componentId: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('GetForcedComponent')(componentHash, componentId); }
    @:pure static inline function GetFrameCount(): Int { return untyped __lua__('GetFrameCount')(); }
    @:pure static inline function GetFrameTime(): Int { return untyped __lua__('GetFrameTime')(); }
    @:pure static inline function GetFreeStackSlotsCount(stackSize: Int): Int { return untyped __lua__('GetFreeStackSlotsCount')(stackSize); }
    @:pure static inline function GetGameTimer(): Int { return untyped __lua__('GetGameTimer')(); }
    @:pure static inline function GetGameplayCamCoord(): Array<Int> { return untyped __lua__('GetGameplayCamCoord')(); }
    @:pure static inline function GetGameplayCamCoords(): Array<Int> { return untyped __lua__('GetGameplayCamCoords')(); }
    @:pure static inline function GetGameplayCamFov(): Int { return untyped __lua__('GetGameplayCamFov')(); }
    @:pure static inline function GetGameplayCamRelativeHeading(): Int { return untyped __lua__('GetGameplayCamRelativeHeading')(); }
    @:pure static inline function GetGameplayCamRelativePitch(): Int { return untyped __lua__('GetGameplayCamRelativePitch')(); }
    
    /**
    * p0 dosen't seem to change much, I tried it with 0, 1, 2:
    * 0-Pitch(X): -70.000092
    * 0-Roll(Y): -0.000001
    * 0-Yaw(Z): -43.886459
    * 1-Pitch(X): -70.000092
    * 1-Roll(Y): -0.000001
    * 1-Yaw(Z): -43.886463
    * 2-Pitch(X): -70.000092
    * 2-Roll(Y): -0.000002
    * 2-Yaw(Z): -43.886467
    */
    @:pure static inline function GetGameplayCamRot(rotationOrder: Int): Array<Int> { return untyped __lua__('GetGameplayCamRot')(rotationOrder); }
    
    /**
    * p0 seems to consistently be 2 across scripts
    * Function is called faily often by CAM::CREATE_CAM_WITH_PARAMS
    */
    @:pure static inline function GetGameplayCamZoom(): Int { return untyped __lua__('GetGameplayCamZoom')(); }
    
    /**
    * Returns a global c-style string buffer that is used internally by the game
    * nope, it returns a reference to an empty string, the same empty string that's used by 1687 internal gta functions.   if it was used in a script (and i cannot find an instance of it being used), it would be as the source for a StringCopy or somesuch.
    */
    @:pure static inline function GetGlobalCharBuffer(): String { return untyped __lua__('GetGlobalCharBuffer')(); }
    
    /**
    * Returns a global c-style string buffer that is used internally by the game
    * nope, it returns a reference to an empty string, the same empty string that's used by 1687 internal gta functions.   if it was used in a script (and i cannot find an instance of it being used), it would be as the source for a StringCopy or somesuch.
    */
    @:pure static inline function N_0x24da7d7667fd7b09(): String { return untyped __lua__('N_0x24da7d7667fd7b09')(); }
    
    /**
    * Gets the ground elevation at the specified position. Note that if the specified position is below ground level, the function will output zero!
    * x: Position on the X-axis to get ground elevation at.
    * y: Position on the Y-axis to get ground elevation at.
    * z: Position on the Z-axis to get ground elevation at.
    * groundZ: The ground elevation at the specified position.
    * unk: Nearly always 0, very rarely 1 in the scripts.
    */
    @:pure static inline function GetGroundZFor_3dCoord(x: Int, y: Int, z: Int, unk: Bool): { a0: Int, a1: Int } { return untyped __lua__('GetGroundZFor_3dCoord')(x, y, z, unk); }
    
    /**
    * p1 may be a BOOL representing whether or not the group even exists
    */
    @:pure static inline function GetGroupSize(groupID: Int): { a0: Int, a1: Int } { return untyped __lua__('GetGroupSize')(groupID); }
    
    /**
    * This native converts its past string to hash. It is hashed using jenkins one at a time method.
    */
    @:pure static inline function GetHashKey(model: String): Int { return untyped __lua__('GetHashKey')(model); }
    @:pure static inline function GetHashNameForComponent(entity: Int, componentId: Int, drawableVariant: Int, textureVariant: Int): Int { return untyped __lua__('GetHashNameForComponent')(entity, componentId, drawableVariant, textureVariant); }
    @:pure static inline function GetHashNameForProp(entity: Int, componentId: Int, propIndex: Int, propTextureIndex: Int): Int { return untyped __lua__('GetHashNameForProp')(entity, componentId, propIndex, propTextureIndex); }
    
    /**
    * Returns a hash representing which part of the map the given coords are located.
    * Possible return values:
    * (Hash of) city -&gt; -289320599
    * (Hash of) countryside -&gt; 2072609373
    * C# Example :
    * Ped player = Game.Player.Character;
    * Hash h = Function.Call&lt;Hash&gt;(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z);
    */
    @:pure static inline function GetHashOfMapAreaAtCoords(x: Int, y: Int, z: Int): Int { return untyped __lua__('GetHashOfMapAreaAtCoords')(x, y, z); }
    @:pure static inline function GetHashOfThisScriptName(): Int { return untyped __lua__('GetHashOfThisScriptName')(); }
    @:pure static inline function GetThisScriptHash(): Int { return untyped __lua__('GetThisScriptHash')(); }
    
    /**
    * dx = x1
    * dy = y1
    */
    @:pure static inline function GetHeadingFromVector_2d(dx: Int, dy: Int): Int { return untyped __lua__('GetHeadingFromVector_2d')(dx, dy); }
    
    /**
    * Max 1000.
    * At -100 both helicopter rotors will stall.
    */
    @:pure static inline function GetHeliEngineHealth(vehicle: Int): Int { return untyped __lua__('GetHeliEngineHealth')(vehicle); }
    
    /**
    * Max 1000.
    * At 0 the main rotor will stall.
    */
    @:pure static inline function GetHeliMainRotorHealth(vehicle: Int): Int { return untyped __lua__('GetHeliMainRotorHealth')(vehicle); }
    
    /**
    * Max 1000.
    * At 0 the tail rotor will stall.
    */
    @:pure static inline function GetHeliTailRotorHealth(vehicle: Int): Int { return untyped __lua__('GetHeliTailRotorHealth')(vehicle); }
    
    /**
    * HUD colors and their values: pastebin.com/d9aHPbXN
    */
    @:pure static inline function GetHudColour(hudColorIndex: Int): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('GetHudColour')(hudColorIndex); }
    @:pure static inline function GetHudComponentPosition(id: Int): Array<Int> { return untyped __lua__('GetHudComponentPosition')(id); }
    
    /**
    * MulleDK19: Gets the ID of the next active thread.
    * First call _BEGIN_ENUMERATE_THREADS (0xDADFADA5A20143A8).
    * Any subsequent call to this function will then return the ID of the next active thread.
    * If the function returns 0, the end of the enumeration has been reached.
    * -----------------------------------------------------------------------
    * Some other guy: Here's an example:
    * std::vector&lt;int&gt; vecCurrentThreads;
    * void update_current_threads_list()
    * {
    * vecCurrentThreads.clear();
    * _BEGIN_ENUMERATING_THREADS();
    * int id = _GET_ID_OF_NEXT_THREAD_IN_ENUMERATION();
    * while (id != 0)
    * {
    * id = _GET_ID_OF_NEXT_THREAD_IN_ENUMERATION();
    * vecCurrentThreads.push_back(id);
    * }
    * }
    */
    @:pure static inline function GetIdOfNextThreadInEnumeration(): Int { return untyped __lua__('GetIdOfNextThreadInEnumeration')(); }
    
    /**
    * MulleDK19: Gets the ID of the next active thread.
    * First call _BEGIN_ENUMERATE_THREADS (0xDADFADA5A20143A8).
    * Any subsequent call to this function will then return the ID of the next active thread.
    * If the function returns 0, the end of the enumeration has been reached.
    * -----------------------------------------------------------------------
    * Some other guy: Here's an example:
    * std::vector&lt;int&gt; vecCurrentThreads;
    * void update_current_threads_list()
    * {
    * vecCurrentThreads.clear();
    * _BEGIN_ENUMERATING_THREADS();
    * int id = _GET_ID_OF_NEXT_THREAD_IN_ENUMERATION();
    * while (id != 0)
    * {
    * id = _GET_ID_OF_NEXT_THREAD_IN_ENUMERATION();
    * vecCurrentThreads.push_back(id);
    * }
    * }
    */
    @:pure static inline function N_0x30b4fa1c82dd4b9f(): Int { return untyped __lua__('N_0x30b4fa1c82dd4b9f')(); }
    @:pure static inline function GetIdOfThisThread(): Int { return untyped __lua__('GetIdOfThisThread')(); }
    
    /**
    * x1, y1, z1 -- Coords of your ped model
    * x2, y2, z2 -- Coords of the ped you want to switch to
    */
    @:pure static inline function GetIdealPlayerSwitchType(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int): Int { return untyped __lua__('GetIdealPlayerSwitchType')(x1, y1, z1, x2, y2, z2); }
    @:pure static inline function GetIndexOfCurrentLevel(): Int { return untyped __lua__('GetIndexOfCurrentLevel')(); }
    @:pure static inline function GetIndexedItemInItemset(p0: Int, p1: Int): Int { return untyped __lua__('GetIndexedItemInItemset')(p0, p1); }
    @:pure static inline function GetInstanceId(): Int { return untyped __lua__('GetInstanceId')(); }
    
    /**
    * Returns interior ID from specified coordinates. If coordinates are outside, then it returns 0.
    * Example for VB.NET
    * Dim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z)
    */
    @:pure static inline function GetInteriorAtCoords(x: Int, y: Int, z: Int): Int { return untyped __lua__('GetInteriorAtCoords')(x, y, z); }
    
    /**
    * Returns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.
    * Use: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))
    * Interior types include: "V_Michael", "V_Franklins", "V_Franklinshouse", etc.. you can find them in the scripts.
    * Not a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.
    */
    @:pure static inline function GetInteriorAtCoordsWithType(x: Int, y: Int, z: Int, interiorType: String): Int { return untyped __lua__('GetInteriorAtCoordsWithType')(x, y, z, interiorType); }
    
    /**
    * Returns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.
    * Use: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))
    * Interior types include: "V_Michael", "V_Franklins", "V_Franklinshouse", etc.. you can find them in the scripts.
    * Not a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.
    */
    @:pure static inline function N_0x05b7a89bd78797fc(x: Int, y: Int, z: Int, interiorType: String): Int { return untyped __lua__('N_0x05b7a89bd78797fc')(x, y, z, interiorType); }
    @:pure static inline function GetInteriorFromCollision(x: Int, y: Int, z: Int): Int { return untyped __lua__('GetInteriorFromCollision')(x, y, z); }
    
    /**
    * Returns the handle of the interior that the entity is in. Returns 0 if outside.
    */
    @:pure static inline function GetInteriorFromEntity(entity: Int): Int { return untyped __lua__('GetInteriorFromEntity')(entity); }
    
    /**
    * Returns the group ID of the specified interior. For example, regular interiors have group 0, subway interiors have group 1. There are a few other groups too.
    */
    @:pure static inline function GetInteriorGroupId(interiorID: Int): Int { return untyped __lua__('GetInteriorGroupId')(interiorID); }
    
    /**
    * false = Any resolution &lt; 1280x720
    * true = Any resolution &gt;= 1280x720
    */
    @:pure static inline function GetIsHidef(): Int { return untyped __lua__('GetIsHidef')(); }
    
    /**
    * From the driver's perspective, is the left headlight broken.
    */
    @:pure static inline function GetIsLeftVehicleHeadlightDamaged(vehicle: Int): Int { return untyped __lua__('GetIsLeftVehicleHeadlightDamaged')(vehicle); }
    
    /**
    * From the driver's perspective, is the left headlight broken.
    */
    @:pure static inline function IsHeadlightLBroken(vehicle: Int): Int { return untyped __lua__('IsHeadlightLBroken')(vehicle); }
    @:pure static inline function GetIsLoadingScreenActive(): Int { return untyped __lua__('GetIsLoadingScreenActive')(); }
    
    /**
    * Hash collision
    */
    @:pure static inline function GetIsMultiplayerBrief(p0: Bool): Void { return untyped __lua__('GetIsMultiplayerBrief')(p0); }
    
    /**
    * gadgetHash - was always 0xFBAB5776 ("GADGET_PARACHUTE").
    */
    @:pure static inline function GetIsPedGadgetEquipped(ped: Int, gadgetHash: EitherType<String, Int>): Int { return untyped __lua__('GetIsPedGadgetEquipped')(ped, gadgetHash); }
    
    /**
    * From the driver's perspective, is the right headlight broken.
    */
    @:pure static inline function GetIsRightVehicleHeadlightDamaged(vehicle: Int): Int { return untyped __lua__('GetIsRightVehicleHeadlightDamaged')(vehicle); }
    
    /**
    * From the driver's perspective, is the right headlight broken.
    */
    @:pure static inline function IsHeadlightRBroken(vehicle: Int): Int { return untyped __lua__('IsHeadlightRBroken')(vehicle); }
    
    /**
    * p0 = VEHICLE_NODE_ID
    * Returns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.
    * Normal roads where plenty of Peds spawn will return false
    */
    @:pure static inline function GetIsSlowRoadFlag(nodeID: Int): Int { return untyped __lua__('GetIsSlowRoadFlag')(nodeID); }
    
    /**
    * p0 = VEHICLE_NODE_ID
    * Returns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.
    * Normal roads where plenty of Peds spawn will return false
    */
    @:pure static inline function N_0x4f5070aa58f69279(nodeID: Int): Int { return untyped __lua__('N_0x4f5070aa58f69279')(nodeID); }
    
    /**
    * from docks_heistb.c4:
    * AI::GET_IS_TASK_ACTIVE(PLAYER::PLAYER_PED_ID(), 2))
    * Known Tasks: pastebin.com/2gFqJ3Px
    */
    @:pure static inline function GetIsTaskActive(ped: Int, taskNumber: Int): Int { return untyped __lua__('GetIsTaskActive')(ped, taskNumber); }
    
    /**
    * Returns true when in a vehicle, false whilst entering/exiting.
    */
    @:pure static inline function GetIsVehicleEngineRunning(vehicle: Int): Int { return untyped __lua__('GetIsVehicleEngineRunning')(vehicle); }
    
    /**
    * Returns true when in a vehicle, false whilst entering/exiting.
    */
    @:pure static inline function IsVehicleEngineOn(vehicle: Int): Int { return untyped __lua__('IsVehicleEngineOn')(vehicle); }
    @:pure static inline function GetIsVehiclePrimaryColourCustom(vehicle: Int): Int { return untyped __lua__('GetIsVehiclePrimaryColourCustom')(vehicle); }
    
    /**
    * Check if Vehicle Secondary is avaliable for customize
    */
    @:pure static inline function GetIsVehicleSecondaryColourCustom(vehicle: Int): Int { return untyped __lua__('GetIsVehicleSecondaryColourCustom')(vehicle); }
    
    /**
    * For a full list, see here: pastebin.com/Tp0XpBMN
    */
    @:pure static inline function GetIsWaypointRecordingLoaded(name: String): Int { return untyped __lua__('GetIsWaypointRecordingLoaded')(name); }
    
    /**
    * Setting Aspect Ratio Manually in game will return:
    * false - for Narrow format Aspect Ratios (3:2, 4:3, 5:4, etc. )
    * true - for Wide format Aspect Ratios (5:3, 16:9, 16:10, etc. )
    * Setting Aspect Ratio to "Auto" in game will return "false" or "true" based on the actual set Resolution Ratio.
    */
    @:pure static inline function GetIsWidescreen(): Int { return untyped __lua__('GetIsWidescreen')(); }
    @:pure static inline function GetItemsetSize(p0: Int): Int { return untyped __lua__('GetItemsetSize')(p0); }
    @:pure static inline function GetJackTarget(ped: Int): Int { return untyped __lua__('GetJackTarget')(ped); }
    
    /**
    * Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY
    */
    @:pure static inline function GetKeyForEntityInRoom(entity: Int): Int { return untyped __lua__('GetKeyForEntityInRoom')(entity); }
    
    /**
    * Gets a string literal from a label name.
    */
    @:pure static inline function GetLabelText(labelName: String): String { return untyped __lua__('GetLabelText')(labelName); }
    
    /**
    * landing gear states:
    * 0: Deployed
    * 1: Closing
    * 2: Opening
    * 3: Retracted
    */
    @:pure static inline function GetLandingGearState(vehicle: Int): Int { return untyped __lua__('GetLandingGearState')(vehicle); }
    
    /**
    * landing gear states:
    * 0: Deployed
    * 1: Closing
    * 2: Opening
    * 3: Retracted
    */
    @:pure static inline function GetVehicleLandingGear(vehicle: Int): Int { return untyped __lua__('GetVehicleLandingGear')(vehicle); }
    
    /**
    * Not exactly sure on this one, but here's a snippet of code:
    * if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 0)) {
    * v_2 = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
    * } else {
    * v_2 = VEHICLE::_B2D06FAEDE65B577();
    * }
    */
    @:pure static inline function GetLastDrivenVehicle(): Int { return untyped __lua__('GetLastDrivenVehicle')(); }
    
    /**
    * Not exactly sure on this one, but here's a snippet of code:
    * if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 0)) {
    * v_2 = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
    * } else {
    * v_2 = VEHICLE::_B2D06FAEDE65B577();
    * }
    */
    @:pure static inline function N_0xb2d06faede65b577(): Int { return untyped __lua__('N_0xb2d06faede65b577')(); }
    @:pure static inline function GetLastMaterialHitByEntity(entity: Int): Int { return untyped __lua__('GetLastMaterialHitByEntity')(entity); }
    @:pure static inline function GetLastPedInVehicleSeat(vehicle: Int, seatIndex: Int): Int { return untyped __lua__('GetLastPedInVehicleSeat')(vehicle, seatIndex); }
    
    /**
    * Returns the length of the string passed (much like strlen).
    */
    @:pure static inline function GetLengthOfLiteralString(string: String): Int { return untyped __lua__('GetLengthOfLiteralString')(string); }
    
    /**
    * gets the length of a null terminated string, without checking unicode encodings
    */
    @:pure static inline function GetLengthOfString(p0: String): Int { return untyped __lua__('GetLengthOfString')(p0); }
    
    /**
    * gets the length of a null terminated string, without checking unicode encodings
    */
    @:pure static inline function N_0x43e4111189e54f0e(p0: String): Int { return untyped __lua__('N_0x43e4111189e54f0e')(p0); }
    
    /**
    * Returns the string length of the string from the gxt string .
    */
    @:pure static inline function GetLengthOfStringWithThisTextLabel(gxt: String): Int { return untyped __lua__('GetLengthOfStringWithThisTextLabel')(gxt); }
    
    /**
    * Second Param = LiveryIndex
    * example
    * int count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh);
    * for (int i = 0; i &lt; count; i++)
    * {
    * char* LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i);
    * }
    * this example will work fine to fetch all names
    * for example for Sanchez we get
    * SANC_LV1
    * SANC_LV2
    * SANC_LV3
    * SANC_LV4
    * SANC_LV5
    * Use _GET_LABEL_TEXT, to get the localized livery name.
    */
    @:pure static inline function GetLiveryName(vehicle: Int, liveryIndex: Int): String { return untyped __lua__('GetLiveryName')(vehicle, liveryIndex); }
    @:pure static inline function GetLocalPlayerAimState(): Int { return untyped __lua__('GetLocalPlayerAimState')(); }
    
    /**
    * Gets local system time as year, month, day, hour, minute and second.
    * Example usage:
    * int year;
    * int month;
    * int day;
    * int hour;
    * int minute;
    * int second;
    * or use std::tm struct
    * TIME::GET_LOCAL_TIME(&amp;year, &amp;month, &amp;day, &amp;hour, &amp;minute, &amp;second);
    */
    @:pure static inline function GetLocalTime(): { a0: Int, a1: Int, a2: Int, a3: Int, a4: Int, a5: Int } { return untyped __lua__('GetLocalTime')(); }
    @:pure static inline function GetLockonRangeOfCurrentPedWeapon(ped: Int): Int { return untyped __lua__('GetLockonRangeOfCurrentPedWeapon')(ped); }
    @:pure static inline function N_0x840f03e9041e2c9c(ped: Int): Int { return untyped __lua__('N_0x840f03e9041e2c9c')(ped); }
    @:pure static inline function GetMainPlayerBlipId(): Int { return untyped __lua__('GetMainPlayerBlipId')(); }
    @:pure static inline function GetMaxAmmo(ped: Int, weaponHash: EitherType<String, Int>, ammo: Int): Int { return untyped __lua__('GetMaxAmmo')(ped, weaponHash, ammo); }
    
    /**
    * p2 is mostly 1 in the scripts.
    */
    @:pure static inline function GetMaxAmmoInClip(ped: Int, weaponHash: EitherType<String, Int>, p2: Bool): Int { return untyped __lua__('GetMaxAmmoInClip')(ped, weaponHash, p2); }
    @:pure static inline function GetMaxRangeOfCurrentPedWeapon(ped: Int): Int { return untyped __lua__('GetMaxRangeOfCurrentPedWeapon')(ped); }
    
    /**
    * Gets the maximum wanted level the player can get.
    * Ranges from 0 to 5.
    */
    @:pure static inline function GetMaxWantedLevel(): Int { return untyped __lua__('GetMaxWantedLevel')(); }
    
    /**
    * This function is hard-coded to always return 0.
    */
    @:pure static inline function GetMaximumNumberOfPhotos(): Int { return untyped __lua__('GetMaximumNumberOfPhotos')(); }
    @:pure static inline function GetMeleeTargetForPed(ped: Int): Int { return untyped __lua__('GetMeleeTargetForPed')(ped); }
    @:pure static inline function GetMillisecondsPerGameMinute(): Int { return untyped __lua__('GetMillisecondsPerGameMinute')(); }
    @:pure static inline function GetMissionFlag(): Int { return untyped __lua__('GetMissionFlag')(); }
    @:pure static inline function GetMobilePhonePosition(): Array<Int> { return untyped __lua__('GetMobilePhonePosition')(); }
    @:pure static inline function GetMobilePhoneRenderId(renderId: Int): Void { return untyped __lua__('GetMobilePhoneRenderId')(renderId); }
    @:pure static inline function GetMobilePhoneRotation(p1: Int): Array<Int> { return untyped __lua__('GetMobilePhoneRotation')(p1); }
    
    /**
    * Returns the name for the type of vehicle mod(Armour, engine etc)
    */
    @:pure static inline function GetModSlotName(vehicle: Int, modType: Int): String { return untyped __lua__('GetModSlotName')(vehicle, modType); }
    
    /**
    * Returns the text label of a mod type for a given vehicle
    * Use _GET_LABEL_TEXT to get the part name in the game's language
    */
    @:pure static inline function GetModTextLabel(vehicle: Int, modType: Int, modValue: Int): String { return untyped __lua__('GetModTextLabel')(vehicle, modType, modValue); }
    
    /**
    * Gets the dimensions of a model.
    * Calculate (maximum - minimum) to get the size, in which case, Y will be how long the model is.
    * Example from the scripts: GAMEPLAY::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &amp;v_1A, &amp;v_17);
    */
    @:pure static inline function GetModelDimensions(modelHash: EitherType<String, Int>): { a0: Array<Int>, a1: Array<Int> } { return untyped __lua__('GetModelDimensions')(modelHash); }
    
    /**
    * Function just returns 0
    * void __fastcall ped__get_mount(NativeContext *a1)
    * {
    * NativeContext *v1; // rbx@1
    * v1 = a1;
    * GetAddressOfPedFromScriptHandle(a1-&gt;Args-&gt;Arg1);
    * v1-&gt;Returns-&gt;Item1= 0;
    * }
    */
    @:pure static inline function GetMount(ped: Int): Int { return untyped __lua__('GetMount')(ped); }
    @:pure static inline function GetMusicPlaytime(): Int { return untyped __lua__('GetMusicPlaytime')(); }
    
    /**
    * The reversed code looks like this (Sasuke78200)
    * //
    * char g_szScriptName[64];
    * char* _0xBE7ACD89(int a_iThreadID)
    * {
    * scrThread* l_pThread;
    * // Get the script thread
    * l_pThread = GetThreadByID(a_iThreadID);
    * if(l_pThread == 0 || l_pThread-&gt;m_iThreadState == 2)
    * {
    * strncpy(g_szScriptName, "", 64);
    * }
    * else
    * {
    * strncpy(g_szScriptName, l_pThread-&gt;m_szScriptName, 64);
    * }
    * return g_szScriptName;
    * }
    */
    @:pure static inline function GetNameOfThread(threadId: Int): String { return untyped __lua__('GetNameOfThread')(threadId); }
    
    /**
    * The reversed code looks like this (Sasuke78200)
    * //
    * char g_szScriptName[64];
    * char* _0xBE7ACD89(int a_iThreadID)
    * {
    * scrThread* l_pThread;
    * // Get the script thread
    * l_pThread = GetThreadByID(a_iThreadID);
    * if(l_pThread == 0 || l_pThread-&gt;m_iThreadState == 2)
    * {
    * strncpy(g_szScriptName, "", 64);
    * }
    * else
    * {
    * strncpy(g_szScriptName, l_pThread-&gt;m_szScriptName, 64);
    * }
    * return g_szScriptName;
    * }
    */
    @:pure static inline function GetThreadName(threadId: Int): String { return untyped __lua__('GetThreadName')(threadId); }
    
    /**
    * AIRP = Los Santos International Airport
    * ALAMO = Alamo Sea
    * ALTA = Alta
    * ARMYB = Fort Zancudo
    * BANHAMC = Banham Canyon Dr
    * BANNING = Banning
    * BEACH = Vespucci Beach
    * BHAMCA = Banham Canyon
    * BRADP = Braddock Pass
    * BRADT = Braddock Tunnel
    * BURTON = Burton
    * CALAFB = Calafia Bridge
    * CANNY = Raton Canyon
    * CCREAK = Cassidy Creek
    * CHAMH = Chamberlain Hills
    * CHIL = Vinewood Hills
    * CHU = Chumash
    * CMSW = Chiliad Mountain State Wilderness
    * CYPRE = Cypress Flats
    * DAVIS = Davis
    * DELBE = Del Perro Beach
    * DELPE = Del Perro
    * DELSOL = La Puerta
    * DESRT = Grand Senora Desert
    * DOWNT = Downtown
    * DTVINE = Downtown Vinewood
    * EAST_V = East Vinewood
    * EBURO = El Burro Heights
    * ELGORL = El Gordo Lighthouse
    * ELYSIAN = Elysian Island
    * GALFISH = Galilee
    * GOLF = GWC and Golfing Society
    * GRAPES = Grapeseed
    * GREATC = Great Chaparral
    * HARMO = Harmony
    * HAWICK = Hawick
    * HORS = Vinewood Racetrack
    * HUMLAB = Humane Labs and Research
    * JAIL = Bolingbroke Penitentiary
    * KOREAT = Little Seoul
    * LACT = Land Act Reservoir
    * LAGO = Lago Zancudo
    * LDAM = Land Act Dam
    * LEGSQU = Legion Square
    * LMESA = La Mesa
    * LOSPUER = La Puerta
    * MIRR = Mirror Park
    * MORN = Morningwood
    * MOVIE = Richards Majestic
    * MTCHIL = Mount Chiliad
    * MTGORDO = Mount Gordo
    * MTJOSE = Mount Josiah
    * MURRI = Murrieta Heights
    * NCHU = North Chumash
    * NOOSE = N.O.O.S.E
    * OCEANA = Pacific Ocean
    * PALCOV = Paleto Cove
    * PALETO = Paleto Bay
    * PALFOR = Paleto Forest
    * PALHIGH = Palomino Highlands
    * PALMPOW = Palmer-Taylor Power Station
    * PBLUFF = Pacific Bluffs
    * PBOX = Pillbox Hill
    * PROCOB = Procopio Beach
    * RANCHO = Rancho
    * RGLEN = Richman Glen
    * RICHM = Richman
    * ROCKF = Rockford Hills
    * RTRAK = Redwood Lights Track
    * SANAND = San Andreas
    * SANCHIA = San Chianski Mountain Range
    * SANDY = Sandy Shores
    * SKID = Mission Row
    * SLAB = Stab City
    * STAD = Maze Bank Arena
    * STRAW = Strawberry
    * TATAMO = Tataviam Mountains
    * TERMINA = Terminal
    * TEXTI = Textile City
    * TONGVAH = Tongva Hills
    * TONGVAV = Tongva Valley
    * VCANA = Vespucci Canals
    * VESP = Vespucci
    * VINE = Vinewood
    * WINDF = Ron Alternates Wind Farm
    * WVINE = West Vinewood
    * ZANCUDO = Zancudo River
    * ZP_ORT = Port of South Los Santos
    * ZQ_UAR = Davis Quartz
    */
    @:pure static inline function GetNameOfZone(x: Int, y: Int, z: Int): String { return untyped __lua__('GetNameOfZone')(x, y, z); }
    @:pure static inline function GetNamedRendertargetRenderId(p0: String): Int { return untyped __lua__('GetNamedRendertargetRenderId')(p0); }
    @:pure static inline function GetNavmeshRouteDistanceRemaining(ped: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('GetNavmeshRouteDistanceRemaining')(ped); }
    @:pure static inline function GetNavmeshRouteResult(ped: Int): Int { return untyped __lua__('GetNavmeshRouteResult')(ped); }
    @:pure static inline function GetNearestPlayerToEntity(entity: Int): Int { return untyped __lua__('GetNearestPlayerToEntity')(entity); }
    @:pure static inline function GetNearestPlayerToEntityOnTeam(entity: Int, team: Int): Int { return untyped __lua__('GetNearestPlayerToEntityOnTeam')(entity, team); }
    
    /**
    * Could this be used alongside either,
    * SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES or _SET_NETWORK_ID_SYNC_TO_PLAYER to make it so other players can hear the sound while online? It'd be a bit troll-fun to be able to play the Zancudo UFO creepy sounds globally.
    */
    @:pure static inline function GetNetworkIdFromSoundId(soundId: Int): Int { return untyped __lua__('GetNetworkIdFromSoundId')(soundId); }
    @:pure static inline function GetNetworkTime(): Int { return untyped __lua__('GetNetworkTime')(); }
    @:pure static inline function GetNextBlipInfoId(blipSprite: Int): Int { return untyped __lua__('GetNextBlipInfoId')(blipSprite); }
    
    /**
    * Returns weather name hash
    */
    @:pure static inline function GetNextWeatherTypeHashName(): Int { return untyped __lua__('GetNextWeatherTypeHashName')(); }
    
    /**
    * Returns weather name hash
    */
    @:pure static inline function GetNextWeatherType(): Int { return untyped __lua__('GetNextWeatherType')(); }
    
    /**
    * Needs more research. Gets the stat name of a masked bool?
    * p4 - Usually "_NGPSTAT_BOOL" or "_NGTATPSTAT_BOOL". There may be more that I missed.
    */
    @:pure static inline function GetNgstatBoolHash(index: Int, spStat: Bool, charStat: Bool, character: Int, section: String): Int { return untyped __lua__('GetNgstatBoolHash')(index, spStat, charStat, character, section); }
    
    /**
    * Needs more research. Gets the stat name of a masked bool?
    * p4 - Usually "_NGPSTAT_BOOL" or "_NGTATPSTAT_BOOL". There may be more that I missed.
    */
    @:pure static inline function N_0xba52ff538ed2bc71(index: Int, spStat: Bool, charStat: Bool, character: Int, section: String): Int { return untyped __lua__('N_0xba52ff538ed2bc71')(index, spStat, charStat, character, section); }
    
    /**
    * Needs more research. Gets the stat name of a masked int?
    * p4 - Usually one of the following (there may be more that I missed):
    * -----&gt; "_APAPSTAT_INT"
    * -----&gt; "_LRPSTAT_INT"
    * -----&gt; "_NGPSTAT_INT"
    * -----&gt; "_MP_APAPSTAT_INT"
    * -----&gt; "_MP_LRPSTAT_INT"
    */
    @:pure static inline function GetNgstatIntHash(index: Int, spStat: Bool, charStat: Bool, character: Int, section: String): Int { return untyped __lua__('GetNgstatIntHash')(index, spStat, charStat, character, section); }
    
    /**
    * Needs more research. Gets the stat name of a masked int?
    * p4 - Usually one of the following (there may be more that I missed):
    * -----&gt; "_APAPSTAT_INT"
    * -----&gt; "_LRPSTAT_INT"
    * -----&gt; "_NGPSTAT_INT"
    * -----&gt; "_MP_APAPSTAT_INT"
    * -----&gt; "_MP_LRPSTAT_INT"
    */
    @:pure static inline function N_0x2b4cdca6f07ff3da(index: Int, spStat: Bool, charStat: Bool, character: Int, section: String): Int { return untyped __lua__('N_0x2b4cdca6f07ff3da')(index, spStat, charStat, character, section); }
    @:pure static inline function GetNoLoadingScreen(): Int { return untyped __lua__('GetNoLoadingScreen')(); }
    @:pure static inline function GetNthClosestVehicleNode(x: Int, y: Int, z: Int, nthClosest: Int, unknown1: Int, unknown2: Int, unknown3: Int): { a0: Int, a1: Array<Int> } { return untyped __lua__('GetNthClosestVehicleNode')(x, y, z, nthClosest, unknown1, unknown2, unknown3); }
    
    /**
    * See gtaforums.com/topic/843561-pathfind-node-types for node type info. 0 = paved road only, 1 = any road, 3 = water
    * p10 always equal 0x40400000
    * p11 always equal 0
    */
    @:pure static inline function GetNthClosestVehicleNodeFavourDirection(x: Int, y: Int, z: Int, desiredX: Int, desiredY: Int, desiredZ: Int, nthClosest: Int, nodetype: Int, p10: Int, p11: Int): { a0: Int, a1: Array<Int>, a2: Int } { return untyped __lua__('GetNthClosestVehicleNodeFavourDirection')(x, y, z, desiredX, desiredY, desiredZ, nthClosest, nodetype, p10, p11); }
    
    /**
    * Returns the id.
    */
    @:pure static inline function GetNthClosestVehicleNodeId(x: Int, y: Int, z: Int, nth: Int, nodetype: Int, p5: Int, p6: Int): Int { return untyped __lua__('GetNthClosestVehicleNodeId')(x, y, z, nth, nodetype, p5, p6); }
    @:pure static inline function GetNthClosestVehicleNodeIdWithHeading(x: Int, y: Int, z: Int, nthClosest: Int, outHeading: Int, p6: Int, p7: Int, p8: Int): { a0: Int, a1: Array<Int> } { return untyped __lua__('GetNthClosestVehicleNodeIdWithHeading')(x, y, z, nthClosest, outHeading, p6, p7, p8); }
    
    /**
    * Get the nth closest vehicle node and its heading. (unknown2 = 9, unknown3 = 3.0, unknown4 = 2.5)
    */
    @:pure static inline function GetNthClosestVehicleNodeWithHeading(x: Int, y: Int, z: Int, nthClosest: Int, unknown2: Int, unknown3: Int, unknown4: Int): { a0: Int, a1: Array<Int>, a2: Int, a3: Int } { return untyped __lua__('GetNthClosestVehicleNodeWithHeading')(x, y, z, nthClosest, unknown2, unknown3, unknown4); }
    
    /**
    * _GET_NUM_DECORATIONS
    * only documented to be continued...
    */
    @:pure static inline function GetNumDecorations(character: Int): Int { return untyped __lua__('GetNumDecorations')(character); }
    
    /**
    * _GET_NUM_DECORATIONS
    * only documented to be continued...
    */
    @:pure static inline function N_0x278f76c3b0a8f109(character: Int): Int { return untyped __lua__('N_0x278f76c3b0a8f109')(character); }
    @:pure static inline function GetNumDlcVehicles(): Int { return untyped __lua__('GetNumDlcVehicles')(); }
    
    /**
    * Allowed Values from 0 - DLC1::GET_NUM_DLC_WEAPONS()
    */
    @:pure static inline function GetNumDlcWeaponComponents(dlcWeaponIndex: Int): Int { return untyped __lua__('GetNumDlcWeaponComponents')(dlcWeaponIndex); }
    
    /**
    * Gets the total number of DLC weapons.
    */
    @:pure static inline function GetNumDlcWeapons(): Int { return untyped __lua__('GetNumDlcWeapons')(); }
    
    /**
    * Returns number of possible values of the componentId argument of GET_FORCED_COMPONENT.
    */
    @:pure static inline function GetNumForcedComponents(componentHash: EitherType<String, Int>): Int { return untyped __lua__('GetNumForcedComponents')(componentHash); }
    
    /**
    * Used for freemode (online) characters.
    */
    @:pure static inline function GetNumHairColors(): Int { return untyped __lua__('GetNumHairColors')(); }
    
    /**
    * Used with freemode (online) characters.
    */
    @:pure static inline function GetNumHeadOverlayValues(overlayID: Int): Int { return untyped __lua__('GetNumHeadOverlayValues')(overlayID); }
    @:pure static inline function GetNumMakeupColors(): Int { return untyped __lua__('GetNumMakeupColors')(); }
    @:pure static inline function N_0xd1f7ca1535d22818(): Int { return untyped __lua__('N_0xd1f7ca1535d22818')(); }
    @:pure static inline function GetNumMembershipDesc(): Int { return untyped __lua__('GetNumMembershipDesc')(); }
    @:pure static inline function N_0x1f471b79acc90bef(): Int { return untyped __lua__('N_0x1f471b79acc90bef')(); }
    @:pure static inline function GetNumModColors(p0: Int, p1: Bool): Int { return untyped __lua__('GetNumModColors')(p0, p1); }
    @:pure static inline function GetNumModKits(vehicle: Int): Int { return untyped __lua__('GetNumModKits')(vehicle); }
    
    /**
    * Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
    */
    @:pure static inline function GetNumParentPedsOfType(type: Int): Int { return untyped __lua__('GetNumParentPedsOfType')(type); }
    
    /**
    * character is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.
    * componentId is between 0 and 11 and corresponds to the usual component slots.
    * p1 could be the outfit number; unsure.
    * p2 is usually -1; unknown function.
    * p3 appears to be a boolean flag; unknown function.
    * p4 is usually -1; unknown function.
    */
    @:pure static inline function GetNumPropsFromOutfit(character: Int, p1: Int, p2: Int, p3: Bool, p4: Int, componentId: Int): Int { return untyped __lua__('GetNumPropsFromOutfit')(character, p1, p2, p3, p4, componentId); }
    
    /**
    * p0 appears to be for MP
    */
    @:pure static inline function GetNumReservedMissionObjects(p0: Bool): Int { return untyped __lua__('GetNumReservedMissionObjects')(p0); }
    
    /**
    * p0 appears to be for MP
    */
    @:pure static inline function GetNumReservedMissionPeds(p0: Bool): Int { return untyped __lua__('GetNumReservedMissionPeds')(p0); }
    
    /**
    * p0 appears to be for MP
    */
    @:pure static inline function GetNumReservedMissionVehicles(p0: Bool): Int { return untyped __lua__('GetNumReservedMissionVehicles')(p0); }
    
    /**
    * Gets the amount of metadata values with the specified key existing in the specified resource's manifest.
    * See also: [Resource manifest](https://wiki.fivem.net/wiki/Resource_manifest)
    * @param resourceName The resource name.
    * @param metadataKey The key to look up in the resource manifest.
    */
    @:pure static inline function GetNumResourceMetadata(resourceName: String, metadataKey: String): Int { return untyped __lua__('GetNumResourceMetadata')(resourceName, metadataKey); }
    @:pure static inline function GetNumResources(): Int { return untyped __lua__('GetNumResources')(); }
    
    /**
    * Returns how many possible mods a vehicle has for a given mod type
    */
    @:pure static inline function GetNumVehicleMods(vehicle: Int, modType: Int): Int { return untyped __lua__('GetNumVehicleMods')(vehicle, modType); }
    @:pure static inline function GetNumVehicleWindowTints(): Int { return untyped __lua__('GetNumVehicleWindowTints')(); }
    @:pure static inline function GetNumberOfActiveBlips(): Int { return untyped __lua__('GetNumberOfActiveBlips')(); }
    @:pure static inline function GetNumberOfDispatchedUnitsForPlayer(dispatchService: Int): Int { return untyped __lua__('GetNumberOfDispatchedUnitsForPlayer')(dispatchService); }
    @:pure static inline function N_0xeb4a0c2d56441717(dispatchService: Int): Int { return untyped __lua__('N_0xeb4a0c2d56441717')(dispatchService); }
    @:pure static inline function GetNumberOfEvents(p0: Bool): Int { return untyped __lua__('GetNumberOfEvents')(p0); }
    @:pure static inline function GetNumberOfFiresInRange(x: Int, y: Int, z: Int, radius: Int): Int { return untyped __lua__('GetNumberOfFiresInRange')(x, y, z, radius); }
    
    /**
    * Gets the number of instances of the specified script is currently running.
    * Actually returns numInstances - 1.
    * if (scriptPtr)
    * v3 = GetNumberOfInstancesOfScript(scriptPtr) - 1;
    * return v3;
    */
    @:pure static inline function GetNumberOfInstancesOfScriptWithNameHash(scriptHash: EitherType<String, Int>): Int { return untyped __lua__('GetNumberOfInstancesOfScriptWithNameHash')(scriptHash); }
    
    /**
    * Gets the number of instances of the specified script is currently running.
    * Actually returns numInstances - 1.
    * if (scriptPtr)
    * v3 = GetNumberOfInstancesOfScript(scriptPtr) - 1;
    * return v3;
    */
    @:pure static inline function GetNumberOfInstancesOfStreamedScript(scriptHash: EitherType<String, Int>): Int { return untyped __lua__('GetNumberOfInstancesOfStreamedScript')(scriptHash); }
    @:pure static inline function GetNumberOfPassengerVoiceVariations(p0: Int): Int { return untyped __lua__('GetNumberOfPassengerVoiceVariations')(p0); }
    
    /**
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function GetNumberOfPedDrawableVariations(ped: Int, componentId: Int): Int { return untyped __lua__('GetNumberOfPedDrawableVariations')(ped, componentId); }
    
    /**
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function GetNumberOfPedPropDrawableVariations(ped: Int, propId: Int): Int { return untyped __lua__('GetNumberOfPedPropDrawableVariations')(ped, propId); }
    
    /**
    * Need to check behavior when drawableId = -1
    * - Doofy.Ass
    * Why this function doesn't work and return nill value?
    * GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(PLAYER.PLAYER_PED_ID(), 0, 5)
    * tick: scripts/addins/menu_execute.lua:51: attempt to call field 'GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS' (a nil value)
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function GetNumberOfPedPropTextureVariations(ped: Int, propId: Int, drawableId: Int): Int { return untyped __lua__('GetNumberOfPedPropTextureVariations')(ped, propId, drawableId); }
    
    /**
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function GetNumberOfPedTextureVariations(ped: Int, componentId: Int, drawableId: Int): Int { return untyped __lua__('GetNumberOfPedTextureVariations')(ped, componentId, drawableId); }
    
    /**
    * Gets the number of players in the current session.<br/>If not multiplayer, always returns 1.
    */
    @:pure static inline function GetNumberOfPlayers(): Int { return untyped __lua__('GetNumberOfPlayers')(); }
    @:pure static inline function GetNumberOfStreamingRequests(): Int { return untyped __lua__('GetNumberOfStreamingRequests')(); }
    
    /**
    * Actually number of color combinations
    */
    @:pure static inline function GetNumberOfVehicleColours(vehicle: Int): Int { return untyped __lua__('GetNumberOfVehicleColours')(vehicle); }
    
    /**
    * Returns the number of *types* of licence plates, enumerated below in SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX.
    */
    @:pure static inline function GetNumberOfVehicleNumberPlates(): Int { return untyped __lua__('GetNumberOfVehicleNumberPlates')(); }
    @:pure static inline function GetObjectFragmentDamageHealth(p0: Int, p1: Bool): Int { return untyped __lua__('GetObjectFragmentDamageHealth')(p0, p1); }
    
    /**
    * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
    */
    @:pure static inline function GetObjectIndexFromEntityIndex(entity: Int): Int { return untyped __lua__('GetObjectIndexFromEntityIndex')(entity); }
    @:pure static inline function GetObjectOffsetFromCoords(xPos: Int, yPos: Int, zPos: Int, heading: Int, xOffset: Int, yOffset: Int, zOffset: Int): Array<Int> { return untyped __lua__('GetObjectOffsetFromCoords')(xPos, yPos, zPos, heading, xOffset, yOffset, zOffset); }
    
    /**
    * Converts world coords (posX - Z) to coords relative to the entity
    * Example:
    * posX is given as 50
    * entity's x coord is 40
    * the returned x coord will then be 10 or -10, not sure haven't used this in a while (think it is 10 though).
    */
    @:pure static inline function GetOffsetFromEntityGivenWorldCoords(entity: Int, posX: Int, posY: Int, posZ: Int): Array<Int> { return untyped __lua__('GetOffsetFromEntityGivenWorldCoords')(entity, posX, posY, posZ); }
    
    /**
    * Offset values are relative to the entity.
    * x = left/right
    * y = forward/backward
    * z = up/down
    */
    @:pure static inline function GetOffsetFromEntityInWorldCoords(entity: Int, offsetX: Int, offsetY: Int, offsetZ: Int): Array<Int> { return untyped __lua__('GetOffsetFromEntityInWorldCoords')(entity, offsetX, offsetY, offsetZ); }
    @:pure static inline function GetOffsetFromInteriorInWorldCoords(interiorID: Int, x: Int, y: Int, z: Int): Array<Int> { return untyped __lua__('GetOffsetFromInteriorInWorldCoords')(interiorID, x, y, z); }
    
    /**
    * Online version is defined here: update\update.rpf\common\data\version.txt
    * Example:
    * [ONLINE_VERSION_NUMBER]
    * 1.33
    * _GET_ONLINE_VERSION() will return "1.33"
    * Belongs in NETWORK
    */
    @:pure static inline function GetOnlineVersion(): String { return untyped __lua__('GetOnlineVersion')(); }
    
    /**
    * Online version is defined here: update\update.rpf\common\data\version.txt
    * Example:
    * [ONLINE_VERSION_NUMBER]
    * 1.33
    * _GET_ONLINE_VERSION() will return "1.33"
    * Belongs in NETWORK
    */
    @:pure static inline function GetGameVersion(): String { return untyped __lua__('GetGameVersion')(); }
    
    /**
    * Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.
    */
    @:pure static inline function GetOnscreenKeyboardResult(): String { return untyped __lua__('GetOnscreenKeyboardResult')(); }
    
    /**
    * Returns:
    * 5
    * 10
    * 15
    * 20
    * 25
    * 30
    * 35
    */
    @:pure static inline function GetPauseMenuState(): Int { return untyped __lua__('GetPauseMenuState')(); }
    @:pure static inline function GetPedAccuracy(ped: Int): Int { return untyped __lua__('GetPedAccuracy')(ped); }
    
    /**
    * Returns the ped's alertness (0-3).
    * Values :
    * 0 : Neutral
    * 1 : Heard something (gun shot, hit, etc)
    * 2 : Knows (the origin of the event)
    * 3 : Fully alerted (is facing the event?)
    * If the Ped does not exist, returns -1.
    */
    @:pure static inline function GetPedAlertness(ped: Int): Int { return untyped __lua__('GetPedAlertness')(ped); }
    @:pure static inline function GetPedAmmoByType(ped: Int, ammoType: Int): Int { return untyped __lua__('GetPedAmmoByType')(ped, ammoType); }
    @:pure static inline function GetPedAmmoTypeFromWeapon(ped: Int, weaponHash: EitherType<String, Int>): Int { return untyped __lua__('GetPedAmmoTypeFromWeapon')(ped, weaponHash); }
    @:pure static inline function GetPedAmmoType(ped: Int, weaponHash: EitherType<String, Int>): Int { return untyped __lua__('GetPedAmmoType')(ped, weaponHash); }
    @:pure static inline function GetPedArmour(ped: Int): Int { return untyped __lua__('GetPedArmour')(ped); }
    @:pure static inline function GetPedAsGroupLeader(groupID: Int): Int { return untyped __lua__('GetPedAsGroupLeader')(groupID); }
    
    /**
    * from fm_mission_controller.c4 (variable names changed for clarity):
    * int groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());
    * PED::GET_GROUP_SIZE(group, &amp;unused, &amp;groupSize);
    * if (groupSize &gt;= 1) {
    * . . . . for (int memberNumber = 0; memberNumber &lt; groupSize; memberNumber++) {
    * . . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);
    * . . . . . . . . //and so on
    */
    @:pure static inline function GetPedAsGroupMember(groupID: Int, memberNumber: Int): Int { return untyped __lua__('GetPedAsGroupMember')(groupID, memberNumber); }
    
    /**
    * Gets the position of the specified bone of the specified ped.
    * ped: The ped to get the position of a bone from.
    * boneId: The ID of the bone to get the position from. This is NOT the index.
    * offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
    * offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
    * offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.
    */
    @:pure static inline function GetPedBoneCoords(ped: Int, boneId: Int, offsetX: Int, offsetY: Int, offsetZ: Int): Array<Int> { return untyped __lua__('GetPedBoneCoords')(ped, boneId, offsetX, offsetY, offsetZ); }
    
    /**
    * no bone= -1
    */
    @:pure static inline function GetPedBoneIndex(ped: Int, boneId: Int): Int { return untyped __lua__('GetPedBoneIndex')(ped, boneId); }
    
    /**
    * Returns the hash of the weapon/model/object that killed the ped.
    */
    @:pure static inline function GetPedCauseOfDeath(ped: Int): Int { return untyped __lua__('GetPedCauseOfDeath')(ped); }
    @:pure static inline function GetPedCombatMovement(ped: Int): Int { return untyped __lua__('GetPedCombatMovement')(ped); }
    @:pure static inline function GetPedCombatRange(ped: Int): Int { return untyped __lua__('GetPedCombatRange')(ped); }
    
    /**
    * p2 is always 1 in the scripts.
    * if (GET_PED_CONFIG_FLAG(ped, 78, 1))
    * = returns true if ped is aiming/shooting a gun
    */
    @:pure static inline function GetPedConfigFlag(ped: Int, flagId: Int, p2: Bool): Int { return untyped __lua__('GetPedConfigFlag')(ped, flagId, p2); }
    @:pure static inline function GetPedDecorationsState(ped: Int): Int { return untyped __lua__('GetPedDecorationsState')(ped); }
    @:pure static inline function N_0x71eab450d86954a1(ped: Int): Int { return untyped __lua__('N_0x71eab450d86954a1')(ped); }
    @:pure static inline function GetPedDefensiveAreaPosition(ped: Int, p1: Bool): Array<Int> { return untyped __lua__('GetPedDefensiveAreaPosition')(ped, p1); }
    @:pure static inline function GetPedDesiredMoveBlendRatio(ped: Int): Int { return untyped __lua__('GetPedDesiredMoveBlendRatio')(ped); }
    
    /**
    * Ids
    * 1
    * 2
    * 3
    * 4
    * 5
    * 6
    * 7 - ------
    * 8 - Accessories 1
    * 9 - Accessories 2
    * 10
    * 11 - Auxiliary parts for torso
    */
    @:pure static inline function GetPedDrawableVariation(ped: Int, componentId: Int): Int { return untyped __lua__('GetPedDrawableVariation')(ped, componentId); }
    @:pure static inline function GetPedEnveffScale(ped: Int): Int { return untyped __lua__('GetPedEnveffScale')(ped); }
    
    /**
    * Gets the offset the specified ped has moved since the previous tick.
    * If worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it'll return 1,5,0.
    * If worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it'll return 1,5,0.
    */
    @:pure static inline function GetPedExtractedDisplacement(ped: Int, worldSpace: Bool): Array<Int> { return untyped __lua__('GetPedExtractedDisplacement')(ped, worldSpace); }
    
    /**
    * hash collision???
    */
    @:pure static inline function GetPedFloodInvincibility(ped: Int, p1: Bool): Void { return untyped __lua__('GetPedFloodInvincibility')(ped, p1); }
    
    /**
    * Returns the group id of which the specified ped is a member of.
    */
    @:pure static inline function GetPedGroupIndex(ped: Int): Int { return untyped __lua__('GetPedGroupIndex')(ped); }
    
    /**
    * The pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field.
    * (Edit) Console Hash: 0x44E1680C
    * pass this struct in the second parameter
    * typedef struct
    * {
    * int shapeFirst, shapeSecond, shapeThird;
    * int skinFirst, skinSecond, skinThird;
    * float shapeMix, skinMix, thirdMix;
    * } headBlendData;
    */
    @:pure static inline function GetPedHeadBlendData(ped: Int, headBlendData: Int): Int { return untyped __lua__('GetPedHeadBlendData')(ped, headBlendData); }
    
    /**
    * Likely a char, if that overlay is not set, e.i. "None" option, returns 255;
    */
    @:pure static inline function GetPedHeadOverlayValue(ped: Int, overlayID: Int): Int { return untyped __lua__('GetPedHeadOverlayValue')(ped, overlayID); }
    
    /**
    * -1 (driver) &lt;= index &lt; GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle)
    */
    @:pure static inline function GetPedInVehicleSeat(vehicle: Int, index: Int): Int { return untyped __lua__('GetPedInVehicleSeat')(vehicle, index); }
    
    /**
    * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
    */
    @:pure static inline function GetPedIndexFromEntityIndex(entity: Int): Int { return untyped __lua__('GetPedIndexFromEntityIndex')(entity); }
    
    /**
    * Returns a handle to the first entity within the a circle spawned inside the 2 points from a radius. It could return a ped or an entity, but the scripts expect a ped, but still check if it's a ped.
    */
    @:pure static inline function GetPedInsideExplosionArea(explosionType: Int, x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, radius: Int): Int { return untyped __lua__('GetPedInsideExplosionArea')(explosionType, x1, y1, z1, x2, y2, z2, radius); }
    @:pure static inline function GetPedLastDamageBone(ped: Int, outBone: Int): Int { return untyped __lua__('GetPedLastDamageBone')(ped, outBone); }
    
    /**
    * Pass ped. Pass address of Vector3.
    * The coord will be put into the Vector3.
    * The return will determine whether there was a coord found or not.
    */
    @:pure static inline function GetPedLastWeaponImpactCoord(ped: Int): { a0: Int, a1: Array<Int> } { return untyped __lua__('GetPedLastWeaponImpactCoord')(ped); }
    @:pure static inline function GetPedMaxHealth(ped: Int): Int { return untyped __lua__('GetPedMaxHealth')(ped); }
    @:pure static inline function GetPedMoney(ped: Int): Int { return untyped __lua__('GetPedMoney')(ped); }
    
    /**
    * sizeAndPeds - is a pointer to an array. The array is filled with peds found nearby the ped supplied to the first argument.
    * ignore - ped type to ignore
    * Return value is the number of peds found and added to the array passed.
    * -----------------------------------
    * To make this work in most menu bases at least in C++ do it like so,
    * Formatted Example: pastebin.com/D8an9wwp
    * -----------------------------------
    * Example: gtaforums.com/topic/789788-function-args-to-pedget-ped-nearby-peds/?p=1067386687
    */
    @:pure static inline function GetPedNearbyPeds(ped: Int, ignore: Int): { a0: Int, a1: Int } { return untyped __lua__('GetPedNearbyPeds')(ped, ignore); }
    
    /**
    * Returns size of array, passed into the second variable.
    * See below for usage information.
    * This function actually requires a struct, where the first value is the maximum number of elements to return.  Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format.
    * //Setup the array
    * const int numElements = 10;
    * const int arrSize = numElements * 2 + 2;
    * Any veh[arrSize];
    * //0 index is the size of the array
    * veh[0] = numElements;
    * int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);
    * if (veh != NULL)
    * {
    * //Simple loop to go through results
    * for (int i = 0; i &lt; count; i++)
    * {
    * int offsettedID = i * 2 + 2;
    * //Make sure it exists
    * if (veh[offsettedID] != NULL &amp;&amp; ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))
    * {
    * //Do something
    * }
    * }
    * }
    */
    @:pure static inline function GetPedNearbyVehicles(ped: Int, sizeAndVehs: Int): Int { return untyped __lua__('GetPedNearbyVehicles')(ped, sizeAndVehs); }
    
    /**
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function GetPedPaletteVariation(ped: Int, componentId: Int): Int { return untyped __lua__('GetPedPaletteVariation')(ped, componentId); }
    
    /**
    * -1: no landing
    * 0: landing on both feet
    * 1: stumbling
    * 2: rolling
    * 3: ragdoll
    */
    @:pure static inline function GetPedParachuteLandingType(ped: Int): Int { return untyped __lua__('GetPedParachuteLandingType')(ped); }
    
    /**
    * Returns:
    * -1: Normal
    * 0: Wearing parachute on back
    * 1: Parachute opening
    * 2: Parachute open
    * 3: Falling to doom (e.g. after exiting parachute)
    * Normal means no parachute?
    */
    @:pure static inline function GetPedParachuteState(ped: Int): Int { return untyped __lua__('GetPedParachuteState')(ped); }
    @:pure static inline function GetPedParachuteTintIndex(ped: Int, outTintIndex: Int): Void { return untyped __lua__('GetPedParachuteTintIndex')(ped, outTintIndex); }
    
    /**
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function GetPedPropIndex(ped: Int, componentId: Int): Int { return untyped __lua__('GetPedPropIndex')(ped, componentId); }
    
    /**
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function GetPedPropTextureIndex(ped: Int, componentId: Int): Int { return untyped __lua__('GetPedPropTextureIndex')(ped, componentId); }
    @:pure static inline function GetPedRagdollBoneIndex(ped: Int, bone: Int): Int { return untyped __lua__('GetPedRagdollBoneIndex')(ped, bone); }
    @:pure static inline function GetPedRelationshipGroupDefaultHash(ped: Int): Int { return untyped __lua__('GetPedRelationshipGroupDefaultHash')(ped); }
    @:pure static inline function GetPedRelationshipGroupHash(ped: Int): Int { return untyped __lua__('GetPedRelationshipGroupHash')(ped); }
    @:pure static inline function GetPedResetFlag(ped: Int, flagId: Int): Int { return untyped __lua__('GetPedResetFlag')(ped, flagId); }
    
    /**
    * Returns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped'
    * Is best to check if the Ped is dead before asking for its killer.
    */
    @:pure static inline function GetPedSourceOfDeath(ped: Int): Int { return untyped __lua__('GetPedSourceOfDeath')(ped); }
    
    /**
    * Returns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped'
    * Is best to check if the Ped is dead before asking for its killer.
    */
    @:pure static inline function GetPedKiller(ped: Int): Int { return untyped __lua__('GetPedKiller')(ped); }
    
    /**
    * Returns whether the entity is in stealth mode
    */
    @:pure static inline function GetPedStealthMovement(ped: Int): Int { return untyped __lua__('GetPedStealthMovement')(ped); }
    
    /**
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function GetPedTextureVariation(ped: Int, componentId: Int): Int { return untyped __lua__('GetPedTextureVariation')(ped, componentId); }
    
    /**
    * Console Hash: 0xDF6D5D54
    * There is no way this is the correct name. The only time this is called it's compared with the game timer and I used this to test something and noticed when I was killed by no matter what it was my 'Time Of Death' via this native was always 0, but my friends was some random big number like so, 147591.
    * Retreives [CPed + 15CC] (as of 944)
    */
    @:pure static inline function GetPedTimeOfDeath(ped: Int): Int { return untyped __lua__('GetPedTimeOfDeath')(ped); }
    
    /**
    * Ped Types: (ordered by return priority)
    * Michael = 0
    * Franklin = 1
    * Trevor = 2
    * Army = 29
    * Animal = 28
    * SWAT = 27
    * LSFD = 21
    * Paramedic = 20
    * Cop = 6
    * Male = 4
    * Female = 5
    * Human = 26
    * Note/Exception
    * hc_gunman : 4 // Mix male and female
    * hc_hacker : 4 // Mix male and female
    * mp_f_misty_01 : 4 // Female character
    * s_f_y_ranger_01 : 5 // Ranger
    * s_m_y_ranger_01 : 4 // Ranger
    * s_m_y_uscg_01 : 6 // US Coast Guard
    */
    @:pure static inline function GetPedType(ped: Int): Int { return untyped __lua__('GetPedType')(ped); }
    
    /**
    * Quick disassembly and test seems to indicate that this native gets the Ped currently using the specified door.
    */
    @:pure static inline function GetPedUsingVehicleDoor(vehicle: Int, doorIndex: Int): Int { return untyped __lua__('GetPedUsingVehicleDoor')(vehicle, doorIndex); }
    
    /**
    * Quick disassembly and test seems to indicate that this native gets the Ped currently using the specified door.
    */
    @:pure static inline function N_0x218297bf0cfd853b(vehicle: Int, doorIndex: Int): Int { return untyped __lua__('N_0x218297bf0cfd853b')(vehicle, doorIndex); }
    @:pure static inline function GetPedWaypointDistance(p0: Int): Int { return untyped __lua__('GetPedWaypointDistance')(p0); }
    @:pure static inline function GetPedWaypointProgress(p0: Int): Int { return untyped __lua__('GetPedWaypointProgress')(p0); }
    @:pure static inline function GetPedWeaponTintIndex(ped: Int, weaponHash: EitherType<String, Int>): Int { return untyped __lua__('GetPedWeaponTintIndex')(ped, weaponHash); }
    @:pure static inline function GetPedWeapontypeInSlot(ped: Int, weaponSlot: EitherType<String, Int>): Int { return untyped __lua__('GetPedWeapontypeInSlot')(ped, weaponSlot); }
    
    /**
    * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
    */
    @:pure static inline function GetPedheadshotTxdString(handle: Int): String { return untyped __lua__('GetPedheadshotTxdString')(handle); }
    @:pure static inline function GetPedsJacker(ped: Int): Int { return untyped __lua__('GetPedsJacker')(ped); }
    @:pure static inline function GetPhoneGestureAnimCurrentTime(ped: Int): Int { return untyped __lua__('GetPhoneGestureAnimCurrentTime')(ped); }
    @:pure static inline function GetPhoneGestureAnimTotalTime(ped: Int): Int { return untyped __lua__('GetPhoneGestureAnimTotalTime')(ped); }
    @:pure static inline function GetPickupCoords(pickup: Int): Array<Int> { return untyped __lua__('GetPickupCoords')(pickup); }
    @:pure static inline function GetPickupObject(pickup: Int): Int { return untyped __lua__('GetPickupObject')(pickup); }
    @:pure static inline function N_0x5099bc55630b25ae(pickup: Int): Int { return untyped __lua__('N_0x5099bc55630b25ae')(pickup); }
    @:pure static inline function GetPlayerCurrentStealthNoise(player: Int): Int { return untyped __lua__('GetPlayerCurrentStealthNoise')(player); }
    @:pure static inline function GetPlayerFromServerId(serverId: Int): Int { return untyped __lua__('GetPlayerFromServerId')(serverId); }
    
    /**
    * Returns the group ID the player is member of.
    */
    @:pure static inline function GetPlayerGroup(player: Int): Int { return untyped __lua__('GetPlayerGroup')(player); }
    @:pure static inline function GetPlayerHasReserveParachute(player: Int): Int { return untyped __lua__('GetPlayerHasReserveParachute')(player); }
    
    /**
    * Called 5 times in the scripts. All occurrences found in b617d, sorted alphabetically and identical lines removed:
    * AUDIO::GET_PLAYER_HEADSET_SOUND_ALTERNATE("INOUT", 0.0);
    * AUDIO::GET_PLAYER_HEADSET_SOUND_ALTERNATE("INOUT", 1.0);
    */
    @:pure static inline function GetPlayerHeadsetSoundAlternate(p0: String, p1: Int): Void { return untyped __lua__('GetPlayerHeadsetSoundAlternate')(p0, p1); }
    
    /**
    * Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT
    */
    @:pure static inline function GetPlayerIndex(): Int { return untyped __lua__('GetPlayerIndex')(); }
    
    /**
    * Returns the Player's Invincible status.
    * This function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this:
    * bool IsPlayerInvincible(Player player)
    * {
    * auto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player));
    * if (addr)
    * {
    * DWORD flag = *(DWORD *)(addr + 0x188);
    * return ((flag &amp; (1 &lt;&lt; 8)) != 0) || ((flag &amp; (1 &lt;&lt; 9)) != 0);
    * }
    * return false;
    * }
    */
    @:pure static inline function GetPlayerInvincible(player: Int): Int { return untyped __lua__('GetPlayerInvincible')(player); }
    @:pure static inline function GetPlayerMaxArmour(player: Int): Int { return untyped __lua__('GetPlayerMaxArmour')(player); }
    @:pure static inline function GetPlayerName(player: Int): String { return untyped __lua__('GetPlayerName')(player); }
    @:pure static inline function GetPlayerParachutePackTintIndex(player: Int, tintIndex: Int): Void { return untyped __lua__('GetPlayerParachutePackTintIndex')(player, tintIndex); }
    @:pure static inline function GetPlayerParachuteSmokeTrailColor(player: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('GetPlayerParachuteSmokeTrailColor')(player); }
    
    /**
    * Tints:
    * None = -1,
    * Rainbow = 0,
    * Red = 1,
    * SeasideStripes = 2,
    * WidowMaker = 3,
    * Patriot = 4,
    * Blue = 5,
    * Black = 6,
    * Hornet = 7,
    * AirFocce = 8,
    * Desert = 9,
    * Shadow = 10,
    * HighAltitude = 11,
    * Airbone = 12,
    * Sunrise = 13,
    */
    @:pure static inline function GetPlayerParachuteTintIndex(player: Int, tintIndex: Int): Void { return untyped __lua__('GetPlayerParachuteTintIndex')(player, tintIndex); }
    
    /**
    * Gets the local player ped
    */
    @:pure static inline function GetPlayerPed(player: Int): Int { return untyped __lua__('GetPlayerPed')(player); }
    @:pure static inline function GetPlayerPedIsFollowing(ped: Int): Int { return untyped __lua__('GetPlayerPedIsFollowing')(ped); }
    
    /**
    * Same as GET_PLAYER_PED.
    */
    @:pure static inline function GetPlayerPedScriptIndex(player: Int): Int { return untyped __lua__('GetPlayerPedScriptIndex')(player); }
    @:pure static inline function GetPlayerRadioStationGenre(): Int { return untyped __lua__('GetPlayerRadioStationGenre')(); }
    
    /**
    * Returns 255 (radio off index) if the function fails.
    */
    @:pure static inline function GetPlayerRadioStationIndex(): Int { return untyped __lua__('GetPlayerRadioStationIndex')(); }
    
    /**
    * Returns active radio station name
    */
    @:pure static inline function GetPlayerRadioStationName(): String { return untyped __lua__('GetPlayerRadioStationName')(); }
    
    /**
    * Tints:
    * None = -1,
    * Rainbow = 0,
    * Red = 1,
    * SeasideStripes = 2,
    * WidowMaker = 3,
    * Patriot = 4,
    * Blue = 5,
    * Black = 6,
    * Hornet = 7,
    * AirFocce = 8,
    * Desert = 9,
    * Shadow = 10,
    * HighAltitude = 11,
    * Airbone = 12,
    * Sunrise = 13,
    */
    @:pure static inline function GetPlayerReserveParachuteTintIndex(player: Int, index: Int): Void { return untyped __lua__('GetPlayerReserveParachuteTintIndex')(player, index); }
    
    /**
    * Returns RGB color of the player (duh)
    */
    @:pure static inline function GetPlayerRgbColour(player: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('GetPlayerRgbColour')(player); }
    @:pure static inline function GetPlayerServerId(player: Int): Int { return untyped __lua__('GetPlayerServerId')(player); }
    @:pure static inline function GetPlayerShortSwitchState(): Int { return untyped __lua__('GetPlayerShortSwitchState')(); }
    @:pure static inline function GetPlayerSprintStaminaRemaining(player: Int): Int { return untyped __lua__('GetPlayerSprintStaminaRemaining')(player); }
    @:pure static inline function GetPlayerSprintTimeRemaining(player: Int): Int { return untyped __lua__('GetPlayerSprintTimeRemaining')(player); }
    @:pure static inline function GetPlayerSwitchState(): Int { return untyped __lua__('GetPlayerSwitchState')(); }
    @:pure static inline function GetPlayerSwitchType(): Int { return untyped __lua__('GetPlayerSwitchType')(); }
    
    /**
    * Assigns the handle of locked-on melee target to *entity that you pass it.
    * Returns false if no entity found.
    */
    @:pure static inline function GetPlayerTargetEntity(player: Int, entity: Int): Int { return untyped __lua__('GetPlayerTargetEntity')(player, entity); }
    
    /**
    * Gets the player's team.<br/>Does nothing in singleplayer.
    */
    @:pure static inline function GetPlayerTeam(player: Int): Int { return untyped __lua__('GetPlayerTeam')(player); }
    @:pure static inline function GetPlayerUnderwaterTimeRemaining(player: Int): Int { return untyped __lua__('GetPlayerUnderwaterTimeRemaining')(player); }
    @:pure static inline function GetPlayerWantedCentrePosition(player: Int): Array<Int> { return untyped __lua__('GetPlayerWantedCentrePosition')(player); }
    @:pure static inline function GetPlayerWantedLevel(player: Int): Int { return untyped __lua__('GetPlayerWantedLevel')(player); }
    
    /**
    * Alternative: GET_VEHICLE_PED_IS_IN(PLAYER_PED_ID(), 1);
    */
    @:pure static inline function GetPlayersLastVehicle(): Int { return untyped __lua__('GetPlayersLastVehicle')(); }
    @:pure static inline function GetPositionInRecording(p0: Int): Int { return untyped __lua__('GetPositionInRecording')(p0); }
    
    /**
    * p1 is some kind of tolerance
    */
    @:pure static inline function GetPositionOfVehicleRecordingAtTime(p0: Int, p1: Int, p2: String): Array<Int> { return untyped __lua__('GetPositionOfVehicleRecordingAtTime')(p0, p1, p2); }
    
    /**
    * Return POSIX timestamp.
    */
    @:pure static inline function GetPosixTime(): Int { return untyped __lua__('GetPosixTime')(); }
    
    /**
    * Return POSIX timestamp.
    */
    @:pure static inline function N_0x9a73240b49945c76(): Int { return untyped __lua__('N_0x9a73240b49945c76')(); }
    
    /**
    * Gets system time as year, month, day, hour, minute and second.
    * Example usage:
    * int year;
    * int month;
    * int day;
    * int hour;
    * int minute;
    * int second;
    * TIME::GET_POSIX_TIME(&amp;year, &amp;month, &amp;day, &amp;hour, &amp;minute, &amp;second);
    */
    
    /**
    * Returns current weather name hash
    */
    @:pure static inline function GetPrevWeatherTypeHashName(): Int { return untyped __lua__('GetPrevWeatherTypeHashName')(); }
    
    /**
    * Returns current weather name hash
    */
    @:pure static inline function GetPrevWeatherType(): Int { return untyped __lua__('GetPrevWeatherType')(); }
    
    /**
    * anyone have a settingid dump?
    */
    @:pure static inline function GetProfileSetting(profileSetting: Int): Int { return untyped __lua__('GetProfileSetting')(profileSetting); }
    
    /**
    * outfit = a structure passing though it - see GET_SHOP_PED_QUERY_OUTFIT
    * slot - outfit slot
    * item - hold 3 ints in a struct, you can use Vector3 structure
    * GET_SHOP_PED_???
    */
    @:pure static inline function GetPropFromOutfit(outfit: Int, slot: Int, item: Int): Int { return untyped __lua__('GetPropFromOutfit')(outfit, slot, item); }
    @:pure static inline function GetPstatBoolHash(index: Int, spStat: Bool, charStat: Bool, character: Int): Int { return untyped __lua__('GetPstatBoolHash')(index, spStat, charStat, character); }
    @:pure static inline function N_0x80c75307b1c42837(index: Int, spStat: Bool, charStat: Bool, character: Int): Int { return untyped __lua__('N_0x80c75307b1c42837')(index, spStat, charStat, character); }
    @:pure static inline function GetPstatIntHash(index: Int, spStat: Bool, charStat: Bool, character: Int): Int { return untyped __lua__('GetPstatIntHash')(index, spStat, charStat, character); }
    @:pure static inline function N_0x61e111e323419e07(index: Int, spStat: Bool, charStat: Bool, character: Int): Int { return untyped __lua__('N_0x61e111e323419e07')(index, spStat, charStat, character); }
    
    /**
    * Returns String with radio station name.
    */
    @:pure static inline function GetRadioStationName(radioStation: Int): String { return untyped __lua__('GetRadioStationName')(radioStation); }
    @:pure static inline function GetRainLevel(): Int { return untyped __lua__('GetRainLevel')(); }
    @:pure static inline function GetRandomEventFlag(): Int { return untyped __lua__('GetRandomEventFlag')(); }
    @:pure static inline function GetRandomFloatInRange(startRange: Int, endRange: Int): Int { return untyped __lua__('GetRandomFloatInRange')(startRange, endRange); }
    
    /**
    * Another extremely useful native.
    * You can use it simply like:
    * if (GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 2))
    * and the if-statement will count it as false only if the random int is 0. That means there is a one in three chance of it being false. Put a "!" in front and it means there is a one in three chance of it being true.
    */
    @:pure static inline function GetRandomIntInRange(startRange: Int, endRange: Int): Int { return untyped __lua__('GetRandomIntInRange')(startRange, endRange); }
    
    /**
    * Gets a random ped in the x/y/zRadius near the x/y/z coordinates passed.
    * Ped Types:
    * Any = -1
    * Player = 1
    * Male = 4
    * Female = 5
    * Cop = 6
    * Human = 26
    * SWAT = 27
    * Animal = 28
    * Army = 29
    */
    @:pure static inline function GetRandomPedAtCoord(x: Int, y: Int, z: Int, xRadius: Int, yRadius: Int, zRadius: Int, pedType: Int): Int { return untyped __lua__('GetRandomPedAtCoord')(x, y, z, xRadius, yRadius, zRadius, pedType); }
    @:pure static inline function GetRandomVehicleBackBumperInSphere(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Int { return untyped __lua__('GetRandomVehicleBackBumperInSphere')(p0, p1, p2, p3, p4, p5, p6); }
    @:pure static inline function GetRandomVehicleFrontBumperInSphere(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Int { return untyped __lua__('GetRandomVehicleFrontBumperInSphere')(p0, p1, p2, p3, p4, p5, p6); }
    
    /**
    * Gets a random vehicle in a sphere at the specified position, of the specified radius.
    * x: The X-component of the position of the sphere.
    * y: The Y-component of the position of the sphere.
    * z: The Z-component of the position of the sphere.
    * radius: The radius of the sphere. Max is 9999.9004.
    * modelHash: The vehicle model to limit the selection to. Pass 0 for any model.
    * flags: The bitwise flags that modifies the behaviour of this function.
    */
    @:pure static inline function GetRandomVehicleInSphere(x: Int, y: Int, z: Int, radius: Int, modelHash: EitherType<String, Int>, flags: Int): Int { return untyped __lua__('GetRandomVehicleInSphere')(x, y, z, radius, modelHash, flags); }
    
    /**
    * Not present in the retail version! It's just a nullsub.
    * p0 always true (except in one case)
    * p1 returns a random vehicle hash loaded in memory
    * p2 unsure, maybe returns a different model
    */
    @:pure static inline function GetRandomVehicleModelInMemory(p0: Bool): { a0: Int, a1: Int } { return untyped __lua__('GetRandomVehicleModelInMemory')(p0); }
    @:pure static inline function GetRandomVehicleNode(x: Int, y: Int, z: Int, radius: Int, p4: Bool, p5: Bool, p6: Bool): { a0: Int, a1: Array<Int>, a2: Int } { return untyped __lua__('GetRandomVehicleNode')(x, y, z, radius, p4, p5, p6); }
    
    /**
    * Gets the relationship between two groups. This should be called twice (once for each group).
    * Relationship types:
    * 0 = Companion
    * 1 = Respect
    * 2 = Like
    * 3 = Neutral
    * 4 = Dislike
    * 5 = Hate
    * 255 = Pedestrians
    * Example:
    * PED::GET_RELATIONSHIP_BETWEEN_GROUPS(l_1017, 0xA49E591C);
    * PED::GET_RELATIONSHIP_BETWEEN_GROUPS(0xA49E591C, l_1017);
    */
    @:pure static inline function GetRelationshipBetweenGroups(group1: EitherType<String, Int>, group2: EitherType<String, Int>): Int { return untyped __lua__('GetRelationshipBetweenGroups')(group1, group2); }
    
    /**
    * Gets the relationship between two peds. This should be called twice (once for each ped).
    * Relationship types:
    * 0 = Companion
    * 1 = Respect
    * 2 = Like
    * 3 = Neutral
    * 4 = Dislike
    * 5 = Hate
    * 255 = Pedestrians
    * (Credits: Inco)
    * Example:
    * PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, l_1017, 0xA49E591C);
    * PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, 0xA49E591C, l_1017);
    */
    @:pure static inline function GetRelationshipBetweenPeds(ped1: Int, ped2: Int): Int { return untyped __lua__('GetRelationshipBetweenPeds')(ped1, ped2); }
    @:pure static inline function GetRenderingCam(): Int { return untyped __lua__('GetRenderingCam')(); }
    @:pure static inline function GetResourceByFindIndex(findIndex: Int): String { return untyped __lua__('GetResourceByFindIndex')(findIndex); }
    @:pure static inline function GetResourceKvpFloat(key: String): Int { return untyped __lua__('GetResourceKvpFloat')(key); }
    @:pure static inline function GetResourceKvpInt(key: String): Int { return untyped __lua__('GetResourceKvpInt')(key); }
    @:pure static inline function GetResourceKvpString(key: String): String { return untyped __lua__('GetResourceKvpString')(key); }
    
    /**
    * Gets the metadata value at a specified key/index from a resource's manifest.
    * See also: [Resource manifest](https://wiki.fivem.net/wiki/Resource_manifest)
    * @param resourceName The resource name.
    * @param metadataKey The key in the resource manifest.
    * @param index The value index, in a range from [0..GET_NUM_RESOURCE_METDATA-1].
    */
    @:pure static inline function GetResourceMetadata(resourceName: String, metadataKey: String, index: Int): String { return untyped __lua__('GetResourceMetadata')(resourceName, metadataKey, index); }
    
    /**
    * Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.
    */
    @:pure static inline function GetRoomKeyFromEntity(entity: Int): Int { return untyped __lua__('GetRoomKeyFromEntity')(entity); }
    
    /**
    * Returns the room hash key from the current gameplay cam.
    */
    @:pure static inline function GetRoomKeyFromGameplayCam(): Int { return untyped __lua__('GetRoomKeyFromGameplayCam')(); }
    
    /**
    * Returns the room hash key from the current gameplay cam.
    */
    @:pure static inline function N_0xa6575914d2a0b450(): Int { return untyped __lua__('N_0xa6575914d2a0b450')(); }
    
    /**
    * Return the root content id of a job.
    */
    @:pure static inline function GetRootContentId(p0: Int): String { return untyped __lua__('GetRootContentId')(p0); }
    
    /**
    * Return the root content id of a job.
    */
    @:pure static inline function N_0xc0173d6bff4e0348(p0: Int): String { return untyped __lua__('N_0xc0173d6bff4e0348')(p0); }
    @:pure static inline function GetRopeLastVertexCoord(rope: Int): Int { return untyped __lua__('GetRopeLastVertexCoord')(rope); }
    
    /**
    * Get a rope's length.  Can be modified with ROPE_FORCE_LENGTH
    */
    @:pure static inline function GetRopeLength(rope: Int): Int { return untyped __lua__('GetRopeLength')(rope); }
    @:pure static inline function GetRopeVertexCoord(rope: Int, vertex: Int): Int { return untyped __lua__('GetRopeVertexCoord')(rope, vertex); }
    @:pure static inline function GetRopeVertexCount(rope: Int): Int { return untyped __lua__('GetRopeVertexCount')(rope); }
    @:pure static inline function GetRotationOfVehicleRecordingAtTime(p0: Int, p1: Int, p2: Int): Int { return untyped __lua__('GetRotationOfVehicleRecordingAtTime')(p0, p1, p2); }
    
    /**
    * When onGround == true outPosition is a position located on the nearest pavement.
    * When a safe coord could not be found the result of a function is false and outPosition == Vector3.Zero.
    * In the scripts these flags are used: 0, 14, 12, 16, 20, 21, 28. 0 is most commonly used, then 16.
    * 16 works for me, 0 crashed the script.
    */
    @:pure static inline function GetSafeCoordForPed(x: Int, y: Int, z: Int, onGround: Bool, flags: Int): { a0: Int, a1: Array<Int> } { return untyped __lua__('GetSafeCoordForPed')(x, y, z, onGround, flags); }
    @:pure static inline function GetSafePickupCoords(x: Int, y: Int, z: Int, p3: Int, p4: Int): Array<Int> { return untyped __lua__('GetSafePickupCoords')(x, y, z, p3, p4); }
    
    /**
    * Gets the scale of safe zone. if the safe zone size scale is max, it will return 1.0.
    */
    @:pure static inline function GetSafeZoneSize(): Int { return untyped __lua__('GetSafeZoneSize')(); }
    
    /**
    * Convert a world coordinate into its relative screen coordinate.  (WorldToScreen)
    * Returns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.
    * For .NET users...
    * VB:
    * Public Shared Function World3DToScreen2d(pos as vector3) As Vector2
    * Dim x2dp, y2dp As New Native.OutputArgument
    * Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)
    * Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))
    * End Function
    * C#:
    * Vector2 World3DToScreen2d(Vector3 pos)
    * {
    * var x2dp = new OutputArgument();
    * var y2dp = new OutputArgument();
    * Function.Call&lt;bool&gt;(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp);
    * return new Vector2(x2dp.GetResult&lt;float&gt;(), y2dp.GetResult&lt;float&gt;());
    * }
    * //USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g '0.05' small.
    * Used to be called _WORLD3D_TO_SCREEN2D
    * I thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g.
    */
    @:pure static inline function GetScreenCoordFromWorldCoord(worldX: Int, worldY: Int, worldZ: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('GetScreenCoordFromWorldCoord')(worldX, worldY, worldZ); }
    
    /**
    * Convert a world coordinate into its relative screen coordinate.  (WorldToScreen)
    * Returns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.
    * For .NET users...
    * VB:
    * Public Shared Function World3DToScreen2d(pos as vector3) As Vector2
    * Dim x2dp, y2dp As New Native.OutputArgument
    * Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)
    * Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))
    * End Function
    * C#:
    * Vector2 World3DToScreen2d(Vector3 pos)
    * {
    * var x2dp = new OutputArgument();
    * var y2dp = new OutputArgument();
    * Function.Call&lt;bool&gt;(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp);
    * return new Vector2(x2dp.GetResult&lt;float&gt;(), y2dp.GetResult&lt;float&gt;());
    * }
    * //USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g '0.05' small.
    * Used to be called _WORLD3D_TO_SCREEN2D
    * I thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g.
    */
    @:pure static inline function World3dToScreen2d(worldX: Int, worldY: Int, worldZ: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('World3dToScreen2d')(worldX, worldY, worldZ); }
    
    /**
    * World to relative screen coords
    * this world to screen will keep the text on screen. it will keep it in the screen pos
    */
    
    /**
    * World to relative screen coords
    * this world to screen will keep the text on screen. it will keep it in the screen pos
    */
    @:pure static inline function N_0xf9904d11f1acbec3(worldX: Int, worldY: Int, worldZ: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0xf9904d11f1acbec3')(worldX, worldY, worldZ); }
    
    /**
    * Returns whether the specified screen effect is active.
    * See the effects list in _START_SCREEN_EFFECT
    */
    @:pure static inline function GetScreenEffectIsActive(effectName: String): Int { return untyped __lua__('GetScreenEffectIsActive')(effectName); }
    
    /**
    * int screenresx,screenresy;
    * GET_SCREEN_RESOLUTION(&amp;screenresx,&amp;screenresy);
    */
    @:pure static inline function GetScreenResolution(): { a0: Int, a1: Int } { return untyped __lua__('GetScreenResolution')(); }
    
    /**
    * Gets the status of a script-assigned task. The hash does not seem to match the actual native name, but is assigned hardcoded from the executable during task creation.
    * Statuses are specific to tasks, in addition '7' means the specified task is not assigned to the ped.
    * A few hashes found in the executable (although not a complete list) can be found at pastebin.com/R9iK6M9W as it was too long for this wiki.
    */
    @:pure static inline function GetScriptTaskStatus(targetPed: Int, taskHash: EitherType<String, Int>): Int { return untyped __lua__('GetScriptTaskStatus')(targetPed, taskHash); }
    @:pure static inline function GetScriptedCoverPointCoords(coverpoint: Int): Array<Int> { return untyped __lua__('GetScriptedCoverPointCoords')(coverpoint); }
    @:pure static inline function GetSeatPedIsTryingToEnter(ped: Int): Int { return untyped __lua__('GetSeatPedIsTryingToEnter')(ped); }
    
    /**
    * Returns the hash of the weapon.
    * var num7 = WEAPON::GET_SELECTED_PED_WEAPON(num4);
    * sub_27D3(num7);
    * switch (num7)
    * {
    * case 0x24B17070:
    * Also see WEAPON::GET_CURRENT_PED_WEAPON. Difference?
    * -------------------------------------------------------------------------
    * The difference is that GET_SELECTED_PED_WEAPON simply returns the ped's current weapon hash but GET_CURRENT_PED_WEAPON also checks the weapon object and returns true if the hash of the weapon object equals the weapon hash
    */
    @:pure static inline function GetSelectedPedWeapon(ped: Int): Int { return untyped __lua__('GetSelectedPedWeapon')(ped); }
    
    /**
    * returned values:
    * 0 to 7 = task that's currently in progress, 0 meaning the first one.
    */
    @:pure static inline function GetSequenceProgress(ped: Int): Int { return untyped __lua__('GetSequenceProgress')(ped); }
    
    /**
    * Parameters:
    * rayHandle - Ray Handle from a casted ray, as returned by CAST_RAY_POINT_TO_POINT
    * hit - Where to store whether or not it hit anything. False is when the ray reached its destination.
    * endCoords - Where to store the world-coords of where the ray was stopped (by hitting its desired max range or by colliding with an entity/the map)
    * surfaceNormal - Where to store the surface-normal coords (NOT relative to the game world) of where the entity was hit by the ray
    * entityHit - Where to store the handle of the entity hit by the ray
    * Returns:
    * Result? Some type of enum.
    * NOTE: To get the offset-coords of where the ray hit relative to the entity that it hit (which is NOT the same as surfaceNormal), you can use these two natives:
    * Vector3 offset = ENTITY::GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(entityHit, endCoords.x, endCoords.y, endCoords.z);
    * Vector3 entitySpotCoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(entityHit, offset.x, offset.y, offset.z);
    * Use ENTITY::GET_ENTITY_TYPE(entityHit) to quickly distinguish what type of entity you hit (ped/vehicle/object - 1/2/3)
    */
    @:pure static inline function GetShapeTestResult(rayHandle: Int): { a0: Int, a1: Dynamic, a2: Array<Int>, a3: Array<Int>, a4: Int } { return untyped __lua__('GetShapeTestResult')(rayHandle); }
    
    /**
    * Parameters:
    * rayHandle - Ray Handle from a casted ray, as returned by CAST_RAY_POINT_TO_POINT
    * hit - Where to store whether or not it hit anything. False is when the ray reached its destination.
    * endCoords - Where to store the world-coords of where the ray was stopped (by hitting its desired max range or by colliding with an entity/the map)
    * surfaceNormal - Where to store the surface-normal coords (NOT relative to the game world) of where the entity was hit by the ray
    * entityHit - Where to store the handle of the entity hit by the ray
    * Returns:
    * Result? Some type of enum.
    * NOTE: To get the offset-coords of where the ray hit relative to the entity that it hit (which is NOT the same as surfaceNormal), you can use these two natives:
    * Vector3 offset = ENTITY::GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(entityHit, endCoords.x, endCoords.y, endCoords.z);
    * Vector3 entitySpotCoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(entityHit, offset.x, offset.y, offset.z);
    * Use ENTITY::GET_ENTITY_TYPE(entityHit) to quickly distinguish what type of entity you hit (ped/vehicle/object - 1/2/3)
    */
    @:pure static inline function GetRaycastResult(rayHandle: Int): { a0: Int, a1: Dynamic, a2: Array<Int>, a3: Array<Int>, a4: Int } { return untyped __lua__('GetRaycastResult')(rayHandle); }
    
    /**
    * behaves exactly the same way as GET_SHAPE_TEST_RESULT except it has one extra parameter (_materialHash).
    * Quick disassembly seems to indicate that the unknown is a hash. EDIT: Seems to be the hash of the hit material or surface type.
    * found a materialFX.dat list of them but not sure if it has to do with this native yet.
    */
    @:pure static inline function GetShapeTestResultEx(rayHandle: Int): { a0: Int, a1: Dynamic, a2: Array<Int>, a3: Array<Int>, a4: Int, a5: Int } { return untyped __lua__('GetShapeTestResultEx')(rayHandle); }
    
    /**
    * behaves exactly the same way as GET_SHAPE_TEST_RESULT except it has one extra parameter (_materialHash).
    * Quick disassembly seems to indicate that the unknown is a hash. EDIT: Seems to be the hash of the hit material or surface type.
    * found a materialFX.dat list of them but not sure if it has to do with this native yet.
    */
    @:pure static inline function N_0x65287525d951f6be(rayHandle: Int): { a0: Int, a1: Dynamic, a2: Array<Int>, a3: Array<Int>, a4: Int, a5: Int } { return untyped __lua__('N_0x65287525d951f6be')(rayHandle); }
    @:pure static inline function GetShopPedComponent(p0: EitherType<String, Int>, p1: Int): Void { return untyped __lua__('GetShopPedComponent')(p0, p1); }
    @:pure static inline function GetShopPedOutfit(p0: Int, p1: Int): Void { return untyped __lua__('GetShopPedOutfit')(p0, p1); }
    @:pure static inline function GetShopPedOutfitLocate(p0: Int): Int { return untyped __lua__('GetShopPedOutfitLocate')(p0); }
    @:pure static inline function N_0x073ca26b079f956e(p0: Int): Int { return untyped __lua__('N_0x073ca26b079f956e')(p0); }
    @:pure static inline function GetShopPedQueryComponent(componentId: Int, outComponent: Int): Void { return untyped __lua__('GetShopPedQueryComponent')(componentId, outComponent); }
    
    /**
    * struct Outfit_s
    * {
    * int mask, torso, pants, parachute, shoes, misc1, tops1, armour, crew, tops2, hat, glasses, earpiece;
    * int maskTexture, torsoTexture, pantsTexture, parachuteTexture, shoesTexture, misc1Texture, tops1Texture,
    * armourTexture, crewTexture, tops2Texture, hatTexture, glassesTexture, earpieceTexture;
    * };
    */
    @:pure static inline function GetShopPedQueryOutfit(p0: Int, outfit: Int): Void { return untyped __lua__('GetShopPedQueryOutfit')(p0, outfit); }
    @:pure static inline function GetShopPedQueryProp(p0: Int, p1: Int): Void { return untyped __lua__('GetShopPedQueryProp')(p0, p1); }
    @:pure static inline function GetSnowLevel(): Int { return untyped __lua__('GetSnowLevel')(); }
    @:pure static inline function GetSoundId(): Int { return untyped __lua__('GetSoundId')(); }
    @:pure static inline function GetSoundIdFromNetworkId(netId: Int): Int { return untyped __lua__('GetSoundIdFromNetworkId')(netId); }
    @:pure static inline function N_0x75262fd12d0a1c84(netId: Int): Int { return untyped __lua__('N_0x75262fd12d0a1c84')(netId); }
    
    /**
    * locked is 0 if no door is found
    * locked is 0 if door is unlocked
    * locked is 1 if door is found and unlocked.
    * -------------
    * the locked bool is either 0(unlocked)(false) or 1(locked)(true)
    */
    @:pure static inline function GetStateOfClosestDoorOfType(type: EitherType<String, Int>, x: Int, y: Int, z: Int): { a0: Dynamic, a1: Int } { return untyped __lua__('GetStateOfClosestDoorOfType')(type, x, y, z); }
    @:pure static inline function GetStreamPlayTime(): Int { return untyped __lua__('GetStreamPlayTime')(); }
    
    /**
    * Determines the name of the street which is the closest to the given coordinates.
    * x,y,z - the coordinates of the street
    * streetName - returns a hash to the name of the street the coords are on
    * crossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road
    * Note: the names are returned as hashes, the strings can be returned using the function UI::GET_STREET_NAME_FROM_HASH_KEY.
    */
    @:pure static inline function GetStreetNameAtCoord(x: Int, y: Int, z: Int): { a0: Int, a1: Int } { return untyped __lua__('GetStreetNameAtCoord')(x, y, z); }
    
    /**
    * This functions converts the hash of a street name into a readable string.
    * For how to get the hashes, see PATHFIND::GET_STREET_NAME_AT_COORD.
    */
    @:pure static inline function GetStreetNameFromHashKey(hash: EitherType<String, Int>): String { return untyped __lua__('GetStreetNameFromHashKey')(hash); }
    
    /**
    * p0 = VEHICLE_NODE_ID
    * Returns false for nodes that aren't used for GPS routes.
    * Example:
    * Nodes in Fort Zancudo and LSIA are false
    */
    @:pure static inline function GetSupportsGpsRouteFlag(nodeID: Int): Int { return untyped __lua__('GetSupportsGpsRouteFlag')(nodeID); }
    
    /**
    * p0 = VEHICLE_NODE_ID
    * Returns false for nodes that aren't used for GPS routes.
    * Example:
    * Nodes in Fort Zancudo and LSIA are false
    */
    @:pure static inline function N_0xa2ae5c478b96e3b6(nodeID: Int): Int { return untyped __lua__('N_0xa2ae5c478b96e3b6')(nodeID); }
    @:pure static inline function GetSynchronizedScenePhase(sceneID: Int): Int { return untyped __lua__('GetSynchronizedScenePhase')(sceneID); }
    @:pure static inline function GetSynchronizedSceneRate(sceneID: Int): Int { return untyped __lua__('GetSynchronizedSceneRate')(sceneID); }
    
    /**
    * Returns the zoneID for the overlay if it is a member of collection.
    * enum TattooZoneData
    * {
    * ZONE_TORSO = 0,
    * ZONE_HEAD = 1,
    * ZONE_LEFT_ARM = 2,
    * ZONE_RIGHT_ARM = 3,
    * ZONE_LEFT_LEG = 4,
    * ZONE_RIGHT_LEG = 5,
    * ZONE_UNKNOWN = 6,
    * ZONE_NONE = 7,
    * };
    */
    @:pure static inline function GetTattooZone(collection: EitherType<String, Int>, overlay: EitherType<String, Int>): Int { return untyped __lua__('GetTattooZone')(collection, overlay); }
    
    /**
    * This get's the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height.
    */
    @:pure static inline function GetTextScaleHeight(size: Int, font: Int): Int { return untyped __lua__('GetTextScaleHeight')(size, font); }
    
    /**
    * This get's the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height.
    */
    @:pure static inline function N_0xdb88a37483346780(size: Int, font: Int): Int { return untyped __lua__('N_0xdb88a37483346780')(size, font); }
    
    /**
    * Returns a substring of a specified length starting at a specified position.
    * Example:
    * // Get "STRING" text from "MY_STRING"
    * subStr = UI::_GET_TEXT_SUBSTRING("MY_STRING", 3, 6);
    */
    @:pure static inline function GetTextSubstring(text: String, position: Int, length: Int): String { return untyped __lua__('GetTextSubstring')(text, position, length); }
    
    /**
    * Returns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length.
    * NOTE: The 'maxLength' parameter might actually be the size of the buffer that is returned. More research is needed. -CL69
    * Example:
    * // Condensed example of how Rockstar uses this function
    * strLen = UI::GET_LENGTH_OF_LITERAL_STRING(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT());
    * subStr = UI::_GET_TEXT_SUBSTRING_SAFE(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63);
    * --
    * "fm_race_creator.ysc", line 85115:
    * // parameters modified for clarity
    * BOOL sub_8e5aa(char *text, int length) {
    * for (i = 0; i &lt;= (length - 2); i += 1) {
    * if (!GAMEPLAY::ARE_STRINGS_EQUAL(UI::_GET_TEXT_SUBSTRING_SAFE(text, i, i + 1, 1), " ")) {
    * return FALSE;
    * }
    * }
    * return TRUE;
    * }
    */
    @:pure static inline function GetTextSubstringSafe(text: String, position: Int, length: Int, maxLength: Int): String { return untyped __lua__('GetTextSubstringSafe')(text, position, length, maxLength); }
    
    /**
    * Returns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition).
    * Example:
    * // Get "STRING" text from "MY_STRING"
    * subStr = UI::_GET_TEXT_SUBSTRING_SLICE("MY_STRING", 3, 9);
    * // Overflows are possibly replaced with underscores (needs verification)
    * subStr = UI::_GET_TEXT_SUBSTRING_SLICE("MY_STRING", 3, 10); // "STRING_"?
    */
    @:pure static inline function GetTextSubstringSlice(text: String, startPosition: Int, endPosition: Int): String { return untyped __lua__('GetTextSubstringSlice')(text, startPosition, endPosition); }
    
    /**
    * Returns the texture resolution of the passed texture dict+name.
    * Note: Most texture resolutions are doubled compared to the console version of the game.
    */
    @:pure static inline function GetTextureResolution(textureDict: String, textureName: String): Array<Int> { return untyped __lua__('GetTextureResolution')(textureDict, textureName); }
    @:pure static inline function GetThisScriptName(): String { return untyped __lua__('GetThisScriptName')(); }
    @:pure static inline function GetTimeAsString(time: Int): String { return untyped __lua__('GetTimeAsString')(time); }
    @:pure static inline function FormatTime(time: Int): String { return untyped __lua__('FormatTime')(time); }
    
    /**
    * Subtracts the second argument from the first.
    */
    @:pure static inline function GetTimeDifference(timeA: Int, timeB: Int): Int { return untyped __lua__('GetTimeDifference')(timeA, timeB); }
    
    /**
    * Adds the first argument to the second.
    */
    @:pure static inline function GetTimeOffset(timeA: Int, timeB: Int): Int { return untyped __lua__('GetTimeOffset')(timeA, timeB); }
    @:pure static inline function GetTimePositionInRecording(p0: Int): Int { return untyped __lua__('GetTimePositionInRecording')(p0); }
    
    /**
    * Returns the time since the character was arrested in (ms) milliseconds.
    * example
    * var time = Function.call&lt;int&gt;(Hash.GET_TIME_SINCE_LAST_ARREST();
    * UI.DrawSubtitle(time.ToString());
    * if player has not been arrested, the int returned will be -1.
    */
    @:pure static inline function GetTimeSinceLastArrest(): Int { return untyped __lua__('GetTimeSinceLastArrest')(); }
    
    /**
    * Returns the time since the character died in (ms) milliseconds.
    * example
    * var time = Function.call&lt;int&gt;(Hash.GET_TIME_SINCE_LAST_DEATH();
    * UI.DrawSubtitle(time.ToString());
    * if player has not died, the int returned will be -1.
    */
    @:pure static inline function GetTimeSinceLastDeath(): Int { return untyped __lua__('GetTimeSinceLastDeath')(); }
    @:pure static inline function GetTimeSincePlayerDroveAgainstTraffic(player: Int): Int { return untyped __lua__('GetTimeSincePlayerDroveAgainstTraffic')(player); }
    @:pure static inline function GetTimeSincePlayerDroveOnPavement(player: Int): Int { return untyped __lua__('GetTimeSincePlayerDroveOnPavement')(player); }
    @:pure static inline function GetTimeSincePlayerHitPed(player: Int): Int { return untyped __lua__('GetTimeSincePlayerHitPed')(player); }
    @:pure static inline function GetTimeSincePlayerHitVehicle(player: Int): Int { return untyped __lua__('GetTimeSincePlayerHitVehicle')(player); }
    
    /**
    * Only use for this in the PC scripts is:
    * if (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1)
    * For a full list, see here: pastebin.com/cnk7FTF2
    */
    @:pure static inline function GetTimecycleModifierIndex(): Int { return untyped __lua__('GetTimecycleModifierIndex')(); }
    @:pure static inline function GetTotalDurationOfVehicleRecording(p0: Int, p1: Int): Int { return untyped __lua__('GetTotalDurationOfVehicleRecording')(p0, p1); }
    @:pure static inline function GetTotalDurationOfVehicleRecordingId(p0: Int): Int { return untyped __lua__('GetTotalDurationOfVehicleRecordingId')(p0); }
    @:pure static inline function GetTotalScInboxIds(): Int { return untyped __lua__('GetTotalScInboxIds')(); }
    @:pure static inline function N_0x03a93ff1a2ca0864(): Int { return untyped __lua__('N_0x03a93ff1a2ca0864')(); }
    
    /**
    * Corrected p1. it's basically the 'carriage/trailer number'. So if the train has 3 trailers you'd call the native once with a var or 3 times with 1, 2, 3.
    */
    @:pure static inline function GetTrainCarriage(train: Int, trailerNumber: Int): Int { return untyped __lua__('GetTrainCarriage')(train, trailerNumber); }
    
    /**
    * Return the content modifier id (the tunables context if you want) of a specific content.
    * It takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.
    * The mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA'
    * 'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.
    */
    @:pure static inline function GetTunablesContentModifierId(contentHash: EitherType<String, Int>): Int { return untyped __lua__('GetTunablesContentModifierId')(contentHash); }
    
    /**
    * Return the content modifier id (the tunables context if you want) of a specific content.
    * It takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.
    * The mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA'
    * 'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.
    */
    @:pure static inline function N_0x187382f8a3e0a6c3(contentHash: EitherType<String, Int>): Int { return untyped __lua__('N_0x187382f8a3e0a6c3')(contentHash); }
    @:pure static inline function GetTupstatBoolHash(index: Int, spStat: Bool, charStat: Bool, character: Int): Int { return untyped __lua__('GetTupstatBoolHash')(index, spStat, charStat, character); }
    @:pure static inline function N_0xc4bb08ee7907471e(index: Int, spStat: Bool, charStat: Bool, character: Int): Int { return untyped __lua__('N_0xc4bb08ee7907471e')(index, spStat, charStat, character); }
    @:pure static inline function GetTupstatIntHash(index: Int, spStat: Bool, charStat: Bool, character: Int): Int { return untyped __lua__('GetTupstatIntHash')(index, spStat, charStat, character); }
    @:pure static inline function N_0xd16c2ad6b8e32854(index: Int, spStat: Bool, charStat: Bool, character: Int): Int { return untyped __lua__('N_0xd16c2ad6b8e32854')(index, spStat, charStat, character); }
    @:pure static inline function GetTvChannel(): Int { return untyped __lua__('GetTvChannel')(); }
    @:pure static inline function GetTvVolume(): Int { return untyped __lua__('GetTvVolume')(); }
    
    /**
    * Returns the user's defined langauge as ID
    * english: 12
    * french = 7
    * german = 22
    * italian = 21
    * japanese = 9
    * korean = 17
    * portuguese = 16
    * spanish = 10
    * russian = 25
    */
    @:pure static inline function GetUserLanguageId(): Int { return untyped __lua__('GetUserLanguageId')(); }
    
    /**
    * console hash: 0xC589CD7D = GET_UTC_TIME
    * gets current UTC time
    */
    @:pure static inline function GetUtcTime(): { a0: Int, a1: Int, a2: Int, a3: Int, a4: Int, a5: Int } { return untyped __lua__('GetUtcTime')(); }
    
    /**
    * console hash: 0xC589CD7D = GET_UTC_TIME
    * gets current UTC time
    */
    @:pure static inline function GetVariantComponent(componentHash: EitherType<String, Int>, componentId: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('GetVariantComponent')(componentHash, componentId); }
    @:pure static inline function GetVehicleAcceleration(vehicle: Int): Int { return untyped __lua__('GetVehicleAcceleration')(vehicle); }
    
    /**
    * static - max acceleration
    */
    @:pure static inline function GetVehicleAlarmTimeLeft(vehicle: Int): Int { return untyped __lua__('GetVehicleAlarmTimeLeft')(vehicle); }
    
    /**
    * Returns attached vehicle (Vehicle in parameter must be cargobob)
    */
    @:pure static inline function GetVehicleAttachedToCargobob(cargobob: Int): Int { return untyped __lua__('GetVehicleAttachedToCargobob')(cargobob); }
    
    /**
    * Get the vehicle attached to the object/entity? May also just convert it to a vehicle, but I'm not sure.
    */
    @:pure static inline function GetVehicleAttachedToEntity(object: Int): Int { return untyped __lua__('GetVehicleAttachedToEntity')(object); }
    
    /**
    * Get the vehicle attached to the object/entity? May also just convert it to a vehicle, but I'm not sure.
    */
    @:pure static inline function N_0x375e7fc44f21c8ab(object: Int): Int { return untyped __lua__('N_0x375e7fc44f21c8ab')(object); }
    
    /**
    * Seems related to vehicle health, like the one in IV.
    * Max 1000, min 0.
    * Vehicle does not necessarily explode or become undrivable at 0.
    */
    @:pure static inline function GetVehicleBodyHealth(vehicle: Int): Int { return untyped __lua__('GetVehicleBodyHealth')(vehicle); }
    
    /**
    * 0 min 100 max
    * starts at 100
    * Seams to have health zones
    * Front of vehicle when damaged goes from 100-50 and stops at 50.
    * Rear can be damaged from 100-0
    * Only tested with two cars.
    * any idea how this differs from the first one?
    * --
    * May return the vehicle health on a scale of 0.0 - 100.0 (needs to be confirmed)
    * example:
    * v_F = ENTITY::GET_ENTITY_MODEL(v_3);
    * if (((v_F == ${tanker}) || (v_F == ${armytanker})) || (v_F == ${tanker2})) {
    * if (VEHICLE::_GET_VEHICLE_BODY_HEALTH_2(v_3) &lt;= 1.0) {
    * NETWORK::NETWORK_EXPLODE_VEHICLE(v_3, 1, 1, -1);
    * }
    * }
    */
    @:pure static inline function GetVehicleBodyHealth_2(vehicle: Int): Int { return untyped __lua__('GetVehicleBodyHealth_2')(vehicle); }
    
    /**
    * iVar3 = get_vehicle_cause_of_destruction(uLocal_248[iVar2]);
    * if (iVar3 == joaat("weapon_stickybomb"))
    * {
    * func_171(726);
    * iLocal_260 = 1;
    * }
    */
    @:pure static inline function GetVehicleCauseOfDestruction(vehicle: Int): Int { return untyped __lua__('GetVehicleCauseOfDestruction')(vehicle); }
    
    /**
    * Returns an int
    * Vehicle Classes:
    * 0: Compacts
    * 1: Sedans
    * 2: SUVs
    * 3: Coupes
    * 4: Muscle
    * 5: Sports Classics
    * 6: Sports
    * 7: Super
    * 8: Motorcycles
    * 9: Off-road
    * 10: Industrial
    * 11: Utility
    * 12: Vans
    * 13: Cycles
    * 14: Boats
    * 15: Helicopters
    * 16: Planes
    * 17: Service
    * 18: Emergency
    * 19: Military
    * 20: Commercial
    * 21: Trains
    * char buffer[128];
    * std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS(vehicle));
    * char* className = UI::_GET_LABEL_TEXT(buffer);
    */
    @:pure static inline function GetVehicleClass(vehicle: Int): Int { return untyped __lua__('GetVehicleClass')(vehicle); }
    
    /**
    * For a full enum, see here : pastebin.com/i2GGAjY0
    * char buffer[128];
    * std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash));
    * char* className = UI::_GET_LABEL_TEXT(buffer);
    */
    @:pure static inline function GetVehicleClassFromName(modelHash: EitherType<String, Int>): Int { return untyped __lua__('GetVehicleClassFromName')(modelHash); }
    @:pure static inline function GetVehicleClassMaxAcceleration(vehicleClass: Int): Int { return untyped __lua__('GetVehicleClassMaxAcceleration')(vehicleClass); }
    @:pure static inline function GetVehicleClassMaxAgility(vehicleClass: Int): Int { return untyped __lua__('GetVehicleClassMaxAgility')(vehicleClass); }
    @:pure static inline function GetVehicleClassMaxBraking(vehicleClass: Int): Int { return untyped __lua__('GetVehicleClassMaxBraking')(vehicleClass); }
    @:pure static inline function GetVehicleClassMaxTraction(vehicleClass: Int): Int { return untyped __lua__('GetVehicleClassMaxTraction')(vehicleClass); }
    @:pure static inline function GetVehicleClutch(vehicle: Int): Int { return untyped __lua__('GetVehicleClutch')(vehicle); }
    
    /**
    * What's this for? Primary and Secondary RGB have their own natives and this one doesn't seem specific.
    */
    @:pure static inline function GetVehicleColor(vehicle: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('GetVehicleColor')(vehicle); }
    @:pure static inline function GetVehicleColourCombination(vehicle: Int): Int { return untyped __lua__('GetVehicleColourCombination')(vehicle); }
    @:pure static inline function GetVehicleColours(vehicle: Int): { a0: Int, a1: Int } { return untyped __lua__('GetVehicleColours')(vehicle); }
    @:pure static inline function GetVehicleCurrentGear(vehicle: Int): Int { return untyped __lua__('GetVehicleCurrentGear')(vehicle); }
    @:pure static inline function GetVehicleCurrentRpm(vehicle: Int): Int { return untyped __lua__('GetVehicleCurrentRpm')(vehicle); }
    @:pure static inline function GetVehicleCustomPrimaryColour(vehicle: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('GetVehicleCustomPrimaryColour')(vehicle); }
    @:pure static inline function GetVehicleCustomSecondaryColour(vehicle: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('GetVehicleCustomSecondaryColour')(vehicle); }
    @:pure static inline function GetVehicleDashboardSpeed(vehicle: Int): Int { return untyped __lua__('GetVehicleDashboardSpeed')(vehicle); }
    
    /**
    * Returns hash of default vehicle horn
    * Hash is stored in audVehicleAudioEntity
    */
    @:pure static inline function GetVehicleDefaultHorn(vehicle: Int): Int { return untyped __lua__('GetVehicleDefaultHorn')(vehicle); }
    
    /**
    * The only example I can find of this function in the scripts, is this:
    * struct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f);
    * -----------------------------------------------------------------------------------------------------------------------------------------
    * PC scripts:
    * v_5 -- [[{3}]]  = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3);
    */
    @:pure static inline function GetVehicleDeformationAtPos(vehicle: Int, offsetX: Int, offsetY: Int, offsetZ: Int): Array<Int> { return untyped __lua__('GetVehicleDeformationAtPos')(vehicle, offsetX, offsetY, offsetZ); }
    
    /**
    * Dirt level 0..15
    */
    @:pure static inline function GetVehicleDirtLevel(vehicle: Int): Int { return untyped __lua__('GetVehicleDirtLevel')(vehicle); }
    
    /**
    * example in vb:
    * Public Shared Function Get_Vehicle_Door_Angle(Vehicle As Vehicle, Door As VehicleDoor) As Single
    * Return Native.Function.Call(Of Single)(Hash.GET_VEHICLE_DOOR_ANGLE_RATIO, Vehicle.Handle, Door)
    * End Function
    * I'm Not MentaL
    */
    @:pure static inline function GetVehicleDoorAngleRatio(vehicle: Int, door: Int): Int { return untyped __lua__('GetVehicleDoorAngleRatio')(vehicle, door); }
    
    /**
    * 2 seems to disable getting vehicle in modshop
    */
    @:pure static inline function GetVehicleDoorLockStatus(vehicle: Int): Int { return untyped __lua__('GetVehicleDoorLockStatus')(vehicle); }
    @:pure static inline function GetVehicleDoorsLockedForPlayer(vehicle: Int, player: Int): Int { return untyped __lua__('GetVehicleDoorsLockedForPlayer')(vehicle, player); }
    
    /**
    * Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.
    * Minimum: -4000
    * Maximum: 1000
    * -4000: Engine is destroyed
    * 0 and below: Engine catches fire and health rapidly declines
    * 300: Engine is smoking and losing functionality
    * 1000: Engine is perfect
    */
    @:pure static inline function GetVehicleEngineHealth(vehicle: Int): Int { return untyped __lua__('GetVehicleEngineHealth')(vehicle); }
    @:pure static inline function GetVehicleEngineTemperature(vehicle: Int): Int { return untyped __lua__('GetVehicleEngineTemperature')(vehicle); }
    
    /**
    * formerly known as _GET_VEHICLE_PAINT_FADE
    * The result is a value from 0-1, where 0 is fresh paint.
    * -----------------------------------------------------------------------
    * The actual value isn't stored as a float but as an unsigned char (BYTE).
    */
    @:pure static inline function GetVehicleEnveffScale(vehicle: Int): Int { return untyped __lua__('GetVehicleEnveffScale')(vehicle); }
    
    /**
    * formerly known as _GET_VEHICLE_PAINT_FADE
    * The result is a value from 0-1, where 0 is fresh paint.
    * -----------------------------------------------------------------------
    * The actual value isn't stored as a float but as an unsigned char (BYTE).
    */
    @:pure static inline function GetVehiclePaintFade(vehicle: Int): Int { return untyped __lua__('GetVehiclePaintFade')(vehicle); }
    @:pure static inline function GetVehicleExtraColours(vehicle: Int): { a0: Int, a1: Int } { return untyped __lua__('GetVehicleExtraColours')(vehicle); }
    @:pure static inline function GetVehicleFuelLevel(vehicle: Int): Int { return untyped __lua__('GetVehicleFuelLevel')(vehicle); }
    @:pure static inline function GetVehicleGravityAmount(vehicle: Int): Int { return untyped __lua__('GetVehicleGravityAmount')(vehicle); }
    @:pure static inline function GetVehicleHandbrake(vehicle: Int): Int { return untyped __lua__('GetVehicleHandbrake')(vehicle); }
    @:pure static inline function GetVehicleHighGear(vehicle: Int): Int { return untyped __lua__('GetVehicleHighGear')(vehicle); }
    
    /**
    * Seems to get the hash of the vehicle's currently installed horn?
    */
    @:pure static inline function GetVehicleHornHash(vehicle: Int): Int { return untyped __lua__('GetVehicleHornHash')(vehicle); }
    
    /**
    * Seems to get the hash of the vehicle's currently installed horn?
    */
    @:pure static inline function N_0xacb5dcca1ec76840(vehicle: Int): Int { return untyped __lua__('N_0xacb5dcca1ec76840')(vehicle); }
    
    /**
    * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
    */
    @:pure static inline function GetVehicleIndexFromEntityIndex(entity: Int): Int { return untyped __lua__('GetVehicleIndexFromEntityIndex')(entity); }
    
    /**
    * Gets the vehicle indicator light state. 0 = off, 1 = left, 2 = right, 3 = both
    * @return An integer.
    */
    @:pure static inline function GetVehicleIndicatorLights(vehicle: Int): Int { return untyped __lua__('GetVehicleIndicatorLights')(vehicle); }
    @:pure static inline function GetVehicleLayoutHash(vehicle: Int): Int { return untyped __lua__('GetVehicleLayoutHash')(vehicle); }
    @:pure static inline function GetVehicleLightsState(vehicle: Int): { a0: Int, a1: Dynamic, a2: Dynamic } { return untyped __lua__('GetVehicleLightsState')(vehicle); }
    
    /**
    * -1 = no livery
    */
    @:pure static inline function GetVehicleLivery(vehicle: Int): Int { return untyped __lua__('GetVehicleLivery')(vehicle); }
    
    /**
    * Returns -1 if the vehicle has no livery
    */
    @:pure static inline function GetVehicleLiveryCount(vehicle: Int): Int { return untyped __lua__('GetVehicleLiveryCount')(vehicle); }
    @:pure static inline function GetVehicleMaxBraking(vehicle: Int): Int { return untyped __lua__('GetVehicleMaxBraking')(vehicle); }
    @:pure static inline function GetVehicleMaxNumberOfPassengers(vehicle: Int): Int { return untyped __lua__('GetVehicleMaxNumberOfPassengers')(vehicle); }
    @:pure static inline function GetVehicleMaxTraction(vehicle: Int): Int { return untyped __lua__('GetVehicleMaxTraction')(vehicle); }
    
    /**
    * In b944, there are 50 (0 - 49) mod types.
    * Returns -1 if the vehicle mod is stock
    */
    @:pure static inline function GetVehicleMod(vehicle: Int, modType: Int): Int { return untyped __lua__('GetVehicleMod')(vehicle, modType); }
    @:pure static inline function GetVehicleModColor_1(vehicle: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('GetVehicleModColor_1')(vehicle); }
    
    /**
    * returns a string which is the codename of the vehicle's currently selected primary color
    * p1 is always 0
    */
    @:pure static inline function GetVehicleModColor_1Name(vehicle: Int, p1: Bool): String { return untyped __lua__('GetVehicleModColor_1Name')(vehicle, p1); }
    
    /**
    * returns a string which is the codename of the vehicle's currently selected primary color
    * p1 is always 0
    */
    @:pure static inline function N_0xb45085b721efd38c(vehicle: Int, p1: Bool): String { return untyped __lua__('N_0xb45085b721efd38c')(vehicle, p1); }
    @:pure static inline function GetVehicleModColor_2(vehicle: Int): { a0: Int, a1: Int } { return untyped __lua__('GetVehicleModColor_2')(vehicle); }
    
    /**
    * returns a string which is the codename of the vehicle's currently selected secondary color
    */
    @:pure static inline function GetVehicleModColor_2Name(vehicle: Int): String { return untyped __lua__('GetVehicleModColor_2Name')(vehicle); }
    
    /**
    * returns a string which is the codename of the vehicle's currently selected secondary color
    */
    @:pure static inline function N_0x4967a516ed23a5a1(vehicle: Int): String { return untyped __lua__('N_0x4967a516ed23a5a1')(vehicle); }
    
    /**
    * Can be used for IS_DLC_VEHICLE_MOD and _0xC098810437312FFF
    */
    @:pure static inline function GetVehicleModData(vehicle: Int, modType: Int, modIndex: Int): Int { return untyped __lua__('GetVehicleModData')(vehicle, modType, modIndex); }
    
    /**
    * Can be used for IS_DLC_VEHICLE_MOD and _0xC098810437312FFF
    */
    @:pure static inline function N_0x4593cf82aa179706(vehicle: Int, modType: Int, modIndex: Int): Int { return untyped __lua__('N_0x4593cf82aa179706')(vehicle, modType, modIndex); }
    @:pure static inline function GetVehicleModKit(vehicle: Int): Int { return untyped __lua__('GetVehicleModKit')(vehicle); }
    @:pure static inline function GetVehicleModKitType(vehicle: Int): Int { return untyped __lua__('GetVehicleModKitType')(vehicle); }
    @:pure static inline function GetVehicleModModifierValue(vehicle: Int, modType: Int, modIndex: Int): Int { return untyped __lua__('GetVehicleModModifierValue')(vehicle, modType, modIndex); }
    
    /**
    * Only used for wheels(ModType = 23/24) Returns true if the wheels are custom wheels
    */
    @:pure static inline function GetVehicleModVariation(vehicle: Int, modType: Int): Int { return untyped __lua__('GetVehicleModVariation')(vehicle, modType); }
    
    /**
    * Returns the acceleration of the specified model.
    * For a full list, see here: pastebin.com/GaN6vT4R
    */
    @:pure static inline function GetVehicleModelAcceleration(modelHash: EitherType<String, Int>): Int { return untyped __lua__('GetVehicleModelAcceleration')(modelHash); }
    
    /**
    * Returns max braking of the specified vehicle model.
    * For a full list, see here: pastebin.com/3N8DVbpG
    */
    @:pure static inline function GetVehicleModelMaxBraking(modelHash: EitherType<String, Int>): Int { return untyped __lua__('GetVehicleModelMaxBraking')(modelHash); }
    
    /**
    * Returns max speed (without mods) of the specified vehicle model in m/s.
    * For a full list, see here: pastebin.com/AUuHHK06
    * GET_VEHICLE_MODEL_*
    */
    @:pure static inline function GetVehicleModelMaxSpeed(modelHash: EitherType<String, Int>): Int { return untyped __lua__('GetVehicleModelMaxSpeed')(modelHash); }
    
    /**
    * Returns max speed (without mods) of the specified vehicle model in m/s.
    * For a full list, see here: pastebin.com/AUuHHK06
    * GET_VEHICLE_MODEL_*
    */
    @:pure static inline function GetVehicleMaxSpeed(modelHash: EitherType<String, Int>): Int { return untyped __lua__('GetVehicleMaxSpeed')(modelHash); }
    
    /**
    * Returns max traction of the specified vehicle model.
    * For a full list, see here: pastebin.com/ERnntVjK
    */
    @:pure static inline function GetVehicleModelMaxTraction(modelHash: EitherType<String, Int>): Int { return untyped __lua__('GetVehicleModelMaxTraction')(modelHash); }
    
    /**
    * Returns max number of passengers (including the driver) for the specified vehicle model.
    * For a full list, see here: pastebin.com/MdETCS1j
    */
    @:pure static inline function GetVehicleModelNumberOfSeats(modelHash: EitherType<String, Int>): Int { return untyped __lua__('GetVehicleModelNumberOfSeats')(modelHash); }
    
    /**
    * Returns max number of passengers (including the driver) for the specified vehicle model.
    * For a full list, see here: pastebin.com/MdETCS1j
    */
    @:pure static inline function GetVehicleModelMaxNumberOfPassengers(modelHash: EitherType<String, Int>): Int { return untyped __lua__('GetVehicleModelMaxNumberOfPassengers')(modelHash); }
    
    /**
    * Gets the color of the neon lights of the specified vehicle.
    * See _SET_VEHICLE_NEON_LIGHTS_COLOUR (0x8E0A582209A62695) for more information
    */
    @:pure static inline function GetVehicleNeonLightsColour(vehicle: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('GetVehicleNeonLightsColour')(vehicle); }
    @:pure static inline function GetVehicleNextGear(vehicle: Int): Int { return untyped __lua__('GetVehicleNextGear')(vehicle); }
    
    /**
    * Calling this with an invalid node id, will crash the game.
    * Note that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid.
    * Eg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION().
    * sfink: This native returns a pointer to a packed Vector3 struct in the RAX register, as do the following natives:
    * AI::WAYPOINT_RECORDING_GET_COORD
    * ENTITY::GET_ENTITY_MATRIX
    * FIRE::GET_CLOSEST_FIRE_POS
    * GAMEPLAY::FIND_SPAWN_POINT_IN_DIRECTION
    * GAMEPLAY::GET_MODEL_DIMENSIONS
    * GAMEPLAY::OVERRIDE_SAVE_HOUSE
    * GAMEPLAY::_0x82FDE6A57EE4EE44
    * GAMEPLAY::_0x8BDC7BFC57A81E76
    * GAMEPLAY::_0x8D7A43EC6A5FEA45
    * GAMEPLAY::_0xA4A0065E39C9F25C
    * GAMEPLAY::_0xDFB4138EEFED7B81
    * MOBILE::GET_MOBILE_PHONE_POSITION
    * MOBILE::GET_MOBILE_PHONE_ROTATION
    * NETWORK::NETWORK_GET_RESPAWN_RESULT
    * OBJECT::_0x163F8B586BC95F2A
    * PATHFIND::GET_CLOSEST_MAJOR_VEHICLE_NODE
    * PATHFIND::GET_CLOSEST_ROAD
    * PATHFIND::GET_CLOSEST_VEHICLE_NODE
    * PATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING
    * PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE
    * PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION
    * PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING
    * PATHFIND::GET_RANDOM_VEHICLE_NODE
    * PATHFIND::GET_SAFE_COORD_FOR_PED
    * PATHFIND::GET_VEHICLE_NODE_POSITION
    * PATHFIND::_0x16F46FB18C8009E4
    * VEHICLE::_0xA4822F1CF23F4810
    * VEHICLE::_0xDF7E3EEB29642C38
    * WATER::TEST_PROBE_AGAINST_ALL_WATER
    * WATER::TEST_PROBE_AGAINST_WATER
    * WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD
    * WORLDPROBE::_0xFF6BE494C7987F34
    * WORLDPROBE::_GET_RAYCAST_RESULT
    */
    @:pure static inline function GetVehicleNodePosition(nodeId: Int): Array<Int> { return untyped __lua__('GetVehicleNodePosition')(nodeId); }
    
    /**
    * MulleDK19: Gets the density and flags of the closest node to the specified position.
    * Density is a value between 0 and 15, indicating how busy the road is.
    * Flags is a bit field.
    */
    @:pure static inline function GetVehicleNodeProperties(x: Int, y: Int, z: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('GetVehicleNodeProperties')(x, y, z); }
    
    /**
    * Gets the number of passengers, NOT including the driver. Use IS_VEHICLE_SEAT_FREE(Vehicle, -1) to also check for the driver
    */
    @:pure static inline function GetVehicleNumberOfPassengers(vehicle: Int): Int { return untyped __lua__('GetVehicleNumberOfPassengers')(vehicle); }
    @:pure static inline function GetVehicleNumberOfWheels(vehicle: Int): Int { return untyped __lua__('GetVehicleNumberOfWheels')(vehicle); }
    
    /**
    * Returns the license plate text from a vehicle.  8 chars maximum.
    */
    @:pure static inline function GetVehicleNumberPlateText(vehicle: Int): String { return untyped __lua__('GetVehicleNumberPlateText')(vehicle); }
    
    /**
    * Returns the PlateType of a vehicle
    * Blue_on_White_1 = 3,
    * Blue_on_White_2 = 0,
    * Blue_on_White_3 = 4,
    * Yellow_on_Blue = 2,
    * Yellow_on_Black = 1,
    * North_Yankton = 5,
    */
    @:pure static inline function GetVehicleNumberPlateTextIndex(vehicle: Int): Int { return untyped __lua__('GetVehicleNumberPlateTextIndex')(vehicle); }
    @:pure static inline function GetVehicleOilLevel(vehicle: Int): Int { return untyped __lua__('GetVehicleOilLevel')(vehicle); }
    
    /**
    * The resulting entity can be a Vehicle or Ped.
    * The native is stored between GET_VEHICLE_LIVERY_COUNT and GET_VEHICLE_MAX_BRAKING so the actual name is either GET_VEHICLE_L* or GET_VEHICLE_M*
    */
    @:pure static inline function GetVehicleOwner(vehicle: Int, entity: Int): Int { return untyped __lua__('GetVehicleOwner')(vehicle, entity); }
    
    /**
    * Gets the vehicle the specified Ped is/was in depending on bool value.
    * [False = CurrentVehicle, True = LastVehicle]
    */
    @:pure static inline function GetVehiclePedIsIn(ped: Int, lastVehicle: Bool): Int { return untyped __lua__('GetVehiclePedIsIn')(ped, lastVehicle); }
    @:pure static inline function GetVehiclePedIsTryingToEnter(ped: Int): Int { return untyped __lua__('GetVehiclePedIsTryingToEnter')(ped); }
    
    /**
    * Gets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe.
    */
    @:pure static inline function GetVehiclePedIsUsing(ped: Int): Int { return untyped __lua__('GetVehiclePedIsUsing')(ped); }
    
    /**
    * 1000 is max health
    * Begins leaking gas at around 650 health
    */
    @:pure static inline function GetVehiclePetrolTankHealth(vehicle: Int): Int { return untyped __lua__('GetVehiclePetrolTankHealth')(vehicle); }
    @:pure static inline function GetVehiclePlateType(vehicle: Int): Int { return untyped __lua__('GetVehiclePlateType')(vehicle); }
    @:pure static inline function GetVehicleRecordingId(p0: Int, p1: String): Int { return untyped __lua__('GetVehicleRecordingId')(p0, p1); }
    @:pure static inline function GetVehicleSteeringAngle(vehicle: Int): Int { return untyped __lua__('GetVehicleSteeringAngle')(vehicle); }
    @:pure static inline function GetVehicleSteeringScale(vehicle: Int): Int { return untyped __lua__('GetVehicleSteeringScale')(vehicle); }
    
    /**
    * Gets the height of the vehicle's suspension.
    * The higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered.
    * 0.000 is the stock suspension.
    * 0.008 is Ultra Suspension.
    */
    @:pure static inline function GetVehicleSuspensionHeight(vehicle: Int): Int { return untyped __lua__('GetVehicleSuspensionHeight')(vehicle); }
    
    /**
    * Gets the trailer of a vehicle and puts it into the trailer parameter.
    */
    @:pure static inline function GetVehicleTrailerVehicle(vehicle: Int, trailer: Int): Int { return untyped __lua__('GetVehicleTrailerVehicle')(vehicle, trailer); }
    @:pure static inline function GetVehicleTurboPressure(vehicle: Int): Int { return untyped __lua__('GetVehicleTurboPressure')(vehicle); }
    @:pure static inline function GetVehicleTyreSmokeColor(vehicle: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('GetVehicleTyreSmokeColor')(vehicle); }
    @:pure static inline function GetVehicleTyresCanBurst(vehicle: Int): Int { return untyped __lua__('GetVehicleTyresCanBurst')(vehicle); }
    @:pure static inline function GetVehicleWaypointProgress(p0: Int): Int { return untyped __lua__('GetVehicleWaypointProgress')(p0); }
    @:pure static inline function GetVehicleWaypointTargetPoint(p0: Int): Int { return untyped __lua__('GetVehicleWaypointTargetPoint')(p0); }
    @:pure static inline function GetVehicleWheelHealth(vehicle: Int, wheelIndex: Int): Int { return untyped __lua__('GetVehicleWheelHealth')(vehicle, wheelIndex); }
    
    /**
    * Gets speed of a wheel at the tyre.
    * Max number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.
    * @return An integer.
    */
    @:pure static inline function GetVehicleWheelSpeed(vehicle: Int, wheelIndex: Int): Int { return untyped __lua__('GetVehicleWheelSpeed')(vehicle, wheelIndex); }
    
    /**
    * Returns an int
    * Wheel Types:
    * 0: Sport
    * 1: Muscle
    * 2: Lowrider
    * 3: SUV
    * 4: Offroad
    * 5: Tuner
    * 6: Bike Wheels
    * 7: High End
    * Tested in Los Santos Customs
    */
    @:pure static inline function GetVehicleWheelType(vehicle: Int): Int { return untyped __lua__('GetVehicleWheelType')(vehicle); }
    @:pure static inline function GetVehicleWindowTint(vehicle: Int): Int { return untyped __lua__('GetVehicleWindowTint')(vehicle); }
    
    /**
    * Remnant from GTA IV. Does nothing in GTA V.
    */
    @:pure static inline function GetWantedLevelRadius(player: Int): Int { return untyped __lua__('GetWantedLevelRadius')(player); }
    
    /**
    * Drft
    */
    @:pure static inline function GetWantedLevelThreshold(wantedLevel: Int): Int { return untyped __lua__('GetWantedLevelThreshold')(wantedLevel); }
    
    /**
    * This function set height to the value of z-axis of the water surface.
    * This function works with sea and lake. However it does not work with shallow rivers (e.g. raton canyon will return -100000.0f)
    * note: seems to return true when you are in water
    */
    @:pure static inline function GetWaterHeight(x: Int, y: Int, z: Int, height: Int): Int { return untyped __lua__('GetWaterHeight')(x, y, z, height); }
    @:pure static inline function GetWaterHeightNoWaves(x: Int, y: Int, z: Int, height: Int): Int { return untyped __lua__('GetWaterHeightNoWaves')(x, y, z, height); }
    
    /**
    * Gets the aggressiveness factor of the ocean waves.
    * console hash: 0xBD0A67FB
    * Most likely GET_CURRENT_*
    */
    @:pure static inline function GetWavesIntensity(): Int { return untyped __lua__('GetWavesIntensity')(); }
    
    /**
    * Gets the aggressiveness factor of the ocean waves.
    * console hash: 0xBD0A67FB
    * Most likely GET_CURRENT_*
    */
    @:pure static inline function N_0x2b2a2cc86778b619(): Int { return untyped __lua__('N_0x2b2a2cc86778b619')(); }
    @:pure static inline function GetWaypointDistanceAlongRoute(p0: String, p1: Int): Int { return untyped __lua__('GetWaypointDistanceAlongRoute')(p0, p1); }
    
    /**
    * // Returns the size of the default weapon component clip.
    * Use it like this:
    * char cClipSize[32];
    * Hash cur;
    * if (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &amp;cur, 1))
    * {
    * if (WEAPON::IS_WEAPON_VALID(cur))
    * {
    * int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur);
    * sprintf_s(cClipSize, "ClipSize: %.d", iClipSize);
    * vDrawString(cClipSize, 0.5f, 0.5f);
    * }
    * }
    */
    @:pure static inline function GetWeaponClipSize(weaponHash: EitherType<String, Int>): Int { return untyped __lua__('GetWeaponClipSize')(weaponHash); }
    @:pure static inline function GetWeaponComponentHudStats(componentHash: EitherType<String, Int>, outData: Int): Int { return untyped __lua__('GetWeaponComponentHudStats')(componentHash, outData); }
    @:pure static inline function GetWeaponComponentTypeModel(componentHash: EitherType<String, Int>): Int { return untyped __lua__('GetWeaponComponentTypeModel')(componentHash); }
    
    /**
    * 0=unknown (or incorrect weaponHash)
    * 1= no damage (flare,snowball, petrolcan)
    * 2=melee
    * 3=bullet
    * 4=force ragdoll fall
    * 5=explosive (RPG, Railgun, grenade)
    * 6=fire(molotov)
    * 8=fall(WEAPON_HELI_CRASH)
    * 10=electric
    * 11=barbed wire
    * 12=extinguisher
    * 13=gas
    * 14=water cannon(WEAPON_HIT_BY_WATER_CANNON)
    */
    @:pure static inline function GetWeaponDamageType(weaponHash: EitherType<String, Int>): Int { return untyped __lua__('GetWeaponDamageType')(weaponHash); }
    
    /**
    * returns the weapon hash of pickup
    */
    @:pure static inline function GetWeaponHashFromPickup(pickupHash: Int): Int { return untyped __lua__('GetWeaponHashFromPickup')(pickupHash); }
    
    /**
    * returns the weapon hash of pickup
    */
    @:pure static inline function N_0x08f96ca6c551ad51(pickupHash: Int): Int { return untyped __lua__('N_0x08f96ca6c551ad51')(pickupHash); }
    
    /**
    * struct WeaponHudStatsData
    * {
    * BYTE hudDamage; // 0x0000
    * char _0x0001[0x7]; // 0x0001
    * BYTE hudSpeed; // 0x0008
    * char _0x0009[0x7]; // 0x0009
    * BYTE hudCapacity; // 0x0010
    * char _0x0011[0x7]; // 0x0011
    * BYTE hudAccuracy; // 0x0018
    * char _0x0019[0x7]; // 0x0019
    * BYTE hudRange; // 0x0020
    * };
    * Usage:
    * WeaponHudStatsData data;
    * if (GET_WEAPON_HUD_STATS(weaponHash, (int *)&amp;data))
    * {
    * // BYTE damagePercentage = data.hudDamage and so on
    * }
    */
    @:pure static inline function GetWeaponHudStats(weaponHash: EitherType<String, Int>, outData: Int): Int { return untyped __lua__('GetWeaponHudStats')(weaponHash, outData); }
    
    /**
    * Drops the current weapon and returns the object
    * Unknown behavior when unarmed.
    */
    @:pure static inline function GetWeaponObjectFromPed(ped: Int, p1: Bool): Int { return untyped __lua__('GetWeaponObjectFromPed')(ped, p1); }
    @:pure static inline function GetWeaponObjectTintIndex(weapon: Int): Int { return untyped __lua__('GetWeaponObjectTintIndex')(weapon); }
    @:pure static inline function GetWeaponTintCount(weaponHash: EitherType<String, Int>): Int { return untyped __lua__('GetWeaponTintCount')(weaponHash); }
    @:pure static inline function GetWeapontypeGroup(weaponHash: EitherType<String, Int>): Int { return untyped __lua__('GetWeapontypeGroup')(weaponHash); }
    
    /**
    * Returns the model of any weapon.
    * Can also take an ammo hash?
    * sub_6663a(&amp;l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg}));
    */
    @:pure static inline function GetWeapontypeModel(weaponHash: EitherType<String, Int>): Int { return untyped __lua__('GetWeapontypeModel')(weaponHash); }
    @:pure static inline function GetWeapontypeSlot(weaponHash: EitherType<String, Int>): Int { return untyped __lua__('GetWeapontypeSlot')(weaponHash); }
    @:pure static inline function GetWeatherTypeTransition(): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('GetWeatherTypeTransition')(); }
    @:pure static inline function GetWindDirection(): Array<Int> { return untyped __lua__('GetWindDirection')(); }
    @:pure static inline function GetWindSpeed(): Int { return untyped __lua__('GetWindSpeed')(); }
    
    /**
    * Returns the coordinates of an entity-bone.
    */
    @:pure static inline function GetWorldPositionOfEntityBone(entity: Int, boneIndex: Int): Array<Int> { return untyped __lua__('GetWorldPositionOfEntityBone')(entity, boneIndex); }
    @:pure static inline function GetZoneAtCoords(x: Int, y: Int, z: Int): Int { return untyped __lua__('GetZoneAtCoords')(x, y, z); }
    
    /**
    * 'zoneName' corresponds to an entry in 'popzone.ipl'.
    * AIRP = Los Santos International Airport
    * ALAMO = Alamo Sea
    * ALTA = Alta
    * ARMYB = Fort Zancudo
    * BANHAMC = Banham Canyon Dr
    * BANNING = Banning
    * BEACH = Vespucci Beach
    * BHAMCA = Banham Canyon
    * BRADP = Braddock Pass
    * BRADT = Braddock Tunnel
    * BURTON = Burton
    * CALAFB = Calafia Bridge
    * CANNY = Raton Canyon
    * CCREAK = Cassidy Creek
    * CHAMH = Chamberlain Hills
    * CHIL = Vinewood Hills
    * CHU = Chumash
    * CMSW = Chiliad Mountain State Wilderness
    * CYPRE = Cypress Flats
    * DAVIS = Davis
    * DELBE = Del Perro Beach
    * DELPE = Del Perro
    * DELSOL = La Puerta
    * DESRT = Grand Senora Desert
    * DOWNT = Downtown
    * DTVINE = Downtown Vinewood
    * EAST_V = East Vinewood
    * EBURO = El Burro Heights
    * ELGORL = El Gordo Lighthouse
    * ELYSIAN = Elysian Island
    * GALFISH = Galilee
    * GOLF = GWC and Golfing Society
    * GRAPES = Grapeseed
    * GREATC = Great Chaparral
    * HARMO = Harmony
    * HAWICK = Hawick
    * HORS = Vinewood Racetrack
    * HUMLAB = Humane Labs and Research
    * JAIL = Bolingbroke Penitentiary
    * KOREAT = Little Seoul
    * LACT = Land Act Reservoir
    * LAGO = Lago Zancudo
    * LDAM = Land Act Dam
    * LEGSQU = Legion Square
    * LMESA = La Mesa
    * LOSPUER = La Puerta
    * MIRR = Mirror Park
    * MORN = Morningwood
    * MOVIE = Richards Majestic
    * MTCHIL = Mount Chiliad
    * MTGORDO = Mount Gordo
    * MTJOSE = Mount Josiah
    * MURRI = Murrieta Heights
    * NCHU = North Chumash
    * NOOSE = N.O.O.S.E
    * OCEANA = Pacific Ocean
    * PALCOV = Paleto Cove
    * PALETO = Paleto Bay
    * PALFOR = Paleto Forest
    * PALHIGH = Palomino Highlands
    * PALMPOW = Palmer-Taylor Power Station
    * PBLUFF = Pacific Bluffs
    * PBOX = Pillbox Hill
    * PROCOB = Procopio Beach
    * RANCHO = Rancho
    * RGLEN = Richman Glen
    * RICHM = Richman
    * ROCKF = Rockford Hills
    * RTRAK = Redwood Lights Track
    * SANAND = San Andreas
    * SANCHIA = San Chianski Mountain Range
    * SANDY = Sandy Shores
    * SKID = Mission Row
    * SLAB = Stab City
    * STAD = Maze Bank Arena
    * STRAW = Strawberry
    * TATAMO = Tataviam Mountains
    * TERMINA = Terminal
    * TEXTI = Textile City
    * TONGVAH = Tongva Hills
    * TONGVAV = Tongva Valley
    * VCANA = Vespucci Canals
    * VESP = Vespucci
    * VINE = Vinewood
    * WINDF = Ron Alternates Wind Farm
    * WVINE = West Vinewood
    * ZANCUDO = Zancudo River
    * ZP_ORT = Port of South Los Santos
    * ZQ_UAR = Davis Quartz
    */
    @:pure static inline function GetZoneFromNameId(zoneName: String): Int { return untyped __lua__('GetZoneFromNameId')(zoneName); }
    @:pure static inline function GetZonePopschedule(zoneId: Int): Int { return untyped __lua__('GetZonePopschedule')(zoneId); }
    
    /**
    * cellphone range 1- 5 used for signal bar in iFruit phone
    */
    @:pure static inline function GetZoneScumminess(zoneId: Int): Int { return untyped __lua__('GetZoneScumminess')(zoneId); }
    
    /**
    * Achievements from 0-57
    * more achievements came with update 1.29 (freemode events update), I'd say that they now go to 60, but I'll need to check.
    */
    @:pure static inline function GiveAchievementToPlayer(achievement: Int): Int { return untyped __lua__('GiveAchievementToPlayer')(achievement); }
    
    /**
    * Gives a weapon to PED with a delay, example:
    * WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL"), 1000, false)
    * ----------------------------------------------------------------------------------------------------------------------------------------
    * Translation table:
    * pastebin.com/a39K8Nz8
    */
    @:pure static inline function GiveDelayedWeaponToPed(ped: Int, weaponHash: EitherType<String, Int>, time: Int, equipNow: Bool): Void { return untyped __lua__('GiveDelayedWeaponToPed')(ped, weaponHash, time, equipNow); }
    
    /**
    * PoliceMotorcycleHelmet	1024
    * RegularMotorcycleHelmet	4096
    * FiremanHelmet	16384
    * PilotHeadset	32768
    * PilotHelmet	65536
    * --
    * p2 is generally 4096 or 16384 in the scripts. p1 varies between 1 and 0.
    */
    @:pure static inline function GivePedHelmet(ped: Int, cannotRemove: Bool, helmetFlag: Int, textureIndex: Int): Void { return untyped __lua__('GivePedHelmet')(ped, cannotRemove, helmetFlag, textureIndex); }
    
    /**
    * Sends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped.
    * If a message hasn't been created already, this function does nothing.
    * If the Ped is not ragdolled with Euphoria enabled, this function does nothing.
    * The following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
    * Call order:
    * SET_PED_TO_RAGDOLL
    * CREATE_NM_MESSAGE
    * GIVE_PED_NM_MESSAGE
    * Multiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made:
    * SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
    * CREATE_NM_MESSAGE(true, 0); // stopAllBehaviours - Stop all other behaviours, in case the Ped is already doing some Euphoria stuff.
    * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
    * CREATE_NM_MESSAGE(true, 1151); // staggerFall - Attempt to walk while falling.
    * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
    * CREATE_NM_MESSAGE(true, 372); // armsWindmill - Swing arms around.
    * GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
    */
    @:pure static inline function GivePedNmMessage(ped: Int): Void { return untyped __lua__('GivePedNmMessage')(ped); }
    
    /**
    * p1 is either 1 or 2 in the PC scripts.
    */
    @:pure static inline function GivePedToPauseMenu(ped: Int, p1: Int): Void { return untyped __lua__('GivePedToPauseMenu')(ped, p1); }
    @:pure static inline function GivePlayerRagdollControl(player: Int, toggle: Bool): Void { return untyped __lua__('GivePlayerRagdollControl')(player, toggle); }
    @:pure static inline function GiveWeaponComponentToPed(ped: Int, weaponHash: EitherType<String, Int>, componentHash: EitherType<String, Int>): Void { return untyped __lua__('GiveWeaponComponentToPed')(ped, weaponHash, componentHash); }
    
    /**
    * addonHash:
    * (use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value)
    * ${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02}
    */
    @:pure static inline function GiveWeaponComponentToWeaponObject(weaponObject: Int, addonHash: EitherType<String, Int>): Void { return untyped __lua__('GiveWeaponComponentToWeaponObject')(weaponObject, addonHash); }
    @:pure static inline function GiveWeaponObjectToPed(weaponObject: Int, ped: Int): Void { return untyped __lua__('GiveWeaponObjectToPed')(weaponObject, ped); }
    
    /**
    * isHidden - ????
    * All weapon names (add to the list if something is missing), use GAMEPLAY::GET_HASH_KEY((char *)weaponNames[i]) to get get the hash:
    * static LPCSTR weaponNames[] = {
    * "WEAPON_KNIFE", "WEAPON_NIGHTSTICK", "WEAPON_HAMMER", "WEAPON_BAT", "WEAPON_GOLFCLUB",
    * "WEAPON_CROWBAR", "WEAPON_PISTOL", "WEAPON_COMBATPISTOL", "WEAPON_APPISTOL", "WEAPON_PISTOL50",
    * "WEAPON_MICROSMG", "WEAPON_SMG", "WEAPON_ASSAULTSMG", "WEAPON_ASSAULTRIFLE",
    * "WEAPON_CARBINERIFLE", "WEAPON_ADVANCEDRIFLE", "WEAPON_MG", "WEAPON_COMBATMG", "WEAPON_PUMPSHOTGUN",
    * "WEAPON_SAWNOFFSHOTGUN", "WEAPON_ASSAULTSHOTGUN", "WEAPON_BULLPUPSHOTGUN", "WEAPON_STUNGUN", "WEAPON_SNIPERRIFLE",
    * "WEAPON_HEAVYSNIPER", "WEAPON_GRENADELAUNCHER", "WEAPON_GRENADELAUNCHER_SMOKE", "WEAPON_RPG", "WEAPON_MINIGUN",
    * "WEAPON_GRENADE", "WEAPON_STICKYBOMB", "WEAPON_SMOKEGRENADE", "WEAPON_BZGAS", "WEAPON_MOLOTOV",
    * "WEAPON_FIREEXTINGUISHER", "WEAPON_PETROLCAN", "WEAPON_FLARE", "WEAPON_SNSPISTOL", "WEAPON_SPECIALCARBINE",
    * "WEAPON_HEAVYPISTOL", "WEAPON_BULLPUPRIFLE", "WEAPON_HOMINGLAUNCHER", "WEAPON_PROXMINE", "WEAPON_SNOWBALL",
    * "WEAPON_VINTAGEPISTOL", "WEAPON_DAGGER", "WEAPON_FIREWORK", "WEAPON_MUSKET", "WEAPON_MARKSMANRIFLE",
    * "WEAPON_HEAVYSHOTGUN", "WEAPON_GUSENBERG", "WEAPON_HATCHET", "WEAPON_RAILGUN", "WEAPON_COMBATPDW",
    * "WEAPON_KNUCKLE", "WEAPON_MARKSMANPISTOL", "WEAPON_FLASHLIGHT", "WEAPON_MACHETE", "WEAPON_MACHINEPISTOL",
    * "WEAPON_SWITCHBLADE", "WEAPON_REVOLVER", "WEAPON_COMPACTRIFLE", "WEAPON_DBSHOTGUN", "WEAPON_FLAREGUN",
    * "WEAPON_AUTOSHOTGUN", "WEAPON_BATTLEAXE", "WEAPON_COMPACTLAUNCHER", "WEAPON_MINISMG", "WEAPON_PIPEBOMB",
    * "WEAPON_POOLCUE", "WEAPON_SWEEPER", "WEAPON_WRENCH"
    * };
    * ----------------------------------------------------------------------------------------------------------------------------------------
    * Translation table:
    * pastebin.com/a39K8Nz8
    */
    @:pure static inline function GiveWeaponToPed(ped: Int, weaponHash: EitherType<String, Int>, ammoCount: Int, isHidden: Bool, equipNow: Bool): Void { return untyped __lua__('GiveWeaponToPed')(ped, weaponHash, ammoCount, isHidden, equipNow); }
    @:pure static inline function HasAchievementBeenPassed(achievement: Int): Int { return untyped __lua__('HasAchievementBeenPassed')(achievement); }
    @:pure static inline function HasActionModeAssetLoaded(asset: String): Int { return untyped __lua__('HasActionModeAssetLoaded')(asset); }
    @:pure static inline function HasAdditionalTextLoaded(slot: Int): Int { return untyped __lua__('HasAdditionalTextLoaded')(slot); }
    @:pure static inline function HasAnimDictLoaded(animDict: String): Int { return untyped __lua__('HasAnimDictLoaded')(animDict); }
    
    /**
    * if (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("CreateObject")))
    */
    @:pure static inline function HasAnimEventFired(entity: Int, actionHash: EitherType<String, Int>): Int { return untyped __lua__('HasAnimEventFired')(entity, actionHash); }
    
    /**
    * Gets whether the specified animation set has finished loading. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
    * Animation set and clip set are synonymous.
    */
    @:pure static inline function HasAnimSetLoaded(animSet: String): Int { return untyped __lua__('HasAnimSetLoaded')(animSet); }
    
    /**
    * Console Hash
    */
    @:pure static inline function HasBgScriptBeenDownloaded(): Int { return untyped __lua__('HasBgScriptBeenDownloaded')(); }
    
    /**
    * Console Hash
    */
    @:pure static inline function N_0x8132c0eb8b2b3293(): Int { return untyped __lua__('N_0x8132c0eb8b2b3293')(); }
    
    /**
    * p3 - possibly radius?
    */
    @:pure static inline function HasBulletImpactedInArea(x: Int, y: Int, z: Int, p3: Int, p4: Bool, p5: Bool): Int { return untyped __lua__('HasBulletImpactedInArea')(x, y, z, p3, p4, p5); }
    @:pure static inline function HasBulletImpactedInBox(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Bool, p7: Bool): Int { return untyped __lua__('HasBulletImpactedInBox')(p0, p1, p2, p3, p4, p5, p6, p7); }
    
    /**
    * This native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the "amount" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/
    * INT_SCORES_SCORTED was a hash collision
    */
    @:pure static inline function HasButtonCombinationJustBeenEntered(hash: EitherType<String, Int>, amount: Int): Int { return untyped __lua__('HasButtonCombinationJustBeenEntered')(hash, amount); }
    
    /**
    * This native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the "amount" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/
    * INT_SCORES_SCORTED was a hash collision
    */
    @:pure static inline function N_0x071e2a839de82d90(hash: EitherType<String, Int>, amount: Int): Int { return untyped __lua__('N_0x071e2a839de82d90')(hash, amount); }
    
    /**
    * Get inputted "Cheat code", for example:
    * while (TRUE)
    * {
    * if (GAMEPLAY::_557E43C447E700A8(${fugitive}))
    * {
    * // Do something.
    * }
    * SYSTEM::WAIT(0);
    * }
    * Calling this will also set the last saved string hash to zero.
    */
    @:pure static inline function HasCheatStringJustBeenEntered(hash: EitherType<String, Int>): Int { return untyped __lua__('HasCheatStringJustBeenEntered')(hash); }
    
    /**
    * Get inputted "Cheat code", for example:
    * while (TRUE)
    * {
    * if (GAMEPLAY::_557E43C447E700A8(${fugitive}))
    * {
    * // Do something.
    * }
    * SYSTEM::WAIT(0);
    * }
    * Calling this will also set the last saved string hash to zero.
    */
    @:pure static inline function N_0x557e43c447e700a8(hash: EitherType<String, Int>): Int { return untyped __lua__('N_0x557e43c447e700a8')(hash); }
    
    /**
    * Alias for HAS_ANIM_SET_LOADED.
    */
    @:pure static inline function HasClipSetLoaded(clipSet: String): Int { return untyped __lua__('HasClipSetLoaded')(clipSet); }
    @:pure static inline function HasClosestObjectOfTypeBeenBroken(p0: Int, p1: Int, p2: Int, p3: Int, modelHash: EitherType<String, Int>, p5: Int): Int { return untyped __lua__('HasClosestObjectOfTypeBeenBroken')(p0, p1, p2, p3, modelHash, p5); }
    @:pure static inline function HasCollisionForModelLoaded(model: EitherType<String, Int>): Int { return untyped __lua__('HasCollisionForModelLoaded')(model); }
    @:pure static inline function HasCollisionLoadedAroundEntity(entity: Int): Int { return untyped __lua__('HasCollisionLoadedAroundEntity')(entity); }
    @:pure static inline function HasCutsceneFinished(): Int { return untyped __lua__('HasCutsceneFinished')(); }
    @:pure static inline function HasCutsceneLoaded(): Int { return untyped __lua__('HasCutsceneLoaded')(); }
    
    /**
    * P3 is always 3 as far as i cant tell
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    */
    @:pure static inline function HasEntityAnimFinished(entity: Int, animDict: String, animName: String, p3: Int): Int { return untyped __lua__('HasEntityAnimFinished')(entity, animDict, animName, p3); }
    @:pure static inline function HasEntityBeenDamagedByAnyObject(entity: Int): Int { return untyped __lua__('HasEntityBeenDamagedByAnyObject')(entity); }
    @:pure static inline function HasEntityBeenDamagedByAnyPed(entity: Int): Int { return untyped __lua__('HasEntityBeenDamagedByAnyPed')(entity); }
    @:pure static inline function HasEntityBeenDamagedByAnyVehicle(entity: Int): Int { return untyped __lua__('HasEntityBeenDamagedByAnyVehicle')(entity); }
    
    /**
    * Entity 1 = Victim
    * Entity 2 = Attacker
    * p2 seems to always be 1
    */
    @:pure static inline function HasEntityBeenDamagedByEntity(entity1: Int, entity2: Int, p2: Bool): Int { return untyped __lua__('HasEntityBeenDamagedByEntity')(entity1, entity2, p2); }
    
    /**
    * It determines what weapons caused damage:
    * If youu want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
    * If you want to define any melee weapon, second parameter=0, third parameter=1.
    * If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
    */
    @:pure static inline function HasEntityBeenDamagedByWeapon(entity: Int, weaponHash: EitherType<String, Int>, weaponType: Int): Int { return untyped __lua__('HasEntityBeenDamagedByWeapon')(entity, weaponHash, weaponType); }
    
    /**
    * traceType is always 17 in the scripts.
    * There is other codes used for traceType:
    * 19 - in jewelry_prep1a
    * 126 - in am_hunt_the_beast
    * 256 &amp; 287 - in fm_mission_controller
    */
    @:pure static inline function HasEntityClearLosToEntity(entity1: Int, entity2: Int, traceType: Int): Int { return untyped __lua__('HasEntityClearLosToEntity')(entity1, entity2, traceType); }
    
    /**
    * Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
    * This is one of the most CPU demanding BOOL natives in the game; avoid calling this in things like nested for-loops
    */
    @:pure static inline function HasEntityClearLosToEntityInFront(entity1: Int, entity2: Int): Int { return untyped __lua__('HasEntityClearLosToEntityInFront')(entity1, entity2); }
    
    /**
    * Called on tick.
    * Tested with vehicles, returns true whenever the vehicle is touching any entity.
    * Note: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true.
    */
    @:pure static inline function HasEntityCollidedWithAnything(entity: Int): Int { return untyped __lua__('HasEntityCollidedWithAnything')(entity); }
    @:pure static inline function HasForceCleanupOccurred(cleanupFlags: Int): Int { return untyped __lua__('HasForceCleanupOccurred')(cleanupFlags); }
    
    /**
    * Check to see if hud component Scaleform has loaded?
    */
    @:pure static inline function HasHudScaleformLoaded(hudComponent: Int): Int { return untyped __lua__('HasHudScaleformLoaded')(hudComponent); }
    
    /**
    * Checks if the specified model has loaded into memory.
    */
    @:pure static inline function HasModelLoaded(model: EitherType<String, Int>): Int { return untyped __lua__('HasModelLoaded')(model); }
    @:pure static inline function HasNamedPtfxAssetLoaded(fxName: String): Int { return untyped __lua__('HasNamedPtfxAssetLoaded')(fxName); }
    
    /**
    * Pretty sure it's the real name (not 100% sure so I added the _ prefix); can someone else confirm it?
    * Only values used in the scripts are:
    * "heist_mp"
    * "heistmap_mp"
    * "instructional_buttons"
    * "heist_pre"
    */
    @:pure static inline function HasNamedScaleformMovieLoaded(scaleformName: String): Int { return untyped __lua__('HasNamedScaleformMovieLoaded')(scaleformName); }
    
    /**
    * Pretty sure it's the real name (not 100% sure so I added the _ prefix); can someone else confirm it?
    * Only values used in the scripts are:
    * "heist_mp"
    * "heistmap_mp"
    * "instructional_buttons"
    * "heist_pre"
    */
    @:pure static inline function N_0x0c1c5d756fb5f337(scaleformName: String): Int { return untyped __lua__('N_0x0c1c5d756fb5f337')(scaleformName); }
    @:pure static inline function HasNetworkTimeStarted(): Int { return untyped __lua__('HasNetworkTimeStarted')(); }
    @:pure static inline function N_0x46718aceedeafc84(): Int { return untyped __lua__('N_0x46718aceedeafc84')(); }
    @:pure static inline function HasObjectBeenBroken(object: Int): Int { return untyped __lua__('HasObjectBeenBroken')(object); }
    
    /**
    * It determines what weapons caused damage:
    * If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
    * If you want to define any melee weapon, second parameter=0, third parameter=1.
    * If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
    */
    @:pure static inline function HasPedBeenDamagedByWeapon(ped: Int, weaponHash: EitherType<String, Int>, weaponType: Int): Int { return untyped __lua__('HasPedBeenDamagedByWeapon')(ped, weaponHash, weaponType); }
    
    /**
    * p2 should be FALSE, otherwise it seems to always return FALSE
    * Bool does not check if the weapon is current equipped, unfortunately.
    */
    @:pure static inline function HasPedGotWeapon(ped: Int, weaponHash: EitherType<String, Int>, p2: Bool): Int { return untyped __lua__('HasPedGotWeapon')(ped, weaponHash, p2); }
    @:pure static inline function HasPedGotWeaponComponent(ped: Int, weaponHash: EitherType<String, Int>, componentHash: EitherType<String, Int>): Int { return untyped __lua__('HasPedGotWeaponComponent')(ped, weaponHash, componentHash); }
    @:pure static inline function HasPedHeadBlendFinished(ped: Int): Int { return untyped __lua__('HasPedHeadBlendFinished')(ped); }
    @:pure static inline function HasPedReceivedEvent(p0: Int, p1: Int): Int { return untyped __lua__('HasPedReceivedEvent')(p0, p1); }
    @:pure static inline function HasPickupBeenCollected(pickup: Int): Int { return untyped __lua__('HasPickupBeenCollected')(pickup); }
    @:pure static inline function HasPlayerBeenSpottedInStolenVehicle(player: Int): Int { return untyped __lua__('HasPlayerBeenSpottedInStolenVehicle')(player); }
    @:pure static inline function HasPlayerDamagedAtLeastOneNonAnimalPed(player: Int): Int { return untyped __lua__('HasPlayerDamagedAtLeastOneNonAnimalPed')(player); }
    @:pure static inline function HasPlayerDamagedAtLeastOnePed(player: Int): Int { return untyped __lua__('HasPlayerDamagedAtLeastOnePed')(player); }
    
    /**
    * Gets the player's info and calls a function that checks the player's ped position.
    * Here's the decompiled function that checks the position: pastebin.com/ZdHG2E7n
    */
    @:pure static inline function HasPlayerLeftTheWorld(player: Int): Int { return untyped __lua__('HasPlayerLeftTheWorld')(player); }
    @:pure static inline function HasPlayerTeleportFinished(player: Int): Int { return untyped __lua__('HasPlayerTeleportFinished')(player); }
    @:pure static inline function N_0xe23d5873c2394c61(player: Int): Int { return untyped __lua__('N_0xe23d5873c2394c61')(player); }
    @:pure static inline function HasPreloadModsFinished(p0: Int): Int { return untyped __lua__('HasPreloadModsFinished')(p0); }
    @:pure static inline function HasPtfxAssetLoaded(): Int { return untyped __lua__('HasPtfxAssetLoaded')(); }
    @:pure static inline function HasScaleformContainerMovieLoadedIntoParent(scaleformHandle: Int): Int { return untyped __lua__('HasScaleformContainerMovieLoadedIntoParent')(scaleformHandle); }
    @:pure static inline function HasScaleformMovieLoaded(scaleformHandle: Int): Int { return untyped __lua__('HasScaleformMovieLoaded')(scaleformHandle); }
    
    /**
    * Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.
    * For a full list, see here: pastebin.com/yLNWicUi
    */
    @:pure static inline function HasScriptLoaded(scriptName: String): Int { return untyped __lua__('HasScriptLoaded')(scriptName); }
    @:pure static inline function HasScriptWithNameHashLoaded(scriptHash: EitherType<String, Int>): Int { return untyped __lua__('HasScriptWithNameHashLoaded')(scriptHash); }
    @:pure static inline function HasStreamedScriptLoaded(scriptHash: EitherType<String, Int>): Int { return untyped __lua__('HasStreamedScriptLoaded')(scriptHash); }
    @:pure static inline function HasSoundFinished(soundId: Int): Int { return untyped __lua__('HasSoundFinished')(soundId); }
    @:pure static inline function HasStealthModeAssetLoaded(asset: String): Int { return untyped __lua__('HasStealthModeAssetLoaded')(asset); }
    @:pure static inline function HasStreamedTextureDictLoaded(textureDict: String): Int { return untyped __lua__('HasStreamedTextureDictLoaded')(textureDict); }
    
    /**
    * Checks if the specified gxt has loaded into the passed slot.
    */
    @:pure static inline function HasThisAdditionalTextLoaded(gxt: String, slot: Int): Int { return untyped __lua__('HasThisAdditionalTextLoaded')(gxt, slot); }
    @:pure static inline function HasThisCutsceneLoaded(cutsceneName: String): Int { return untyped __lua__('HasThisCutsceneLoaded')(cutsceneName); }
    
    /**
    * Console Hash
    */
    @:pure static inline function HasTunablesBeenDownloaded(): Int { return untyped __lua__('HasTunablesBeenDownloaded')(); }
    
    /**
    * Console Hash
    */
    @:pure static inline function N_0x0467c11ed88b7d28(): Int { return untyped __lua__('N_0x0467c11ed88b7d28')(); }
    @:pure static inline function HasVehicleAssetLoaded(vehicleAsset: Int): Int { return untyped __lua__('HasVehicleAssetLoaded')(vehicleAsset); }
    
    /**
    * Third Parameter = unsure, but pretty sure it is weapon hash
    * --&gt; get_hash_key("weapon_stickybomb")
    * Fourth Parameter = unsure, almost always -1
    */
    @:pure static inline function HasVehicleGotProjectileAttached(driver: Int, vehicle: Int, weaponHash: EitherType<String, Int>, p3: Int): Int { return untyped __lua__('HasVehicleGotProjectileAttached')(driver, vehicle, weaponHash, p3); }
    @:pure static inline function HasVehicleRecordingBeenLoaded(p0: Int, p1: Int): Int { return untyped __lua__('HasVehicleRecordingBeenLoaded')(p0, p1); }
    @:pure static inline function HasWeaponAssetLoaded(weaponHash: EitherType<String, Int>): Int { return untyped __lua__('HasWeaponAssetLoaded')(weaponHash); }
    @:pure static inline function HasWeaponGotWeaponComponent(weapon: Int, addonHash: EitherType<String, Int>): Int { return untyped __lua__('HasWeaponGotWeaponComponent')(weapon, addonHash); }
    @:pure static inline function HideHelpTextThisFrame(): Void { return untyped __lua__('HideHelpTextThisFrame')(); }
    
    /**
    * I think this works, but seems to prohibit switching to other weapons (or accessing the weapon wheel)
    */
    @:pure static inline function HideHudAndRadarThisFrame(): Void { return untyped __lua__('HideHudAndRadarThisFrame')(); }
    @:pure static inline function HideHudComponentThisFrame(id: Int): Void { return untyped __lua__('HideHudComponentThisFrame')(id); }
    @:pure static inline function HideLoadingOnFadeThisFrame(): Void { return untyped __lua__('HideLoadingOnFadeThisFrame')(); }
    
    /**
    * This is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.
    * More info: http://gtaforums.com/topic/836301-hiding-gta-online-apartment-exteriors/
    */
    @:pure static inline function HideMapObjectThisFrame(mapObjectHash: EitherType<String, Int>): Void { return untyped __lua__('HideMapObjectThisFrame')(mapObjectHash); }
    
    /**
    * This is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.
    * More info: http://gtaforums.com/topic/836301-hiding-gta-online-apartment-exteriors/
    */
    @:pure static inline function N_0xa97f257d0151a6ab(mapObjectHash: EitherType<String, Int>): Void { return untyped __lua__('N_0xa97f257d0151a6ab')(mapObjectHash); }
    @:pure static inline function HideNumberOnBlip(blip: Int): Void { return untyped __lua__('HideNumberOnBlip')(blip); }
    @:pure static inline function HidePedBloodDamageByZone(ped: Int, p1: Int, p2: Bool): Void { return untyped __lua__('HidePedBloodDamageByZone')(ped, p1, p2); }
    @:pure static inline function N_0x62ab793144de75dc(ped: Int, p1: Int, p2: Bool): Void { return untyped __lua__('N_0x62ab793144de75dc')(ped, p1, p2); }
    
    /**
    * Hides the players weapon during a cutscene.
    */
    @:pure static inline function HidePedWeaponForScriptedCutscene(ped: Int, toggle: Bool): Void { return untyped __lua__('HidePedWeaponForScriptedCutscene')(ped, toggle); }
    @:pure static inline function HideScriptedHudComponentThisFrame(id: Int): Void { return untyped __lua__('HideScriptedHudComponentThisFrame')(id); }
    
    /**
    * Hash collision
    */
    @:pure static inline function HideSpecialAbilityLockonOperation(p0: Int, p1: Bool): Void { return untyped __lua__('HideSpecialAbilityLockonOperation')(p0, p1); }
    
    /**
    * draws circular marker at pos
    * -1 = none
    * 0 = red
    * 1 = green
    * 2 = blue
    * 3 = green larger
    * 4 = nothing
    * 5 = green small
    */
    @:pure static inline function HighlightPlacementCoords(x: Int, y: Int, z: Int, colorIndex: Int): Void { return untyped __lua__('HighlightPlacementCoords')(x, y, z, colorIndex); }
    
    /**
    * draws circular marker at pos
    * -1 = none
    * 0 = red
    * 1 = green
    * 2 = blue
    * 3 = green larger
    * 4 = nothing
    * 5 = green small
    */
    @:pure static inline function N_0x3430676b11cdf21d(x: Int, y: Int, z: Int, colorIndex: Int): Void { return untyped __lua__('N_0x3430676b11cdf21d')(x, y, z, colorIndex); }
    @:pure static inline function HintAmbientAudioBank(p0: Int, p1: Int): Int { return untyped __lua__('HintAmbientAudioBank')(p0, p1); }
    @:pure static inline function HintScriptAudioBank(p0: Int, p1: Int): Int { return untyped __lua__('HintScriptAudioBank')(p0, p1); }
    @:pure static inline function IgnoreNextRestart(toggle: Bool): Void { return untyped __lua__('IgnoreNextRestart')(toggle); }
    @:pure static inline function InitShopPedComponent(outComponent: Int): Void { return untyped __lua__('InitShopPedComponent')(outComponent); }
    @:pure static inline function InitShopPedProp(outProp: Int): Void { return untyped __lua__('InitShopPedProp')(outProp); }
    
    /**
    * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
    * --------------------------------------------------------
    * if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))
    */
    @:pure static inline function IntToParticipantindex(value: Int): Int { return untyped __lua__('IntToParticipantindex')(value); }
    
    /**
    * Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
    */
    @:pure static inline function IntToPlayerindex(value: Int): Int { return untyped __lua__('IntToPlayerindex')(value); }
    @:pure static inline function InterruptConversation(p0: Int): { a0: Int, a1: Int } { return untyped __lua__('InterruptConversation')(p0); }
    @:pure static inline function InvokeFunctionReference(referenceIdentity: String, argsSerialized: String, argsLength: Int, retvalLength: Int): String { return untyped __lua__('InvokeFunctionReference')(referenceIdentity, argsSerialized, argsLength, retvalLength); }
    @:pure static inline function IsAimCamActive(): Int { return untyped __lua__('IsAimCamActive')(); }
    
    /**
    * Example:
    * bool playing = AUDIO::IS_ALARM_PLAYING("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
    */
    @:pure static inline function IsAlarmPlaying(alarmName: String): Int { return untyped __lua__('IsAlarmPlaying')(alarmName); }
    
    /**
    * Common in the scripts:
    * AUDIO::IS_AMBIENT_SPEECH_DISABLED(PLAYER::PLAYER_PED_ID());
    */
    @:pure static inline function IsAmbientSpeechDisabled(ped: Int): Int { return untyped __lua__('IsAmbientSpeechDisabled')(ped); }
    @:pure static inline function IsAmbientSpeechPlaying(p0: Int): Int { return untyped __lua__('IsAmbientSpeechPlaying')(p0); }
    @:pure static inline function IsAmbientZoneEnabled(ambientZone: String): Int { return untyped __lua__('IsAmbientZoneEnabled')(ambientZone); }
    @:pure static inline function IsAnEntity(handle: Int): Int { return untyped __lua__('IsAnEntity')(handle); }
    @:pure static inline function IsAnyObjectNearPoint(x: Int, y: Int, z: Int, range: Int, p4: Bool): Int { return untyped __lua__('IsAnyObjectNearPoint')(x, y, z, range, p4); }
    @:pure static inline function IsAnyPedNearPoint(x: Int, y: Int, z: Int, radius: Int): Int { return untyped __lua__('IsAnyPedNearPoint')(x, y, z, radius); }
    @:pure static inline function IsAnyPedShootingInArea(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, p6: Bool, p7: Bool): Int { return untyped __lua__('IsAnyPedShootingInArea')(x1, y1, z1, x2, y2, z2, p6, p7); }
    @:pure static inline function IsAnySpeechPlaying(ped: Int): Int { return untyped __lua__('IsAnySpeechPlaying')(ped); }
    @:pure static inline function IsAnyVehicleNearPoint(x: Int, y: Int, z: Int, radius: Int): Int { return untyped __lua__('IsAnyVehicleNearPoint')(x, y, z, radius); }
    @:pure static inline function IsAreaOccupied(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Bool, p7: Bool, p8: Bool, p9: Bool, p10: Bool, p11: Int, p12: Bool): Int { return untyped __lua__('IsAreaOccupied')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12); }
    @:pure static inline function IsAudioSceneActive(scene: String): Int { return untyped __lua__('IsAudioSceneActive')(scene); }
    
    /**
    * if (GAMEPLAY::IS_AUSSIE_VERSION()) {
    * sub_127a9(&amp;l_31, 1024); // l_31 |= 1024
    * l_129 = 3;
    * sub_129d2("AUSSIE VERSION IS TRUE!?!?!"); // DEBUG
    * }
    * Used to block some of the prostitute stuff due to laws in Australia.
    */
    @:pure static inline function IsAussieVersion(): Int { return untyped __lua__('IsAussieVersion')(); }
    @:pure static inline function IsAutoSaveInProgress(): Int { return untyped __lua__('IsAutoSaveInProgress')(); }
    @:pure static inline function IsBigVehicle(vehicle: Int): Int { return untyped __lua__('IsBigVehicle')(vehicle); }
    
    /**
    * Returns bit's boolean state from [offset] of [address].
    * Example:
    * GAMEPLAY::IS_BIT_SET(bitAddress, 1);
    * To enable and disable bits, see:
    * GAMEPLAY::SET_BIT(&amp;bitAddress, 1);   // enable
    * GAMEPLAY::CLEAR_BIT(&amp;bitAddress, 1); // disable
    */
    @:pure static inline function IsBitSet(address: Int, offset: Int): Int { return untyped __lua__('IsBitSet')(address, offset); }
    @:pure static inline function IsBlipFlashing(blip: Int): Int { return untyped __lua__('IsBlipFlashing')(blip); }
    @:pure static inline function IsBlipOnMinimap(blip: Int): Int { return untyped __lua__('IsBlipOnMinimap')(blip); }
    @:pure static inline function IsBlipShortRange(blip: Int): Int { return untyped __lua__('IsBlipShortRange')(blip); }
    @:pure static inline function IsBulletInAngledArea(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Bool): Int { return untyped __lua__('IsBulletInAngledArea')(p0, p1, p2, p3, p4, p5, p6, p7); }
    @:pure static inline function IsBulletInArea(p0: Int, p1: Int, p2: Int, p3: Int, p4: Bool): Int { return untyped __lua__('IsBulletInArea')(p0, p1, p2, p3, p4); }
    @:pure static inline function IsBulletInBox(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Bool): Int { return untyped __lua__('IsBulletInBox')(p0, p1, p2, p3, p4, p5, p6); }
    
    /**
    * Returns whether or not the passed camera handle is active.
    */
    @:pure static inline function IsCamActive(cam: Int): Int { return untyped __lua__('IsCamActive')(cam); }
    @:pure static inline function IsCamInterpolating(cam: Int): Int { return untyped __lua__('IsCamInterpolating')(cam); }
    @:pure static inline function IsCamPlayingAnim(cam: Int, animName: String, animDictionary: String): Int { return untyped __lua__('IsCamPlayingAnim')(cam, animName, animDictionary); }
    @:pure static inline function IsCamRendering(cam: Int): Int { return untyped __lua__('IsCamRendering')(cam); }
    @:pure static inline function IsCamShaking(cam: Int): Int { return untyped __lua__('IsCamShaking')(cam); }
    @:pure static inline function IsCamSplinePaused(p0: Int): Int { return untyped __lua__('IsCamSplinePaused')(p0); }
    @:pure static inline function IsCinematicCamRendering(): Int { return untyped __lua__('IsCinematicCamRendering')(); }
    @:pure static inline function IsCinematicCamShaking(): Int { return untyped __lua__('IsCinematicCamShaking')(); }
    @:pure static inline function IsCinematicShotActive(p0: Int): Int { return untyped __lua__('IsCinematicShotActive')(p0); }
    
    /**
    * Control Groups:
    * enum InputGroups
    * {
    * INPUTGROUP_MOVE = 0,
    * INPUTGROUP_LOOK = 1,
    * INPUTGROUP_WHEEL = 2,
    * INPUTGROUP_CELLPHONE_NAVIGATE = 3,
    * INPUTGROUP_CELLPHONE_NAVIGATE_UD = 4,
    * INPUTGROUP_CELLPHONE_NAVIGATE_LR = 5,
    * INPUTGROUP_FRONTEND_DPAD_ALL = 6,
    * INPUTGROUP_FRONTEND_DPAD_UD = 7,
    * INPUTGROUP_FRONTEND_DPAD_LR = 8,
    * INPUTGROUP_FRONTEND_LSTICK_ALL = 9,
    * INPUTGROUP_FRONTEND_RSTICK_ALL = 10,
    * INPUTGROUP_FRONTEND_GENERIC_UD = 11,
    * INPUTGROUP_FRONTEND_GENERIC_LR = 12,
    * INPUTGROUP_FRONTEND_GENERIC_ALL = 13,
    * INPUTGROUP_FRONTEND_BUMPERS = 14,
    * INPUTGROUP_FRONTEND_TRIGGERS = 15,
    * INPUTGROUP_FRONTEND_STICKS = 16,
    * INPUTGROUP_SCRIPT_DPAD_ALL = 17,
    * INPUTGROUP_SCRIPT_DPAD_UD = 18,
    * INPUTGROUP_SCRIPT_DPAD_LR = 19,
    * INPUTGROUP_SCRIPT_LSTICK_ALL = 20,
    * INPUTGROUP_SCRIPT_RSTICK_ALL = 21,
    * INPUTGROUP_SCRIPT_BUMPERS = 22,
    * INPUTGROUP_SCRIPT_TRIGGERS = 23,
    * INPUTGROUP_WEAPON_WHEEL_CYCLE = 24,
    * INPUTGROUP_FLY = 25,
    * INPUTGROUP_SUB = 26,
    * INPUTGROUP_VEH_MOVE_ALL = 27,
    * INPUTGROUP_CURSOR = 28,
    * INPUTGROUP_CURSOR_SCROLL = 29,
    * INPUTGROUP_SNIPER_ZOOM_SECONDARY = 30,
    * INPUTGROUP_VEH_HYDRAULICS_CONTROL = 31,
    * MAX_INPUTGROUPS = 32,
    * INPUTGROUP_INVALID = 33
    * };
    * 0, 1 and 2 used in the scripts.
    */
    @:pure static inline function IsControlEnabled(inputGroup: Int, control: Int): Int { return untyped __lua__('IsControlEnabled')(inputGroup, control); }
    @:pure static inline function IsControlJustPressed(inputGroup: Int, control: Int): Int { return untyped __lua__('IsControlJustPressed')(inputGroup, control); }
    @:pure static inline function IsControlJustReleased(inputGroup: Int, control: Int): Int { return untyped __lua__('IsControlJustReleased')(inputGroup, control); }
    
    /**
    * index always is 2 for xbox 360 controller and razerblade
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function IsControlPressed(inputGroup: Int, control: Int): Int { return untyped __lua__('IsControlPressed')(inputGroup, control); }
    
    /**
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function IsControlReleased(inputGroup: Int, control: Int): Int { return untyped __lua__('IsControlReleased')(inputGroup, control); }
    @:pure static inline function IsConversationPedDead(ped: Int): Int { return untyped __lua__('IsConversationPedDead')(ped); }
    
    /**
    * xyz - relative to the world origin.
    */
    @:pure static inline function IsCopPedInArea_3d(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int): Int { return untyped __lua__('IsCopPedInArea_3d')(x1, y1, z1, x2, y2, z2); }
    
    /**
    * Usage:
    * public bool isCopInRange(Vector3 Location, float Range)
    * {
    * return Function.Call&lt;bool&gt;(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range);
    * }
    */
    @:pure static inline function IsCopVehicleInArea_3d(x1: Int, x2: Int, y1: Int, y2: Int, z1: Int, z2: Int): Int { return untyped __lua__('IsCopVehicleInArea_3d')(x1, x2, y1, y2, z1, z2); }
    @:pure static inline function IsCutsceneActive(): Int { return untyped __lua__('IsCutsceneActive')(); }
    @:pure static inline function IsCutscenePlaying(): Int { return untyped __lua__('IsCutscenePlaying')(); }
    @:pure static inline function IsDamageTrackerActiveOnNetworkId(netID: Int): Int { return untyped __lua__('IsDamageTrackerActiveOnNetworkId')(netID); }
    @:pure static inline function IsDecalAlive(decal: Int): Int { return untyped __lua__('IsDecalAlive')(decal); }
    
    /**
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function IsDisabledControlJustPressed(inputGroup: Int, control: Int): Int { return untyped __lua__('IsDisabledControlJustPressed')(inputGroup, control); }
    
    /**
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function IsDisabledControlJustReleased(inputGroup: Int, control: Int): Int { return untyped __lua__('IsDisabledControlJustReleased')(inputGroup, control); }
    
    /**
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function IsDisabledControlPressed(inputGroup: Int, control: Int): Int { return untyped __lua__('IsDisabledControlPressed')(inputGroup, control); }
    @:pure static inline function IsDlcDataEmpty(dlcData: Int): Int { return untyped __lua__('IsDlcDataEmpty')(dlcData); }
    @:pure static inline function IsOutfitEmpty(dlcData: Int): Int { return untyped __lua__('IsOutfitEmpty')(dlcData); }
    
    /**
    * Example:
    * DLC2::IS_DLC_PRESENT($\mpbusiness2\);
    * ($ = gethashkey)
    * bruteforce these:
    * 0xB119F6D
    * 0x96F02EE6
    */
    @:pure static inline function IsDlcPresent(dlcHash: EitherType<String, Int>): Int { return untyped __lua__('IsDlcPresent')(dlcHash); }
    
    /**
    * Use _GET_VEHICLE_MOD_DATA for modData
    */
    @:pure static inline function IsDlcVehicleMod(modData: Int): Int { return untyped __lua__('IsDlcVehicleMod')(modData); }
    
    /**
    * Use _GET_VEHICLE_MOD_DATA for modData
    */
    @:pure static inline function N_0x0564b9ff9631b82c(modData: Int): Int { return untyped __lua__('N_0x0564b9ff9631b82c')(modData); }
    @:pure static inline function IsDoorClosed(door: EitherType<String, Int>): Int { return untyped __lua__('IsDoorClosed')(door); }
    @:pure static inline function IsDrivebyTaskUnderneathDrivingTask(ped: Int): Int { return untyped __lua__('IsDrivebyTaskUnderneathDrivingTask')(ped); }
    
    /**
    * Gets whether or not this is the CitizenFX server.
    * @return A boolean value.
    */
    @:pure static inline function IsDuplicityVersion(): Int { return untyped __lua__('IsDuplicityVersion')(); }
    
    /**
    * XBOX ONE
    * MulleDK19: This function is hard-coded to always return 0.
    */
    @:pure static inline function IsDurangoVersion(): Int { return untyped __lua__('IsDurangoVersion')(); }
    @:pure static inline function IsEntityAMissionEntity(entity: Int): Int { return untyped __lua__('IsEntityAMissionEntity')(entity); }
    @:pure static inline function IsEntityAPed(entity: Int): Int { return untyped __lua__('IsEntityAPed')(entity); }
    @:pure static inline function IsEntityAVehicle(entity: Int): Int { return untyped __lua__('IsEntityAVehicle')(entity); }
    @:pure static inline function IsEntityAnObject(entity: Int): Int { return untyped __lua__('IsEntityAnObject')(entity); }
    
    /**
    * Checks if entity is within x/y/zSize distance of x/y/z.
    * Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0
    */
    @:pure static inline function IsEntityAtCoord(entity: Int, xPos: Int, yPos: Int, zPos: Int, xSize: Int, ySize: Int, zSize: Int, p7: Bool, p8: Bool, p9: Int): Int { return untyped __lua__('IsEntityAtCoord')(entity, xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9); }
    
    /**
    * Checks if entity1 is within the box defined by x/y/zSize of entity2.
    * Last three parameters are almost alwasy p5 = 0, p6 = 1, p7 = 0
    */
    @:pure static inline function IsEntityAtEntity(entity1: Int, entity2: Int, xSize: Int, ySize: Int, zSize: Int, p5: Bool, p6: Bool, p7: Int): Int { return untyped __lua__('IsEntityAtEntity')(entity1, entity2, xSize, ySize, zSize, p5, p6, p7); }
    @:pure static inline function IsEntityAttached(entity: Int): Int { return untyped __lua__('IsEntityAttached')(entity); }
    @:pure static inline function IsEntityAttachedToAnyObject(entity: Int): Int { return untyped __lua__('IsEntityAttachedToAnyObject')(entity); }
    @:pure static inline function IsEntityAttachedToAnyPed(entity: Int): Int { return untyped __lua__('IsEntityAttachedToAnyPed')(entity); }
    @:pure static inline function IsEntityAttachedToAnyVehicle(entity: Int): Int { return untyped __lua__('IsEntityAttachedToAnyVehicle')(entity); }
    @:pure static inline function IsEntityAttachedToEntity(from: Int, to: Int): Int { return untyped __lua__('IsEntityAttachedToEntity')(from, to); }
    @:pure static inline function IsEntityDead(entity: Int): Int { return untyped __lua__('IsEntityDead')(entity); }
    @:pure static inline function IsEntityFocus(entity: Int): Int { return untyped __lua__('IsEntityFocus')(entity); }
    @:pure static inline function IsEntityInAir(entity: Int): Int { return untyped __lua__('IsEntityInAir')(entity); }
    
    /**
    * Creates a spherical cone at origin that extends to surface with the angle specified. Then returns true if the entity is inside the spherical cone
    * Angle is measured in degrees.
    * These values are constant, most likely bogus:
    * p8 = 0, p9 = 1, p10 = 0
    * This method can also take two float&lt;3&gt; instead of 6 floats.
    */
    @:pure static inline function IsEntityInAngledArea(entity: Int, originX: Int, originY: Int, originZ: Int, edgeX: Int, edgeY: Int, edgeZ: Int, angle: Int, p8: Bool, p9: Bool, p10: Int): Int { return untyped __lua__('IsEntityInAngledArea')(entity, originX, originY, originZ, edgeX, edgeY, edgeZ, angle, p8, p9, p10); }
    @:pure static inline function IsEntityInArea(entity: Int, x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, p7: Bool, p8: Bool, p9: Int): Int { return untyped __lua__('IsEntityInArea')(entity, x1, y1, z1, x2, y2, z2, p7, p8, p9); }
    @:pure static inline function IsEntityInWater(entity: Int): Int { return untyped __lua__('IsEntityInWater')(entity); }
    @:pure static inline function IsEntityInZone(entity: Int, zone: String): Int { return untyped __lua__('IsEntityInZone')(entity, zone); }
    @:pure static inline function IsEntityOccluded(entity: Int): Int { return untyped __lua__('IsEntityOccluded')(entity); }
    @:pure static inline function IsEntityOnFire(entity: Int): Int { return untyped __lua__('IsEntityOnFire')(entity); }
    
    /**
    * Returns true if the entity is in between the minimum and maximum values for the 2d screen coords.
    * This means that it will return true even if the entity is behind a wall for example, as long as you're looking at their location.
    * Chipping
    */
    @:pure static inline function IsEntityOnScreen(entity: Int): Int { return untyped __lua__('IsEntityOnScreen')(entity); }
    
    /**
    * See also PED::IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM 0x6EC47A344923E1ED 0x3C30B447
    * Taken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), "creatures@shark@move", "attack_player", 3)
    * p4 is always 3 in the scripts.
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    */
    @:pure static inline function IsEntityPlayingAnim(entity: Int, animDict: String, animName: String, p4: Int): Int { return untyped __lua__('IsEntityPlayingAnim')(entity, animDict, animName, p4); }
    
    /**
    * a static ped will not react to natives like "APPLY_FORCE_TO_ENTITY" or "SET_ENTITY_VELOCITY" and oftentimes will not react to task-natives like "AI::TASK_COMBAT_PED". The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution.
    * how can I make an entity static???
    */
    @:pure static inline function IsEntityStatic(entity: Int): Int { return untyped __lua__('IsEntityStatic')(entity); }
    @:pure static inline function IsEntityTouchingEntity(entity: Int, targetEntity: Int): Int { return untyped __lua__('IsEntityTouchingEntity')(entity, targetEntity); }
    @:pure static inline function IsEntityTouchingModel(entity: Int, modelHash: EitherType<String, Int>): Int { return untyped __lua__('IsEntityTouchingModel')(entity, modelHash); }
    @:pure static inline function IsEntityUpright(entity: Int, angle: Int): Int { return untyped __lua__('IsEntityUpright')(entity, angle); }
    @:pure static inline function IsEntityUpsidedown(entity: Int): Int { return untyped __lua__('IsEntityUpsidedown')(entity); }
    @:pure static inline function IsEntityVisible(entity: Int): Int { return untyped __lua__('IsEntityVisible')(entity); }
    @:pure static inline function IsEntityVisibleToScript(entity: Int): Int { return untyped __lua__('IsEntityVisibleToScript')(entity); }
    @:pure static inline function IsEntityWaitingForWorldCollision(entity: Int): Int { return untyped __lua__('IsEntityWaitingForWorldCollision')(entity); }
    @:pure static inline function IsExplosionInAngledArea(explosionType: Int, x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, angle: Int): Int { return untyped __lua__('IsExplosionInAngledArea')(explosionType, x1, y1, z1, x2, y2, z2, angle); }
    @:pure static inline function IsExplosionInArea(explosionType: Int, x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int): Int { return untyped __lua__('IsExplosionInArea')(explosionType, x1, y1, z1, x2, y2, z2); }
    @:pure static inline function IsExplosionInSphere(explosionType: Int, x: Int, y: Int, z: Int, radius: Int): Int { return untyped __lua__('IsExplosionInSphere')(explosionType, x, y, z, radius); }
    @:pure static inline function IsFirstPersonAimCamActive(): Int { return untyped __lua__('IsFirstPersonAimCamActive')(); }
    @:pure static inline function IsFollowPedCamActive(): Int { return untyped __lua__('IsFollowPedCamActive')(); }
    @:pure static inline function IsFollowVehicleCamActive(): Int { return untyped __lua__('IsFollowVehicleCamActive')(); }
    
    /**
    * This function is hard-coded to always return 0.
    */
    @:pure static inline function IsFrontendFading(): Int { return untyped __lua__('IsFrontendFading')(); }
    
    /**
    * Hardcoded to return 1
    */
    @:pure static inline function IsGameInControlOfMusic(): Int { return untyped __lua__('IsGameInControlOfMusic')(); }
    @:pure static inline function IsGameplayCamLookingBehind(): Int { return untyped __lua__('IsGameplayCamLookingBehind')(); }
    
    /**
    * Examples when this function will return 0 are:
    * - During busted screen.
    * - When player is coming out from a hospital.
    * - When player is coming out from a police station.
    */
    @:pure static inline function IsGameplayCamRendering(): Int { return untyped __lua__('IsGameplayCamRendering')(); }
    @:pure static inline function IsGameplayCamShaking(): Int { return untyped __lua__('IsGameplayCamShaking')(); }
    @:pure static inline function IsGameplayHintActive(): Int { return untyped __lua__('IsGameplayHintActive')(); }
    @:pure static inline function IsGarageEmpty(garage: Int, p1: Bool, p2: Int): Int { return untyped __lua__('IsGarageEmpty')(garage, p1, p2); }
    @:pure static inline function IsHeliPartBroken(vehicle: Int, p1: Bool, p2: Bool, p3: Bool): Int { return untyped __lua__('IsHeliPartBroken')(vehicle, p1, p2, p3); }
    @:pure static inline function IsHelpMessageBeingDisplayed(): Int { return untyped __lua__('IsHelpMessageBeingDisplayed')(); }
    @:pure static inline function IsHelpMessageFadingOut(): Int { return untyped __lua__('IsHelpMessageFadingOut')(); }
    @:pure static inline function IsHelpMessageOnScreen(): Int { return untyped __lua__('IsHelpMessageOnScreen')(); }
    
    /**
    * Checks whether the horn of a vehicle is currently played.
    */
    @:pure static inline function IsHornActive(vehicle: Int): Int { return untyped __lua__('IsHornActive')(vehicle); }
    
    /**
    * Full list of components below
    * HUD = 0;
    * HUD_WANTED_STARS = 1;
    * HUD_WEAPON_ICON = 2;
    * HUD_CASH = 3;
    * HUD_MP_CASH = 4;
    * HUD_MP_MESSAGE = 5;
    * HUD_VEHICLE_NAME = 6;
    * HUD_AREA_NAME = 7;
    * HUD_VEHICLE_CLASS = 8;
    * HUD_STREET_NAME = 9;
    * HUD_HELP_TEXT = 10;
    * HUD_FLOATING_HELP_TEXT_1 = 11;
    * HUD_FLOATING_HELP_TEXT_2 = 12;
    * HUD_CASH_CHANGE = 13;
    * HUD_RETICLE = 14;
    * HUD_SUBTITLE_TEXT = 15;
    * HUD_RADIO_STATIONS = 16;
    * HUD_SAVING_GAME = 17;
    * HUD_GAME_STREAM = 18;
    * HUD_WEAPON_WHEEL = 19;
    * HUD_WEAPON_WHEEL_STATS = 20;
    * MAX_HUD_COMPONENTS = 21;
    * MAX_HUD_WEAPONS = 22;
    * MAX_SCRIPTED_HUD_COMPONENTS = 141;
    */
    @:pure static inline function IsHudComponentActive(id: Int): Int { return untyped __lua__('IsHudComponentActive')(id); }
    @:pure static inline function IsHudHidden(): Int { return untyped __lua__('IsHudHidden')(); }
    @:pure static inline function IsHudPreferenceSwitchedOn(): Int { return untyped __lua__('IsHudPreferenceSwitchedOn')(); }
    @:pure static inline function IsInItemset(p0: Int, p1: Int): Int { return untyped __lua__('IsInItemset')(p0, p1); }
    
    /**
    * Only occurrence was false, in maintransition.
    */
    @:pure static inline function IsInLoadingScreen(p0: Bool): Void { return untyped __lua__('IsInLoadingScreen')(p0); }
    
    /**
    * Only occurrence was false, in maintransition.
    */
    @:pure static inline function N_0xfc309e94546fcdb5(p0: Bool): Void { return untyped __lua__('N_0xfc309e94546fcdb5')(p0); }
    @:pure static inline function IsInVehicleCamDisabled(): Int { return untyped __lua__('IsInVehicleCamDisabled')(); }
    @:pure static inline function N_0x4f32c0d5a90a9b40(): Int { return untyped __lua__('N_0x4f32c0d5a90a9b40')(); }
    
    /**
    * =======================================================
    * Correction, I have change this to int, instead of int*
    * as it doesn't use a pointer to the createdIncident.
    * If you try it you will crash (or) freeze.
    * =======================================================
    */
    @:pure static inline function IsIncidentValid(incidentId: Int): Int { return untyped __lua__('IsIncidentValid')(incidentId); }
    
    /**
    * Seems to return true if the input is currently disabled. "_GET_LAST_INPUT_METHOD" didn't seem very accurate, but I've left the original description below.
    * --
    * index usually 2
    * returns true if the last input method was made with mouse + keyboard, false if it was made with a gamepad
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function IsInputDisabled(inputGroup: Int): Int { return untyped __lua__('IsInputDisabled')(inputGroup); }
    
    /**
    * Seems to return true if the input is currently disabled. "_GET_LAST_INPUT_METHOD" didn't seem very accurate, but I've left the original description below.
    * --
    * index usually 2
    * returns true if the last input method was made with mouse + keyboard, false if it was made with a gamepad
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function GetLastInputMethod(inputGroup: Int): Int { return untyped __lua__('GetLastInputMethod')(inputGroup); }
    
    /**
    * I may be wrong with this one, but from the looks of the scripts, it sets keyboard related stuff as soon as this returns true.
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function IsInputJustDisabled(inputGroup: Int): Int { return untyped __lua__('IsInputJustDisabled')(inputGroup); }
    
    /**
    * I may be wrong with this one, but from the looks of the scripts, it sets keyboard related stuff as soon as this returns true.
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function N_0x13337b38db572509(inputGroup: Int): Int { return untyped __lua__('N_0x13337b38db572509')(inputGroup); }
    @:pure static inline function IsInteriorCapped(interiorID: Int): Int { return untyped __lua__('IsInteriorCapped')(interiorID); }
    @:pure static inline function IsInteriorDisabled(interiorID: Int): Int { return untyped __lua__('IsInteriorDisabled')(interiorID); }
    @:pure static inline function IsInteriorPropEnabled(interiorID: Int, propName: String): Int { return untyped __lua__('IsInteriorPropEnabled')(interiorID, propName); }
    @:pure static inline function N_0x35f7dd45e8c0a16d(interiorID: Int, propName: String): Int { return untyped __lua__('N_0x35f7dd45e8c0a16d')(interiorID, propName); }
    @:pure static inline function IsInteriorReady(interiorID: Int): Int { return untyped __lua__('IsInteriorReady')(interiorID); }
    
    /**
    * Returns a bool if interior rendering is disabled, if yes, all "normal" rendered interiors are invisible
    */
    @:pure static inline function IsInteriorRenderingDisabled(): Int { return untyped __lua__('IsInteriorRenderingDisabled')(); }
    @:pure static inline function IsInteriorScene(): Int { return untyped __lua__('IsInteriorScene')(); }
    @:pure static inline function IsIplActive(iplName: String): Int { return untyped __lua__('IsIplActive')(iplName); }
    @:pure static inline function IsItemsetValid(p0: Int): Int { return untyped __lua__('IsItemsetValid')(p0); }
    @:pure static inline function IsLoadingPromptBeingDisplayed(): Int { return untyped __lua__('IsLoadingPromptBeingDisplayed')(); }
    @:pure static inline function N_0xd422fcc5f239a915(): Int { return untyped __lua__('N_0xd422fcc5f239a915')(); }
    @:pure static inline function IsLookInverted(): Int { return untyped __lua__('IsLookInverted')(); }
    @:pure static inline function IsMemoryCardInUse(): Int { return untyped __lua__('IsMemoryCardInUse')(); }
    @:pure static inline function IsMessageBeingDisplayed(): Int { return untyped __lua__('IsMessageBeingDisplayed')(); }
    @:pure static inline function IsMinigameInProgress(): Int { return untyped __lua__('IsMinigameInProgress')(); }
    @:pure static inline function IsMinimapAreaRevealed(x: Int, y: Int, radius: Int): Int { return untyped __lua__('IsMinimapAreaRevealed')(x, y, radius); }
    @:pure static inline function N_0x6e31b91145873922(x: Int, y: Int, radius: Int): Int { return untyped __lua__('N_0x6e31b91145873922')(x, y, radius); }
    @:pure static inline function IsMissionCompletePlaying(): Int { return untyped __lua__('IsMissionCompletePlaying')(); }
    @:pure static inline function IsMissionCreatorBlip(blip: Int): Int { return untyped __lua__('IsMissionCreatorBlip')(blip); }
    @:pure static inline function IsMobilePhoneCallOngoing(): Int { return untyped __lua__('IsMobilePhoneCallOngoing')(); }
    @:pure static inline function IsMobilePhoneRadioActive(): Int { return untyped __lua__('IsMobilePhoneRadioActive')(); }
    
    /**
    * Returns whether the specified model represents a vehicle.
    */
    @:pure static inline function IsModelAVehicle(model: EitherType<String, Int>): Int { return untyped __lua__('IsModelAVehicle')(model); }
    
    /**
    * Check if model is in cdimage(rpf)
    */
    @:pure static inline function IsModelInCdimage(model: EitherType<String, Int>): Int { return untyped __lua__('IsModelInCdimage')(model); }
    
    /**
    * Returns whether the specified model exists in the game.
    */
    @:pure static inline function IsModelValid(model: EitherType<String, Int>): Int { return untyped __lua__('IsModelValid')(model); }
    @:pure static inline function IsMountedWeaponTaskUnderneathDrivingTask(ped: Int): Int { return untyped __lua__('IsMountedWeaponTaskUnderneathDrivingTask')(ped); }
    @:pure static inline function IsMoveBlendRatioRunning(ped: Int): Int { return untyped __lua__('IsMoveBlendRatioRunning')(ped); }
    @:pure static inline function IsMoveBlendRatioSprinting(ped: Int): Int { return untyped __lua__('IsMoveBlendRatioSprinting')(ped); }
    @:pure static inline function IsMoveBlendRatioStill(ped: Int): Int { return untyped __lua__('IsMoveBlendRatioStill')(ped); }
    @:pure static inline function IsMoveBlendRatioWalking(ped: Int): Int { return untyped __lua__('IsMoveBlendRatioWalking')(ped); }
    @:pure static inline function IsMpGamerTagActive(gamerTagId: Int): Int { return untyped __lua__('IsMpGamerTagActive')(gamerTagId); }
    @:pure static inline function N_0x4e929e7a5796fd26(gamerTagId: Int): Int { return untyped __lua__('N_0x4e929e7a5796fd26')(gamerTagId); }
    @:pure static inline function IsNamedRendertargetLinked(hash: EitherType<String, Int>): Int { return untyped __lua__('IsNamedRendertargetLinked')(hash); }
    @:pure static inline function IsNamedRendertargetRegistered(p0: String): Int { return untyped __lua__('IsNamedRendertargetRegistered')(p0); }
    
    /**
    * Returns whether navmesh for the region is loaded. The region is a rectangular prism defined by it's top left deepest corner to it's bottom right shallowest corner.
    * If you can re-word this so it makes more sense, please do. I'm horrible with words sometimes...
    */
    @:pure static inline function IsNavmeshLoadedInArea(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int): Int { return untyped __lua__('IsNavmeshLoadedInArea')(x1, y1, z1, x2, y2, z2); }
    @:pure static inline function IsNetworkLoadingScene(): Int { return untyped __lua__('IsNetworkLoadingScene')(); }
    
    /**
    * hash collision.
    * Definitely a hash collision, has something do to with your local player, not a vehicle
    */
    @:pure static inline function IsNetworkVehicleBeenDamagedByAnyObject(x: Int, y: Int, z: Int): Int { return untyped __lua__('IsNetworkVehicleBeenDamagedByAnyObject')(x, y, z); }
    @:pure static inline function IsNewLoadSceneActive(): Int { return untyped __lua__('IsNewLoadSceneActive')(); }
    @:pure static inline function IsNewLoadSceneLoaded(): Int { return untyped __lua__('IsNewLoadSceneLoaded')(); }
    @:pure static inline function IsNextWeatherType(weatherType: String): Int { return untyped __lua__('IsNextWeatherType')(weatherType); }
    
    /**
    * Gets whether or not NIGHTVISION is Active.
    * Note:  When nightvision is actually active, this native will return TRUE!
    */
    @:pure static inline function IsNightvisionActive(): Int { return untyped __lua__('IsNightvisionActive')(); }
    
    /**
    * Gets whether or not NIGHTVISION is Active.
    * Note:  When nightvision is actually active, this native will return TRUE!
    */
    @:pure static inline function IsNightvisionInactive(): Int { return untyped __lua__('IsNightvisionInactive')(); }
    @:pure static inline function IsObjectNearPoint(objectHash: EitherType<String, Int>, x: Int, y: Int, z: Int, range: Int): Int { return untyped __lua__('IsObjectNearPoint')(objectHash, x, y, z, range); }
    @:pure static inline function IsObjectVisible(object: Int): Int { return untyped __lua__('IsObjectVisible')(object); }
    @:pure static inline function IsObjectWithinBrainActivationRange(object: Int): Int { return untyped __lua__('IsObjectWithinBrainActivationRange')(object); }
    
    /**
    * PS4
    * MulleDK19: This function is hard-coded to always return 0.
    * Force67: I patched return result and got this : i.imgur.com/hUn7zSj.jpg
    * translate please?
    */
    @:pure static inline function IsOrbisVersion(): Int { return untyped __lua__('IsOrbisVersion')(); }
    @:pure static inline function IsParticleFxDelayedBlink(): Int { return untyped __lua__('IsParticleFxDelayedBlink')(); }
    @:pure static inline function IsPauseMenuActive(): Int { return untyped __lua__('IsPauseMenuActive')(); }
    @:pure static inline function IsPauseMenuRestarting(): Int { return untyped __lua__('IsPauseMenuRestarting')(); }
    
    /**
    * PC
    * MulleDK19: This function is hard-coded to always return 1.
    */
    @:pure static inline function IsPcVersion(): Int { return untyped __lua__('IsPcVersion')(); }
    
    /**
    * Returns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That's all.
    */
    @:pure static inline function IsPedAPlayer(ped: Int): Int { return untyped __lua__('IsPedAPlayer')(ped); }
    @:pure static inline function IsPedActiveInScenario(ped: Int): Int { return untyped __lua__('IsPedActiveInScenario')(ped); }
    @:pure static inline function IsPedAimingFromCover(ped: Int): Int { return untyped __lua__('IsPedAimingFromCover')(ped); }
    
    /**
    * p1 is anywhere from 4 to 7 in the scripts. Might be a weapon wheel group?
    * ^It's kinda like that.
    * 7 returns true if you are equipped with any weapon except your fists.
    * 6 returns true if you are equipped with any weapon except melee weapons.
    * 5 returns true if you are equipped with any weapon except the Explosives weapon group.
    * 4 returns true if you are equipped with any weapon except Explosives weapon group AND melee weapons.
    * 3 returns true if you are equipped with either Explosives or Melee weapons (the exact opposite of 4).
    * 2 returns true only if you are equipped with any weapon from the Explosives weapon group.
    * 1 returns true only if you are equipped with any Melee weapon.
    * 0 never returns true.
    * Note: When I say "Explosives weapon group", it does not include the Jerry can and Fire Extinguisher.
    */
    @:pure static inline function IsPedArmed(ped: Int, p1: Int): Int { return untyped __lua__('IsPedArmed')(ped, p1); }
    
    /**
    * This function is hard-coded to always return 0.
    */
    @:pure static inline function IsPedBeingArrested(ped: Int): Int { return untyped __lua__('IsPedBeingArrested')(ped); }
    @:pure static inline function IsPedBeingJacked(ped: Int): Int { return untyped __lua__('IsPedBeingJacked')(ped); }
    @:pure static inline function IsPedBeingStealthKilled(ped: Int): Int { return untyped __lua__('IsPedBeingStealthKilled')(ped); }
    
    /**
    * p1 is always 0
    */
    @:pure static inline function IsPedBeingStunned(ped: Int, p1: Int): Int { return untyped __lua__('IsPedBeingStunned')(ped, p1); }
    @:pure static inline function IsPedBlushColorValid(colorID: Int): Int { return untyped __lua__('IsPedBlushColorValid')(colorID); }
    @:pure static inline function N_0x604e810189ee3a59(colorID: Int): Int { return untyped __lua__('N_0x604e810189ee3a59')(colorID); }
    @:pure static inline function IsPedClimbing(ped: Int): Int { return untyped __lua__('IsPedClimbing')(ped); }
    
    /**
    * Checks if the component variation is valid, this works great for randomizing components using loops.
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function IsPedComponentVariationValid(ped: Int, componentId: Int, drawableId: Int, textureId: Int): Int { return untyped __lua__('IsPedComponentVariationValid')(ped, componentId, drawableId, textureId); }
    
    /**
    * l
    */
    @:pure static inline function IsPedCuffed(ped: Int): Int { return untyped __lua__('IsPedCuffed')(ped); }
    
    /**
    * This native returns a true or false value.
    * Ped ped = The ped whose weapon you want to check.
    */
    @:pure static inline function IsPedCurrentWeaponSilenced(ped: Int): Int { return untyped __lua__('IsPedCurrentWeaponSilenced')(ped); }
    
    /**
    * Seems to consistently return true if the ped is dead.
    * p1 is always passed 1 in the scripts.
    * I suggest to remove "OR_DYING" part, because it does not detect dying phase.
    * That's what the devs call it, cry about it.
    * lol
    */
    @:pure static inline function IsPedDeadOrDying(ped: Int, p1: Bool): Int { return untyped __lua__('IsPedDeadOrDying')(ped, p1); }
    @:pure static inline function IsPedDiving(ped: Int): Int { return untyped __lua__('IsPedDiving')(ped); }
    @:pure static inline function IsPedDoingDriveby(ped: Int): Int { return untyped __lua__('IsPedDoingDriveby')(ped); }
    @:pure static inline function IsPedDucking(ped: Int): Int { return untyped __lua__('IsPedDucking')(ped); }
    
    /**
    * Presumably returns the Entity that the Ped is currently diving out of the way of.
    * var num3;
    * if (PED::IS_PED_EVASIVE_DIVING(A_0, &amp;num3) != 0)
    * if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0)
    */
    @:pure static inline function IsPedEvasiveDiving(ped: Int, evadingEntity: Int): Int { return untyped __lua__('IsPedEvasiveDiving')(ped, evadingEntity); }
    
    /**
    * angle is ped's view cone
    */
    @:pure static inline function IsPedFacingPed(ped: Int, otherPed: Int, angle: Int): Int { return untyped __lua__('IsPedFacingPed')(ped, otherPed, angle); }
    @:pure static inline function IsPedFalling(ped: Int): Int { return untyped __lua__('IsPedFalling')(ped); }
    
    /**
    * Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
    * If the handle is invalid, the function returns true.
    */
    @:pure static inline function IsPedFatallyInjured(ped: Int): Int { return untyped __lua__('IsPedFatallyInjured')(ped); }
    @:pure static inline function IsPedFleeing(ped: Int): Int { return untyped __lua__('IsPedFleeing')(ped); }
    @:pure static inline function IsPedGettingIntoAVehicle(ped: Int): Int { return untyped __lua__('IsPedGettingIntoAVehicle')(ped); }
    @:pure static inline function IsPedGettingUp(ped: Int): Int { return untyped __lua__('IsPedGettingUp')(ped); }
    @:pure static inline function IsPedGoingIntoCover(ped: Int): Int { return untyped __lua__('IsPedGoingIntoCover')(ped); }
    @:pure static inline function IsPedGroupMember(ped: Int, groupId: Int): Int { return untyped __lua__('IsPedGroupMember')(ped, groupId); }
    @:pure static inline function IsPedHairColorValid(colorID: Int): Int { return untyped __lua__('IsPedHairColorValid')(colorID); }
    @:pure static inline function N_0xe0d36e5d9e99cc21(colorID: Int): Int { return untyped __lua__('N_0xe0d36e5d9e99cc21')(colorID); }
    @:pure static inline function IsPedHangingOnToVehicle(ped: Int): Int { return untyped __lua__('IsPedHangingOnToVehicle')(ped); }
    @:pure static inline function IsPedHeadtrackingEntity(ped: Int, entity: Int): Int { return untyped __lua__('IsPedHeadtrackingEntity')(ped, entity); }
    @:pure static inline function IsPedHeadtrackingPed(ped1: Int, ped2: Int): Int { return untyped __lua__('IsPedHeadtrackingPed')(ped1, ped2); }
    
    /**
    * Returns true/false if the ped is/isn't humanoid.
    */
    @:pure static inline function IsPedHuman(ped: Int): Int { return untyped __lua__('IsPedHuman')(ped); }
    
    /**
    * Returns whether the specified ped is hurt.
    */
    @:pure static inline function IsPedHurt(ped: Int): Int { return untyped __lua__('IsPedHurt')(ped); }
    @:pure static inline function IsPedInAnyBoat(ped: Int): Int { return untyped __lua__('IsPedInAnyBoat')(ped); }
    @:pure static inline function IsPedInAnyHeli(ped: Int): Int { return untyped __lua__('IsPedInAnyHeli')(ped); }
    @:pure static inline function IsPedInAnyPlane(ped: Int): Int { return untyped __lua__('IsPedInAnyPlane')(ped); }
    @:pure static inline function IsPedInAnyPoliceVehicle(ped: Int): Int { return untyped __lua__('IsPedInAnyPoliceVehicle')(ped); }
    @:pure static inline function IsPedInAnySub(ped: Int): Int { return untyped __lua__('IsPedInAnySub')(ped); }
    @:pure static inline function IsPedInAnyTaxi(ped: Int): Int { return untyped __lua__('IsPedInAnyTaxi')(ped); }
    @:pure static inline function IsPedInAnyTrain(ped: Int): Int { return untyped __lua__('IsPedInAnyTrain')(ped); }
    
    /**
    * Gets a value indicating whether the specified ped is in any vehicle.
    * If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
    */
    @:pure static inline function IsPedInAnyVehicle(ped: Int, atGetIn: Bool): Int { return untyped __lua__('IsPedInAnyVehicle')(ped, atGetIn); }
    
    /**
    * Checks to see if ped and target are in combat with eachother. Only goes one-way: if target is engaged in combat with ped but ped has not yet reacted, the function will return false until ped starts fighting back.
    * p1 is usually 0 in the scripts because it gets the ped id during the task sequence. For instance: PED::IS_PED_IN_COMBAT(l_42E[4 -- [[14]] ], PLAYER::PLAYER_PED_ID()) // armenian2.ct4: 43794
    */
    @:pure static inline function IsPedInCombat(ped: Int, target: Int): Int { return untyped __lua__('IsPedInCombat')(ped, target); }
    
    /**
    * p1 is nearly always 0 in the scripts.
    */
    @:pure static inline function IsPedInCover(ped: Int, p1: Bool): Int { return untyped __lua__('IsPedInCover')(ped, p1); }
    @:pure static inline function IsPedInCoverFacingLeft(ped: Int): Int { return untyped __lua__('IsPedInCoverFacingLeft')(ped); }
    @:pure static inline function IsPedInCurrentConversation(ped: Int): Int { return untyped __lua__('IsPedInCurrentConversation')(ped); }
    @:pure static inline function IsPedInFlyingVehicle(ped: Int): Int { return untyped __lua__('IsPedInFlyingVehicle')(ped); }
    @:pure static inline function IsPedInGroup(ped: Int): Int { return untyped __lua__('IsPedInGroup')(ped); }
    
    /**
    * Notes: The function only returns true while the ped is:
    * A.) Swinging a random melee attack (including pistol-whipping)
    * B.) Reacting to being hit by a melee attack (including pistol-whipping)
    * C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter).
    * You don't have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds
    */
    @:pure static inline function IsPedInMeleeCombat(ped: Int): Int { return untyped __lua__('IsPedInMeleeCombat')(ped); }
    @:pure static inline function IsPedInModel(ped: Int, modelHash: EitherType<String, Int>): Int { return untyped __lua__('IsPedInModel')(ped, modelHash); }
    @:pure static inline function IsPedInParachuteFreeFall(ped: Int): Int { return untyped __lua__('IsPedInParachuteFreeFall')(ped); }
    
    /**
    * Gets a value indicating whether the specified ped is in the specified vehicle.
    * If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
    */
    @:pure static inline function IsPedInVehicle(ped: Int, vehicle: Int, atGetIn: Bool): Int { return untyped __lua__('IsPedInVehicle')(ped, vehicle, atGetIn); }
    
    /**
    * returns true is the ped is on the ground whining like a little female dog from a gunshot wound
    */
    @:pure static inline function IsPedInWrithe(ped: Int): Int { return untyped __lua__('IsPedInWrithe')(ped); }
    
    /**
    * Gets a value indicating whether this ped's health is below its injured threshold.
    * The default threshold is 100.
    */
    @:pure static inline function IsPedInjured(ped: Int): Int { return untyped __lua__('IsPedInjured')(ped); }
    @:pure static inline function IsPedJacking(ped: Int): Int { return untyped __lua__('IsPedJacking')(ped); }
    @:pure static inline function IsPedJumping(ped: Int): Int { return untyped __lua__('IsPedJumping')(ped); }
    @:pure static inline function IsPedJumpingOutOfVehicle(ped: Int): Int { return untyped __lua__('IsPedJumpingOutOfVehicle')(ped); }
    @:pure static inline function IsPedLipstickColorValid(colorID: Int): Int { return untyped __lua__('IsPedLipstickColorValid')(colorID); }
    @:pure static inline function N_0x0525a2c2562f3cd4(colorID: Int): Int { return untyped __lua__('N_0x0525a2c2562f3cd4')(colorID); }
    
    /**
    * Returns true/false if the ped is/isn't male.
    */
    @:pure static inline function IsPedMale(ped: Int): Int { return untyped __lua__('IsPedMale')(ped); }
    @:pure static inline function IsPedModel(ped: Int, modelHash: EitherType<String, Int>): Int { return untyped __lua__('IsPedModel')(ped, modelHash); }
    @:pure static inline function IsPedOnAnyBike(ped: Int): Int { return untyped __lua__('IsPedOnAnyBike')(ped); }
    @:pure static inline function IsPedOnFoot(ped: Int): Int { return untyped __lua__('IsPedOnFoot')(ped); }
    
    /**
    * Same function call as PED::GET_MOUNT, aka just returns 0
    */
    @:pure static inline function IsPedOnMount(ped: Int): Int { return untyped __lua__('IsPedOnMount')(ped); }
    @:pure static inline function IsPedOnSpecificVehicle(ped: Int, vehicle: Int): Int { return untyped __lua__('IsPedOnSpecificVehicle')(ped, vehicle); }
    
    /**
    * Gets a value indicating whether the specified ped is on top of any vehicle.
    * Return 1 when ped is on vehicle.
    * Return 0 when ped is not on a vehicle.
    */
    @:pure static inline function IsPedOnVehicle(ped: Int): Int { return untyped __lua__('IsPedOnVehicle')(ped); }
    @:pure static inline function IsPedPerformingStealthKill(ped: Int): Int { return untyped __lua__('IsPedPerformingStealthKill')(ped); }
    @:pure static inline function IsPedPlantingBomb(ped: Int): Int { return untyped __lua__('IsPedPlantingBomb')(ped); }
    @:pure static inline function IsPedProne(ped: Int): Int { return untyped __lua__('IsPedProne')(ped); }
    
    /**
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function IsPedPropValid(ped: Int, componentId: Int, drawableId: Int, TextureId: Int): Int { return untyped __lua__('IsPedPropValid')(ped, componentId, drawableId, TextureId); }
    
    /**
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function N_0x2b16a3bff1fbce49(ped: Int, componentId: Int, drawableId: Int, TextureId: Int): Int { return untyped __lua__('N_0x2b16a3bff1fbce49')(ped, componentId, drawableId, TextureId); }
    
    /**
    * If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
    */
    @:pure static inline function IsPedRagdoll(ped: Int): Int { return untyped __lua__('IsPedRagdoll')(ped); }
    
    /**
    * Returns whether the specified ped is reloading.
    */
    @:pure static inline function IsPedReloading(ped: Int): Int { return untyped __lua__('IsPedReloading')(ped); }
    @:pure static inline function IsPedRespondingToEvent(ped: Int, event: Int): Int { return untyped __lua__('IsPedRespondingToEvent')(ped, event); }
    @:pure static inline function IsPedRingtonePlaying(ped: Int): Int { return untyped __lua__('IsPedRingtonePlaying')(ped); }
    @:pure static inline function IsPedRunning(ped: Int): Int { return untyped __lua__('IsPedRunning')(ped); }
    @:pure static inline function IsPedRunningArrestTask(ped: Int): Int { return untyped __lua__('IsPedRunningArrestTask')(ped); }
    @:pure static inline function IsPedRunningMobilePhoneTask(ped: Int): Int { return untyped __lua__('IsPedRunningMobilePhoneTask')(ped); }
    @:pure static inline function IsPedRunningRagdollTask(ped: Int): Int { return untyped __lua__('IsPedRunningRagdollTask')(ped); }
    
    /**
    * Returns whether the specified ped is shooting.
    */
    @:pure static inline function IsPedShooting(ped: Int): Int { return untyped __lua__('IsPedShooting')(ped); }
    @:pure static inline function IsPedShootingInArea(ped: Int, x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, p7: Bool, p8: Bool): Int { return untyped __lua__('IsPedShootingInArea')(ped, x1, y1, z1, x2, y2, z2, p7, p8); }
    
    /**
    * Detect if ped is in any vehicle
    * [True/False]
    */
    @:pure static inline function IsPedSittingInAnyVehicle(ped: Int): Int { return untyped __lua__('IsPedSittingInAnyVehicle')(ped); }
    
    /**
    * Detect if ped is sitting in the specified vehicle
    * [True/False]
    */
    @:pure static inline function IsPedSittingInVehicle(ped: Int, vehicle: Int): Int { return untyped __lua__('IsPedSittingInVehicle')(ped, vehicle); }
    @:pure static inline function IsPedSprinting(ped: Int): Int { return untyped __lua__('IsPedSprinting')(ped); }
    
    /**
    * Console Hash: 0xDD5D08A7
    */
    @:pure static inline function IsPedStandingInCover(ped: Int): Int { return untyped __lua__('IsPedStandingInCover')(ped); }
    
    /**
    * Console Hash: 0xDD5D08A7
    */
    @:pure static inline function N_0x6a03bf943d767c93(ped: Int): Int { return untyped __lua__('N_0x6a03bf943d767c93')(ped); }
    @:pure static inline function IsPedStill(ped: Int): Int { return untyped __lua__('IsPedStill')(ped); }
    
    /**
    * Returns true if the ped doesn't do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false.
    */
    @:pure static inline function IsPedStopped(ped: Int): Int { return untyped __lua__('IsPedStopped')(ped); }
    
    /**
    * What's strafing?
    */
    @:pure static inline function IsPedStrafing(ped: Int): Int { return untyped __lua__('IsPedStrafing')(ped); }
    @:pure static inline function IsPedSwimming(ped: Int): Int { return untyped __lua__('IsPedSwimming')(ped); }
    @:pure static inline function IsPedSwimmingUnderWater(ped: Int): Int { return untyped __lua__('IsPedSwimmingUnderWater')(ped); }
    @:pure static inline function IsPedTracked(ped: Int): Int { return untyped __lua__('IsPedTracked')(ped); }
    @:pure static inline function IsPedTryingToEnterALockedVehicle(ped: Int): Int { return untyped __lua__('IsPedTryingToEnterALockedVehicle')(ped); }
    @:pure static inline function IsPedUsingActionMode(ped: Int): Int { return untyped __lua__('IsPedUsingActionMode')(ped); }
    @:pure static inline function IsPedUsingAnyScenario(ped: Int): Int { return untyped __lua__('IsPedUsingAnyScenario')(ped); }
    @:pure static inline function IsPedUsingScenario(ped: Int, scenario: String): Int { return untyped __lua__('IsPedUsingScenario')(ped, scenario); }
    @:pure static inline function IsPedVaulting(ped: Int): Int { return untyped __lua__('IsPedVaulting')(ped); }
    @:pure static inline function IsPedWalking(ped: Int): Int { return untyped __lua__('IsPedWalking')(ped); }
    @:pure static inline function IsPedWeaponComponentActive(ped: Int, weaponHash: EitherType<String, Int>, componentHash: EitherType<String, Int>): Int { return untyped __lua__('IsPedWeaponComponentActive')(ped, weaponHash, componentHash); }
    @:pure static inline function IsPedWeaponReadyToShoot(ped: Int): Int { return untyped __lua__('IsPedWeaponReadyToShoot')(ped); }
    
    /**
    * Returns true if the ped passed through the parenthesis is wearing a helmet.
    */
    @:pure static inline function IsPedWearingHelmet(ped: Int): Int { return untyped __lua__('IsPedWearingHelmet')(ped); }
    
    /**
    * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
    */
    @:pure static inline function IsPedheadshotReady(handle: Int): Int { return untyped __lua__('IsPedheadshotReady')(handle); }
    
    /**
    * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
    */
    @:pure static inline function IsPedheadshotValid(handle: Int): Int { return untyped __lua__('IsPedheadshotValid')(handle); }
    
    /**
    * Pickup hashes: pastebin.com/8EuSv2r1
    */
    @:pure static inline function IsPickupWithinRadius(pickupHash: EitherType<String, Int>, x: Int, y: Int, z: Int, radius: Int): Int { return untyped __lua__('IsPickupWithinRadius')(pickupHash, x, y, z, radius); }
    @:pure static inline function IsPlaybackGoingOnForVehicle(p0: Int): Int { return untyped __lua__('IsPlaybackGoingOnForVehicle')(p0); }
    @:pure static inline function IsPlaybackUsingAiGoingOnForVehicle(p0: Int): Int { return untyped __lua__('IsPlaybackUsingAiGoingOnForVehicle')(p0); }
    
    /**
    * Return true while player is being arrested / busted.
    * If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)
    * If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
    */
    @:pure static inline function IsPlayerBeingArrested(player: Int, atArresting: Bool): Int { return untyped __lua__('IsPlayerBeingArrested')(player, atArresting); }
    
    /**
    * Returns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.
    * Note: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.
    */
    @:pure static inline function IsPlayerCamControlDisabled(): Int { return untyped __lua__('IsPlayerCamControlDisabled')(); }
    
    /**
    * Returns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.
    * Note: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.
    */
    @:pure static inline function N_0x7c814d2fb49f40c0(): Int { return untyped __lua__('N_0x7c814d2fb49f40c0')(); }
    
    /**
    * Returns TRUE if the player ('s ped) is climbing at the moment.
    */
    @:pure static inline function IsPlayerClimbing(player: Int): Int { return untyped __lua__('IsPlayerClimbing')(player); }
    
    /**
    * Can the player control himself, used to disable controls for player for things like a cutscene.
    * ---
    * You can't disable controls with this, use SET_PLAYER_CONTROL(...) for this.
    */
    @:pure static inline function IsPlayerControlOn(player: Int): Int { return untyped __lua__('IsPlayerControlOn')(player); }
    @:pure static inline function IsPlayerDead(player: Int): Int { return untyped __lua__('IsPlayerDead')(player); }
    
    /**
    * Gets a value indicating whether the specified player is currently aiming freely.
    */
    @:pure static inline function IsPlayerFreeAiming(player: Int): Int { return untyped __lua__('IsPlayerFreeAiming')(player); }
    
    /**
    * Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
    */
    @:pure static inline function IsPlayerFreeAimingAtEntity(player: Int, entity: Int): Int { return untyped __lua__('IsPlayerFreeAimingAtEntity')(player, entity); }
    @:pure static inline function IsPlayerFreeForAmbientTask(player: Int): Int { return untyped __lua__('IsPlayerFreeForAmbientTask')(player); }
    @:pure static inline function IsPlayerInCutscene(player: Int): Int { return untyped __lua__('IsPlayerInCutscene')(player); }
    
    /**
    * this function is hard-coded to always return 0.
    */
    @:pure static inline function IsPlayerLoggingInNp(): Int { return untyped __lua__('IsPlayerLoggingInNp')(); }
    
    /**
    * Returns TRUE if the game is in online mode and FALSE if in offline mode.
    * This is an alias for NETWORK_IS_SIGNED_ONLINE.
    */
    @:pure static inline function IsPlayerOnline(): Int { return untyped __lua__('IsPlayerOnline')(); }
    
    /**
    * Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
    */
    @:pure static inline function IsPlayerPlaying(player: Int): Int { return untyped __lua__('IsPlayerPlaying')(player); }
    @:pure static inline function IsPlayerPressingHorn(player: Int): Int { return untyped __lua__('IsPlayerPressingHorn')(player); }
    @:pure static inline function IsPlayerReadyForCutscene(player: Int): Int { return untyped __lua__('IsPlayerReadyForCutscene')(player); }
    
    /**
    * Returns true if the player is riding a train.
    */
    @:pure static inline function IsPlayerRidingTrain(player: Int): Int { return untyped __lua__('IsPlayerRidingTrain')(player); }
    @:pure static inline function IsPlayerScriptControlOn(player: Int): Int { return untyped __lua__('IsPlayerScriptControlOn')(player); }
    
    /**
    * Returns true if the player is currently switching, false otherwise.
    * (When the camera is in the sky moving from Trevor to Franklin for example)
    */
    @:pure static inline function IsPlayerSwitchInProgress(): Int { return untyped __lua__('IsPlayerSwitchInProgress')(); }
    
    /**
    * Returns true if the player is currently switching, false otherwise.
    * (When the camera is in the sky moving from Trevor to Franklin for example)
    */
    @:pure static inline function N_0xd9d2cfff49fab35f(): Int { return untyped __lua__('N_0xd9d2cfff49fab35f')(); }
    @:pure static inline function IsPlayerTargettingAnything(player: Int): Int { return untyped __lua__('IsPlayerTargettingAnything')(player); }
    @:pure static inline function IsPlayerTargettingEntity(player: Int, entity: Int): Int { return untyped __lua__('IsPlayerTargettingEntity')(player, entity); }
    @:pure static inline function IsPlayerTeleportActive(): Int { return untyped __lua__('IsPlayerTeleportActive')(); }
    @:pure static inline function IsPlayerVehicleRadioEnabled(): Int { return untyped __lua__('IsPlayerVehicleRadioEnabled')(); }
    @:pure static inline function N_0x5f43d83fd6738741(): Int { return untyped __lua__('N_0x5f43d83fd6738741')(); }
    @:pure static inline function IsPlayerWantedLevelGreater(player: Int, wantedLevel: Int): Int { return untyped __lua__('IsPlayerWantedLevelGreater')(player, wantedLevel); }
    @:pure static inline function IsPlayingPhoneGestureAnim(ped: Int): Int { return untyped __lua__('IsPlayingPhoneGestureAnim')(ped); }
    @:pure static inline function IsPointInAngledArea(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int, p10: Bool, p11: Bool): Int { return untyped __lua__('IsPointInAngledArea')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
    @:pure static inline function IsPointObscuredByAMissionEntity(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Int { return untyped __lua__('IsPointObscuredByAMissionEntity')(p0, p1, p2, p3, p4, p5, p6); }
    
    /**
    * Gets a value indicating whether the specified position is on a road.
    * The vehicle parameter is not implemented (ignored).
    */
    @:pure static inline function IsPointOnRoad(x: Int, y: Int, z: Int, vehicle: Int): Int { return untyped __lua__('IsPointOnRoad')(x, y, z, vehicle); }
    @:pure static inline function IsPositionOccupied(x: Int, y: Int, z: Int, range: Int, p4: Bool, p5: Bool, p6: Bool, p7: Bool, p8: Bool, p9: Int, p10: Bool): Int { return untyped __lua__('IsPositionOccupied')(x, y, z, range, p4, p5, p6, p7, p8, p9, p10); }
    @:pure static inline function IsPrevWeatherType(weatherType: String): Int { return untyped __lua__('IsPrevWeatherType')(weatherType); }
    
    /**
    * Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.
    * ownedByPlayer = only projectiles fired by the player will be detected.
    */
    @:pure static inline function IsProjectileInArea(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, ownedByPlayer: Bool): Int { return untyped __lua__('IsProjectileInArea')(x1, y1, z1, x2, y2, z2, ownedByPlayer); }
    @:pure static inline function IsProjectileTypeInAngledArea(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Bool): Int { return untyped __lua__('IsProjectileTypeInAngledArea')(p0, p1, p2, p3, p4, p5, p6, p7, p8); }
    
    /**
    * Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a rectangle.
    * Note: This native hasn't been tested yet.
    */
    @:pure static inline function IsProjectileTypeInArea(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, type: Int, p7: Bool): Int { return untyped __lua__('IsProjectileTypeInArea')(x1, y1, z1, x2, y2, z2, type, p7); }
    
    /**
    * PS3
    * MulleDK19: This function is hard-coded to always return 0.
    */
    @:pure static inline function IsPs3Version(): Int { return untyped __lua__('IsPs3Version')(); }
    @:pure static inline function IsRadarEnabled(): Int { return untyped __lua__('IsRadarEnabled')(); }
    @:pure static inline function N_0xaf754f20eb5cd51a(): Int { return untyped __lua__('N_0xaf754f20eb5cd51a')(); }
    @:pure static inline function IsRadarHidden(): Int { return untyped __lua__('IsRadarHidden')(); }
    @:pure static inline function IsRadarPreferenceSwitchedOn(): Int { return untyped __lua__('IsRadarPreferenceSwitchedOn')(); }
    @:pure static inline function IsRadioRetuning(): Int { return untyped __lua__('IsRadioRetuning')(); }
    
    /**
    * Checks if you're recording, returns TRUE when you start recording (F1) or turn on action replay (F2)
    * mov al, cs:g_bIsRecordingGameplay // byte_141DD0CD0 in b944
    * retn
    */
    @:pure static inline function IsRecording(): Int { return untyped __lua__('IsRecording')(); }
    
    /**
    * if(NETWORK::_IS_ROCKSTAR_BANNED() == 0) means the player is rockstar banned
    */
    @:pure static inline function IsRockstarBanned(): Int { return untyped __lua__('IsRockstarBanned')(); }
    @:pure static inline function IsScInboxValid(p0: Int): Int { return untyped __lua__('IsScInboxValid')(p0); }
    @:pure static inline function N_0x93028f1db42bfd08(p0: Int): Int { return untyped __lua__('N_0x93028f1db42bfd08')(p0); }
    
    /**
    * Occurrences in the b617d scripts:
    * "ARMY_GUARD",
    * "ARMY_HELI",
    * "BLIMP",
    * "Cinema_Downtown",
    * "Cinema_Morningwood",
    * "Cinema_Textile",
    * "City_Banks",
    * "Countryside_Banks",
    * "DEALERSHIP",
    * "KORTZ_SECURITY",
    * "LSA_Planes",
    * "MP_POLICE",
    * "Observatory_Bikers",
    * "POLICE_POUND1",
    * "POLICE_POUND2",
    * "POLICE_POUND3",
    * "POLICE_POUND4",
    * "POLICE_POUND5",
    * "Rampage1",
    * "SANDY_PLANES",
    * "SCRAP_SECURITY",
    * "SEW_MACHINE",
    * "SOLOMON_GATE"
    * Sometimes used with DOES_SCENARIO_GROUP_EXIST:
    * if (AI::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") &amp;&amp;   (!AI::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
    * else if (AI::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {
    */
    @:pure static inline function IsScenarioGroupEnabled(scenarioGroup: String): Int { return untyped __lua__('IsScenarioGroupEnabled')(scenarioGroup); }
    @:pure static inline function IsScenarioOccupied(p0: Int, p1: Int, p2: Int, p3: Int, p4: Bool): Int { return untyped __lua__('IsScenarioOccupied')(p0, p1, p2, p3, p4); }
    
    /**
    * Occurrences in the b617d scripts:
    * "PROP_HUMAN_SEAT_CHAIR",
    * "WORLD_HUMAN_DRINKING",
    * "WORLD_HUMAN_HANG_OUT_STREET",
    * "WORLD_HUMAN_SMOKING",
    * "WORLD_MOUNTAIN_LION_WANDER",
    * "WORLD_HUMAN_DRINKING"
    * Sometimes used together with GAMEPLAY::IS_STRING_NULL_OR_EMPTY in the scripts.
    * scenarioType could be the same as scenarioName, used in for example AI::TASK_START_SCENARIO_AT_POSITION.
    */
    @:pure static inline function IsScenarioTypeEnabled(scenarioType: String): Int { return untyped __lua__('IsScenarioTypeEnabled')(scenarioType); }
    @:pure static inline function IsScreenFadedIn(): Int { return untyped __lua__('IsScreenFadedIn')(); }
    @:pure static inline function IsScreenFadedOut(): Int { return untyped __lua__('IsScreenFadedOut')(); }
    @:pure static inline function IsScreenFadingIn(): Int { return untyped __lua__('IsScreenFadingIn')(); }
    @:pure static inline function IsScreenFadingOut(): Int { return untyped __lua__('IsScreenFadingOut')(); }
    
    /**
    * In drunk_controller.c4, sub_309
    * if (CAM::_C912AF078AF19212()) {
    * CAM::_1C9D7949FA533490(0);
    * }
    * What does "IS_SCRIPT_GLOBAL_SHAKING" mean..? :/ Is this a hash collision?
    */
    @:pure static inline function IsScriptGlobalShaking(): Int { return untyped __lua__('IsScriptGlobalShaking')(); }
    
    /**
    * In drunk_controller.c4, sub_309
    * if (CAM::_C912AF078AF19212()) {
    * CAM::_1C9D7949FA533490(0);
    * }
    * What does "IS_SCRIPT_GLOBAL_SHAKING" mean..? :/ Is this a hash collision?
    */
    @:pure static inline function N_0xc912af078af19212(): Int { return untyped __lua__('N_0xc912af078af19212')(); }
    @:pure static inline function IsScriptedConversationLoaded(): Int { return untyped __lua__('IsScriptedConversationLoaded')(); }
    @:pure static inline function IsScriptedConversationOngoing(): Int { return untyped __lua__('IsScriptedConversationOngoing')(); }
    @:pure static inline function IsScriptedHudComponentActive(id: Int): Int { return untyped __lua__('IsScriptedHudComponentActive')(id); }
    
    /**
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    */
    @:pure static inline function IsScriptedScenarioPedUsingConditionalAnim(ped: Int, animDict: String, anim: String): Int { return untyped __lua__('IsScriptedScenarioPedUsingConditionalAnim')(ped, animDict, anim); }
    @:pure static inline function IsScriptedSpeechPlaying(p0: Int): Int { return untyped __lua__('IsScriptedSpeechPlaying')(p0); }
    
    /**
    * Returns whether or not SEETHROUGH is active.
    */
    @:pure static inline function IsSeethroughActive(): Int { return untyped __lua__('IsSeethroughActive')(); }
    
    /**
    * Some events that i found, not sure about them, but seems to have logic based on my tests:
    * '82 - dead body
    * '86
    * '87
    * '88 - shooting, fire extinguisher in use
    * '89
    * '93 - ped using horn
    * '95 - ped receiving melee attack
    * '102 - living ped receiving shot
    * '104 - player thrown grenade, tear gas, smoke grenade, jerry can dropping gasoline
    * '105 - melee attack against veh
    * '106 - player running
    * '108 - vehicle theft
    * '112 - melee attack
    * '113 - veh rollover ped
    * '114 - dead ped receiving shot
    * '116 - aiming at ped
    * '121
    * Here is full dump of shocking event types from the exe camx.me/gtav/tasks/shockingevents.txt
    */
    @:pure static inline function IsShockingEventInSphere(type: Int, x: Int, y: Int, z: Int, radius: Int): Int { return untyped __lua__('IsShockingEventInSphere')(type, x, y, z, radius); }
    
    /**
    * Determines whether there is a sniper bullet within the specified coordinates. The coordinates form a rectangle.
    */
    @:pure static inline function IsSniperBulletInArea(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int): Int { return untyped __lua__('IsSniperBulletInArea')(x1, y1, z1, x2, y2, z2); }
    
    /**
    * This function is hard-coded to always return 0.
    */
    @:pure static inline function IsSniperInverted(): Int { return untyped __lua__('IsSniperInverted')(); }
    @:pure static inline function IsSocialClubActive(): Int { return untyped __lua__('IsSocialClubActive')(); }
    @:pure static inline function N_0xc406be343fc4b9af(): Int { return untyped __lua__('N_0xc406be343fc4b9af')(); }
    
    /**
    * if(_IS_SOCIALCLUB_BANNED() == 0) means the player is social club banned
    */
    @:pure static inline function IsSocialclubBanned(): Int { return untyped __lua__('IsSocialclubBanned')(); }
    @:pure static inline function IsSpecialAbilityActive(player: Int): Int { return untyped __lua__('IsSpecialAbilityActive')(player); }
    @:pure static inline function IsSpecialAbilityEnabled(player: Int): Int { return untyped __lua__('IsSpecialAbilityEnabled')(player); }
    @:pure static inline function IsSpecialAbilityMeterFull(player: Int): Int { return untyped __lua__('IsSpecialAbilityMeterFull')(player); }
    @:pure static inline function IsSpecialAbilityUnlocked(playerModel: EitherType<String, Int>): Int { return untyped __lua__('IsSpecialAbilityUnlocked')(playerModel); }
    @:pure static inline function IsSphereVisible(x: Int, y: Int, z: Int, radius: Int): Int { return untyped __lua__('IsSphereVisible')(x, y, z, radius); }
    @:pure static inline function IsSphereVisibleToAnotherMachine(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('IsSphereVisibleToAnotherMachine')(p0, p1, p2, p3); }
    @:pure static inline function IsSphereVisibleToPlayer(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Int { return untyped __lua__('IsSphereVisibleToPlayer')(p0, p1, p2, p3, p4); }
    @:pure static inline function IsSrlLoaded(): Int { return untyped __lua__('IsSrlLoaded')(); }
    @:pure static inline function IsStreamPlaying(): Int { return untyped __lua__('IsStreamPlaying')(); }
    @:pure static inline function IsStreamingAdditionalText(p0: Int): Int { return untyped __lua__('IsStreamingAdditionalText')(p0); }
    @:pure static inline function IsStringNull(string: String): Int { return untyped __lua__('IsStringNull')(string); }
    @:pure static inline function IsStringNullOrEmpty(string: String): Int { return untyped __lua__('IsStringNullOrEmpty')(string); }
    @:pure static inline function IsStuntJumpInProgress(): Int { return untyped __lua__('IsStuntJumpInProgress')(); }
    @:pure static inline function IsStuntJumpMessageShowing(): Int { return untyped __lua__('IsStuntJumpMessageShowing')(); }
    @:pure static inline function N_0x2272b0a1343129f4(): Int { return untyped __lua__('N_0x2272b0a1343129f4')(); }
    @:pure static inline function IsSubtitlePreferenceSwitchedOn(): Int { return untyped __lua__('IsSubtitlePreferenceSwitchedOn')(); }
    @:pure static inline function IsSynchronizedSceneLooped(sceneID: Int): Int { return untyped __lua__('IsSynchronizedSceneLooped')(sceneID); }
    
    /**
    * Returns true if a synchronized scene is running
    */
    @:pure static inline function IsSynchronizedSceneRunning(sceneId: Int): Int { return untyped __lua__('IsSynchronizedSceneRunning')(sceneId); }
    @:pure static inline function IsSystemUiBeingDisplayed(): Int { return untyped __lua__('IsSystemUiBeingDisplayed')(); }
    @:pure static inline function IsTaxiLightOn(vehicle: Int): Int { return untyped __lua__('IsTaxiLightOn')(vehicle); }
    
    /**
    * Return whether tennis mode is active or not.
    */
    @:pure static inline function IsTennisMode(ped: Int): Int { return untyped __lua__('IsTennisMode')(ped); }
    
    /**
    * Returns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active.
    */
    @:pure static inline function IsTextChatActive(): Int { return untyped __lua__('IsTextChatActive')(); }
    @:pure static inline function IsThisAMinigameScript(): Int { return untyped __lua__('IsThisAMinigameScript')(); }
    @:pure static inline function IsThisModelABicycle(model: EitherType<String, Int>): Int { return untyped __lua__('IsThisModelABicycle')(model); }
    @:pure static inline function IsThisModelABike(model: EitherType<String, Int>): Int { return untyped __lua__('IsThisModelABike')(model); }
    @:pure static inline function IsThisModelABoat(model: EitherType<String, Int>): Int { return untyped __lua__('IsThisModelABoat')(model); }
    
    /**
    * To check if the model is an amphibious car, see gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-33#entry1069317363 (for build 944 and above only!)
    */
    @:pure static inline function IsThisModelACar(model: EitherType<String, Int>): Int { return untyped __lua__('IsThisModelACar')(model); }
    @:pure static inline function IsThisModelAHeli(model: EitherType<String, Int>): Int { return untyped __lua__('IsThisModelAHeli')(model); }
    @:pure static inline function IsThisModelAPlane(model: EitherType<String, Int>): Int { return untyped __lua__('IsThisModelAPlane')(model); }
    @:pure static inline function IsThisModelAQuadbike(model: EitherType<String, Int>): Int { return untyped __lua__('IsThisModelAQuadbike')(model); }
    @:pure static inline function IsThisModelATrain(model: EitherType<String, Int>): Int { return untyped __lua__('IsThisModelATrain')(model); }
    
    /**
    * Checks if model is a boat, then checks an additional flag.
    * Returns true for these models:
    * PREDATOR
    * SEASHARK2
    * SPEEDER
    */
    @:pure static inline function IsThisModelAnEmergencyBoat(model: EitherType<String, Int>): Int { return untyped __lua__('IsThisModelAnEmergencyBoat')(model); }
    
    /**
    * Checks if model is a boat, then checks an additional flag.
    * Returns true for these models:
    * PREDATOR
    * SEASHARK2
    * SPEEDER
    */
    @:pure static inline function IsThisModelASubmersible(model: EitherType<String, Int>): Int { return untyped __lua__('IsThisModelASubmersible')(model); }
    @:pure static inline function IsThreadActive(threadId: Int): Int { return untyped __lua__('IsThreadActive')(threadId); }
    
    /**
    * Returns true if the two times are equal; otherwise returns false.
    */
    @:pure static inline function IsTimeEqualTo(timeA: Int, timeB: Int): Int { return untyped __lua__('IsTimeEqualTo')(timeA, timeB); }
    
    /**
    * Returns true if the two times are equal; otherwise returns false.
    */
    @:pure static inline function AreIntegersEqual(timeA: Int, timeB: Int): Int { return untyped __lua__('AreIntegersEqual')(timeA, timeB); }
    
    /**
    * Subtracts the second argument from the first, then returns whether the result is negative.
    */
    @:pure static inline function IsTimeLessThan(timeA: Int, timeB: Int): Int { return untyped __lua__('IsTimeLessThan')(timeA, timeB); }
    
    /**
    * Subtracts the second argument from the first, then returns whether the result is negative.
    */
    @:pure static inline function SubtractBFromAAndCheckIfNegative(timeA: Int, timeB: Int): Int { return untyped __lua__('SubtractBFromAAndCheckIfNegative')(timeA, timeB); }
    
    /**
    * Subtracts the first argument from the second, then returns whether the result is negative.
    */
    @:pure static inline function IsTimeMoreThan(timeA: Int, timeB: Int): Int { return untyped __lua__('IsTimeMoreThan')(timeA, timeB); }
    
    /**
    * Subtracts the first argument from the second, then returns whether the result is negative.
    */
    @:pure static inline function SubtractAFromBAndCheckIfNegative(timeA: Int, timeB: Int): Int { return untyped __lua__('SubtractAFromBAndCheckIfNegative')(timeA, timeB); }
    @:pure static inline function IsToggleModOn(vehicle: Int, modType: Int): Int { return untyped __lua__('IsToggleModOn')(vehicle, modType); }
    
    /**
    * returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.
    * Target needs to be tracked.. won't work otherwise.
    */
    @:pure static inline function IsTrackedPedVisible(ped: Int): Int { return untyped __lua__('IsTrackedPedVisible')(ped); }
    @:pure static inline function IsTrackedPointVisible(point: Int): Int { return untyped __lua__('IsTrackedPointVisible')(point); }
    @:pure static inline function IsUiLoadingMultiplayer(): Int { return untyped __lua__('IsUiLoadingMultiplayer')(); }
    @:pure static inline function N_0xc6dc823253fbb366(): Int { return untyped __lua__('N_0xc6dc823253fbb366')(); }
    
    /**
    * Return if interior is valid.
    */
    @:pure static inline function IsValidInterior(interiorID: Int): Int { return untyped __lua__('IsValidInterior')(interiorID); }
    
    /**
    * p1 is false almost always.
    * However, in launcher_carwash/carwash1/carwash2 scripts, p1 is true and is accompanied by DOES_VEHICLE_HAVE_ROOF
    */
    @:pure static inline function IsVehicleAConvertible(vehicle: Int, p1: Bool): Int { return untyped __lua__('IsVehicleAConvertible')(vehicle, p1); }
    @:pure static inline function IsVehicleAlarmActivated(vehicle: Int): Int { return untyped __lua__('IsVehicleAlarmActivated')(vehicle); }
    @:pure static inline function IsVehicleAlarmSet(vehicle: Int): Int { return untyped __lua__('IsVehicleAlarmSet')(vehicle); }
    @:pure static inline function IsVehicleAttachedToCargobob(cargobob: Int, vehicleAttached: Int): Int { return untyped __lua__('IsVehicleAttachedToCargobob')(cargobob, vehicleAttached); }
    
    /**
    * Scripts verify that towTruck is the first parameter, not the second.
    */
    @:pure static inline function IsVehicleAttachedToTowTruck(towTruck: Int, vehicle: Int): Int { return untyped __lua__('IsVehicleAttachedToTowTruck')(towTruck, vehicle); }
    
    /**
    * Public Function isVehicleAttachedToTrailer(vh As Vehicle) As Boolean
    * Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ATTACHED_TO_TRAILER, vh)
    * End Function
    */
    @:pure static inline function IsVehicleAttachedToTrailer(vehicle: Int): Int { return untyped __lua__('IsVehicleAttachedToTrailer')(vehicle); }
    @:pure static inline function IsVehicleBumperBrokenOff(vehicle: Int, front: Bool): Int { return untyped __lua__('IsVehicleBumperBrokenOff')(vehicle, front); }
    
    /**
    * Appears to return true if the vehicle has any damage, including cosmetically.
    */
    @:pure static inline function IsVehicleDamaged(vehicle: Int): Int { return untyped __lua__('IsVehicleDamaged')(vehicle); }
    
    /**
    * doorID starts at 0, not seeming to skip any numbers. Four door vehicles intuitively range from 0 to 3.
    */
    @:pure static inline function IsVehicleDoorDamaged(veh: Int, doorID: Int): Int { return untyped __lua__('IsVehicleDoorDamaged')(veh, doorID); }
    
    /**
    * doorIndex:
    * 0 = Front Left Door
    * 1 = Front Right Door
    * 2 = Back Left Door
    * 3 = Back Right Door
    * 4 = Hood
    * 5 = Trunk
    * 6 = Trunk2
    */
    @:pure static inline function IsVehicleDoorFullyOpen(vehicle: Int, doorIndex: Int): Int { return untyped __lua__('IsVehicleDoorFullyOpen')(vehicle, doorIndex); }
    
    /**
    * p1 is always 0 in the scripts.
    * p1 = check if vehicle is on fire
    */
    @:pure static inline function IsVehicleDriveable(vehicle: Int, isOnFireCheck: Bool): Int { return untyped __lua__('IsVehicleDriveable')(vehicle, isOnFireCheck); }
    @:pure static inline function IsVehicleEngineStarting(vehicle: Int): Int { return untyped __lua__('IsVehicleEngineStarting')(vehicle); }
    @:pure static inline function IsVehicleExtraTurnedOn(vehicle: Int, extraId: Int): Int { return untyped __lua__('IsVehicleExtraTurnedOn')(vehicle, extraId); }
    @:pure static inline function IsVehicleHighDetail(vehicle: Int): Int { return untyped __lua__('IsVehicleHighDetail')(vehicle); }
    
    /**
    * Returns whether the specified vehicle is currently in a burnout.
    * vb.net
    * Public Function isVehicleInBurnout(vh As Vehicle) As Boolean
    * Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh)
    * End Function
    */
    @:pure static inline function IsVehicleInBurnout(vehicle: Int): Int { return untyped __lua__('IsVehicleInBurnout')(vehicle); }
    
    /**
    * garageName example "Michael - Beverly Hills"
    * For a full list, see here: pastebin.com/73VfwsmS
    */
    @:pure static inline function IsVehicleInGarageArea(garageName: String, vehicle: Int): Int { return untyped __lua__('IsVehicleInGarageArea')(garageName, vehicle); }
    @:pure static inline function IsVehicleInteriorLightOn(vehicle: Int): Int { return untyped __lua__('IsVehicleInteriorLightOn')(vehicle); }
    
    /**
    * Returns whether or not the vehicle has a CVehicleStreamRequestGfx that's trying to load mods.
    * True if it isn't loading mods, false if it is.
    */
    @:pure static inline function IsVehicleModLoadDone(vehicle: Int): Int { return untyped __lua__('IsVehicleModLoadDone')(vehicle); }
    
    /**
    * Returns whether or not the vehicle has a CVehicleStreamRequestGfx that's trying to load mods.
    * True if it isn't loading mods, false if it is.
    */
    @:pure static inline function N_0x9a83f5f9963775ef(vehicle: Int): Int { return untyped __lua__('N_0x9a83f5f9963775ef')(vehicle); }
    @:pure static inline function IsVehicleModel(vehicle: Int, model: EitherType<String, Int>): Int { return untyped __lua__('IsVehicleModel')(vehicle, model); }
    @:pure static inline function IsVehicleNeedsToBeHotwired(vehicle: Int): Int { return untyped __lua__('IsVehicleNeedsToBeHotwired')(vehicle); }
    
    /**
    * indices:
    * 0 = Left
    * 1 = Right
    * 2 = Front
    * 3 = Back
    */
    @:pure static inline function IsVehicleNeonLightEnabled(vehicle: Int, index: Int): Int { return untyped __lua__('IsVehicleNeonLightEnabled')(vehicle, index); }
    
    /**
    * Returns true if the id is non zero.
    */
    @:pure static inline function IsVehicleNodeIdValid(vehicleNodeId: Int): Int { return untyped __lua__('IsVehicleNodeIdValid')(vehicleNodeId); }
    
    /**
    * Public Function isVehicleOnAllWheels(vh As Vehicle) As Boolean
    * Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh)
    * End Function
    */
    @:pure static inline function IsVehicleOnAllWheels(vehicle: Int): Int { return untyped __lua__('IsVehicleOnAllWheels')(vehicle); }
    @:pure static inline function IsVehiclePreviouslyOwnedByPlayer(vehicle: Int): Int { return untyped __lua__('IsVehiclePreviouslyOwnedByPlayer')(vehicle); }
    @:pure static inline function IsVehicleRadioLoud(vehicle: Int): Int { return untyped __lua__('IsVehicleRadioLoud')(vehicle); }
    
    /**
    * Possibly: Returns whether the searchlight (found on police vehicles) is toggled on.
    */
    @:pure static inline function IsVehicleSearchlightOn(vehicle: Int): Int { return untyped __lua__('IsVehicleSearchlightOn')(vehicle); }
    
    /**
    * Has an additional BOOL parameter since version [???].
    * Check if a vehicle seat is free.
    * -1 being the driver seat.
    * Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
    */
    @:pure static inline function IsVehicleSeatFree(vehicle: Int, seatIndex: Int): Int { return untyped __lua__('IsVehicleSeatFree')(vehicle, seatIndex); }
    
    /**
    * Checks some flag in the vehicle's model. If this function returns false, mod shops will not allow respray. it checks for FLAG_NO_RESPRAY
    */
    @:pure static inline function IsVehicleShopResprayAllowed(vehicle: Int): Int { return untyped __lua__('IsVehicleShopResprayAllowed')(vehicle); }
    
    /**
    * Checks some flag in the vehicle's model. If this function returns false, mod shops will not allow respray. it checks for FLAG_NO_RESPRAY
    */
    @:pure static inline function N_0x8d474c8faeff6cde(vehicle: Int): Int { return untyped __lua__('N_0x8d474c8faeff6cde')(vehicle); }
    @:pure static inline function IsVehicleSirenOn(vehicle: Int): Int { return untyped __lua__('IsVehicleSirenOn')(vehicle); }
    @:pure static inline function IsVehicleSirenSoundOn(vehicle: Int): Int { return untyped __lua__('IsVehicleSirenSoundOn')(vehicle); }
    @:pure static inline function N_0xb5cc40fbcb586380(vehicle: Int): Int { return untyped __lua__('N_0xb5cc40fbcb586380')(vehicle); }
    @:pure static inline function IsVehicleStolen(vehicle: Int): Int { return untyped __lua__('IsVehicleStolen')(vehicle); }
    
    /**
    * Returns true if the vehicle's current speed is less than, or equal to 0.0025f.
    * For some vehicles it returns true if the current speed is &lt;= 0.00039999999.
    */
    @:pure static inline function IsVehicleStopped(vehicle: Int): Int { return untyped __lua__('IsVehicleStopped')(vehicle); }
    
    /**
    * is this for red lights only?  more testing required.
    */
    @:pure static inline function IsVehicleStoppedAtTrafficLights(vehicle: Int): Int { return untyped __lua__('IsVehicleStoppedAtTrafficLights')(vehicle); }
    @:pure static inline function IsVehicleStuckOnRoof(vehicle: Int): Int { return untyped __lua__('IsVehicleStuckOnRoof')(vehicle); }
    
    /**
    * p1 can be anywhere from 0 to 3 in the scripts. p2 is generally somewhere in the 1000 to 10000 range.
    */
    @:pure static inline function IsVehicleStuckTimerUp(vehicle: Int, p1: Int, p2: Int): Int { return untyped __lua__('IsVehicleStuckTimerUp')(vehicle, p1, p2); }
    
    /**
    * wheelID used for 4 wheelers seem to be (0, 1, 4, 5)
    * completely - is to check if tire completely gone from rim.
    * '0 = wheel_lf / bike, plane or jet front
    * '1 = wheel_rf
    * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
    * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
    * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
    * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
    * '45 = 6 wheels trailer mid wheel left
    * '47 = 6 wheels trailer mid wheel right
    */
    @:pure static inline function IsVehicleTyreBurst(vehicle: Int, wheelID: Int, completely: Bool): Int { return untyped __lua__('IsVehicleTyreBurst')(vehicle, wheelID, completely); }
    
    /**
    * must be called after TRACK_VEHICLE_VISIBILITY
    * it's not instant so probabilly must pass an 'update' to see correct result.
    */
    @:pure static inline function IsVehicleVisible(vehicle: Int): Int { return untyped __lua__('IsVehicleVisible')(vehicle); }
    @:pure static inline function IsVehicleWanted(vehicle: Int): Int { return untyped __lua__('IsVehicleWanted')(vehicle); }
    @:pure static inline function IsVehicleWindowIntact(vehicle: Int, windowIndex: Int): Int { return untyped __lua__('IsVehicleWindowIntact')(vehicle, windowIndex); }
    @:pure static inline function IsWarningMessageActive(): Int { return untyped __lua__('IsWarningMessageActive')(); }
    @:pure static inline function IsMedicalDisabled(): Int { return untyped __lua__('IsMedicalDisabled')(); }
    @:pure static inline function IsWaypointActive(): Int { return untyped __lua__('IsWaypointActive')(); }
    @:pure static inline function IsWaypointPlaybackGoingOnForPed(p0: Int): Int { return untyped __lua__('IsWaypointPlaybackGoingOnForPed')(p0); }
    @:pure static inline function IsWaypointPlaybackGoingOnForVehicle(p0: Int): Int { return untyped __lua__('IsWaypointPlaybackGoingOnForVehicle')(p0); }
    @:pure static inline function IsWeaponValid(weaponHash: EitherType<String, Int>): Int { return untyped __lua__('IsWeaponValid')(weaponHash); }
    
    /**
    * Gets whether the world point the calling script is registered to is within desired range of the player.
    */
    @:pure static inline function IsWorldPointWithinBrainActivationRange(): Int { return untyped __lua__('IsWorldPointWithinBrainActivationRange')(); }
    
    /**
    * XBOX 360
    * MulleDK19: This function is hard-coded to always return 0.
    */
    @:pure static inline function IsXbox360Version(): Int { return untyped __lua__('IsXbox360Version')(); }
    
    /**
    * When I called this with what the script was doing, which was -190f for yaw pitch and roll, all my car did was jitter a little. I also tried 0 and 190f. I altered the p1 variable between TRUE and FALSE and didn't see a difference.
    * This might have something to do with the physbox of the vehicle, but I'm not sure.
    */
    @:pure static inline function JitterVehicle(vehicle: Int, p1: Bool, yaw: Int, pitch: Int, roll: Int): Void { return untyped __lua__('JitterVehicle')(vehicle, p1, yaw, pitch, roll); }
    
    /**
    * hash collision
    */
    @:pure static inline function KeyHudColour(p0: Bool, p1: Int): Void { return untyped __lua__('KeyHudColour')(p0, p1); }
    
    /**
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function KnockOffPedProp(ped: Int, p1: Bool, p2: Bool, p3: Bool, p4: Bool): Void { return untyped __lua__('KnockOffPedProp')(ped, p1, p2, p3, p4); }
    @:pure static inline function KnockPedOffVehicle(ped: Int): Void { return untyped __lua__('KnockPedOffVehicle')(ped); }
    @:pure static inline function Leaderboards2ReadByHandle(): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('Leaderboards2ReadByHandle')(); }
    @:pure static inline function Leaderboards2ReadByRadius(p1: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('Leaderboards2ReadByRadius')(p1); }
    @:pure static inline function Leaderboards2ReadByRank(p1: Int, p2: Int): { a0: Int, a1: Int } { return untyped __lua__('Leaderboards2ReadByRank')(p1, p2); }
    @:pure static inline function Leaderboards2ReadByRow(p2: Int, p4: Int, p6: Int): { a0: Int, a1: Int, a2: Int, a3: Int, a4: Int } { return untyped __lua__('Leaderboards2ReadByRow')(p2, p4, p6); }
    @:pure static inline function Leaderboards2ReadByScoreFloat(p1: Int, p2: Int): { a0: Int, a1: Int } { return untyped __lua__('Leaderboards2ReadByScoreFloat')(p1, p2); }
    @:pure static inline function Leaderboards2ReadByScoreInt(p1: Int, p2: Int): { a0: Int, a1: Int } { return untyped __lua__('Leaderboards2ReadByScoreInt')(p1, p2); }
    @:pure static inline function Leaderboards2ReadFriendsByRow(p2: Int, p3: Bool, p4: Int, p5: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('Leaderboards2ReadFriendsByRow')(p2, p3, p4, p5); }
    @:pure static inline function Leaderboards2WriteData(p0: Int): Int { return untyped __lua__('Leaderboards2WriteData')(p0); }
    @:pure static inline function LeaderboardsCacheDataRow(p0: Int): Int { return untyped __lua__('LeaderboardsCacheDataRow')(p0); }
    @:pure static inline function LeaderboardsClearCacheData(): Void { return untyped __lua__('LeaderboardsClearCacheData')(); }
    @:pure static inline function LeaderboardsGetCacheDataRow(p0: Int, p1: Int, p2: Int): Int { return untyped __lua__('LeaderboardsGetCacheDataRow')(p0, p1, p2); }
    @:pure static inline function LeaderboardsGetCacheExists(p0: Int): Int { return untyped __lua__('LeaderboardsGetCacheExists')(p0); }
    @:pure static inline function LeaderboardsGetCacheTime(p0: Int): Int { return untyped __lua__('LeaderboardsGetCacheTime')(p0); }
    @:pure static inline function LeaderboardsGetColumnId(p0: Int, p1: Int, p2: Int): Int { return untyped __lua__('LeaderboardsGetColumnId')(p0, p1, p2); }
    @:pure static inline function LeaderboardsGetColumnType(p0: Int, p1: Int, p2: Int): Int { return untyped __lua__('LeaderboardsGetColumnType')(p0, p1, p2); }
    @:pure static inline function LeaderboardsGetNumberOfColumns(p0: Int, p1: Int): Int { return untyped __lua__('LeaderboardsGetNumberOfColumns')(p0, p1); }
    @:pure static inline function LeaderboardsReadClear(p0: Int, p1: Int, p2: Int): Int { return untyped __lua__('LeaderboardsReadClear')(p0, p1, p2); }
    @:pure static inline function LeaderboardsReadClearAll(): Int { return untyped __lua__('LeaderboardsReadClearAll')(); }
    @:pure static inline function LeaderboardsReadPending(p0: Int, p1: Int, p2: Int): Int { return untyped __lua__('LeaderboardsReadPending')(p0, p1, p2); }
    @:pure static inline function LeaderboardsReadSuccessful(p0: Int, p1: Int, p2: Int): Int { return untyped __lua__('LeaderboardsReadSuccessful')(p0, p1, p2); }
    @:pure static inline function LinkNamedRendertarget(hash: EitherType<String, Int>): Void { return untyped __lua__('LinkNamedRendertarget')(hash); }
    @:pure static inline function LoadAllObjectsNow(): Void { return untyped __lua__('LoadAllObjectsNow')(); }
    
    /**
    * Loads all path nodes.
    * If keepInMemory is true, all path nodes will be loaded and be kept in memory; otherwise, all path nodes will be loaded, but unloaded as the game sees fit.
    */
    @:pure static inline function LoadAllPathNodes(keepInMemory: Bool): Int { return untyped __lua__('LoadAllPathNodes')(keepInMemory); }
    
    /**
    * Load interior
    */
    @:pure static inline function LoadInterior(interiorID: Int): Void { return untyped __lua__('LoadInterior')(interiorID); }
    
    /**
    * Load interior
    */
    @:pure static inline function N_0x2ca429c029ccf247(interiorID: Int): Void { return untyped __lua__('N_0x2ca429c029ccf247')(interiorID); }
    @:pure static inline function LoadMovieMeshSet(movieMeshSetName: String): Int { return untyped __lua__('LoadMovieMeshSet')(movieMeshSetName); }
    
    /**
    * This loads the GTA:O dlc map parts (high end garages, apartments).
    * Works in singleplayer.
    * In order to use GTA:O heist IPL's you have to call this native with the following params: _9BAE5AD2508DF078(1);
    * console hash: 0xC65586A9
    */
    @:pure static inline function LoadMpDlcMaps(): Void { return untyped __lua__('LoadMpDlcMaps')(); }
    
    /**
    * Reads the contents of a text file in a specified resource.
    * If executed on the client, this file has to be included in `files` in the resource manifest.
    * Example: `local data = LoadResourceFile("devtools", "data.json")`
    * @param resourceName The resource name.
    * @param fileName The file in the resource.
    * @return The file contents
    */
    @:pure static inline function LoadResourceFile(resourceName: String, fileName: String): String { return untyped __lua__('LoadResourceFile')(resourceName, fileName); }
    
    /**
    * Rope presets can be found in the gamefiles. One example is "ropeFamily3", it is NOT a hash but rather a string.
    */
    @:pure static inline function LoadRopeData(rope: Int, rope_preset: String): Int { return untyped __lua__('LoadRopeData')(rope, rope_preset); }
    @:pure static inline function LoadScene(x: Int, y: Int, z: Int): Void { return untyped __lua__('LoadScene')(x, y, z); }
    
    /**
    * Unloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, 0888C3502DBBEEF5 is a cognate to this function and loads MP DLC (and unloads SP DLC by extension).
    * The original (and wrong) definition is below:
    * This unload the GTA:O DLC map parts (like high end garages/apartments).
    * Works in singleplayer.
    * console hash: 0x8BF60FC3
    */
    @:pure static inline function LoadSpDlcMaps(): Void { return untyped __lua__('LoadSpDlcMaps')(); }
    
    /**
    * Example:
    * AUDIO::LOAD_STREAM("CAR_STEAL_1_PASSBY", "CAR_STEAL_1_SOUNDSET");
    * All found occurrences in the b678d decompiled scripts: pastebin.com/3rma6w5w
    * Stream names often ends with "_MASTER", "_SMALL" or "_STREAM". Also "_IN", "_OUT" and numbers.
    * soundSet is often set to 0 in the scripts. These are common to end the soundSets: "_SOUNDS", "_SOUNDSET" and numbers.
    */
    @:pure static inline function LoadStream(streamName: String, soundSet: String): Int { return untyped __lua__('LoadStream')(streamName, soundSet); }
    
    /**
    * Example:
    * AUDIO::LOAD_STREAM_WITH_START_OFFSET("STASH_TOXIN_STREAM", 2400, "FBI_05_SOUNDS");
    * Only called a few times in the scripts.
    */
    @:pure static inline function LoadStreamWithStartOffset(streamName: String, startOffset: Int, soundSet: String): Int { return untyped __lua__('LoadStreamWithStartOffset')(streamName, startOffset, soundSet); }
    @:pure static inline function LoadTvChannel(tvChannel: EitherType<String, Int>): Int { return untyped __lua__('LoadTvChannel')(tvChannel); }
    @:pure static inline function N_0x0ad973ca1e077b60(tvChannel: EitherType<String, Int>): Int { return untyped __lua__('N_0x0ad973ca1e077b60')(tvChannel); }
    
    /**
    * Loads a User-Generated Content (UGC) file. These files can be found in "[GTA5]\data\ugc" and "[GTA5]\common\patch\ugc". They seem to follow a naming convention, most likely of "[name]_[part].ugc". See example below for usage.
    * Returns whether or not the file was successfully loaded.
    * Example:
    * DATAFILE::_LOAD_UGC_FILE("RockstarPlaylists") // loads "rockstarplaylists_00.ugc"
    */
    @:pure static inline function LoadUgcFile(filename: String): Int { return untyped __lua__('LoadUgcFile')(filename); }
    
    /**
    * Locks the minimap to the specified angle in integer degrees.
    * angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
    */
    @:pure static inline function LockMinimapAngle(angle: Int): Void { return untyped __lua__('LockMinimapAngle')(angle); }
    
    /**
    * Locks the minimap to the specified world position.
    */
    @:pure static inline function LockMinimapPosition(x: Int, y: Int): Void { return untyped __lua__('LockMinimapPosition')(x, y); }
    
    /**
    * Not present in retail version of the game, actual definiton seems to be
    * _LOG_DEBUG_INFO(char* category, char* debugText);
    */
    @:pure static inline function LogDebugInfo(p0: String): Void { return untyped __lua__('LogDebugInfo')(p0); }
    
    /**
    * Not present in retail version of the game, actual definiton seems to be
    * _LOG_DEBUG_INFO(char* category, char* debugText);
    */
    @:pure static inline function N_0x2162c446dfdf38fd(p0: String): Void { return untyped __lua__('N_0x2162c446dfdf38fd')(p0); }
    @:pure static inline function LowerConvertibleRoof(vehicle: Int, instantlyLower: Bool): Void { return untyped __lua__('LowerConvertibleRoof')(vehicle, instantlyLower); }
    @:pure static inline function MakePedReload(ped: Int): Int { return untyped __lua__('MakePedReload')(ped); }
    
    /**
    * is this like setting is as no longer needed?
    */
    @:pure static inline function MarkObjectForDeletion(object: Int): Void { return untyped __lua__('MarkObjectForDeletion')(object); }
    @:pure static inline function MaxRadioStationIndex(): Int { return untyped __lua__('MaxRadioStationIndex')(); }
    
    /**
    * Sets the water height for a given position and radius.
    */
    @:pure static inline function ModifyWater(x: Int, y: Int, radius: Int, height: Int): Void { return untyped __lua__('ModifyWater')(x, y, radius, height); }
    
    /**
    * For move the finger of player, the value of int goes 1 at 5.
    */
    @:pure static inline function MoveFinger(direction: Int): Void { return untyped __lua__('MoveFinger')(direction); }
    @:pure static inline function MoveVehicleDecals(p0: Int, p1: Int): Void { return untyped __lua__('MoveVehicleDecals')(p0, p1); }
    
    /**
    * 2 matches in 1 script
    * Used in multiplayer scripts?
    */
    @:pure static inline function N_0x0032a6dba562c518(): Void { return untyped __lua__('N_0x0032a6dba562c518')(); }
    
    /**
    * GET_VEHICLE_CLASS_MAX_*
    */
    @:pure static inline function N_0x00c09f246abedd82(vehicleClass: Int): Int { return untyped __lua__('N_0x00c09f246abedd82')(vehicleClass); }
    
    /**
    * if ((NETWORK::_597F8DBA9B206FC7() &gt; 0) &amp;&amp; DATAFILE::_01095C95CD46B624(0)) {
    * v_10 = DATAFILE::_GET_ROOT_OBJECT();
    * v_11 = DATAFILE::_OBJECT_VALUE_GET_INTEGER(v_10, "pt");
    * sub_20202(2, v_11);
    * a_0 += 1;
    * } else {
    * a_0 += 1;
    * }
    */
    @:pure static inline function N_0x01095c95cd46b624(p0: Int): Int { return untyped __lua__('N_0x01095c95cd46b624')(p0); }
    @:pure static inline function N_0x011883f41211432a(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Void { return untyped __lua__('N_0x011883f41211432a')(p0, p1, p2, p3, p4, p5, p6); }
    @:pure static inline function N_0x013e5cfc38cd5387(p0: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x013e5cfc38cd5387')(p0); }
    @:pure static inline function N_0x0150b6ff25a9e2e5(): Void { return untyped __lua__('N_0x0150b6ff25a9e2e5')(); }
    @:pure static inline function N_0x01708e8dd3ff8c65(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Int { return untyped __lua__('N_0x01708e8dd3ff8c65')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function N_0x017568a8182d98a6(p0: Int): Int { return untyped __lua__('N_0x017568a8182d98a6')(p0); }
    
    /**
    * native only found once in appinternet.c4
    */
    @:pure static inline function N_0x01a358d9128b7a86(): Int { return untyped __lua__('N_0x01a358d9128b7a86')(); }
    @:pure static inline function N_0x01abce5e7cbda196(): Int { return untyped __lua__('N_0x01abce5e7cbda196')(); }
    @:pure static inline function N_0x01bb4d577d38bd9e(p0: Int, p1: Int): Void { return untyped __lua__('N_0x01bb4d577d38bd9e')(p0, p1); }
    @:pure static inline function N_0x0218ba067d249dea(): Void { return untyped __lua__('N_0x0218ba067d249dea')(); }
    
    /**
    * some camera effect that is (also) used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled. Possibly a cinematic or script-cam version of _0x487A82C650EB7799
    */
    @:pure static inline function N_0x0225778816fdc28c(p0: Int): Void { return untyped __lua__('N_0x0225778816fdc28c')(p0); }
    @:pure static inline function N_0x02369d5c8a51fdcf(p0: Bool): Void { return untyped __lua__('N_0x02369d5c8a51fdcf')(p0); }
    @:pure static inline function N_0x02398b627547189c(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x02398b627547189c')(p0, p1); }
    @:pure static inline function N_0x024a60deb0ea69f0(p0: Int, player: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0x024a60deb0ea69f0')(p0, player, p2, p3); }
    @:pure static inline function N_0x02a8bec6fd9af660(p1: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x02a8bec6fd9af660')(p1); }
    @:pure static inline function N_0x02ac28f3a01fa04a(p0: Int): Int { return untyped __lua__('N_0x02ac28f3a01fa04a')(p0); }
    @:pure static inline function N_0x02ada21ea2f6918f(): Int { return untyped __lua__('N_0x02ada21ea2f6918f')(); }
    
    /**
    * Found in the scripts:
    * GAMEPLAY::_02DEAAC8F8EA7FE7("");
    */
    @:pure static inline function N_0x02deaac8f8ea7fe7(p0: String): Void { return untyped __lua__('N_0x02deaac8f8ea7fe7')(p0); }
    @:pure static inline function N_0x02e93c796abd3a97(p0: Bool): Void { return untyped __lua__('N_0x02e93c796abd3a97')(p0); }
    
    /**
    * 2 calls in the b617d scripts. This line is called 2 times:
    * AUDIO::_031ACB6ABA18C729("RADIO_16_SILVERLAKE", "MIRRORPARK_LOCKED");
    * Note: Another name for RADIO_16_SILVERLAKE is RADIO MIRROR PARK
    */
    @:pure static inline function N_0x031acb6aba18c729(radioStation: String, p1: String): Void { return untyped __lua__('N_0x031acb6aba18c729')(radioStation, p1); }
    @:pure static inline function N_0x03300b57fcac6ddb(p0: Bool): Void { return untyped __lua__('N_0x03300b57fcac6ddb')(p0); }
    @:pure static inline function N_0x0378c08504160d0d(p0: Int): Int { return untyped __lua__('N_0x0378c08504160d0d')(p0); }
    @:pure static inline function N_0x0395cb47b022e62c(p0: Int): Int { return untyped __lua__('N_0x0395cb47b022e62c')(p0); }
    @:pure static inline function N_0x03c27e13b42a0e82(doorHash: EitherType<String, Int>, p1: Int, p2: Bool, p3: Bool): Void { return untyped __lua__('N_0x03c27e13b42a0e82')(doorHash, p1, p2, p3); }
    @:pure static inline function N_0x03ea03af85a85cb7(ped: Int, p1: Bool, p2: Bool, p3: Bool, p4: Bool, p5: Bool, p6: Bool, p7: Bool, p8: Int): Int { return untyped __lua__('N_0x03ea03af85a85cb7')(ped, p1, p2, p3, p4, p5, p6, p7, p8); }
    @:pure static inline function N_0x03f1a106bda7dd3e(): Void { return untyped __lua__('N_0x03f1a106bda7dd3e')(); }
    @:pure static inline function N_0x03fc694ae06c5a20(): Void { return untyped __lua__('N_0x03fc694ae06c5a20')(); }
    
    /**
    * Found in the b617d scripts, duplicates removed:
    * AUDIO::_044DBAD7A7FA2BE5("V_CARSHOWROOM_PS_WINDOW_UNBROKEN", "V_CARSHOWROOM_PS_WINDOW_BROKEN");
    * AUDIO::_044DBAD7A7FA2BE5("V_CIA_PS_WINDOW_UNBROKEN", "V_CIA_PS_WINDOW_BROKEN");
    * AUDIO::_044DBAD7A7FA2BE5("V_DLC_HEIST_APARTMENT_DOOR_CLOSED", "V_DLC_HEIST_APARTMENT_DOOR_OPEN");
    * AUDIO::_044DBAD7A7FA2BE5("V_FINALEBANK_PS_VAULT_INTACT", "V_FINALEBANK_PS_VAULT_BLOWN");
    * AUDIO::_044DBAD7A7FA2BE5("V_MICHAEL_PS_BATHROOM_WITH_WINDOW", "V_MICHAEL_PS_BATHROOM_WITHOUT_WINDOW");
    */
    @:pure static inline function N_0x044dbad7a7fa2be5(p0: String, p1: String): Void { return untyped __lua__('N_0x044dbad7a7fa2be5')(p0, p1); }
    @:pure static inline function N_0x04655f9d075d0ae5(p0: Bool): Void { return untyped __lua__('N_0x04655f9d075d0ae5')(p0); }
    @:pure static inline function N_0x047cbed6f6f8b63c(): Void { return untyped __lua__('N_0x047cbed6f6f8b63c')(); }
    
    /**
    * p0 was always 0xAE2602A3.
    */
    @:pure static inline function N_0x052991e59076e4e4(p0: EitherType<String, Int>, p1: Int): Int { return untyped __lua__('N_0x052991e59076e4e4')(p0, p1); }
    @:pure static inline function N_0x06087579e7aa85a9(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Int { return untyped __lua__('N_0x06087579e7aa85a9')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function N_0x061cb768363d6424(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x061cb768363d6424')(p0, p1); }
    @:pure static inline function N_0x0626a247d2405330(): Int { return untyped __lua__('N_0x0626a247d2405330')(); }
    @:pure static inline function N_0x062d5ead4da2fa6a(): Void { return untyped __lua__('N_0x062d5ead4da2fa6a')(); }
    @:pure static inline function N_0x063ae2b2cc273588(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x063ae2b2cc273588')(p0, p1); }
    @:pure static inline function N_0x06462a961e94b67c(): Void { return untyped __lua__('N_0x06462a961e94b67c')(); }
    @:pure static inline function N_0x06582aff74894c75(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x06582aff74894c75')(p0, p1); }
    @:pure static inline function N_0x06a320535f5f0248(p0: Int): Void { return untyped __lua__('N_0x06a320535f5f0248')(p0); }
    @:pure static inline function N_0x06a3524161c502ba(p0: Int): Void { return untyped __lua__('N_0x06a3524161c502ba')(p0); }
    @:pure static inline function N_0x06c0023bed16dd6b(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x06c0023bed16dd6b')(p0, p1); }
    @:pure static inline function N_0x06ee9048fd080382(p0: Bool): Void { return untyped __lua__('N_0x06ee9048fd080382')(p0); }
    @:pure static inline function N_0x06f761ea47c1d3ed(p0: Bool): Void { return untyped __lua__('N_0x06f761ea47c1d3ed')(p0); }
    @:pure static inline function N_0x075f1d57402c93ba(): Int { return untyped __lua__('N_0x075f1d57402c93ba')(); }
    @:pure static inline function N_0x07c313f94746702c(p0: Int): Int { return untyped __lua__('N_0x07c313f94746702c')(p0); }
    @:pure static inline function N_0x07c61676e5bb52cd(p0: Int): Int { return untyped __lua__('N_0x07c61676e5bb52cd')(p0); }
    @:pure static inline function N_0x07dd29d5e22763f1(p0: Int): Int { return untyped __lua__('N_0x07dd29d5e22763f1')(p0); }
    @:pure static inline function N_0x07fb139b592fa687(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0x07fb139b592fa687')(p0, p1, p2, p3); }
    @:pure static inline function N_0x0811381ef5062fec(p0: Int): Void { return untyped __lua__('N_0x0811381ef5062fec')(p0); }
    @:pure static inline function N_0x0923dbf87dff735e(x: Int, y: Int, z: Int): Void { return untyped __lua__('N_0x0923dbf87dff735e')(x, y, z); }
    @:pure static inline function N_0x098760c7461724cd(): Void { return untyped __lua__('N_0x098760c7461724cd')(); }
    @:pure static inline function N_0x098ab65b9ed9a9ec(p1: Int, p2: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x098ab65b9ed9a9ec')(p1, p2); }
    @:pure static inline function N_0x09c0403ed9a751c2(p0: Int): Int { return untyped __lua__('N_0x09c0403ed9a751c2')(p0); }
    @:pure static inline function N_0x0a123435a26c36cd(): Void { return untyped __lua__('N_0x0a123435a26c36cd')(); }
    @:pure static inline function N_0x0a436b8643716d14(): Void { return untyped __lua__('N_0x0a436b8643716d14')(); }
    @:pure static inline function N_0x0a46af8a78dc5e0a(): Void { return untyped __lua__('N_0x0a46af8a78dc5e0a')(); }
    @:pure static inline function N_0x0a60017f841a54f2(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0x0a60017f841a54f2')(p0, p1, p2, p3); }
    @:pure static inline function N_0x0a6a279f3aa4fd70(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x0a6a279f3aa4fd70')(vehicle, p1); }
    @:pure static inline function N_0x0a6d923dffc9bd89(): Int { return untyped __lua__('N_0x0a6d923dffc9bd89')(); }
    @:pure static inline function N_0x0a9f2a468b328e74(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0x0a9f2a468b328e74')(p0, p1, p2, p3); }
    @:pure static inline function N_0x0abc54de641dc0fc(p0: Int): Int { return untyped __lua__('N_0x0abc54de641dc0fc')(p0); }
    @:pure static inline function N_0x0ad9710cee2f590f(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Int { return untyped __lua__('N_0x0ad9710cee2f590f')(p0, p1, p2, p3, p4, p5, p6); }
    @:pure static inline function N_0x0ad9e8f87ff7c16f(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x0ad9e8f87ff7c16f')(p0, p1); }
    @:pure static inline function N_0x0ae1f1653b554ab9(p0: Int): Int { return untyped __lua__('N_0x0ae1f1653b554ab9')(p0); }
    @:pure static inline function N_0x0ae73d8df3a762b2(p0: Bool): Void { return untyped __lua__('N_0x0ae73d8df3a762b2')(p0); }
    
    /**
    * Appear to have something to do with the clipping at close range.
    */
    @:pure static inline function N_0x0af7b437918103b3(p0: Int): Void { return untyped __lua__('N_0x0af7b437918103b3')(p0); }
    
    /**
    * calling this each frame, it stops the player from receiving a weapon via the weapon wheel.
    */
    @:pure static inline function N_0x0afc4af510774b47(): Void { return untyped __lua__('N_0x0afc4af510774b47')(); }
    @:pure static inline function N_0x0afce529f69b21ff(): Int { return untyped __lua__('N_0x0afce529f69b21ff')(); }
    @:pure static inline function N_0x0b203b4afde53a4f(p2: Bool): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x0b203b4afde53a4f')(p2); }
    @:pure static inline function N_0x0b40ed49d7d6ff84(): Void { return untyped __lua__('N_0x0b40ed49d7d6ff84')(); }
    @:pure static inline function N_0x0b568201dd99f0eb(p0: Bool): Void { return untyped __lua__('N_0x0b568201dd99f0eb')(p0); }
    @:pure static inline function N_0x0b919e1fb47cc4e0(p0: Int): Void { return untyped __lua__('N_0x0b919e1fb47cc4e0')(p0); }
    @:pure static inline function N_0x0bc3144deb678666(modelHash: EitherType<String, Int>): Int { return untyped __lua__('N_0x0bc3144deb678666')(modelHash); }
    @:pure static inline function N_0x0bca1d2c47b0d269(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0x0bca1d2c47b0d269')(p0, p1, p2); }
    @:pure static inline function N_0x0bf3b3bd47d79c08(p0: Int, p1: Int): Void { return untyped __lua__('N_0x0bf3b3bd47d79c08')(p0, p1); }
    @:pure static inline function N_0x0c0c4e81e1ac60a0(): Int { return untyped __lua__('N_0x0c0c4e81e1ac60a0')(); }
    @:pure static inline function N_0x0c15b0e443b2349d(): Int { return untyped __lua__('N_0x0c15b0e443b2349d')(); }
    @:pure static inline function N_0x0c1f7d49c39d2289(): Int { return untyped __lua__('N_0x0c1f7d49c39d2289')(); }
    @:pure static inline function N_0x0c4bbf625ca98c4e(ped: Int, p1: Bool): Void { return untyped __lua__('N_0x0c4bbf625ca98c4e')(ped, p1); }
    @:pure static inline function N_0x0c5a80a9e096d529(p0: Int, p2: Int, p3: Int, p4: Int, p5: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x0c5a80a9e096d529')(p0, p2, p3, p4, p5); }
    
    /**
    * x360 Hash: 0x4AF0ADF5
    */
    @:pure static inline function N_0x0c978fda19692c2c(p0: Bool, p1: Bool): Void { return untyped __lua__('N_0x0c978fda19692c2c')(p0, p1); }
    @:pure static inline function N_0x0cd9ab83489430ea(p0: Bool): Int { return untyped __lua__('N_0x0cd9ab83489430ea')(p0); }
    @:pure static inline function N_0x0cdda42f9e360ca6(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x0cdda42f9e360ca6')(vehicle, p1); }
    @:pure static inline function N_0x0cf54f20de43879c(p0: Int): Void { return untyped __lua__('N_0x0cf54f20de43879c')(p0); }
    @:pure static inline function N_0x0d01d20616fc73fb(p0: Int, p1: Int): Void { return untyped __lua__('N_0x0d01d20616fc73fb')(p0, p1); }
    @:pure static inline function N_0x0d6ca79eeebd8ca3(): Int { return untyped __lua__('N_0x0d6ca79eeebd8ca3')(); }
    @:pure static inline function N_0x0d77a82dc2d0da59(): { a0: Int, a1: Int } { return untyped __lua__('N_0x0d77a82dc2d0da59')(); }
    @:pure static inline function N_0x0dbd5d7e3c5bec3b(): Int { return untyped __lua__('N_0x0dbd5d7e3c5bec3b')(); }
    @:pure static inline function N_0x0e4299c549f0d1f1(p0: Bool): Void { return untyped __lua__('N_0x0e4299c549f0d1f1')(p0); }
    @:pure static inline function N_0x0ede326d47cd0f3e(ped: Int, player: Int): Int { return untyped __lua__('N_0x0ede326d47cd0f3e')(ped, player); }
    @:pure static inline function N_0x0f3b4d4e43177236(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x0f3b4d4e43177236')(p0, p1); }
    @:pure static inline function N_0x0f70731baccfbb96(): Int { return untyped __lua__('N_0x0f70731baccfbb96')(); }
    @:pure static inline function N_0x0f73393bac7e6730(): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x0f73393bac7e6730')(); }
    @:pure static inline function N_0x0fb82563989cf4fb(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0x0fb82563989cf4fb')(p0, p1, p2, p3); }
    
    /**
    * SET_PLAYERS_*
    */
    @:pure static inline function N_0x0fde9dbfc0a6bc65(p0: Int): Void { return untyped __lua__('N_0x0fde9dbfc0a6bc65')(p0); }
    
    /**
    * p0 is always false in scripts.
    */
    @:pure static inline function N_0x0ff2862b61a58af9(p0: Bool): Void { return untyped __lua__('N_0x0ff2862b61a58af9')(p0); }
    @:pure static inline function N_0x1033371fc8e842a7(p0: Int): Int { return untyped __lua__('N_0x1033371fc8e842a7')(p0); }
    @:pure static inline function N_0x10655fab9915623d(p0: Int, p1: Int): Void { return untyped __lua__('N_0x10655fab9915623d')(p0, p1); }
    @:pure static inline function N_0x1072f115dab0717e(p0: Bool, p1: Bool): Void { return untyped __lua__('N_0x1072f115dab0717e')(p0, p1); }
    @:pure static inline function N_0x108be26959a9d9bb(p0: Bool): Void { return untyped __lua__('N_0x108be26959a9d9bb')(p0); }
    @:pure static inline function N_0x1093408b4b9d1146(p0: Int, p1: Int): Void { return untyped __lua__('N_0x1093408b4b9d1146')(p0, p1); }
    
    /**
    * Not sure what this function does, but it's related to the audio of the local player's vehicle (Considering the surrounding natives, it's probably radio related).
    */
    @:pure static inline function N_0x109697e2ffbac8a1(): Int { return untyped __lua__('N_0x109697e2ffbac8a1')(); }
    @:pure static inline function N_0x10bd227a753b0d84(): Int { return untyped __lua__('N_0x10bd227a753b0d84')(); }
    
    /**
    * In agency_heist3b.c4, its like this 90% of the time:
    * PED::_110F526AB784111F(ped, 0.099);
    * PED::SET_PED_ENVEFF_SCALE(ped, 1.0);
    * PED::_D69411AA0CEBF9E9(ped, 87, 81, 68);
    * PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);
    * and its like this 10% of the time:
    * PED::_110F526AB784111F(ped, 0.2);
    * PED::SET_PED_ENVEFF_SCALE(ped, 0.65);
    * PED::_D69411AA0CEBF9E9(ped, 74, 69, 60);
    * PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);
    */
    @:pure static inline function N_0x110f526ab784111f(ped: Int, p1: Int): Void { return untyped __lua__('N_0x110f526ab784111f')(ped, p1); }
    @:pure static inline function N_0x1121bfa1a1a522a8(): Int { return untyped __lua__('N_0x1121bfa1a1a522a8')(); }
    @:pure static inline function N_0x113e6e3e50e286b0(p0: Int): Void { return untyped __lua__('N_0x113e6e3e50e286b0')(p0); }
    @:pure static inline function N_0x1153fa02a659051c(): Void { return untyped __lua__('N_0x1153fa02a659051c')(); }
    @:pure static inline function N_0x116fb94dc4b79f17(p0: String): Void { return untyped __lua__('N_0x116fb94dc4b79f17')(p0); }
    @:pure static inline function N_0x1171a97a3d3981b6(p2: Int, p3: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x1171a97a3d3981b6')(p2, p3); }
    
    /**
    * SET_TEXT_??? - Used in golf and golf_mp
    */
    @:pure static inline function N_0x1185a8087587322c(p0: Bool): Void { return untyped __lua__('N_0x1185a8087587322c')(p0); }
    
    /**
    * Found in the scripts:
    * GAMEPLAY::_11B56FBBF7224868("CONTRAILS");
    */
    @:pure static inline function N_0x11b56fbbf7224868(p0: String): Void { return untyped __lua__('N_0x11b56fbbf7224868')(p0); }
    @:pure static inline function N_0x11d1e53a726891fe(p0: Int): Int { return untyped __lua__('N_0x11d1e53a726891fe')(p0); }
    @:pure static inline function N_0x11fa5d3479c7dd47(p0: Int): Void { return untyped __lua__('N_0x11fa5d3479c7dd47')(p0); }
    @:pure static inline function N_0x11ff1c80276097ed(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0x11ff1c80276097ed')(p0, p1, p2); }
    @:pure static inline function N_0x120364de2845daf8(p1: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x120364de2845daf8')(p1); }
    @:pure static inline function N_0x1216e0bfa72cc703(p0: Int, p1: Int): Void { return untyped __lua__('N_0x1216e0bfa72cc703')(p0, p1); }
    @:pure static inline function N_0x121fb4dddc2d5291(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0x121fb4dddc2d5291')(p0, p1, p2, p3); }
    
    /**
    * p0 is usually 0. sometimes 2. Not sure what this does.
    */
    @:pure static inline function N_0x12561fcbb62d5b9c(p0: Int): Void { return untyped __lua__('N_0x12561fcbb62d5b9c')(p0); }
    @:pure static inline function N_0x1280804f7cfd2d6c(p0: Int): Void { return untyped __lua__('N_0x1280804f7cfd2d6c')(p0); }
    @:pure static inline function N_0x129466ed55140f8d(ped: Int, toggle: Bool): Void { return untyped __lua__('N_0x129466ed55140f8d')(ped, toggle); }
    
    /**
    * Only used in the golf and golf_mp script
    */
    @:pure static inline function N_0x12995f2e53ffa601(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int, p10: Int, p11: Int): Void { return untyped __lua__('N_0x12995f2e53ffa601')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
    @:pure static inline function N_0x12b6281b6c6706c0(p0: Bool): Int { return untyped __lua__('N_0x12b6281b6c6706c0')(p0); }
    
    /**
    * Hardcoded to only work in multiplayer.
    */
    @:pure static inline function N_0x12ded8ca53d47ea5(p0: Int): Void { return untyped __lua__('N_0x12ded8ca53d47ea5')(p0); }
    @:pure static inline function N_0x1327e2fe9746baee(p0: Int): Int { return untyped __lua__('N_0x1327e2fe9746baee')(p0); }
    @:pure static inline function N_0x13518ff1c6b28938(p0: Int): Int { return untyped __lua__('N_0x13518ff1c6b28938')(p0); }
    
    /**
    * Returns some kind of banned state
    */
    @:pure static inline function N_0x1353f87e89946207(): Int { return untyped __lua__('N_0x1353f87e89946207')(); }
    @:pure static inline function N_0x135f9b7b7add2185(p0: Int): Int { return untyped __lua__('N_0x135f9b7b7add2185')(p0); }
    @:pure static inline function N_0x13b350b8ad0eee10(): Void { return untyped __lua__('N_0x13b350b8ad0eee10')(); }
    @:pure static inline function N_0x13c4b962653a5280(): Int { return untyped __lua__('N_0x13c4b962653a5280')(); }
    @:pure static inline function N_0x140e6a44870a11ce(): Void { return untyped __lua__('N_0x140e6a44870a11ce')(); }
    @:pure static inline function N_0x14590ddbedb1ec85(ped: Int): Int { return untyped __lua__('N_0x14590ddbedb1ec85')(ped); }
    @:pure static inline function N_0x14621bb1df14e2b2(): Void { return untyped __lua__('N_0x14621bb1df14e2b2')(); }
    @:pure static inline function N_0x14832bf2aba53fc5(): Int { return untyped __lua__('N_0x14832bf2aba53fc5')(); }
    @:pure static inline function N_0x14922ed3e38761f0(): Int { return untyped __lua__('N_0x14922ed3e38761f0')(); }
    @:pure static inline function N_0x149aee66f0cb3a99(p0: Int, p1: Int): Void { return untyped __lua__('N_0x149aee66f0cb3a99')(p0, p1); }
    @:pure static inline function N_0x14c9fdcc41f81f63(p0: Bool): Void { return untyped __lua__('N_0x14c9fdcc41f81f63')(p0); }
    @:pure static inline function N_0x14d29bb12d47f68c(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('N_0x14d29bb12d47f68c')(p0, p1, p2, p3, p4); }
    @:pure static inline function N_0x14e0b2d1ad1044e0(): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('N_0x14e0b2d1ad1044e0')(); }
    @:pure static inline function N_0x14fc5833464340a8(): Void { return untyped __lua__('N_0x14fc5833464340a8')(); }
    @:pure static inline function N_0x152d90e4c1b4738a(): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x152d90e4c1b4738a')(); }
    @:pure static inline function N_0x158ec424f35ec469(p1: Bool): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x158ec424f35ec469')(p1); }
    @:pure static inline function N_0x15e33297c3e8dc60(p0: Int): Void { return untyped __lua__('N_0x15e33297c3e8dc60')(p0); }
    @:pure static inline function N_0x15e69e2802c24b8d(p0: Int): Void { return untyped __lua__('N_0x15e69e2802c24b8d')(p0); }
    @:pure static inline function N_0x15ff52b809db2353(p0: Int): Int { return untyped __lua__('N_0x15ff52b809db2353')(p0); }
    @:pure static inline function N_0x1600fd8cf72ebc12(p0: Int): Void { return untyped __lua__('N_0x1600fd8cf72ebc12')(p0); }
    @:pure static inline function N_0x160aa1b32f6139b8(doorHash: EitherType<String, Int>): Int { return untyped __lua__('N_0x160aa1b32f6139b8')(doorHash); }
    @:pure static inline function N_0x1612c45f9e3e0d44(): Void { return untyped __lua__('N_0x1612c45f9e3e0d44')(); }
    @:pure static inline function N_0x162c23ca83ed0a62(p0: Int): Int { return untyped __lua__('N_0x162c23ca83ed0a62')(p0); }
    
    /**
    * gets some camera far clip
    */
    @:pure static inline function N_0x162f9d995753dc19(): Int { return untyped __lua__('N_0x162f9d995753dc19')(); }
    
    /**
    * only documented params
    * dont know what this does.... To Be Continued...
    */
    @:pure static inline function N_0x163f8b586bc95f2a(coords: Int, radius: Int, modelHash: EitherType<String, Int>, x: Int, y: Int, z: Int, p7: Int): { a0: Int, a1: Array<Int> } { return untyped __lua__('N_0x163f8b586bc95f2a')(coords, radius, modelHash, x, y, z, p7); }
    
    /**
    * 3 calls in the b617d scripts, removed duplicate.
    * AUDIO::_1654F24A88A8E3FE("RADIO_16_SILVERLAKE");
    * AUDIO::_1654F24A88A8E3FE("RADIO_01_CLASS_ROCK");
    */
    @:pure static inline function N_0x1654f24a88a8e3fe(radioStation: String): Void { return untyped __lua__('N_0x1654f24a88a8e3fe')(radioStation); }
    @:pure static inline function N_0x1670f8d05056f257(p0: Int): Int { return untyped __lua__('N_0x1670f8d05056f257')(p0); }
    @:pure static inline function N_0x16a304e6cb2bfab9(r: Int, g: Int, b: Int, a: Int): Void { return untyped __lua__('N_0x16a304e6cb2bfab9')(r, g, b, a); }
    
    /**
    * only documented to be continued...
    */
    @:pure static inline function N_0x16b5e274bde402f8(vehicle: Int, trailer: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int, p10: Int, p11: Int): Void { return untyped __lua__('N_0x16b5e274bde402f8')(vehicle, trailer, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
    @:pure static inline function N_0x16da8172459434aa(): Int { return untyped __lua__('N_0x16da8172459434aa')(); }
    @:pure static inline function N_0x16f46fb18c8009e4(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Int { return untyped __lua__('N_0x16f46fb18c8009e4')(p0, p1, p2, p3, p4); }
    @:pure static inline function N_0x170910093218c8b9(p0: Int): Int { return untyped __lua__('N_0x170910093218c8b9')(p0); }
    
    /**
    * Related to displaying cash on the HUD
    * Always called before UI::_SET_SINGLEPLAYER_HUD_CASH in decompiled scripts
    */
    @:pure static inline function N_0x170f541e1cadd1de(p0: Bool): Void { return untyped __lua__('N_0x170f541e1cadd1de')(p0); }
    @:pure static inline function N_0x171df6a0c07fb3dc(p0: Int, p1: Int): Int { return untyped __lua__('N_0x171df6a0c07fb3dc')(p0, p1); }
    @:pure static inline function N_0x172f75b6ee2233ba(): Int { return untyped __lua__('N_0x172f75b6ee2233ba')(); }
    @:pure static inline function N_0x17440aa15d1d3739(): Void { return untyped __lua__('N_0x17440aa15d1d3739')(); }
    @:pure static inline function N_0x1761dc5d8471cbaa(p0: Int, player: Int, p2: Int): Int { return untyped __lua__('N_0x1761dc5d8471cbaa')(p0, player, p2); }
    @:pure static inline function N_0x17ad8c9706bdd88a(p0: Int): Void { return untyped __lua__('N_0x17ad8c9706bdd88a')(p0); }
    @:pure static inline function N_0x17df68d720aa77f8(p0: Int): Int { return untyped __lua__('N_0x17df68d720aa77f8')(p0); }
    @:pure static inline function N_0x17e0198b3882c2cb(): Void { return untyped __lua__('N_0x17e0198b3882c2cb')(); }
    @:pure static inline function N_0x17fca7199a530203(): Int { return untyped __lua__('N_0x17fca7199a530203')(); }
    @:pure static inline function N_0x182f266c2d9e2beb(vehicle: Int, p1: Int): Void { return untyped __lua__('N_0x182f266c2d9e2beb')(vehicle, p1); }
    @:pure static inline function N_0x18eb48cfc41f2ea0(p0: Int, p1: Int): Void { return untyped __lua__('N_0x18eb48cfc41f2ea0')(p0, p1); }
    @:pure static inline function N_0x190428512b240692(p0: Int, p1: Bool, p2: Bool, p3: Bool, p4: Bool): Void { return untyped __lua__('N_0x190428512b240692')(p0, p1, p2, p3, p4); }
    @:pure static inline function N_0x192547247864dfdd(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x192547247864dfdd')(vehicle, p1); }
    @:pure static inline function N_0x19853b5b17d77bca(p0: Int, p1: Int): Int { return untyped __lua__('N_0x19853b5b17d77bca')(p0, p1); }
    @:pure static inline function N_0x1989c6e6f67e76a8(): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('N_0x1989c6e6f67e76a8')(); }
    @:pure static inline function N_0x19af7ed9b9d23058(): Void { return untyped __lua__('N_0x19af7ed9b9d23058')(); }
    @:pure static inline function N_0x19bfed045c647c49(p0: Int): Int { return untyped __lua__('N_0x19bfed045c647c49')(p0); }
    
    /**
    * Seems to return the current type of view
    * example: // checks if you're currently in first person
    * if ((CAM::_EE778F8C7E1142E2(CAM::_19CAFA3C87F7C2FF()) == 4) &amp;&amp; (!__463_$28ED382849B17AFC())) {
    * UI::_FDEC055AB549E328();
    * UI::_SET_NOTIFICATION_TEXT_ENTRY("REC_FEED_WAR");
    * l_CE[0 -- [[1]] ] = UI::_DRAW_NOTIFICATION(0, 1);
    * }
    */
    @:pure static inline function N_0x19cafa3c87f7c2ff(): Int { return untyped __lua__('N_0x19cafa3c87f7c2ff')(); }
    
    /**
    * SET_ENTITY_*
    */
    @:pure static inline function N_0x1a092bb0c3808b96(entity: Int, p1: Bool): Void { return untyped __lua__('N_0x1a092bb0c3808b96')(entity, p1); }
    
    /**
    * Only appears in lamar1 script.
    */
    @:pure static inline function N_0x1a330d297aac6bc1(ped: Int, p1: Int): Void { return untyped __lua__('N_0x1a330d297aac6bc1')(ped, p1); }
    @:pure static inline function N_0x1a78ad3d8240536f(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x1a78ad3d8240536f')(vehicle, p1); }
    @:pure static inline function N_0x1a8e2c8b9cf4549c(): { a0: Int, a1: Int } { return untyped __lua__('N_0x1a8e2c8b9cf4549c')(); }
    @:pure static inline function N_0x1aa8a837d2169d94(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x1aa8a837d2169d94')(vehicle, p1); }
    @:pure static inline function N_0x1accfba3d8dab2ee(p0: Int, p1: Int): Int { return untyped __lua__('N_0x1accfba3d8dab2ee')(p0, p1); }
    
    /**
    * unk_0xCEA55F4C(uVar3, "AM_ROLLERCOASTER", -1))
    * Probably has to do with seeing if they are riding the roller coaster or ferris wheel
    * NETWORK_IS_PLAYER_???
    */
    @:pure static inline function N_0x1ad5b71586b94820(p0: Int, p2: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x1ad5b71586b94820')(p0, p2); }
    @:pure static inline function N_0x1b0b4aeed5b9b41c(p0: Int): Void { return untyped __lua__('N_0x1b0b4aeed5b9b41c')(p0); }
    @:pure static inline function N_0x1b2366c3f2a5c8df(): Int { return untyped __lua__('N_0x1b2366c3f2a5c8df')(); }
    
    /**
    * Console Hash: 0x76A9FEB6
    */
    @:pure static inline function N_0x1b857666604b1a74(p0: Bool): Void { return untyped __lua__('N_0x1b857666604b1a74')(p0); }
    @:pure static inline function N_0x1bb299305c3e8c13(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0x1bb299305c3e8c13')(p0, p1, p2, p3); }
    @:pure static inline function N_0x1bbc135a4d25edde(p0: Bool): Void { return untyped __lua__('N_0x1bbc135a4d25edde')(p0); }
    @:pure static inline function N_0x1c073274e065c6d2(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x1c073274e065c6d2')(p0, p1); }
    
    /**
    * p0 = int (?)
    */
    @:pure static inline function N_0x1c186837d0619335(p0: Int): Int { return untyped __lua__('N_0x1c186837d0619335')(p0); }
    
    /**
    * NETWORK_CAN_R??? or NETWORK_CAN_S???
    */
    @:pure static inline function N_0x1c2473301b1c66ba(): Int { return untyped __lua__('N_0x1c2473301b1c66ba')(); }
    @:pure static inline function N_0x1c4fc5752bcd8e48(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int, p10: Int, p11: Int, p12: Int): Void { return untyped __lua__('N_0x1c4fc5752bcd8e48')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12); }
    @:pure static inline function N_0x1cae5d2e3f9a07f0(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Void { return untyped __lua__('N_0x1cae5d2e3f9a07f0')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function N_0x1cba05ae7bd7ee05(p0: Int): Void { return untyped __lua__('N_0x1cba05ae7bd7ee05')(p0); }
    
    /**
    * what does this do?
    * you'RE mother
    */
    @:pure static inline function N_0x1cf38d529d7441d9(vehicle: Int, toggle: Bool): Void { return untyped __lua__('N_0x1cf38d529d7441d9')(vehicle, toggle); }
    @:pure static inline function N_0x1d4446a62d35b0d0(p0: Int, p1: Int): Int { return untyped __lua__('N_0x1d4446a62d35b0d0')(p0, p1); }
    @:pure static inline function N_0x1d4dc17c38feaff0(): Int { return untyped __lua__('N_0x1d4dc17c38feaff0')(); }
    @:pure static inline function N_0x1d610eb0fea716d9(p0: Int): Int { return untyped __lua__('N_0x1d610eb0fea716d9')(p0); }
    
    /**
    * Related to Hao races.
    */
    @:pure static inline function N_0x1d97d1e3a70a649f(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x1d97d1e3a70a649f')(vehicle, p1); }
    @:pure static inline function N_0x1dd2139a9a20dce8(): Int { return untyped __lua__('N_0x1dd2139a9a20dce8')(); }
    @:pure static inline function N_0x1de0f5f50d723caa(): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('N_0x1de0f5f50d723caa')(); }
    @:pure static inline function N_0x1e77fa7a62ee6c4c(p0: Int): Int { return untyped __lua__('N_0x1e77fa7a62ee6c4c')(p0); }
    @:pure static inline function N_0x1e9057a74fd73e23(): Void { return untyped __lua__('N_0x1e9057a74fd73e23')(); }
    @:pure static inline function N_0x1eac5f91bcbc5073(p0: Bool): Void { return untyped __lua__('N_0x1eac5f91bcbc5073')(p0); }
    
    /**
    * Unsure about the use of this native but here's an example:
    * void sub_8709() {
    * GAMEPLAY::_1EAE0A6E978894A2(0, 1);
    * GAMEPLAY::_1EAE0A6E978894A2(1, 1);
    * GAMEPLAY::_1EAE0A6E978894A2(2, 1);
    * GAMEPLAY::_1EAE0A6E978894A2(3, 1);
    * GAMEPLAY::_1EAE0A6E978894A2(4, 1);
    * GAMEPLAY::_1EAE0A6E978894A2(5, 1);
    * GAMEPLAY::_1EAE0A6E978894A2(6, 1);
    * GAMEPLAY::_1EAE0A6E978894A2(7, 1);
    * GAMEPLAY::_1EAE0A6E978894A2(8, 1);
    * }
    * So it appears that p0 ranges from 0 to 8.
    * ENABLE_DISPATCH_SERVICE, seems to have a similar layout.
    */
    @:pure static inline function N_0x1eae0a6e978894a2(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x1eae0a6e978894a2')(p0, p1); }
    @:pure static inline function N_0x1eae6dd17b7a5efa(p0: Int): Void { return untyped __lua__('N_0x1eae6dd17b7a5efa')(p0); }
    @:pure static inline function N_0x1ee7d8df4425f053(p0: Int): Void { return untyped __lua__('N_0x1ee7d8df4425f053')(p0); }
    @:pure static inline function N_0x1f1e9682483697c7(p0: Int, p1: Int): Int { return untyped __lua__('N_0x1f1e9682483697c7')(p0, p1); }
    @:pure static inline function N_0x1f2300cb7fa7b7f6(): Int { return untyped __lua__('N_0x1f2300cb7fa7b7f6')(); }
    @:pure static inline function N_0x1f2e4e06dea8992b(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x1f2e4e06dea8992b')(p0, p1); }
    @:pure static inline function N_0x1f3f018bc3afa77c(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int): Int { return untyped __lua__('N_0x1f3f018bc3afa77c')(p0, p1, p2, p3, p4, p5, p6, p7, p8); }
    @:pure static inline function N_0x1f9fb66f3a3842d2(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x1f9fb66f3a3842d2')(vehicle, p1); }
    @:pure static inline function N_0x1fc289a0c3ff470f(p0: Bool): Int { return untyped __lua__('N_0x1fc289a0c3ff470f')(p0); }
    @:pure static inline function N_0x1ff6bf9a63e5757f(): Void { return untyped __lua__('N_0x1ff6bf9a63e5757f')(); }
    @:pure static inline function N_0x2016c603d6b8987c(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x2016c603d6b8987c')(p0, p1); }
    @:pure static inline function N_0x206bc5dc9d1ac70a(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x206bc5dc9d1ac70a')(vehicle, p1); }
    @:pure static inline function N_0x20746f7b1032a3c7(p0: Bool, p1: Bool, p2: Bool, p3: Bool): Void { return untyped __lua__('N_0x20746f7b1032a3c7')(p0, p1, p2, p3); }
    
    /**
    * -This function appears to be deprecated/ unused. Tracing the call internally leads to a _nullsub -
    * first one seems to be a string of a mission name, second one seems to be a bool/toggle
    * p1 was always 0.
    */
    @:pure static inline function N_0x208784099002bc30(missionNameLabel: String, p1: Int): Void { return untyped __lua__('N_0x208784099002bc30')(missionNameLabel, p1); }
    @:pure static inline function N_0x20c6c7e4eb082a7f(p0: Bool): Void { return untyped __lua__('N_0x20c6c7e4eb082a7f')(p0); }
    @:pure static inline function N_0x20fe7fdfeead38c0(): Void { return untyped __lua__('N_0x20fe7fdfeead38c0')(); }
    @:pure static inline function N_0x2107a3773771186d(): Int { return untyped __lua__('N_0x2107a3773771186d')(); }
    @:pure static inline function N_0x21115bcd6e44656a(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x21115bcd6e44656a')(p0, p1); }
    @:pure static inline function N_0x211c4ef450086857(): Void { return untyped __lua__('N_0x211c4ef450086857')(); }
    
    /**
    * example
    * if (UI::IS_HELP_MESSAGE_BEING_DISPLAYED()&amp;&amp;(!UI::_214CD562A939246A())) {
    * return 0;
    * }
    */
    @:pure static inline function N_0x214cd562a939246a(): Int { return untyped __lua__('N_0x214cd562a939246a')(); }
    
    /**
    * Only called once inside main_persitant with the parameters, 0
    */
    @:pure static inline function N_0x21973bbf8d17edfa(p0: Int, p1: Int): Void { return untyped __lua__('N_0x21973bbf8d17edfa')(p0, p1); }
    @:pure static inline function N_0x21c235bc64831e5a(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Bool): Array<Int> { return untyped __lua__('N_0x21c235bc64831e5a')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); }
    @:pure static inline function N_0x21d04d7bc538c146(p0: Int): Int { return untyped __lua__('N_0x21d04d7bc538c146')(p0); }
    
    /**
    * From b617 scripts:
    * CAM::_21E253A7F8DA5DFB("DINGHY");
    * CAM::_21E253A7F8DA5DFB("ISSI2");
    * CAM::_21E253A7F8DA5DFB("SPEEDO");
    */
    @:pure static inline function N_0x21e253a7f8da5dfb(vehicleName: String): Void { return untyped __lua__('N_0x21e253a7f8da5dfb')(vehicleName); }
    
    /**
    * SET_TV_???
    */
    @:pure static inline function N_0x2201c576facaebe8(p0: Int, p1: String, p2: Int): Void { return untyped __lua__('N_0x2201c576facaebe8')(p0, p1, p2); }
    
    /**
    * Function.Call(Hash._0x2208438012482A1A, ped, 0, 0);
    * This makes the ped have faster animations
    */
    @:pure static inline function N_0x2208438012482a1a(ped: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('N_0x2208438012482a1a')(ped, p1, p2); }
    @:pure static inline function N_0x225798743970412b(p0: Int): Int { return untyped __lua__('N_0x225798743970412b')(p0); }
    
    /**
    * Probably the opposite of  0x80E4A6EDDB0BE8D9 / LOAD_ALL_PATH_NODES
    */
    @:pure static inline function N_0x228e5c6ad4d74bfd(p0: Bool): Void { return untyped __lua__('N_0x228e5c6ad4d74bfd')(p0); }
    @:pure static inline function N_0x22a249a53034450a(p0: Bool): Void { return untyped __lua__('N_0x22a249a53034450a')(p0); }
    @:pure static inline function N_0x22da66936e0fff37(p0: Int): Int { return untyped __lua__('N_0x22da66936e0fff37')(p0); }
    @:pure static inline function N_0x2302c0264ea58d31(): Void { return untyped __lua__('N_0x2302c0264ea58d31')(); }
    @:pure static inline function N_0x2311dd7159f00582(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x2311dd7159f00582')(vehicle, p1); }
    @:pure static inline function N_0x23227df0b2115469(): Void { return untyped __lua__('N_0x23227df0b2115469')(); }
    @:pure static inline function N_0x23789e777d14ce44(): Int { return untyped __lua__('N_0x23789e777d14ce44')(); }
    @:pure static inline function N_0x237d5336a9a54108(p0: Int): Int { return untyped __lua__('N_0x237d5336a9a54108')(p0); }
    @:pure static inline function N_0x23b59d8912f94246(): Void { return untyped __lua__('N_0x23b59d8912f94246')(); }
    @:pure static inline function N_0x23ba6b0c2ad7b0d3(p0: Bool): Void { return untyped __lua__('N_0x23ba6b0c2ad7b0d3')(p0); }
    @:pure static inline function N_0x23f09eadc01449d6(p0: Bool): Int { return untyped __lua__('N_0x23f09eadc01449d6')(p0); }
    
    /**
    * Console Hash: 0x0AF83036
    * Only used once in scripts, in maintransition.
    * maintransition.c4, line ~82432:
    * if (PED::_7350823473013C02(PLAYER::PLAYER_PED_ID()) &amp;&amp; (DECORATOR::_241FCA5B1AA14F75() == 0)) {
    * g_2542A5 = a_1; // 'g_2542A5' used in 'building_controller.ysc' for IPL stuff?
    * return 1;
    * }
    * Likely used solely for the players ped. The function it's in seems to only be used for initialization/quitting. Called among natives to discard scaleforms, disable frontend, fading in/out, etc. Neighboring strings to some calls include "HUD_JOINING", "HUD_QUITTING".
    */
    @:pure static inline function N_0x241fca5b1aa14f75(): Int { return untyped __lua__('N_0x241fca5b1aa14f75')(); }
    
    /**
    * p0 is int or bool
    */
    @:pure static inline function N_0x2432784aca090da4(p0: Int): Int { return untyped __lua__('N_0x2432784aca090da4')(p0); }
    @:pure static inline function N_0x24409fc4c55cb22d(p0: Int): Int { return untyped __lua__('N_0x24409fc4c55cb22d')(p0); }
    @:pure static inline function N_0x247acbc4abbc9d1c(p0: Bool): Void { return untyped __lua__('N_0x247acbc4abbc9d1c')(p0); }
    @:pure static inline function N_0x2485d34e50a22e84(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0x2485d34e50a22e84')(p0, p1, p2); }
    @:pure static inline function N_0x24a49beaf468dc90(p0: Int, p2: Int, p3: Int, p4: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x24a49beaf468dc90')(p0, p2, p3, p4); }
    @:pure static inline function N_0x24e4e51fc16305f9(): Int { return untyped __lua__('N_0x24e4e51fc16305f9')(); }
    @:pure static inline function N_0x25361a96e0f7e419(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0x25361a96e0f7e419')(p0, p1, p2, p3); }
    @:pure static inline function N_0x25367de49d64cf16(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x25367de49d64cf16')(vehicle, p1); }
    @:pure static inline function N_0x25615540d894b814(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x25615540d894b814')(p0, p1); }
    @:pure static inline function N_0x2587a48bc88dfadf(p0: Bool): Void { return untyped __lua__('N_0x2587a48bc88dfadf')(p0); }
    @:pure static inline function N_0x25b99872d588a101(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Int { return untyped __lua__('N_0x25b99872d588a101')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function N_0x25d990f8e0e3f13c(): Void { return untyped __lua__('N_0x25d990f8e0e3f13c')(); }
    @:pure static inline function N_0x25f87b30c382fca7(): Void { return untyped __lua__('N_0x25f87b30c382fca7')(); }
    @:pure static inline function N_0x25fc3e33a31ad0c9(p0: Bool): Void { return untyped __lua__('N_0x25fc3e33a31ad0c9')(p0); }
    @:pure static inline function N_0x260ee4fdbdf4db01(p0: Int): Int { return untyped __lua__('N_0x260ee4fdbdf4db01')(p0); }
    @:pure static inline function N_0x261e97ad7bcf3d40(p0: Bool): Void { return untyped __lua__('N_0x261e97ad7bcf3d40')(p0); }
    @:pure static inline function N_0x2632482fd6b9ab87(): Void { return untyped __lua__('N_0x2632482fd6b9ab87')(); }
    @:pure static inline function N_0x265635150fb0d82e(): Void { return untyped __lua__('N_0x265635150fb0d82e')(); }
    @:pure static inline function N_0x267c78c60e806b9a(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x267c78c60e806b9a')(p0, p1); }
    @:pure static inline function N_0x26903d9cd1175f2c(p0: Int, p1: Int): Int { return untyped __lua__('N_0x26903d9cd1175f2c')(p0, p1); }
    @:pure static inline function N_0x26af0e8e30bd2a2c(ped: Int): Int { return untyped __lua__('N_0x26af0e8e30bd2a2c')(ped); }
    
    /**
    * STATS::0x343B27E2(0);
    * STATS::0x343B27E2(1);
    * STATS::0x343B27E2(2);
    * STATS::0x343B27E2(3);
    * STATS::0x343B27E2(4);
    * STATS::0x343B27E2(5);
    * STATS::0x343B27E2(6);
    * STATS::0x343B27E2(7);
    * Identical in ingamehud &amp; maintransition.
    */
    @:pure static inline function N_0x26d7399b9587fe89(p0: Int): Void { return untyped __lua__('N_0x26d7399b9587fe89')(p0); }
    @:pure static inline function N_0x26f07dd83a5f7f98(): Int { return untyped __lua__('N_0x26f07dd83a5f7f98')(); }
    @:pure static inline function N_0x2708fc083123f9ff(): Void { return untyped __lua__('N_0x2708fc083123f9ff')(); }
    @:pure static inline function N_0x271017b9ba825366(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x271017b9ba825366')(p0, p1); }
    @:pure static inline function N_0x271401846bd26e92(p0: Bool, p1: Bool): Void { return untyped __lua__('N_0x271401846bd26e92')(p0, p1); }
    @:pure static inline function N_0x271c9d3aca5d6409(rope: Int): Int { return untyped __lua__('N_0x271c9d3aca5d6409')(rope); }
    @:pure static inline function N_0x2735233a786b1bef(ped: Int, p1: Int): Void { return untyped __lua__('N_0x2735233a786b1bef')(ped, p1); }
    @:pure static inline function N_0x274a1519dfc1094f(p1: Bool): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x274a1519dfc1094f')(p1); }
    @:pure static inline function N_0x279d50de5652d935(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x279d50de5652d935')(p0, p1); }
    @:pure static inline function N_0x27b926779deb502d(vehicle: Int, p1: Bool): Int { return untyped __lua__('N_0x27b926779deb502d')(vehicle, p1); }
    @:pure static inline function N_0x27cb772218215325(): Void { return untyped __lua__('N_0x27cb772218215325')(); }
    @:pure static inline function N_0x27cfb1b1e078cb2d(): Void { return untyped __lua__('N_0x27cfb1b1e078cb2d')(); }
    @:pure static inline function N_0x27e32866e9a5c416(p0: Int): Void { return untyped __lua__('N_0x27e32866e9a5c416')(p0); }
    @:pure static inline function N_0x27feb5254759cde3(textureDict: String, p1: Bool): Int { return untyped __lua__('N_0x27feb5254759cde3')(textureDict, p1); }
    @:pure static inline function N_0x2801d0012266df07(p0: Int): Void { return untyped __lua__('N_0x2801d0012266df07')(p0); }
    @:pure static inline function N_0x280c7e3ac7f56e90(p0: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x280c7e3ac7f56e90')(p0); }
    @:pure static inline function N_0x283b6062a2c01e9b(): Void { return untyped __lua__('N_0x283b6062a2c01e9b')(); }
    @:pure static inline function N_0x287f1f75d2803595(p0: Int, p1: Int): Int { return untyped __lua__('N_0x287f1f75d2803595')(p0, p1); }
    @:pure static inline function N_0x288df530c92dad6f(p0: Int, p1: Int): Void { return untyped __lua__('N_0x288df530c92dad6f')(p0, p1); }
    @:pure static inline function N_0x293220da1b46cebc(p0: Int, p1: Int, p2: Bool): Void { return untyped __lua__('N_0x293220da1b46cebc')(p0, p1, p2); }
    @:pure static inline function N_0x299ef3c576773506(): Int { return untyped __lua__('N_0x299ef3c576773506')(); }
    @:pure static inline function N_0x29c24bfbed8ab8fb(p0: Int, p1: Int): Int { return untyped __lua__('N_0x29c24bfbed8ab8fb')(p0, p1); }
    @:pure static inline function N_0x2a2173e46daecd12(p0: Int, p1: Int): Void { return untyped __lua__('N_0x2a2173e46daecd12')(p0, p1); }
    @:pure static inline function N_0x2a25adc48f87841f(): Int { return untyped __lua__('N_0x2a25adc48f87841f')(); }
    @:pure static inline function N_0x2a2a52824db96700(p0: Int): Void { return untyped __lua__('N_0x2a2a52824db96700')(p0); }
    @:pure static inline function N_0x2a56c06ebef2b0d9(cutsceneEntName: String, ped: Int, modelHash: EitherType<String, Int>): Void { return untyped __lua__('N_0x2a56c06ebef2b0d9')(cutsceneEntName, ped, modelHash); }
    @:pure static inline function N_0x2a7776c709904ab0(p0: Int): Int { return untyped __lua__('N_0x2a7776c709904ab0')(p0); }
    
    /**
    * 2 matches across 2 scripts. Only showed in appcamera &amp; appmedia. Both were 0.
    */
    @:pure static inline function N_0x2a893980e96b659a(p0: Int): Int { return untyped __lua__('N_0x2a893980e96b659a')(p0); }
    
    /**
    * VEHICLE::_2A8F319B392E7B3F(vehicle, 0.5);
    */
    @:pure static inline function N_0x2a8f319b392e7b3f(vehicle: Int, p1: Int): Void { return untyped __lua__('N_0x2a8f319b392e7b3f')(vehicle, p1); }
    
    /**
    * if (ENTITY::DOES_ENTITY_EXIST(l_228)) {
    * CAM::_2AED6301F67007D5(l_228);
    */
    @:pure static inline function N_0x2aed6301f67007d5(entity: Int): Void { return untyped __lua__('N_0x2aed6301f67007d5')(entity); }
    @:pure static inline function N_0x2b3334bca57cd799(p0: Int): Void { return untyped __lua__('N_0x2b3334bca57cd799')(p0); }
    @:pure static inline function N_0x2b51edbefc301339(p0: Int, p1: String): Int { return untyped __lua__('N_0x2b51edbefc301339')(p0, p1); }
    @:pure static inline function N_0x2b5aa717a181fb4c(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x2b5aa717a181fb4c')(p0, p1); }
    @:pure static inline function N_0x2b5e102e4a42f2bf(): Int { return untyped __lua__('N_0x2b5e102e4a42f2bf')(); }
    @:pure static inline function N_0x2b626a0150e4d449(): Int { return untyped __lua__('N_0x2b626a0150e4d449')(); }
    @:pure static inline function N_0x2b6747faa9db9d6b(vehicle: Int, p1: Bool): Int { return untyped __lua__('N_0x2b6747faa9db9d6b')(vehicle, p1); }
    @:pure static inline function N_0x2b694afcf64e6994(ped: Int, p1: Bool): Void { return untyped __lua__('N_0x2b694afcf64e6994')(ped, p1); }
    @:pure static inline function N_0x2b69f5074c894811(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0x2b69f5074c894811')(p0, p1, p2, p3); }
    @:pure static inline function N_0x2b949a1e6aec8f6a(): Int { return untyped __lua__('N_0x2b949a1e6aec8f6a')(); }
    @:pure static inline function N_0x2be4bc731d039d5a(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x2be4bc731d039d5a')(p0, p1); }
    @:pure static inline function N_0x2bf66d2e7414f686(): Int { return untyped __lua__('N_0x2bf66d2e7414f686')(); }
    @:pure static inline function N_0x2bf72ad5b41aa739(): Void { return untyped __lua__('N_0x2bf72ad5b41aa739')(); }
    
    /**
    * SET_ENTITY_*
    */
    @:pure static inline function N_0x2c2e3dc128f44309(entity: Int, p1: Bool): Void { return untyped __lua__('N_0x2c2e3dc128f44309')(entity, p1); }
    @:pure static inline function N_0x2c328af17210f009(p0: Int): Void { return untyped __lua__('N_0x2c328af17210f009')(p0); }
    @:pure static inline function N_0x2c42340f916c5930(p0: Int): Int { return untyped __lua__('N_0x2c42340f916c5930')(p0); }
    @:pure static inline function N_0x2c4a1590abf43e8b(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x2c4a1590abf43e8b')(vehicle, p1); }
    @:pure static inline function N_0x2c8cbfe1ea5fc631(p0: Int): Int { return untyped __lua__('N_0x2c8cbfe1ea5fc631')(p0); }
    @:pure static inline function N_0x2c96cdb04fca358e(p0: Int): Void { return untyped __lua__('N_0x2c96cdb04fca358e')(p0); }
    @:pure static inline function N_0x2cc848a861d01493(): Int { return untyped __lua__('N_0x2cc848a861d01493')(); }
    @:pure static inline function N_0x2ce544c68fb812a0(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Bool): Int { return untyped __lua__('N_0x2ce544c68fb812a0')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function N_0x2d4259f1feb81da9(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0x2d4259f1feb81da9')(p0, p1, p2, p3); }
    @:pure static inline function N_0x2d5dc831176d0114(p0: Int): Int { return untyped __lua__('N_0x2d5dc831176d0114')(p0); }
    
    /**
    * Needs a bit more research, but it seems to return an int.
    * "agency_heist3b.ysc", line 71836:
    * if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, 201) || CONTROLS::IS_CONTROL_JUST_PRESSED(2, 237)) {
    * GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION(l_46, "SET_INPUT_EVENT_SELECT");
    * l_45 = GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION();
    * }
    * if (GRAPHICS::_0x768FF8961BA904D6(l_45)) {
    * v_13 = GRAPHICS::_0x2DE7EFA66B906036(l_45);
    * if (v_13 == 6) {
    * sub_73269(a_0);
    * }
    * }
    */
    @:pure static inline function N_0x2de7efa66b906036(funcData: Int): Int { return untyped __lua__('N_0x2de7efa66b906036')(funcData); }
    @:pure static inline function N_0x2df9038c90ad5264(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, interiorFlags: Int, scale: Int, duration: Int): Void { return untyped __lua__('N_0x2df9038c90ad5264')(p0, p1, p2, p3, p4, interiorFlags, scale, duration); }
    @:pure static inline function N_0x2e0bf682cc778d49(p0: Int): Int { return untyped __lua__('N_0x2e0bf682cc778d49')(p0); }
    @:pure static inline function N_0x2e22fefa0100275e(): Int { return untyped __lua__('N_0x2e22fefa0100275e')(); }
    @:pure static inline function N_0x2e65248609523599(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0x2e65248609523599')(p0, p1, p2); }
    @:pure static inline function N_0x2e89990ddff670c3(p0: Int, p1: Int): Int { return untyped __lua__('N_0x2e89990ddff670c3')(p0, p1); }
    @:pure static inline function N_0x2eac52b4019e2782(): Int { return untyped __lua__('N_0x2eac52b4019e2782')(); }
    @:pure static inline function N_0x2ed61456317b8178(): Void { return untyped __lua__('N_0x2ed61456317b8178')(); }
    
    /**
    * Appears to return whether the player is using the pause menu store. Can't be sure though.
    */
    @:pure static inline function N_0x2f057596f2bd0061(): Int { return untyped __lua__('N_0x2f057596f2bd0061')(); }
    
    /**
    * only documented. to be continued...
    */
    @:pure static inline function N_0x2f09f7976c512404(xCoord: Int, yCoord: Int, zCoord: Int, p3: Int): Int { return untyped __lua__('N_0x2f09f7976c512404')(xCoord, yCoord, zCoord, p3); }
    @:pure static inline function N_0x2f137b508de238f2(p0: Bool): Void { return untyped __lua__('N_0x2f137b508de238f2')(p0); }
    @:pure static inline function N_0x2f3c3d9f50681de4(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x2f3c3d9f50681de4')(p0, p1); }
    
    /**
    * Used with radios:
    * void sub_cf383(auto _a0) {
    * if ((a_0)==1) {
    * if (GAMEPLAY::IS_BIT_SET((g_240005._f1), 3)) {
    * PLAYER::_2F7CEB6520288061(0);
    * AUDIO::SET_AUDIO_FLAG("AllowRadioDuringSwitch", 0);
    * AUDIO::SET_MOBILE_PHONE_RADIO_STATE(0);
    * AUDIO::SET_AUDIO_FLAG("MobileRadioInGame", 0);
    * }
    * sub_cf3f6(1);
    * } else {
    * if (GAMEPLAY::IS_BIT_SET((g_240005._f1), 3)) {
    * PLAYER::_2F7CEB6520288061(1);
    * AUDIO::SET_AUDIO_FLAG("AllowRadioDuringSwitch", 1);
    * AUDIO::SET_MOBILE_PHONE_RADIO_STATE(1);
    * AUDIO::SET_AUDIO_FLAG("MobileRadioInGame", 1);
    * }
    * sub_cf3f6(0);
    * }
    * }
    * SET_PLAYER_S*
    */
    @:pure static inline function N_0x2f7ceb6520288061(p0: Bool): Void { return untyped __lua__('N_0x2f7ceb6520288061')(p0); }
    @:pure static inline function N_0x2f7f2b26dd3f18ee(p0: Int, p1: Int): Void { return untyped __lua__('N_0x2f7f2b26dd3f18ee')(p0, p1); }
    
    /**
    * NETWORK_IS_IN_???
    */
    @:pure static inline function N_0x2fc5650b0271cb57(): Int { return untyped __lua__('N_0x2fc5650b0271cb57')(); }
    @:pure static inline function N_0x3001bef2feca3680(): Int { return untyped __lua__('N_0x3001bef2feca3680')(); }
    @:pure static inline function N_0x302c91ab2d477f7e(): Void { return untyped __lua__('N_0x302c91ab2d477f7e')(); }
    @:pure static inline function N_0x3044240d2e0fa842(): Int { return untyped __lua__('N_0x3044240d2e0fa842')(); }
    @:pure static inline function N_0x3054f114121c21ea(p0: Int): Int { return untyped __lua__('N_0x3054f114121c21ea')(p0); }
    @:pure static inline function N_0x308f96458b7087cc(p1: Int, p2: Int, p3: Int, p5: Bool): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x308f96458b7087cc')(p1, p2, p3, p5); }
    @:pure static inline function N_0x30a6614c1f7799b8(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0x30a6614c1f7799b8')(p0, p1, p2); }
    
    /**
    * possibly   ENABLE_VEHICLE_FOREVER_HYDRAULICS
    */
    @:pure static inline function N_0x30d779de7c4f6dd3(p0: Int, p1: Int): Void { return untyped __lua__('N_0x30d779de7c4f6dd3')(p0, p1); }
    @:pure static inline function N_0x30ed88d5e0c56a37(p0: Int): Int { return untyped __lua__('N_0x30ed88d5e0c56a37')(p0); }
    @:pure static inline function N_0x31125fd509d9043f(p0: Int): Void { return untyped __lua__('N_0x31125fd509d9043f')(p0); }
    @:pure static inline function N_0x311438a071dd9b1a(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0x311438a071dd9b1a')(p0, p1, p2); }
    @:pure static inline function N_0x3117d84efa60f77b(p0: Int): Void { return untyped __lua__('N_0x3117d84efa60f77b')(p0); }
    
    /**
    * p8 seems to always be false.
    */
    @:pure static inline function N_0x312342e1a4874f3f(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Bool): Void { return untyped __lua__('N_0x312342e1a4874f3f')(p0, p1, p2, p3, p4, p5, p6, p7, p8); }
    @:pure static inline function N_0x3133b907d8b32053(p0: Int, p1: Int): Int { return untyped __lua__('N_0x3133b907d8b32053')(p0, p1); }
    @:pure static inline function N_0x31727907b2c43c55(p0: Int): Void { return untyped __lua__('N_0x31727907b2c43c55')(p0); }
    
    /**
    * From the decompiled scripts, called 61 times:
    * UI::_317EBA71D7543F52(&amp;v_13, &amp;v_13, &amp;v_3, &amp;v_3);
    */
    @:pure static inline function N_0x317eba71d7543f52(): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('N_0x317eba71d7543f52')(); }
    @:pure static inline function N_0x318516e02de3ece2(p0: Int): Void { return untyped __lua__('N_0x318516e02de3ece2')(p0); }
    @:pure static inline function N_0x3195f8dd0d531052(p0: Int, p1: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x3195f8dd0d531052')(p0, p1); }
    @:pure static inline function N_0x31f924b53eaddf65(p0: Bool): Void { return untyped __lua__('N_0x31f924b53eaddf65')(p0); }
    @:pure static inline function N_0x3270f67eed31fbc1(p0: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x3270f67eed31fbc1')(p0); }
    @:pure static inline function N_0x32c7a7e8c43a1f80(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Bool, p7: Bool): Int { return untyped __lua__('N_0x32c7a7e8c43a1f80')(p0, p1, p2, p3, p4, p5, p6, p7); }
    @:pure static inline function N_0x32dd916f3f7c9672(p0: Int): Int { return untyped __lua__('N_0x32dd916f3f7c9672')(p0); }
    @:pure static inline function N_0x33506883545ac0df(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x33506883545ac0df')(vehicle, p1); }
    
    /**
    * calculates two distances
    */
    @:pure static inline function N_0x336511a34f2e5185(left: Int, right: Int): Int { return untyped __lua__('N_0x336511a34f2e5185')(left, right); }
    @:pure static inline function N_0x336b3d200ab007cb(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Int { return untyped __lua__('N_0x336b3d200ab007cb')(p0, p1, p2, p3, p4); }
    @:pure static inline function N_0x33a60d8bdd6e508c(ped: Int, p1: Bool): Void { return untyped __lua__('N_0x33a60d8bdd6e508c')(ped, p1); }
    @:pure static inline function N_0x33d47e85b476abcd(p0: Bool): Int { return untyped __lua__('N_0x33d47e85b476abcd')(p0); }
    @:pure static inline function N_0x33e3c6c6f2f0b506(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0x33e3c6c6f2f0b506')(p0, p1, p2, p3); }
    @:pure static inline function N_0x33ee12743ccd6343(p0: Int, p1: Int, p2: Int): Int { return untyped __lua__('N_0x33ee12743ccd6343')(p0, p1, p2); }
    
    /**
    * 6,000+ calls from scripts, all with either 0 or 1 for p2, that's a boolean in my book
    * ---
    * ^ The last one is the componentId
    * iVar8 = dlc1::get_hash_name_for_component(iParam0, 8, ped::get_ped_drawable_variation(iParam0, 8), ped::get_ped_texture_variation(iParam0, 8));
    * if (dlc1::_0x341DE7ED1D2A1BFD(iVar8, 240476421, 8))
    */
    @:pure static inline function N_0x341de7ed1d2a1bfd(componentHash: EitherType<String, Int>, drawableSlotHash: EitherType<String, Int>, componentId: Int): Int { return untyped __lua__('N_0x341de7ed1d2a1bfd')(componentHash, drawableSlotHash, componentId); }
    @:pure static inline function N_0x34318593248c8fb2(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Bool): Int { return untyped __lua__('N_0x34318593248c8fb2')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function N_0x3441cad2f2231923(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x3441cad2f2231923')(vehicle, p1); }
    @:pure static inline function N_0x346ef3ecaaab149e(): Void { return untyped __lua__('N_0x346ef3ecaaab149e')(); }
    @:pure static inline function N_0x34770b9ce0e03b91(p0: Int, p1: Int): Int { return untyped __lua__('N_0x34770b9ce0e03b91')(p0, p1); }
    @:pure static inline function N_0x350aa5ebc03d3bd2(): Int { return untyped __lua__('N_0x350aa5ebc03d3bd2')(); }
    @:pure static inline function N_0x357b152ef96c30b6(): Int { return untyped __lua__('N_0x357b152ef96c30b6')(); }
    @:pure static inline function N_0x3599d741c9ac6310(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0x3599d741c9ac6310')(p0, p1, p2, p3); }
    @:pure static inline function N_0x359af31a4b52f5ed(): Int { return untyped __lua__('N_0x359af31a4b52f5ed')(); }
    @:pure static inline function N_0x35a1b3e1d1315cfa(p0: Bool, p1: Bool): Int { return untyped __lua__('N_0x35a1b3e1d1315cfa')(p0, p1); }
    @:pure static inline function N_0x35e0654f4bad7971(p0: Bool): Void { return untyped __lua__('N_0x35e0654f4bad7971')(p0); }
    @:pure static inline function N_0x35edd5b2e3ff01c0(): Void { return untyped __lua__('N_0x35edd5b2e3ff01c0')(); }
    @:pure static inline function N_0x35f0b98a8387274d(): Int { return untyped __lua__('N_0x35f0b98a8387274d')(); }
    @:pure static inline function N_0x35fb78dc42b7bd21(): Int { return untyped __lua__('N_0x35fb78dc42b7bd21')(); }
    @:pure static inline function N_0x36391f397731595d(p0: Int): Int { return untyped __lua__('N_0x36391f397731595d')(p0); }
    
    /**
    * Returns a float value related to slipstream.
    */
    @:pure static inline function N_0x36492c2f0d134c56(p0: Int): Int { return untyped __lua__('N_0x36492c2f0d134c56')(p0); }
    @:pure static inline function N_0x3669f1b198dcaa4f(): Void { return untyped __lua__('N_0x3669f1b198dcaa4f')(); }
    @:pure static inline function N_0x367ef5e2f439b4c6(p0: Int): Void { return untyped __lua__('N_0x367ef5e2f439b4c6')(p0); }
    
    /**
    * GET_TIME_SINCE_???
    */
    @:pure static inline function N_0x36b77bb84687c318(ped: Int, p1: Int): Int { return untyped __lua__('N_0x36b77bb84687c318')(ped, p1); }
    @:pure static inline function N_0x36c1451a88a09630(): { a0: Int, a1: Int } { return untyped __lua__('N_0x36c1451a88a09630')(); }
    
    /**
    * when player character is used plays remove scuba gear animation
    */
    @:pure static inline function N_0x36c6984c3ed0c911(p0: Int): Void { return untyped __lua__('N_0x36c6984c3ed0c911')(p0); }
    @:pure static inline function N_0x36ccb9be67b970fd(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x36ccb9be67b970fd')(p0, p1); }
    @:pure static inline function N_0x36f1b38855f2a8df(player: Int): Void { return untyped __lua__('N_0x36f1b38855f2a8df')(player); }
    @:pure static inline function N_0x36f6626459d91457(p0: Int): Void { return untyped __lua__('N_0x36f6626459d91457')(p0); }
    @:pure static inline function N_0x372ef6699146a1e4(p0: Int, entity: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0x372ef6699146a1e4')(p0, entity, p2, p3); }
    @:pure static inline function N_0x374706271354cb18(vehicle: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0x374706271354cb18')(vehicle, p1, p2); }
    
    /**
    * NETWORK_IS_TRANSITION_???
    */
    @:pure static inline function N_0x37a4494483b9f5c9(): Int { return untyped __lua__('N_0x37a4494483b9f5c9')(); }
    @:pure static inline function N_0x37deb0aa183fb6d8(): Void { return untyped __lua__('N_0x37deb0aa183fb6d8')(); }
    
    /**
    * Sets some values in a vehicle gadget (tow arm, digger arm, etc.). Don't know which one though.
    * I've tested on the towtruck 1 &amp; 2, Dock Lift (Crate Arm), Dozer, and such have no effect. However when used on a Forklift it sets the height of the forks. 0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can't pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a 'lifted-value' it will raise the car with no issue lol
    */
    @:pure static inline function N_0x37ebbf3117bd6a25(vehicle: Int, height: Int): Void { return untyped __lua__('N_0x37ebbf3117bd6a25')(vehicle, height); }
    @:pure static inline function N_0x38491439b6ba7f7d(p0: Int, p1: Int): Int { return untyped __lua__('N_0x38491439b6ba7f7d')(p0, p1); }
    
    /**
    * Sets profile setting 934
    */
    @:pure static inline function N_0x38baaa5dd4c9d19f(value: Int): Void { return untyped __lua__('N_0x38baaa5dd4c9d19f')(value); }
    
    /**
    * Returns true if an unk value is greater than 0.0f
    */
    @:pure static inline function N_0x38d28da81e4e9bf9(player: Int): Int { return untyped __lua__('N_0x38d28da81e4e9bf9')(player); }
    @:pure static inline function N_0x397baa01068baa96(): Int { return untyped __lua__('N_0x397baa01068baa96')(); }
    @:pure static inline function N_0x39917e1b4cb0f911(p0: Bool): Void { return untyped __lua__('N_0x39917e1b4cb0f911')(p0); }
    
    /**
    * from extreme3.c4
    * PED::_39D55A620FCB6A3A(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8));
    * p1 is probably componentId
    */
    @:pure static inline function N_0x39d55a620fcb6a3a(ped: Int, p1: Int, drawableId: Int, textureId: Int): Int { return untyped __lua__('N_0x39d55a620fcb6a3a')(ped, p1, drawableId, textureId); }
    @:pure static inline function N_0x3a17a27d75c74887(): Int { return untyped __lua__('N_0x3a17a27d75c74887')(); }
    @:pure static inline function N_0x3a3d5568af297cd5(p0: Int): Int { return untyped __lua__('N_0x3a3d5568af297cd5')(p0); }
    @:pure static inline function N_0x3a48ab4445d499be(): Int { return untyped __lua__('N_0x3a48ab4445d499be')(); }
    @:pure static inline function N_0x3b39236746714134(p0: Int): Int { return untyped __lua__('N_0x3b39236746714134')(p0); }
    @:pure static inline function N_0x3bab9a4e4f2ff5c7(): Int { return untyped __lua__('N_0x3bab9a4e4f2ff5c7')(); }
    @:pure static inline function N_0x3bbbd13e5041a79e(): Int { return untyped __lua__('N_0x3bbbd13e5041a79e')(); }
    @:pure static inline function N_0x3c4487461e9b0dcb(): Int { return untyped __lua__('N_0x3c4487461e9b0dcb')(); }
    @:pure static inline function N_0x3c5c1e2c2ff814b1(p0: Bool): Void { return untyped __lua__('N_0x3c5c1e2c2ff814b1')(p0); }
    @:pure static inline function N_0x3c67506996001f5e(): Int { return untyped __lua__('N_0x3c67506996001f5e')(); }
    @:pure static inline function N_0x3c891a251567dfce(p0: Int): Int { return untyped __lua__('N_0x3c891a251567dfce')(p0); }
    @:pure static inline function N_0x3ca6050692bc61b0(p0: Bool): Void { return untyped __lua__('N_0x3ca6050692bc61b0')(p0); }
    @:pure static inline function N_0x3d3d15af7bcaaf83(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('N_0x3d3d15af7bcaaf83')(p0, p1, p2); }
    @:pure static inline function N_0x3d3d8b3be5a83d35(): Int { return untyped __lua__('N_0x3d3d8b3be5a83d35')(); }
    
    /**
    * Used in carsteal3 script with p0 = "Carsteal4_spycar".
    */
    @:pure static inline function N_0x3d42b92563939375(p0: String): Int { return untyped __lua__('N_0x3d42b92563939375')(p0); }
    @:pure static inline function N_0x3d9acb1eb139e702(): Int { return untyped __lua__('N_0x3d9acb1eb139e702')(); }
    @:pure static inline function N_0x3dbf2df0aeb7d289(p0: Int): Int { return untyped __lua__('N_0x3dbf2df0aeb7d289')(p0); }
    @:pure static inline function N_0x3dda37128dd1aca8(p0: Bool): Void { return untyped __lua__('N_0x3dda37128dd1aca8')(p0); }
    
    /**
    * 1 match in 1 script. cellphone_controller.
    * p0 is -1 in scripts.
    */
    @:pure static inline function N_0x3dec726c25a11bac(p0: Int): Int { return untyped __lua__('N_0x3dec726c25a11bac')(p0); }
    @:pure static inline function N_0x3e200c2bcf4164eb(p0: Int, p1: Int): Void { return untyped __lua__('N_0x3e200c2bcf4164eb')(p0, p1); }
    @:pure static inline function N_0x3e38e28a1d80ddf6(ped: Int): Int { return untyped __lua__('N_0x3e38e28a1d80ddf6')(ped); }
    @:pure static inline function N_0x3e802f11fbe27674(p0: Int): Int { return untyped __lua__('N_0x3e802f11fbe27674')(p0); }
    
    /**
    * p0 was always 2 in R* scripts.
    * Called before calling DISPLAY_ONSCREEN_KEYBOARD if the input needs to be saved.
    */
    @:pure static inline function N_0x3ed1438c1f5c6612(p0: Int): Void { return untyped __lua__('N_0x3ed1438c1f5c6612')(p0); }
    @:pure static inline function N_0x3f52e880aaf6c8ca(p0: Bool): Void { return untyped __lua__('N_0x3f52e880aaf6c8ca')(p0); }
    @:pure static inline function N_0x3f5cc444dcaaa8f2(p0: Int, p1: Int, p2: Bool): Void { return untyped __lua__('N_0x3f5cc444dcaaa8f2')(p0, p1, p2); }
    @:pure static inline function N_0x3f9990bf5f22759c(p0: Int): Int { return untyped __lua__('N_0x3f9990bf5f22759c')(p0); }
    @:pure static inline function N_0x3fa36981311fa4ff(netId: Int, state: Bool): Void { return untyped __lua__('N_0x3fa36981311fa4ff')(netId, state); }
    @:pure static inline function N_0x4008edf7d6e48175(p0: Bool): Void { return untyped __lua__('N_0x4008edf7d6e48175')(p0); }
    @:pure static inline function N_0x402f9ed62087e898(): Void { return untyped __lua__('N_0x402f9ed62087e898')(); }
    @:pure static inline function N_0x405591ec8fd9096d(p0: Int): Void { return untyped __lua__('N_0x405591ec8fd9096d')(p0); }
    
    /**
    * Usage: INTERIOR::_0x405DC2AEF6AF95B9(INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(PLAYER::PLAYER_PED_ID()));
    */
    @:pure static inline function N_0x405dc2aef6af95b9(roomHashKey: EitherType<String, Int>): Void { return untyped __lua__('N_0x405dc2aef6af95b9')(roomHashKey); }
    
    /**
    * Console Hash: 0x9F82917F
    */
    @:pure static inline function N_0x407091cf6037118e(netID: Int): Void { return untyped __lua__('N_0x407091cf6037118e')(netID); }
    @:pure static inline function N_0x40aefd1a244741f2(p0: Bool): Void { return untyped __lua__('N_0x40aefd1a244741f2')(p0); }
    @:pure static inline function N_0x40f7e66472df3e5c(p0: Int, p1: Int): Int { return untyped __lua__('N_0x40f7e66472df3e5c')(p0, p1); }
    @:pure static inline function N_0x41350b4fc28e3941(p0: Bool): Void { return untyped __lua__('N_0x41350b4fc28e3941')(p0); }
    @:pure static inline function N_0x4167efe0527d706e(): Int { return untyped __lua__('N_0x4167efe0527d706e')(); }
    @:pure static inline function N_0x418dc16fae452c1c(p0: Int): Int { return untyped __lua__('N_0x418dc16fae452c1c')(p0); }
    @:pure static inline function N_0x419594e137637120(p0: Bool, p1: Int, p2: Bool): Void { return untyped __lua__('N_0x419594e137637120')(p0, p1, p2); }
    @:pure static inline function N_0x41faa8fb2ece8720(p0: Bool): Void { return untyped __lua__('N_0x41faa8fb2ece8720')(p0); }
    @:pure static inline function N_0x42156508606de65e(p0: Int): Void { return untyped __lua__('N_0x42156508606de65e')(p0); }
    @:pure static inline function N_0x422d396f80a96547(): Int { return untyped __lua__('N_0x422d396f80a96547')(); }
    @:pure static inline function N_0x422f32cc7e56abad(p0: Int): Int { return untyped __lua__('N_0x422f32cc7e56abad')(p0); }
    @:pure static inline function N_0x4237e822315d8ba9(): Int { return untyped __lua__('N_0x4237e822315d8ba9')(); }
    @:pure static inline function N_0x425aecf167663f48(ped: Int, p1: Bool): Void { return untyped __lua__('N_0x425aecf167663f48')(ped, p1); }
    @:pure static inline function N_0x4282e08174868be3(): Int { return untyped __lua__('N_0x4282e08174868be3')(); }
    
    /**
    * if (!ENTITY::DOES_ENTITY_BELONG_TO_THIS_SCRIPT(g_10A5A._f8B[a_0 -- [[1]] ], 1)) {
    * sub_20af7("No longer needed: Vehicle owned by other script");
    * if ((((a_0 == 24) &amp;&amp; (!sub_3a04(g_10A5A._f8B[a_0 -- [[1]] ]))) &amp;&amp; (!sub_39c9(g_10A5A._f8B[a_0 -- [[1]] ]))) &amp;&amp; (ENTITY::GET_ENTITY_MODEL(g_10A5A._f8B[a_0 -- [[1]] ]) != ${monster})) {
    * VEHICLE::_428BACCDF5E26EAD(g_10A5A._f8B[a_0 -- [[1]] ], 1);
    * }
    * g_10A5A._f8B[a_0 -- [[1]] ] = 0;
    * g_10A5A[a_0 -- [[1]] ] = 1;
    * sub_20ada(a_0);
    * return ;
    * }
    */
    @:pure static inline function N_0x428baccdf5e26ead(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x428baccdf5e26ead')(vehicle, p1); }
    @:pure static inline function N_0x428eaf89e24f6c36(p0: Int, p1: Int): Void { return untyped __lua__('N_0x428eaf89e24f6c36')(p0, p1); }
    
    /**
    * LOD related
    */
    @:pure static inline function N_0x42a4beb35d372407(p0: Int): Int { return untyped __lua__('N_0x42a4beb35d372407')(p0); }
    @:pure static inline function N_0x437138b6a830166a(): Void { return untyped __lua__('N_0x437138b6a830166a')(); }
    @:pure static inline function N_0x43865688ae10f0d7(): Int { return untyped __lua__('N_0x43865688ae10f0d7')(); }
    @:pure static inline function N_0x43d1680c6d19a8e9(): Void { return untyped __lua__('N_0x43d1680c6d19a8e9')(); }
    @:pure static inline function N_0x43fa0dfc5df87815(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x43fa0dfc5df87815')(vehicle, p1); }
    
    /**
    * sfink: related to: NETWORK_BAIL
    * NETWORK_BAIL_TRANSITION
    * NETWORK_JOIN_GROUP_ACTIVITY
    * NETWORK_JOIN_TRANSITION
    * NETWORK_LAUNCH_TRANSITION
    * NETWORK_SESSION_HOST
    * NETWORK_SESSION_HOST_CLOSED
    * NETWORK_SESSION_HOST_FRIENDS_ONLY
    * NETWORK_SESSION_HOST_SINGLE_PLAYER
    * NETWORK_SESSION_VOICE_LEAVE
    */
    @:pure static inline function N_0x444c4525ece0a4b9(): Void { return untyped __lua__('N_0x444c4525ece0a4b9')(); }
    @:pure static inline function N_0x44a0bdc559b35f6e(): Int { return untyped __lua__('N_0x44a0bdc559b35f6e')(); }
    @:pure static inline function N_0x44aca259d67651db(p1: Int): Int { return untyped __lua__('N_0x44aca259d67651db')(p1); }
    @:pure static inline function N_0x44b37cdcae765aae(p0: Int, p1: Int): Int { return untyped __lua__('N_0x44b37cdcae765aae')(p0, p1); }
    @:pure static inline function N_0x451294e859ecc018(p0: Int): Int { return untyped __lua__('N_0x451294e859ecc018')(p0); }
    @:pure static inline function N_0x459fd2c8d0ab78bc(): Int { return untyped __lua__('N_0x459fd2c8d0ab78bc')(); }
    @:pure static inline function N_0x45a83257ed02d9bc(): Void { return untyped __lua__('N_0x45a83257ed02d9bc')(); }
    @:pure static inline function N_0x45e816772e93a9db(): Int { return untyped __lua__('N_0x45e816772e93a9db')(); }
    @:pure static inline function N_0x46326e13da4e0546(p0: Int): Void { return untyped __lua__('N_0x46326e13da4e0546')(p0); }
    
    /**
    * NOTE: 'p2' might be some kind of array.
    */
    @:pure static inline function N_0x4645de9980999e93(p0: String, p1: String, p2: String, p3: String, type: String): Int { return untyped __lua__('N_0x4645de9980999e93')(p0, p1, p2, p3, type); }
    @:pure static inline function N_0x46494a2475701343(p0: Int, p1: Int, p2: Int, p3: Int, modelHash: EitherType<String, Int>, p5: Bool): Int { return untyped __lua__('N_0x46494a2475701343')(p0, p1, p2, p3, modelHash, p5); }
    @:pure static inline function N_0x4668d80430d6c299(ped: Int): Void { return untyped __lua__('N_0x4668d80430d6c299')(ped); }
    
    /**
    * This has been found in use in the decompiled files.
    */
    @:pure static inline function N_0x4669b3ed80f24b4e(player: Int): Int { return untyped __lua__('N_0x4669b3ed80f24b4e')(player); }
    @:pure static inline function N_0x466da42c89865553(p0: Int): Void { return untyped __lua__('N_0x466da42c89865553')(p0); }
    @:pure static inline function N_0x4683149ed1dde7a1(p0: String): Int { return untyped __lua__('N_0x4683149ed1dde7a1')(p0); }
    @:pure static inline function N_0x469f2ecdec046337(p0: Bool): Void { return untyped __lua__('N_0x469f2ecdec046337')(p0); }
    
    /**
    * Checks if the specified unknown flag is set in the ped's model.
    * The engine itself seems to exclusively check for flags 1 and 4 (Might be inlined code of the check that checks for other flags).
    * Game scripts exclusively check for flags 1 and 4.
    */
    @:pure static inline function N_0x46b05bcae43856b0(ped: Int, flag: Int): Int { return untyped __lua__('N_0x46b05bcae43856b0')(ped, flag); }
    @:pure static inline function N_0x46d1a61a21f566fc(p0: Int): Void { return untyped __lua__('N_0x46d1a61a21f566fc')(p0); }
    @:pure static inline function N_0x46fb3ed415c7641c(p0: Int, p1: Int, p2: Int): Int { return untyped __lua__('N_0x46fb3ed415c7641c')(p0, p1, p2); }
    @:pure static inline function N_0x472397322e92a856(): Void { return untyped __lua__('N_0x472397322e92a856')(); }
    
    /**
    * Returns an unknown value (dword_142317A08 in b944).
    * Used in appcamera.ysc and maintransition.ysc
    */
    @:pure static inline function N_0x473151ebc762c6da(): Int { return untyped __lua__('N_0x473151ebc762c6da')(); }
    @:pure static inline function N_0x4737980e8a283806(p0: Int, p1: Int): Int { return untyped __lua__('N_0x4737980e8a283806')(p0, p1); }
    @:pure static inline function N_0x4750fc27570311ec(): Int { return untyped __lua__('N_0x4750fc27570311ec')(); }
    @:pure static inline function N_0x4759cc730f947c81(): Void { return untyped __lua__('N_0x4759cc730f947c81')(); }
    @:pure static inline function N_0x4811bbac21c5fcd5(p0: Int): Void { return untyped __lua__('N_0x4811bbac21c5fcd5')(p0); }
    @:pure static inline function N_0x4852fc386e2e1bb5(p0: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x4852fc386e2e1bb5')(p0); }
    @:pure static inline function N_0x48621c9fca3ebd28(p0: Bool): Void { return untyped __lua__('N_0x48621c9fca3ebd28')(p0); }
    @:pure static inline function N_0x4862437a486f91b0(p1: Int, p2: Int, p3: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x4862437a486f91b0')(p1, p2, p3); }
    @:pure static inline function N_0x487912fd248efddf(p0: Int, p1: Int): Int { return untyped __lua__('N_0x487912fd248efddf')(p0, p1); }
    @:pure static inline function N_0x48adc8a773564670(): Void { return untyped __lua__('N_0x48adc8a773564670')(); }
    
    /**
    * Only found 3 times in decompiled scripts. Not a whole lot to go off of.
    * GAMEPLAY::_48F069265A0E4BEC(a_0, "Movie_Name_For_This_Player");
    * GAMEPLAY::_48F069265A0E4BEC(&amp;a_0._fB, "Ringtone_For_This_Player");
    * GAMEPLAY::_48F069265A0E4BEC(&amp;a_0._f1EC4._f12[v_A -- [[6]] ], &amp;v_13); // where v_13 is "MPATMLOGSCRS0" thru "MPATMLOGSCRS15"
    */
    @:pure static inline function N_0x48f069265a0e4bec(name: String): Int { return untyped __lua__('N_0x48f069265a0e4bec')(name); }
    @:pure static inline function N_0x49482f9fcd825aaa(entity: Int): Void { return untyped __lua__('N_0x49482f9fcd825aaa')(entity); }
    @:pure static inline function N_0x49e50bdb8ba4dab2(ped: Int, p1: Bool): Void { return untyped __lua__('N_0x49e50bdb8ba4dab2')(ped, p1); }
    @:pure static inline function N_0x49ec8030f5015f8b(p0: Int): Void { return untyped __lua__('N_0x49ec8030f5015f8b')(p0); }
    @:pure static inline function N_0x4a0c7c9bb10abb36(p0: Bool): Void { return untyped __lua__('N_0x4a0c7c9bb10abb36')(p0); }
    @:pure static inline function N_0x4a2d4e8bf4265b0f(p0: Int): Int { return untyped __lua__('N_0x4a2d4e8bf4265b0f')(p0); }
    @:pure static inline function N_0x4a39db43e47cf3aa(p0: Int): Void { return untyped __lua__('N_0x4a39db43e47cf3aa')(p0); }
    @:pure static inline function N_0x4a7d6e727f941747(p0: Int): Int { return untyped __lua__('N_0x4a7d6e727f941747')(p0); }
    
    /**
    * example:
    * if (!((v_7)==UI::_4A9923385BDB9DAD())) {
    * UI::SET_BLIP_SPRITE((v_6), (v_7));
    * }
    * This function is hard-coded to always return 1.
    */
    @:pure static inline function N_0x4a9923385bdb9dad(): Int { return untyped __lua__('N_0x4a9923385bdb9dad')(); }
    @:pure static inline function N_0x4a9fde3a5a6d0437(p0: Int): Void { return untyped __lua__('N_0x4a9fde3a5a6d0437')(p0); }
    @:pure static inline function N_0x4af92acd3141d96c(): Void { return untyped __lua__('N_0x4af92acd3141d96c')(); }
    
    /**
    * p0 - Scale? Looks to be a normalized value (0.0 - 1.0)
    * offroad_races.c4, line ~67407:
    * a_3._f7 = GRAPHICS::CREATE_CHECKPOINT(v_D, v_A, a_4, a_7, v_E, v_F, v_10, sub_62b2(v_A, 220, 255), 0);
    * UI::GET_HUD_COLOUR(134, &amp;v_E, &amp;v_F, &amp;v_10, &amp;v_11);
    * GRAPHICS::_SET_CHECKPOINT_ICON_RGBA(a_3._f7, v_E, v_F, v_10, sub_62b2(v_A, 70, 210));
    * GRAPHICS::_4B5B4DA5D79F1943(a_3._f7, 0.95);
    * GRAPHICS::SET_CHECKPOINT_CYLINDER_HEIGHT(a_3._f7, 4.0, 4.0, 100.0);
    */
    @:pure static inline function N_0x4b5b4da5d79f1943(checkpoint: Int, p0: Int): Void { return untyped __lua__('N_0x4b5b4da5d79f1943')(checkpoint, p0); }
    @:pure static inline function N_0x4b5cfc83122df602(): Void { return untyped __lua__('N_0x4b5cfc83122df602')(); }
    
    /**
    * Seems to call GET_PAUSED_MAP_STREAMING_REQUEST lol wtf
    * seg001:000000000158C324 sub_158C324:                            # DATA XREF: OPD:stru_1C29978o
    * seg001:000000000158C324
    * seg001:000000000158C324 .set arg_10,  0x10
    * seg001:000000000158C324
    * seg001:000000000158C324                 mflr      r0
    * seg001:000000000158C328                 bl        sub_1803774
    * seg001:000000000158C32C                 stdu      r1, -0x80(r1)
    * seg001:000000000158C330                 std       r0, 0x80+arg_10(r1)
    * seg001:000000000158C334                 mr        r31, r3
    * seg001:000000000158C338                 lwz       r3, 8(r31)
    * seg001:000000000158C33C                 addic     r4, r3, 4
    * seg001:000000000158C340                 addic     r5, r3, 0x10
    * seg001:000000000158C344                 addic     r7, r3, 0x20
    * seg001:000000000158C348                 lwz       r6, 0(r3)
    * seg001:000000000158C34C                 lfs       f1, 0x1C(r3)
    * seg001:000000000158C350                 lwz       r8, 0x2C(r3)
    * seg001:000000000158C354                 extsw     r3, r6
    * seg001:000000000158C358                 extsw     r8, r8
    * seg001:000000000158C35C                 bl        GET_PAUSED_MAP_STREAMING_REQUEST
    * seg001:000000000158C360                 lwz       r4, 0(r31)
    * seg001:000000000158C364                 stw       r3, 0(r4)
    * seg001:000000000158C368                 addi      r1, r1, 0x80
    * seg001:000000000158C36C                 b         loc_18037D8
    * sorta makes sense though since the one above this native and GET_PAUSED_MAP_STREAMING_REQUEST are used together often in scripts
    */
    @:pure static inline function N_0x4ba92a18502bca61(player: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int, p10: Int, flags: Int): Int { return untyped __lua__('N_0x4ba92a18502bca61')(player, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, flags); }
    @:pure static inline function N_0x4bc2854478f3a749(doorHash: EitherType<String, Int>): Int { return untyped __lua__('N_0x4bc2854478f3a749')(doorHash); }
    
    /**
    * Only used once in the entire game scripts, probably useless. Always returns 0.
    */
    @:pure static inline function N_0x4c2330e61d3deb56(interiorID: Int): Int { return untyped __lua__('N_0x4c2330e61d3deb56')(interiorID); }
    @:pure static inline function N_0x4c61b39930d045da(p0: Int): Int { return untyped __lua__('N_0x4c61b39930d045da')(p0); }
    @:pure static inline function N_0x4c61c75bee8184c2(p0: String, p1: Int, p2: Int): Void { return untyped __lua__('N_0x4c61c75bee8184c2')(p0, p1, p2); }
    @:pure static inline function N_0x4c89fe2bdeb3f169(): Int { return untyped __lua__('N_0x4c89fe2bdeb3f169')(); }
    
    /**
    * This function is hard-coded to always return 1.
    */
    @:pure static inline function N_0x4cebc1ed31e8925e(cutsceneName: String): Int { return untyped __lua__('N_0x4cebc1ed31e8925e')(cutsceneName); }
    @:pure static inline function N_0x4d02279c83be69fe(): Int { return untyped __lua__('N_0x4d02279c83be69fe')(); }
    @:pure static inline function N_0x4d89d607cb3dd1d2(object: Int, toggle: Bool): Void { return untyped __lua__('N_0x4d89d607cb3dd1d2')(object, toggle); }
    
    /**
    * Something like flush_all_scripts
    * Most of time comes after NETWORK_END_TUTORIAL_SESSION() or before TERMINATE_THIS_THREAD()
    */
    @:pure static inline function N_0x4d953df78ebf8158(): Void { return untyped __lua__('N_0x4d953df78ebf8158')(); }
    @:pure static inline function N_0x4d9d109f63fee1d4(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x4d9d109f63fee1d4')(p0, p1); }
    @:pure static inline function N_0x4dcdf92bf64236cd(p0: Int, p1: Int): Void { return untyped __lua__('N_0x4dcdf92bf64236cd')(p0, p1); }
    @:pure static inline function N_0x4df7cfff471a7fb1(p0: Int): Int { return untyped __lua__('N_0x4df7cfff471a7fb1')(p0); }
    @:pure static inline function N_0x4dfdd9eb705f8140(): { a0: Int, a1: Dynamic } { return untyped __lua__('N_0x4dfdd9eb705f8140')(); }
    @:pure static inline function N_0x4e3cd0ef8a489541(): Int { return untyped __lua__('N_0x4e3cd0ef8a489541')(); }
    
    /**
    * Examples:
    * AUDIO::_4E404A9361F75BB2("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
    * AUDIO::_4E404A9361F75BB2("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
    * AUDIO::_4E404A9361F75BB2("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_TREVOR", 1);
    * AUDIO::_4E404A9361F75BB2("RADIO_01_CLASS_ROCK", "END_CREDITS_SAVE_MICHAEL_TREVOR", 1);
    * AUDIO::_4E404A9361F75BB2("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
    * AUDIO::_4E404A9361F75BB2("RADIO_06_COUNTRY", "MAGDEMO2_RADIO_DINGHY", 1);
    * AUDIO::_4E404A9361F75BB2("RADIO_16_SILVERLAKE", "SEA_RACE_RADIO_PLAYLIST", 1);
    * AUDIO::_4E404A9361F75BB2("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
    */
    @:pure static inline function N_0x4e404a9361f75bb2(radioStation: String, p1: String, p2: Bool): Void { return untyped __lua__('N_0x4e404a9361f75bb2')(radioStation, p1, p2); }
    @:pure static inline function N_0x4e52e752c76e7e7a(p0: Int): Void { return untyped __lua__('N_0x4e52e752c76e7e7a')(p0); }
    @:pure static inline function N_0x4e548c0d7ae39ff9(p0: Int, p1: Int): Int { return untyped __lua__('N_0x4e548c0d7ae39ff9')(p0, p1); }
    @:pure static inline function N_0x4e74e62e0a97e901(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x4e74e62e0a97e901')(vehicle, p1); }
    
    /**
    * The "disabled" variant of _0x5B84D09CEC5209C5.
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function N_0x4f8a26a890fd62fb(inputGroup: Int, control: Int): Int { return untyped __lua__('N_0x4f8a26a890fd62fb')(inputGroup, control); }
    @:pure static inline function N_0x4fef53183c3c6414(): Int { return untyped __lua__('N_0x4fef53183c3c6414')(); }
    
    /**
    * console hash: 0x004926A3
    */
    @:pure static inline function N_0x500873a45724c863(vehicle: Int, p1: Int): Void { return untyped __lua__('N_0x500873a45724c863')(vehicle, p1); }
    @:pure static inline function N_0x5009dfd741329729(p0: String, p1: Int): Void { return untyped __lua__('N_0x5009dfd741329729')(p0, p1); }
    @:pure static inline function N_0x503f5920162365b2(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0x503f5920162365b2')(p0, p1, p2, p3); }
    @:pure static inline function N_0x5068f488ddb54dd8(): Int { return untyped __lua__('N_0x5068f488ddb54dd8')(); }
    @:pure static inline function N_0x5096fd9ccb49056d(p0: Int): Void { return untyped __lua__('N_0x5096fd9ccb49056d')(p0); }
    @:pure static inline function N_0x50f457823ce6eb5f(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0x50f457823ce6eb5f')(p0, p1, p2, p3); }
    @:pure static inline function N_0x511f1a683387c7e2(p0: Int): Int { return untyped __lua__('N_0x511f1a683387c7e2')(p0); }
    @:pure static inline function N_0x51bb2d88d31a914b(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x51bb2d88d31a914b')(vehicle, p1); }
    @:pure static inline function N_0x51db102f4a3ba5e0(p0: Bool): Void { return untyped __lua__('N_0x51db102f4a3ba5e0')(p0); }
    @:pure static inline function N_0x51f1a8e48c3d2f6d(p0: Int, p1: Bool, p2: Int): Int { return untyped __lua__('N_0x51f1a8e48c3d2f6d')(p0, p1, p2); }
    
    /**
    * Shows a hud element for reporting jobs
    */
    @:pure static inline function N_0x523a590c1a3cc0d3(): Void { return untyped __lua__('N_0x523a590c1a3cc0d3')(); }
    @:pure static inline function N_0x524ff0aeff9c3973(p0: Int): Void { return untyped __lua__('N_0x524ff0aeff9c3973')(p0); }
    @:pure static inline function N_0x52818819057f2b40(p0: Int): Int { return untyped __lua__('N_0x52818819057f2b40')(p0); }
    @:pure static inline function N_0x52d59ab61ddc05dd(ped: Int, p1: Bool): Void { return untyped __lua__('N_0x52d59ab61ddc05dd')(ped, p1); }
    @:pure static inline function N_0x5324a0e3e4ce3570(p0: Int, p1: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x5324a0e3e4ce3570')(p0, p1); }
    
    /**
    * GET_VEHICLE_MODEL_*
    * 9.8 * thrust if air vehicle, else 0.38 + drive force?
    * For a full list, see here: pastebin.com/bJQeDqNd
    */
    @:pure static inline function N_0x53409b5163d5b846(modelHash: EitherType<String, Int>): Int { return untyped __lua__('N_0x53409b5163d5b846')(modelHash); }
    
    /**
    * GET_VEHICLE_MAX_*
    * sfink: this returns the vehicle property "Assisted Steering" or at least, it returned 37.5 when i was in a car with that value as assisted steering.
    */
    @:pure static inline function N_0x53af99baa671ca47(vehicle: Int): Int { return untyped __lua__('N_0x53af99baa671ca47')(vehicle); }
    @:pure static inline function N_0x53afd64c6758f2f9(): Int { return untyped __lua__('N_0x53afd64c6758f2f9')(); }
    @:pure static inline function N_0x53f4892d18ec90a4(p0: Int): Void { return untyped __lua__('N_0x53f4892d18ec90a4')(p0); }
    @:pure static inline function N_0x5407b7288d0478b7(p0: Int): Int { return untyped __lua__('N_0x5407b7288d0478b7')(p0); }
    @:pure static inline function N_0x54318c915d27e4ce(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x54318c915d27e4ce')(p0, p1); }
    @:pure static inline function N_0x544810ed9db6bbe6(): Int { return untyped __lua__('N_0x544810ed9db6bbe6')(); }
    @:pure static inline function N_0x54b0f614960f4a5f(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Int { return untyped __lua__('N_0x54b0f614960f4a5f')(p0, p1, p2, p3, p4, p5, p6); }
    @:pure static inline function N_0x54e22ea2c1956a8d(p0: Int): Void { return untyped __lua__('N_0x54e22ea2c1956a8d')(p0); }
    
    /**
    * From the scripts:
    * GAMEPLAY::_54F157E0336A3822(sub_aa49(a_0), "ForcedStopDirection", v_E);
    */
    @:pure static inline function N_0x54f157e0336a3822(p0: Int, p1: String, p2: Int): Void { return untyped __lua__('N_0x54f157e0336a3822')(p0, p1, p2); }
    
    /**
    * DISABLE_*
    * p0 seems to be Player or int
    */
    @:pure static inline function N_0x5501b7a5cdb79d37(p0: Int): Void { return untyped __lua__('N_0x5501b7a5cdb79d37')(p0); }
    @:pure static inline function N_0x551df99658db6ee8(p0: Int, p1: Int, p2: Int): Int { return untyped __lua__('N_0x551df99658db6ee8')(p0, p1, p2); }
    
    /**
    * Sets profile setting 935
    */
    @:pure static inline function N_0x55384438fc55ad8e(value: Int): Void { return untyped __lua__('N_0x55384438fc55ad8e')(value); }
    @:pure static inline function N_0x5539c3ebf104a53a(p0: Bool): Void { return untyped __lua__('N_0x5539c3ebf104a53a')(p0); }
    
    /**
    * GET_PLAYER_*
    * Seems to do something with network (?)
    * PLAYER::_56105E599CAB0EFA(NETWORK::NETWORK_GET_PLAYER_INDEX_FROM_PED(ped))
    */
    @:pure static inline function N_0x56105e599cab0efa(p0: Int): Int { return untyped __lua__('N_0x56105e599cab0efa')(p0); }
    
    /**
    * Returns the current AI BLIP for the specified ped
    */
    @:pure static inline function N_0x56176892826a4fe8(ped: Int): Int { return untyped __lua__('N_0x56176892826a4fe8')(ped); }
    
    /**
    * NETWORK_PLAYER_???
    */
    @:pure static inline function N_0x565e430db3b05bec(p0: Int): Int { return untyped __lua__('N_0x565e430db3b05bec')(p0); }
    @:pure static inline function N_0x567384dfa67029e6(): Int { return untyped __lua__('N_0x567384dfa67029e6')(); }
    @:pure static inline function N_0x5688585e6d563cd8(p0: Int): Void { return untyped __lua__('N_0x5688585e6d563cd8')(p0); }
    @:pure static inline function N_0x56b94c6d7127dfba(p0: Int, p1: Int, p2: Bool): Void { return untyped __lua__('N_0x56b94c6d7127dfba')(p0, p1, p2); }
    @:pure static inline function N_0x56c8b608cfd49854(): Void { return untyped __lua__('N_0x56c8b608cfd49854')(); }
    
    /**
    * console hash = 0x30F43FE3
    */
    @:pure static inline function N_0x56eb5e94318d3fb6(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x56eb5e94318d3fb6')(vehicle, p1); }
    
    /**
    * Jenkins hash: 0x772DA539
    * p0 looks like Player or int (found in "am_pi_menu")
    */
    @:pure static inline function N_0x5702b917b99db1cd(p0: Int): Void { return untyped __lua__('N_0x5702b917b99db1cd')(p0); }
    @:pure static inline function N_0x570389d1c3de3c6b(p0: Int): Void { return untyped __lua__('N_0x570389d1c3de3c6b')(p0); }
    
    /**
    * consoel hash 0xAEB29F98
    */
    @:pure static inline function N_0x571feb383f629926(cargobob: Int, p1: Bool): Void { return untyped __lua__('N_0x571feb383f629926')(cargobob, p1); }
    @:pure static inline function N_0x576594e8d64375e2(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x576594e8d64375e2')(p0, p1); }
    
    /**
    * Not sure what it does but it's in a function called in the main of appbroadcast and is also called in freemode. Likely chat related.
    */
    @:pure static inline function N_0x57b192b4d4ad23d5(p0: Bool): Void { return untyped __lua__('N_0x57b192b4d4ad23d5')(p0); }
    @:pure static inline function N_0x57d760d55f54e071(p0: Bool): Void { return untyped __lua__('N_0x57d760d55f54e071')(p0); }
    @:pure static inline function N_0x583049884a2eee3c(): Void { return untyped __lua__('N_0x583049884a2eee3c')(); }
    @:pure static inline function N_0x5835d9cd92e83184(): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x5835d9cd92e83184')(); }
    @:pure static inline function N_0x583df8e3d4afbd98(): Int { return untyped __lua__('N_0x583df8e3d4afbd98')(); }
    @:pure static inline function N_0x5845066d8a1ea7f7(vehicle: Int, x: Int, y: Int, z: Int, p4: Int): Void { return untyped __lua__('N_0x5845066d8a1ea7f7')(vehicle, x, y, z, p4); }
    @:pure static inline function N_0x584770794d758c18(p0: Int, p1: Int): Int { return untyped __lua__('N_0x584770794d758c18')(p0, p1); }
    @:pure static inline function N_0x589f80b325cc82c5(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Int { return untyped __lua__('N_0x589f80b325cc82c5')(p0, p1, p2, p3, p4); }
    
    /**
    * LEADERBOARDS_GET_CACHE_???
    */
    @:pure static inline function N_0x58a651cd201d89ad(p0: Int): Int { return untyped __lua__('N_0x58a651cd201d89ad')(p0); }
    @:pure static inline function N_0x58bb377bec7cd5f4(p0: Bool, p1: Bool): Void { return untyped __lua__('N_0x58bb377bec7cd5f4')(p0, p1); }
    @:pure static inline function N_0x58c21165f6545892(p0: Int, p1: Int): Void { return untyped __lua__('N_0x58c21165f6545892')(p0, p1); }
    
    /**
    * MulleDK19: This function is hard-coded to always return 0.
    */
    @:pure static inline function N_0x58cc181719256197(p0: Int, p1: Int, p2: Int): Int { return untyped __lua__('N_0x58cc181719256197')(p0, p1, p2); }
    @:pure static inline function N_0x59328eb08c5ceb2b(): Int { return untyped __lua__('N_0x59328eb08c5ceb2b')(); }
    @:pure static inline function N_0x593570c289a77688(): Int { return untyped __lua__('N_0x593570c289a77688')(); }
    @:pure static inline function N_0x593feae1f73392d4(): Int { return untyped __lua__('N_0x593feae1f73392d4')(); }
    @:pure static inline function N_0x59424bd75174c9b1(): Void { return untyped __lua__('N_0x59424bd75174c9b1')(); }
    @:pure static inline function N_0x595f028698072dd9(p0: Int, p1: Int, p2: Bool): Int { return untyped __lua__('N_0x595f028698072dd9')(p0, p1, p2); }
    @:pure static inline function N_0x597f8dba9b206fc7(): Int { return untyped __lua__('N_0x597f8dba9b206fc7')(); }
    
    /**
    * Same behavior as GET_LOCAL_PLAYER_AIM_STATE but only used on the PC version.
    */
    @:pure static inline function N_0x59b9a7af4c95133c(): Int { return untyped __lua__('N_0x59b9a7af4c95133c')(); }
    
    /**
    * may be 0x6CDAA7D2
    * sfink: related to: NETWORK_BAIL
    * NETWORK_BAIL_TRANSITION
    * NETWORK_JOIN_GROUP_ACTIVITY
    * NETWORK_JOIN_TRANSITION
    * NETWORK_LAUNCH_TRANSITION
    * NETWORK_SESSION_HOST
    * NETWORK_SESSION_HOST_CLOSED
    * NETWORK_SESSION_HOST_FRIENDS_ONLY
    * NETWORK_SESSION_HOST_SINGLE_PLAYER
    * NETWORK_SESSION_VOICE_LEAVE
    */
    @:pure static inline function N_0x59df79317f85a7e0(): Int { return untyped __lua__('N_0x59df79317f85a7e0')(); }
    @:pure static inline function N_0x59e7b488451f4d3a(p0: Int, p1: Int): Void { return untyped __lua__('N_0x59e7b488451f4d3a')(p0, p1); }
    @:pure static inline function N_0x5a0a3d1a186a5508(): Int { return untyped __lua__('N_0x5a0a3d1a186a5508')(); }
    @:pure static inline function N_0x5a34cd9c3c5bec44(p0: Int): Int { return untyped __lua__('N_0x5a34cd9c3c5bec44')(p0); }
    @:pure static inline function N_0x5a43c76f7fc7ba5f(): Void { return untyped __lua__('N_0x5a43c76f7fc7ba5f')(); }
    @:pure static inline function N_0x5a556b229a169402(): Int { return untyped __lua__('N_0x5a556b229a169402')(); }
    
    /**
    * NETWORK_IS_TRANSITION_???
    */
    @:pure static inline function N_0x5a6aa44ff8e931e6(): Int { return untyped __lua__('N_0x5a6aa44ff8e931e6')(); }
    @:pure static inline function N_0x5a6ffa2433e2f14c(player: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, flags: Int): Int { return untyped __lua__('N_0x5a6ffa2433e2f14c')(player, p1, p2, p3, p4, p5, p6, p7, flags); }
    @:pure static inline function N_0x5a7f62fda59759bd(): Void { return untyped __lua__('N_0x5a7f62fda59759bd')(); }
    @:pure static inline function N_0x5aa3befa29f03ad4(): Int { return untyped __lua__('N_0x5aa3befa29f03ad4')(); }
    
    /**
    * GET_VEHICLE_MODEL_*
    * called if the vehicle is a boat -- returns vecMoveResistanceX?
    * For a full list, see here: pastebin.com/Pyb2RhZ9
    */
    @:pure static inline function N_0x5aa3f878a178c4fc(modelHash: EitherType<String, Int>): Int { return untyped __lua__('N_0x5aa3f878a178c4fc')(modelHash); }
    @:pure static inline function N_0x5aab586ffec0fd96(p0: Int): Void { return untyped __lua__('N_0x5aab586ffec0fd96')(p0); }
    
    /**
    * Disables some other rendering (internal)
    */
    @:pure static inline function N_0x5ad3932daeb1e5d3(): Void { return untyped __lua__('N_0x5ad3932daeb1e5d3')(); }
    @:pure static inline function N_0x5ae17c6b0134b7f1(): Int { return untyped __lua__('N_0x5ae17c6b0134b7f1')(); }
    @:pure static inline function N_0x5b0316762afd4a64(): Int { return untyped __lua__('N_0x5b0316762afd4a64')(); }
    @:pure static inline function N_0x5b1f2e327b6b6fe1(): Int { return untyped __lua__('N_0x5b1f2e327b6b6fe1')(); }
    @:pure static inline function N_0x5b48a06dd0e792a5(): Int { return untyped __lua__('N_0x5b48a06dd0e792a5')(); }
    @:pure static inline function N_0x5b50abb1fe3746f4(): Int { return untyped __lua__('N_0x5b50abb1fe3746f4')(); }
    @:pure static inline function N_0x5b6010b3cbc29095(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x5b6010b3cbc29095')(p0, p1); }
    @:pure static inline function N_0x5b73c77d9eb66e24(p0: Bool): Void { return untyped __lua__('N_0x5b73c77d9eb66e24')(p0); }
    
    /**
    * Seems to return values between -1 and 1 for controls like gas and steering.
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function N_0x5b84d09cec5209c5(inputGroup: Int, control: Int): Int { return untyped __lua__('N_0x5b84d09cec5209c5')(inputGroup, control); }
    @:pure static inline function N_0x5b8ed3db018927b1(p0: Int): Void { return untyped __lua__('N_0x5b8ed3db018927b1')(p0); }
    @:pure static inline function N_0x5bd5f255321c4aaf(p0: Int): Int { return untyped __lua__('N_0x5bd5f255321c4aaf')(p0); }
    @:pure static inline function N_0x5bff36d6ed83e0ae(): Array<Int> { return untyped __lua__('N_0x5bff36d6ed83e0ae')(); }
    
    /**
    * Only called once in the scripts.
    * Related to weapon objects.
    */
    @:pure static inline function N_0x5c3b791d580e0bc2(entity: Int, p1: Int): Void { return untyped __lua__('N_0x5c3b791d580e0bc2')(entity, p1); }
    @:pure static inline function N_0x5c41e6babc9e2112(p0: Int): Void { return untyped __lua__('N_0x5c41e6babc9e2112')(p0); }
    @:pure static inline function N_0x5c48a1d6e3b33179(p0: Int): Int { return untyped __lua__('N_0x5c48a1d6e3b33179')(p0); }
    @:pure static inline function N_0x5c497525f803486b(): Void { return untyped __lua__('N_0x5c497525f803486b')(); }
    @:pure static inline function N_0x5c4ebffa98bdb41c(p0: Int): Int { return untyped __lua__('N_0x5c4ebffa98bdb41c')(p0); }
    @:pure static inline function N_0x5c707a667df8b9fa(p0: Bool, p1: Int): Void { return untyped __lua__('N_0x5c707a667df8b9fa')(p0, p1); }
    @:pure static inline function N_0x5cae833b0ee0c500(p0: Int): Int { return untyped __lua__('N_0x5cae833b0ee0c500')(p0); }
    
    /**
    * Only called in golf and golf_mp
    * parameters used are
    * GRAPHICS::_0x5CE62918F8D703C7(255, 0, 0, 64, 255, 255, 255, 5, 255, 255, 0, 64);
    */
    @:pure static inline function N_0x5ce62918f8d703c7(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int, p10: Int, p11: Int): Void { return untyped __lua__('N_0x5ce62918f8d703c7')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
    @:pure static inline function N_0x5d10b3795f3fc886(): Int { return untyped __lua__('N_0x5d10b3795f3fc886')(); }
    @:pure static inline function N_0x5d517b27cf6ecd04(p0: Int): Void { return untyped __lua__('N_0x5d517b27cf6ecd04')(p0); }
    @:pure static inline function N_0x5d5caff661ddf6fc(p0: Int, p1: Int): Void { return untyped __lua__('N_0x5d5caff661ddf6fc')(p0, p1); }
    @:pure static inline function N_0x5d7b620dae436138(p0: Int): Void { return untyped __lua__('N_0x5d7b620dae436138')(p0); }
    
    /**
    * longest time being ilde?
    */
    @:pure static inline function N_0x5da3a8de8cb6226f(time: Int): Void { return untyped __lua__('N_0x5da3a8de8cb6226f')(time); }
    @:pure static inline function N_0x5db8010ee71fdef2(vehicle: Int): Int { return untyped __lua__('N_0x5db8010ee71fdef2')(vehicle); }
    @:pure static inline function N_0x5dc40a8869c22141(p0: Bool, p1: Int): Void { return untyped __lua__('N_0x5dc40a8869c22141')(p0, p1); }
    
    /**
    * NETWORK_IS_TRANSITION_???
    */
    @:pure static inline function N_0x5dc577201723960a(): Int { return untyped __lua__('N_0x5dc577201723960a')(); }
    @:pure static inline function N_0x5debd9c4dc995692(): Void { return untyped __lua__('N_0x5debd9c4dc995692')(); }
    @:pure static inline function N_0x5e0165278f6339ee(p0: Int): Int { return untyped __lua__('N_0x5e0165278f6339ee')(p0); }
    @:pure static inline function N_0x5e24341a7f92a74b(): Int { return untyped __lua__('N_0x5e24341a7f92a74b')(); }
    @:pure static inline function N_0x5e3aa4ca2b6fb0ee(p0: Int): Void { return untyped __lua__('N_0x5e3aa4ca2b6fb0ee')(p0); }
    @:pure static inline function N_0x5e569ec46ec21cae(vehicle: Int, toggle: Bool): Void { return untyped __lua__('N_0x5e569ec46ec21cae')(vehicle, toggle); }
    @:pure static inline function N_0x5e657ef1099edd65(p0: Int): Int { return untyped __lua__('N_0x5e657ef1099edd65')(p0); }
    @:pure static inline function N_0x5e9daf5a20f15908(p0: Int): Void { return untyped __lua__('N_0x5e9daf5a20f15908')(p0); }
    @:pure static inline function N_0x5ea784d197556507(): Int { return untyped __lua__('N_0x5ea784d197556507')(); }
    
    /**
    * returns pickup hash.
    */
    @:pure static inline function N_0x5eaad83f8cfb4575(pickupHash: Int): Int { return untyped __lua__('N_0x5eaad83f8cfb4575')(pickupHash); }
    
    /**
    * example from completionpercentage_controller.ysc.c4
    * if (STATS::_5EAD2BF6484852E4()) {
    * GAMEPLAY::SET_BIT(g_17b95._f20df._ff10, 15);
    * STATS::_11FF1C80276097ED(0xe9ec4dd1, 200, 0);
    * }
    */
    @:pure static inline function N_0x5ead2bf6484852e4(): Int { return untyped __lua__('N_0x5ead2bf6484852e4')(); }
    @:pure static inline function N_0x5edef0cf8c1dab3c(): Int { return untyped __lua__('N_0x5edef0cf8c1dab3c')(); }
    @:pure static inline function N_0x5f0f3f56635809ef(p0: Int): Void { return untyped __lua__('N_0x5f0f3f56635809ef')(p0); }
    
    /**
    * SET_PLAYERS_*
    */
    @:pure static inline function N_0x5f2013f8bc24ee69(p0: Int): Void { return untyped __lua__('N_0x5f2013f8bc24ee69')(p0); }
    @:pure static inline function N_0x5f35f6732c3fbba0(p0: Int): Int { return untyped __lua__('N_0x5f35f6732c3fbba0')(p0); }
    @:pure static inline function N_0x5fbd7095fe7ae57f(p0: Int, p1: Int): Int { return untyped __lua__('N_0x5fbd7095fe7ae57f')(p0, p1); }
    
    /**
    * Appears once in "re_dealgonewrong"
    */
    @:pure static inline function N_0x5fc472c501ccadb3(player: Int): Int { return untyped __lua__('N_0x5fc472c501ccadb3')(player); }
    @:pure static inline function N_0x600048c60d5c2c51(p0: Int): Void { return untyped __lua__('N_0x600048c60d5c2c51')(p0); }
    @:pure static inline function N_0x600f8cb31c7aab6e(p0: Int): Void { return untyped __lua__('N_0x600f8cb31c7aab6e')(p0); }
    @:pure static inline function N_0x606e4d3e3cccf3eb(): Int { return untyped __lua__('N_0x606e4d3e3cccf3eb')(); }
    
    /**
    * Console Hash: 0x37C388DB
    */
    @:pure static inline function N_0x6070104b699b2ef4(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Int { return untyped __lua__('N_0x6070104b699b2ef4')(p0, p1, p2, p3, p4, p5, p6); }
    @:pure static inline function N_0x60734cc207c9833c(p0: Bool): Void { return untyped __lua__('N_0x60734cc207c9833c')(p0); }
    @:pure static inline function N_0x609278246a29ca34(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0x609278246a29ca34')(p0, p1, p2); }
    
    /**
    * Something with Social Club or online.
    */
    @:pure static inline function N_0x60e892ba4f5bdca4(): Void { return untyped __lua__('N_0x60e892ba4f5bdca4')(); }
    @:pure static inline function N_0x60edd13eb3ac1ff3(): Int { return untyped __lua__('N_0x60edd13eb3ac1ff3')(); }
    
    /**
    * Unknown. Called after creating a checkpoint (type: 51) in the creators.
    */
    @:pure static inline function N_0x615d3925e87a3b26(checkpoint: Int): Void { return untyped __lua__('N_0x615d3925e87a3b26')(checkpoint); }
    
    /**
    * From the scripts:
    * OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
    * OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
    * OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1);
    * OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
    * OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0);
    * OBJECT::_616093EC6B139DD9(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1);
    * SET_PLAYER_P*
    */
    @:pure static inline function N_0x616093ec6b139dd9(player: Int, pickupHash: EitherType<String, Int>, p2: Bool): Void { return untyped __lua__('N_0x616093ec6b139dd9')(player, pickupHash, p2); }
    @:pure static inline function N_0x61631f5df50d1c34(p0: Bool): Void { return untyped __lua__('N_0x61631f5df50d1c34')(p0); }
    @:pure static inline function N_0x61767f73eaceed21(ped: Int): Int { return untyped __lua__('N_0x61767f73eaceed21')(ped); }
    @:pure static inline function N_0x61a885d3f7cfee9a(): Void { return untyped __lua__('N_0x61a885d3f7cfee9a')(); }
    @:pure static inline function N_0x61f95e5bb3e0a8c6(p0: Int): Void { return untyped __lua__('N_0x61f95e5bb3e0a8c6')(p0); }
    @:pure static inline function N_0x6216b116083a7cb4(p0: Int): Void { return untyped __lua__('N_0x6216b116083a7cb4')(p0); }
    
    /**
    * Used only once (am_mp_property_int)
    * ped was PLAYER_PED_ID()
    */
    @:pure static inline function N_0x621c6e4729388e41(ped: Int): Int { return untyped __lua__('N_0x621c6e4729388e41')(ped); }
    @:pure static inline function N_0x6274c4712850841e(entity: Int, p1: Bool): Void { return untyped __lua__('N_0x6274c4712850841e')(entity, p1); }
    @:pure static inline function N_0x629526aba383bcaa(): Void { return untyped __lua__('N_0x629526aba383bcaa')(); }
    @:pure static inline function N_0x62a0296c1bb1ceb3(): Int { return untyped __lua__('N_0x62a0296c1bb1ceb3')(); }
    @:pure static inline function N_0x62b9fec9a11f10ef(): Int { return untyped __lua__('N_0x62b9fec9a11f10ef')(); }
    @:pure static inline function N_0x62ca17b74c435651(vehicle: Int): Int { return untyped __lua__('N_0x62ca17b74c435651')(vehicle); }
    @:pure static inline function N_0x62e849b7eb28e770(p0: Bool): Void { return untyped __lua__('N_0x62e849b7eb28e770')(p0); }
    
    /**
    * returns sceneHandle
    */
    @:pure static inline function N_0x62ec273d00187dca(x: Int, y: Int, z: Int, radius: Int, object: EitherType<String, Int>): Int { return untyped __lua__('N_0x62ec273d00187dca')(x, y, z, radius, object); }
    @:pure static inline function N_0x62ecfcfdee7885d6(): Void { return untyped __lua__('N_0x62ecfcfdee7885d6')(); }
    @:pure static inline function N_0x631dc5dff4b110e3(p0: Int): Int { return untyped __lua__('N_0x631dc5dff4b110e3')(p0); }
    @:pure static inline function N_0x632b2940c67f4ea9(scaleformHandle: Int): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('N_0x632b2940c67f4ea9')(scaleformHandle); }
    @:pure static inline function N_0x634148744f385576(vehicle: Int): Int { return untyped __lua__('N_0x634148744f385576')(vehicle); }
    @:pure static inline function N_0x638a3a81733086db(): Int { return untyped __lua__('N_0x638a3a81733086db')(); }
    @:pure static inline function N_0x639431e895b9aa57(ped: Int, vehicle: Int, p2: Bool, p3: Bool, p4: Bool): Int { return untyped __lua__('N_0x639431e895b9aa57')(ped, vehicle, p2, p3, p4); }
    @:pure static inline function N_0x63b406d7884bfa95(): Int { return untyped __lua__('N_0x63b406d7884bfa95')(); }
    @:pure static inline function N_0x63eb2b972a218cac(): Void { return untyped __lua__('N_0x63eb2b972a218cac')(); }
    @:pure static inline function N_0x643ed62d5ea3bebd(): Void { return untyped __lua__('N_0x643ed62d5ea3bebd')(); }
    @:pure static inline function N_0x644546ec5287471b(): Int { return untyped __lua__('N_0x644546ec5287471b')(); }
    @:pure static inline function N_0x6483c25849031c4f(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0x6483c25849031c4f')(p0, p1, p2, p3); }
    @:pure static inline function N_0x648e7a5434af7969(p0: String, p2: Bool, type: String): { a0: Int, a1: Int, a2: Int, a3: Int, a4: Int } { return untyped __lua__('N_0x648e7a5434af7969')(p0, p2, type); }
    @:pure static inline function N_0x649c97d52332341a(p0: Int): Void { return untyped __lua__('N_0x649c97d52332341a')(p0); }
    @:pure static inline function N_0x64f62afb081e260d(): Void { return untyped __lua__('N_0x64f62afb081e260d')(); }
    @:pure static inline function N_0x6512765e3be78c50(): Int { return untyped __lua__('N_0x6512765e3be78c50')(); }
    
    /**
    * possibly called:
    * ADD_DOOR_EXPERIMENTAL_MATRIX
    */
    @:pure static inline function N_0x65499865fca6e5ec(doorHash: EitherType<String, Int>): Int { return untyped __lua__('N_0x65499865fca6e5ec')(doorHash); }
    
    /**
    * Something related to clearing the ped because always used with CLEAR_PED_WETNESS, CLEAR_PED_BLOOD_DAMAGE and RESET_PED_VISIBLE_DAMAGE.
    */
    @:pure static inline function N_0x6585d955a68452a5(ped: Int): Int { return untyped __lua__('N_0x6585d955a68452a5')(ped); }
    @:pure static inline function N_0x65d2ebb47e1cec21(p0: Bool): Void { return untyped __lua__('N_0x65d2ebb47e1cec21')(p0); }
    
    /**
    * IS_PLAYER_*
    */
    @:pure static inline function N_0x65faee425de637b0(p0: Int): Int { return untyped __lua__('N_0x65faee425de637b0')(p0); }
    @:pure static inline function N_0x661b5c8654add825(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x661b5c8654add825')(p0, p1); }
    @:pure static inline function N_0x662635855957c411(p0: Int): Int { return untyped __lua__('N_0x662635855957c411')(p0); }
    
    /**
    * Something related to vehicle lean? (References CVehicleLeanHelper)
    */
    @:pure static inline function N_0x6636c535f6cc2725(vehicle: Int): Int { return untyped __lua__('N_0x6636c535f6cc2725')(vehicle); }
    @:pure static inline function N_0x6647c5f6f5792496(ped: Int, p1: Bool): Void { return untyped __lua__('N_0x6647c5f6f5792496')(ped, p1); }
    
    /**
    * Normally returns true. Returns false briefly whilst getting into a plane. This is probably a check to see if the ped model and all its components/drawables are properly loaded yet.
    */
    @:pure static inline function N_0x66680a92700f43df(p0: Int): Int { return untyped __lua__('N_0x66680a92700f43df')(p0); }
    @:pure static inline function N_0x66972397e0757e7a(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0x66972397e0757e7a')(p0, p1, p2); }
    @:pure static inline function N_0x66979acf5102fd2f(cargobob: Int, p1: Int): Void { return untyped __lua__('N_0x66979acf5102fd2f')(cargobob, p1); }
    @:pure static inline function N_0x66a49d021870fe88(): Void { return untyped __lua__('N_0x66a49d021870fe88')(); }
    @:pure static inline function N_0x66b59cffd78467af(): Int { return untyped __lua__('N_0x66b59cffd78467af')(); }
    @:pure static inline function N_0x66e7cb63c97b7d20(): Int { return untyped __lua__('N_0x66e7cb63c97b7d20')(); }
    @:pure static inline function N_0x66f010a4b031a331(p0: Int): Void { return untyped __lua__('N_0x66f010a4b031a331')(p0); }
    @:pure static inline function N_0x673ed815d6e323b7(p0: Int, p1: Bool, p2: Bool, p3: Bool, p4: Int): Int { return untyped __lua__('N_0x673ed815d6e323b7')(p0, p1, p2, p3, p4); }
    @:pure static inline function N_0x675721c9f644d161(): Void { return untyped __lua__('N_0x675721c9f644d161')(); }
    @:pure static inline function N_0x678bb03c1a3bd51e(p0: Int, p1: Int, p2: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x678bb03c1a3bd51e')(p0, p1, p2); }
    @:pure static inline function N_0x67a5589628e0cff6(): Int { return untyped __lua__('N_0x67a5589628e0cff6')(); }
    @:pure static inline function N_0x67eedea1b9bafd94(): Void { return untyped __lua__('N_0x67eedea1b9bafd94')(); }
    @:pure static inline function N_0x67f6413d3220e18d(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int): Int { return untyped __lua__('N_0x67f6413d3220e18d')(p0, p1, p2, p3, p4, p5, p6, p7, p8); }
    
    /**
    * MulleDK19: This function is hard-coded to always return 0.
    */
    @:pure static inline function N_0x67fc09bc554a75e5(): Int { return untyped __lua__('N_0x67fc09bc554a75e5')(); }
    @:pure static inline function N_0x68103e2247887242(): Void { return untyped __lua__('N_0x68103e2247887242')(); }
    
    /**
    * example:
    * if (GAMEPLAY::_684A41975F077262()) {
    * (a_0) = GAMEPLAY::_ABB2FA71C83A1B72();
    * } else {
    * (a_0) = -1;
    * }
    */
    @:pure static inline function N_0x684a41975f077262(): Int { return untyped __lua__('N_0x684a41975f077262')(); }
    @:pure static inline function N_0x6856ec3d35c81ea4(): Int { return untyped __lua__('N_0x6856ec3d35c81ea4')(); }
    @:pure static inline function N_0x685d5561680d088b(vehicle: Int, p1: Int): Void { return untyped __lua__('N_0x685d5561680d088b')(vehicle, p1); }
    @:pure static inline function N_0x68772db2b2526f9f(ped: Int, x: Int, y: Int, z: Int, range: Int): Int { return untyped __lua__('N_0x68772db2b2526f9f')(ped, x, y, z, range); }
    @:pure static inline function N_0x687c0b594907d2e8(ped: Int): Void { return untyped __lua__('N_0x687c0b594907d2e8')(ped); }
    
    /**
    * p0 seems to be Ped
    */
    @:pure static inline function N_0x690a61a6d13583f6(p0: Int): Int { return untyped __lua__('N_0x690a61a6d13583f6')(p0); }
    @:pure static inline function N_0x692d58df40657e8c(p0: Int, p1: Int, p2: Int, p4: Int, p5: Bool): { a0: Int, a1: Int } { return untyped __lua__('N_0x692d58df40657e8c')(p0, p1, p2, p4, p5); }
    @:pure static inline function N_0x692d808c34a82143(p0: String, p1: Int, type: String): Int { return untyped __lua__('N_0x692d808c34a82143')(p0, p1, type); }
    
    /**
    * what does it do?
    */
    @:pure static inline function N_0x694e00132f2823ed(entity: Int, p1: Bool): Void { return untyped __lua__('N_0x694e00132f2823ed')(entity, p1); }
    @:pure static inline function N_0x699e4a5c8c893a18(p0: Int, p1: String, p2: Int): Int { return untyped __lua__('N_0x699e4a5c8c893a18')(p0, p1, p2); }
    @:pure static inline function N_0x69fe6dc87bd2a5e9(p0: Int): Void { return untyped __lua__('N_0x69fe6dc87bd2a5e9')(p0); }
    @:pure static inline function N_0x6a12d88881435dca(): Void { return untyped __lua__('N_0x6a12d88881435dca')(); }
    
    /**
    * Called in freemode related scripts but not freemode itself.
    */
    @:pure static inline function N_0x6a5d89d7769a40d8(p0: Bool): Void { return untyped __lua__('N_0x6a5d89d7769a40d8')(p0); }
    @:pure static inline function N_0x6a98c2ecf57fa5d4(vehicle: Int, entity: Int): Void { return untyped __lua__('N_0x6a98c2ecf57fa5d4')(vehicle, entity); }
    @:pure static inline function N_0x6adaabd3068c5235(): Int { return untyped __lua__('N_0x6adaabd3068c5235')(); }
    @:pure static inline function N_0x6afd2cd753feef83(p0: String): Int { return untyped __lua__('N_0x6afd2cd753feef83')(p0); }
    @:pure static inline function N_0x6b0e6172c9a4d902(p0: Bool): Void { return untyped __lua__('N_0x6b0e6172c9a4d902')(p0); }
    @:pure static inline function N_0x6b1de27ee78e6a19(p0: Int): Void { return untyped __lua__('N_0x6b1de27ee78e6a19')(p0); }
    @:pure static inline function N_0x6bfb12ce158e3dd4(p0: Int): Int { return untyped __lua__('N_0x6bfb12ce158e3dd4')(p0); }
    @:pure static inline function N_0x6bff5f84102df80a(p0: Int): Void { return untyped __lua__('N_0x6bff5f84102df80a')(p0); }
    @:pure static inline function N_0x6c34f1208b8923fd(p0: Int): Int { return untyped __lua__('N_0x6c34f1208b8923fd')(p0); }
    @:pure static inline function N_0x6cc86e78358d5119(): Void { return untyped __lua__('N_0x6cc86e78358d5119')(); }
    @:pure static inline function N_0x6cd5a433374d4cfb(p0: Int, p1: Int): Int { return untyped __lua__('N_0x6cd5a433374d4cfb')(p0, p1); }
    @:pure static inline function N_0x6cd79468a1e595c6(inputGroup: Int): Int { return untyped __lua__('N_0x6cd79468a1e595c6')(inputGroup); }
    @:pure static inline function N_0x6d4cb481fac835e8(p0: Int, p1: Int, p3: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x6d4cb481fac835e8')(p0, p1, p3); }
    
    /**
    * Possible values:
    * act_cinema
    * am_mp_carwash_launch
    * am_mp_carwash_control
    * am_mp_property_ext
    * chop
    * fairgroundHub
    * launcher_BasejumpHeli
    * launcher_BasejumpPack
    * launcher_CarWash
    * launcher_golf
    * launcher_Hunting_Ambient
    * launcher_MrsPhilips
    * launcher_OffroadRacing
    * launcher_pilotschool
    * launcher_Racing
    * launcher_rampage
    * launcher_rampage
    * launcher_range
    * launcher_stunts
    * launcher_stunts
    * launcher_tennis
    * launcher_Tonya
    * launcher_Triathlon
    * launcher_Yoga
    * ob_mp_bed_low
    * ob_mp_bed_med
    */
    @:pure static inline function N_0x6d6840cee8845831(action: String): Void { return untyped __lua__('N_0x6d6840cee8845831')(action); }
    @:pure static inline function N_0x6d6af961b72728ae(vehicle: Int): Void { return untyped __lua__('N_0x6d6af961b72728ae')(vehicle); }
    
    /**
    * Console Hash: 0x60E29B78
    */
    @:pure static inline function N_0x6d8eac07506291fb(cargobob: Int, p1: Int): Void { return untyped __lua__('N_0x6d8eac07506291fb')(cargobob, p1); }
    @:pure static inline function N_0x6d955f6a9e0295b1(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Void { return untyped __lua__('N_0x6d955f6a9e0295b1')(p0, p1, p2, p3, p4, p5, p6); }
    @:pure static inline function N_0x6dd8f5aa635eb4b2(p0: Int, p1: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x6dd8f5aa635eb4b2')(p0, p1); }
    @:pure static inline function N_0x6ddbf9dffc4ac080(p0: Bool): Void { return untyped __lua__('N_0x6ddbf9dffc4ac080')(p0); }
    @:pure static inline function N_0x6dee77aff8c21bd1(): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x6dee77aff8c21bd1')(); }
    @:pure static inline function N_0x6e04f06094c87047(): Int { return untyped __lua__('N_0x6e04f06094c87047')(); }
    @:pure static inline function N_0x6e0eb3eb47c8d7aa(): Int { return untyped __lua__('N_0x6e0eb3eb47c8d7aa')(); }
    
    /**
    * Looks like a cousin of above function _6D6840CEE8845831 as it was found among them. Must be similar
    * Here are possible values of argument -
    * "ob_tv"
    * "launcher_Darts"
    */
    @:pure static inline function N_0x6e91b04e08773030(action: String): Void { return untyped __lua__('N_0x6e91b04e08773030')(action); }
    
    /**
    * sfink: sets bit in vehicle's structure, used by maintransition, fm_mission_controller, mission_race and a couple of other scripts. see dissassembly:
    * CVehicle *__fastcall sub_140CDAA10(signed int a1, char a2)
    * {
    * CVehicle *result; // rax@1
    * result = EntityAsCVehicle(a1);
    * if ( result )
    * {
    * result-&gt;field_886 &amp;= 0xEFu;
    * result-&gt;field_886 |= 16 * (a2 &amp; 1);
    * }
    * return result;
    * }
    */
    @:pure static inline function N_0x6ebfb22d646ffc18(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x6ebfb22d646ffc18')(vehicle, p1); }
    @:pure static inline function N_0x6ef54ab721dc6242(): Void { return untyped __lua__('N_0x6ef54ab721dc6242')(); }
    @:pure static inline function N_0x6f1554b0cc2089fa(p0: Bool): Void { return untyped __lua__('N_0x6f1554b0cc2089fa')(p0); }
    @:pure static inline function N_0x6f2135b6129620c1(p0: Bool): Void { return untyped __lua__('N_0x6f2135b6129620c1')(p0); }
    @:pure static inline function N_0x6f259f82d873b8b8(): Int { return untyped __lua__('N_0x6f259f82d873b8b8')(); }
    @:pure static inline function N_0x6f361b8889a792a3(): Void { return untyped __lua__('N_0x6f361b8889a792a3')(); }
    @:pure static inline function N_0x6f44cbf56d79fac0(p0: Int, p1: Int): Int { return untyped __lua__('N_0x6f44cbf56d79fac0')(p0, p1); }
    @:pure static inline function N_0x6f697a66ce78674e(team: Int, toggle: Bool): Void { return untyped __lua__('N_0x6f697a66ce78674e')(team, toggle); }
    @:pure static inline function N_0x6f72cd94f7b5b68c(): Int { return untyped __lua__('N_0x6f72cd94f7b5b68c')(); }
    
    /**
    * Seems to have the same functionality as REGISTER_TEXT_LABEL_TO_SAVE?
    * GAMEPLAY::_6F7794F28C6B2535(&amp;a_0._f1, "tlPlateText");
    * GAMEPLAY::_6F7794F28C6B2535(&amp;a_0._f1C, "tlPlateText_pending");
    * GAMEPLAY::_6F7794F28C6B2535(&amp;a_0._f10B, "tlCarAppPlateText");
    * "tl" prefix sounds like "Text Label"
    */
    @:pure static inline function N_0x6f7794f28c6b2535(name: String): Int { return untyped __lua__('N_0x6f7794f28c6b2535')(name); }
    
    /**
    * MulleDK19: This function is hard-coded to always return 0.
    */
    @:pure static inline function N_0x6fb7bb3607d27fa2(): Int { return untyped __lua__('N_0x6fb7bb3607d27fa2')(); }
    
    /**
    * This function is hard-coded to always return 1.
    */
    @:pure static inline function N_0x6fcf8ddea146c45b(p0: Int): Int { return untyped __lua__('N_0x6fcf8ddea146c45b')(p0); }
    @:pure static inline function N_0x6fddad856e36988a(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x6fddad856e36988a')(p0, p1); }
    
    /**
    * - if (GAMEPLAY::_6FDDF453C0C756EC() || GAMEPLAY::IS_PC_VERSION()) {
    */
    @:pure static inline function N_0x6fddf453c0c756ec(): Int { return untyped __lua__('N_0x6fddf453c0c756ec')(); }
    @:pure static inline function N_0x700569dba175a77c(p0: Int): Int { return untyped __lua__('N_0x700569dba175a77c')(p0); }
    @:pure static inline function N_0x701fda1e82076ba4(): Void { return untyped __lua__('N_0x701fda1e82076ba4')(); }
    @:pure static inline function N_0x702bc4d605522539(p0: Int): Void { return untyped __lua__('N_0x702bc4d605522539')(p0); }
    @:pure static inline function N_0x703cc7f60cbb2b57(p0: Int): Void { return untyped __lua__('N_0x703cc7f60cbb2b57')(p0); }
    @:pure static inline function N_0x703f12425eca8bf5(p0: Int): Int { return untyped __lua__('N_0x703f12425eca8bf5')(p0); }
    @:pure static inline function N_0x705a276ebff3133d(): Int { return untyped __lua__('N_0x705a276ebff3133d')(); }
    @:pure static inline function N_0x70894bd0915c5bca(p0: Int): Int { return untyped __lua__('N_0x70894bd0915c5bca')(p0); }
    @:pure static inline function N_0x708bdd8cd795b043(): Int { return untyped __lua__('N_0x708bdd8cd795b043')(); }
    @:pure static inline function N_0x70b8ec8fc108a634(p0: Bool, p1: Int): Void { return untyped __lua__('N_0x70b8ec8fc108a634')(p0, p1); }
    @:pure static inline function N_0x70ea8da57840f9be(p0: Int): Int { return untyped __lua__('N_0x70ea8da57840f9be')(p0); }
    
    /**
    * Used in am_mp_property_ext and am_mp_property_int
    */
    @:pure static inline function N_0x715135f4b82ac90d(entity: Int): Void { return untyped __lua__('N_0x715135f4b82ac90d')(entity); }
    
    /**
    * If the function fails, returns "Unknown".
    * Could be task (sequence) name. Needs more research.
    */
    @:pure static inline function N_0x717e4d1f2048376d(ped: Int): String { return untyped __lua__('N_0x717e4d1f2048376d')(ped); }
    @:pure static inline function N_0x71862b1d855f32e1(p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0x71862b1d855f32e1')(p1, p2, p3); }
    @:pure static inline function N_0x71b008056e5692d6(): Void { return untyped __lua__('N_0x71b008056e5692d6')(); }
    
    /**
    * It's 100% an IS_CUTSCENE_* native.
    */
    @:pure static inline function N_0x71b74d2ae19338d0(p0: Int): Int { return untyped __lua__('N_0x71b74d2ae19338d0')(p0); }
    @:pure static inline function N_0x71bdb63dbaf8da59(p0: Int): Void { return untyped __lua__('N_0x71bdb63dbaf8da59')(p0); }
    @:pure static inline function N_0x71e7b2e657449aad(): Int { return untyped __lua__('N_0x71e7b2e657449aad')(); }
    @:pure static inline function N_0x722f5d28b61c5ea8(p0: Int): Int { return untyped __lua__('N_0x722f5d28b61c5ea8')(p0); }
    @:pure static inline function N_0x723c1ce13fbfdb67(p0: Int, p1: Int): Void { return untyped __lua__('N_0x723c1ce13fbfdb67')(p0, p1); }
    @:pure static inline function N_0x728c4cc7920cd102(p0: Int): Int { return untyped __lua__('N_0x728c4cc7920cd102')(p0); }
    
    /**
    * Appears to be a HIDE_* native.
    */
    @:pure static inline function N_0x72c1056d678bb7d8(weaponHash: EitherType<String, Int>): Void { return untyped __lua__('N_0x72c1056d678bb7d8')(weaponHash); }
    @:pure static inline function N_0x72d0706cd6ccdb58(): Void { return untyped __lua__('N_0x72d0706cd6ccdb58')(); }
    @:pure static inline function N_0x72d918c99bcacc54(p0: Int): Int { return untyped __lua__('N_0x72d918c99bcacc54')(p0); }
    @:pure static inline function N_0x72dd432f3cdfc0ee(posX: Int, posY: Int, posZ: Int, radius: Int, p4: Int): Void { return untyped __lua__('N_0x72dd432f3cdfc0ee')(posX, posY, posZ, radius, p4); }
    @:pure static inline function N_0x72de52178c291cb5(): Int { return untyped __lua__('N_0x72de52178c291cb5')(); }
    @:pure static inline function N_0x72eb7ba9b69bf6ab(): Int { return untyped __lua__('N_0x72eb7ba9b69bf6ab')(); }
    
    /**
    * NETWORK_CAN_R??? or NETWORK_CAN_S???
    */
    @:pure static inline function N_0x7303e27cc6532080(p0: Int, p1: Bool, p2: Bool, p3: Bool, p5: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x7303e27cc6532080')(p0, p1, p2, p3, p5); }
    
    /**
    * AUDIO::_733ADF241531E5C2("inTunnel", 1.0);
    * AUDIO::_733ADF241531E5C2("inTunnel", 0.0);
    * I do not know as of yet what this does, but this was found in the scripts.
    */
    @:pure static inline function N_0x733adf241531e5c2(name: String, p1: Int): Void { return untyped __lua__('N_0x733adf241531e5c2')(name, p1); }
    @:pure static inline function N_0x733c87d4ce22bea2(p0: Int): Void { return untyped __lua__('N_0x733c87d4ce22bea2')(p0); }
    @:pure static inline function N_0x7350823473013c02(ped: Int): Int { return untyped __lua__('N_0x7350823473013c02')(ped); }
    @:pure static inline function N_0x741a3d8380319a81(): Void { return untyped __lua__('N_0x741a3d8380319a81')(); }
    @:pure static inline function N_0x742b58f723233ed9(p0: Int): Int { return untyped __lua__('N_0x742b58f723233ed9')(p0); }
    
    /**
    * NETWORK_IS_*
    */
    @:pure static inline function N_0x74698374c45701d2(): Int { return untyped __lua__('N_0x74698374c45701d2')(); }
    @:pure static inline function N_0x74a0fd0688f1ee45(p0: Int): Int { return untyped __lua__('N_0x74a0fd0688f1ee45')(p0); }
    @:pure static inline function N_0x74bd83ea840f6bc9(): Int { return untyped __lua__('N_0x74bd83ea840f6bc9')(); }
    @:pure static inline function N_0x74c180030fde4b69(p0: Bool): Void { return untyped __lua__('N_0x74c180030fde4b69')(p0); }
    @:pure static inline function N_0x74de2e8739086740(): Void { return untyped __lua__('N_0x74de2e8739086740')(); }
    
    /**
    * MulleDK19: This function is hard-coded to always return 0.
    */
    @:pure static inline function N_0x74fb3e29e6d10fa9(): Int { return untyped __lua__('N_0x74fb3e29e6d10fa9')(); }
    
    /**
    * bufferSize is 35 in the scripts.
    */
    @:pure static inline function N_0x7543bb439f63792b(bufferSize: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x7543bb439f63792b')(bufferSize); }
    @:pure static inline function N_0x75773e11ba459e90(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x75773e11ba459e90')(p0, p1); }
    @:pure static inline function N_0x759299c5bb31d2a9(p0: Int, p1: Int): Int { return untyped __lua__('N_0x759299c5bb31d2a9')(p0, p1); }
    @:pure static inline function N_0x759650634f07b6b4(p0: Int): Int { return untyped __lua__('N_0x759650634f07b6b4')(p0); }
    @:pure static inline function N_0x75a16c3da34f1245(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x75a16c3da34f1245')(p0, p1); }
    @:pure static inline function N_0x75ba1cb3b7d40caf(ped: Int, p1: Bool): Void { return untyped __lua__('N_0x75ba1cb3b7d40caf')(ped, p1); }
    @:pure static inline function N_0x75d3691713c3b05a(): Void { return untyped __lua__('N_0x75d3691713c3b05a')(); }
    @:pure static inline function N_0x762db2d380b48d04(p0: Int): Void { return untyped __lua__('N_0x762db2d380b48d04')(p0); }
    @:pure static inline function N_0x7669f9e39dc17063(): Void { return untyped __lua__('N_0x7669f9e39dc17063')(); }
    @:pure static inline function N_0x7679cc1bcebe3d4c(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0x7679cc1bcebe3d4c')(p0, p1, p2); }
    
    /**
    * Seems to take data that is returned from "_POP_SCALEFORM_MOVIE_FUNCTION" and checks to see if it's not null/empty.
    * "agency_heist3b.ysc", line 71836:
    * if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, 201) || CONTROLS::IS_CONTROL_JUST_PRESSED(2, 237)) {
    * GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION(l_46, "SET_INPUT_EVENT_SELECT");
    * l_45 = GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION();
    * }
    * if (GRAPHICS::_0x768FF8961BA904D6(l_45)) {
    * v_13 = GRAPHICS::_0x2DE7EFA66B906036(l_45);
    * if (v_13 == 6) {
    * sub_73269(a_0);
    * }
    * }
    */
    @:pure static inline function N_0x768ff8961ba904d6(funcData: Int): Int { return untyped __lua__('N_0x768ff8961ba904d6')(funcData); }
    @:pure static inline function N_0x769951e2455e2eb5(): Int { return untyped __lua__('N_0x769951e2455e2eb5')(); }
    @:pure static inline function N_0x76bf03fadbf154f5(): Int { return untyped __lua__('N_0x76bf03fadbf154f5')(); }
    
    /**
    * 6 calls in the b617d scripts, removed identical lines:
    * AUDIO::_774BD811F656A122("RADIO_01_CLASS_ROCK", 1);
    * AUDIO::_774BD811F656A122(AUDIO::GET_RADIO_STATION_NAME(10), 0);
    * AUDIO::_774BD811F656A122(AUDIO::GET_RADIO_STATION_NAME(10), 1);
    */
    @:pure static inline function N_0x774bd811f656a122(radioStation: String, p1: Bool): Void { return untyped __lua__('N_0x774bd811f656a122')(radioStation, p1); }
    @:pure static inline function N_0x77758139ec9b66c7(p0: Bool): Void { return untyped __lua__('N_0x77758139ec9b66c7')(p0); }
    @:pure static inline function N_0x7792424aa0eac32e(): Void { return untyped __lua__('N_0x7792424aa0eac32e')(); }
    @:pure static inline function N_0x77f16b447824da6c(p0: Int): Void { return untyped __lua__('N_0x77f16b447824da6c')(p0); }
    @:pure static inline function N_0x77f33f2ccf64b3aa(object: Int, p1: Bool): Void { return untyped __lua__('N_0x77f33f2ccf64b3aa')(object, p1); }
    @:pure static inline function N_0x77faddcbe3499df7(p0: Int): Void { return untyped __lua__('N_0x77faddcbe3499df7')(p0); }
    
    /**
    * MulleDK19: This function is hard-coded to always return 1.
    */
    @:pure static inline function N_0x7808619f31ff22db(): Int { return untyped __lua__('N_0x7808619f31ff22db')(); }
    
    /**
    * p1: "MP_FEMALE_ACTION" found multiple times in the b617d scripts.
    * Console Hash: 0x83BAE814
    */
    @:pure static inline function N_0x781de8fa214e87d2(ped: Int, p1: String): Void { return untyped __lua__('N_0x781de8fa214e87d2')(ped, p1); }
    @:pure static inline function N_0x78321bea235fd8cd(p0: Int, p1: Bool): Int { return untyped __lua__('N_0x78321bea235fd8cd')(p0, p1); }
    
    /**
    * Normally returns true. Returns false briefly whilst putting on a helmet after getting onto a motorbike. Not sure what that's about.
    */
    @:pure static inline function N_0x784002a632822099(ped: Int): Int { return untyped __lua__('N_0x784002a632822099')(ped); }
    @:pure static inline function N_0x784ba7e0eceb4178(p0: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('N_0x784ba7e0eceb4178')(p0, x, y, z); }
    @:pure static inline function N_0x78857fc65cadb909(p0: Bool): Void { return untyped __lua__('N_0x78857fc65cadb909')(p0); }
    @:pure static inline function N_0x788e7fd431bd67f1(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Void { return untyped __lua__('N_0x788e7fd431bd67f1')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function N_0x78c0d93253149435(): Int { return untyped __lua__('N_0x78c0d93253149435')(); }
    @:pure static inline function N_0x78c4e9961db3eb5b(p0: Int, p1: Int): Void { return untyped __lua__('N_0x78c4e9961db3eb5b')(p0, p1); }
    
    /**
    * Related to cutscene entities. Unsure about the use.
    */
    @:pure static inline function N_0x78e8e3a640178255(entity: Int): Void { return untyped __lua__('N_0x78e8e3a640178255')(entity); }
    @:pure static inline function N_0x793ff272d5b365f4(): Int { return untyped __lua__('N_0x793ff272d5b365f4')(); }
    @:pure static inline function N_0x796a877e459b99ea(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0x796a877e459b99ea')(p0, p1, p2, p3); }
    @:pure static inline function N_0x796a87b3b68d1f3d(p0: Int): Int { return untyped __lua__('N_0x796a87b3b68d1f3d')(p0); }
    @:pure static inline function N_0x79ab33f0fbfac40c(p0: Int): Void { return untyped __lua__('N_0x79ab33f0fbfac40c')(p0); }
    @:pure static inline function N_0x79df7e806202ce01(p0: Int, p1: Int): Void { return untyped __lua__('N_0x79df7e806202ce01')(p0, p1); }
    @:pure static inline function N_0x7a42b2e236e71415(): Void { return untyped __lua__('N_0x7a42b2e236e71415')(); }
    @:pure static inline function N_0x7ac24eab6d74118d(p0: Bool): Int { return untyped __lua__('N_0x7ac24eab6d74118d')(p0); }
    @:pure static inline function N_0x7ac752103856fb20(p0: Bool): Void { return untyped __lua__('N_0x7ac752103856fb20')(p0); }
    @:pure static inline function N_0x7ae0589093a2e088(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Int { return untyped __lua__('N_0x7ae0589093a2e088')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function N_0x7b21e0bb01e8224a(p0: Int): Void { return untyped __lua__('N_0x7b21e0bb01e8224a')(p0); }
    @:pure static inline function N_0x7b226c785a52a0a9(): Int { return untyped __lua__('N_0x7b226c785a52a0a9')(); }
    
    /**
    * Set's the string displayed when flag 3 (AudioSpeaker) active.
    */
    @:pure static inline function N_0x7b7723747ccb55b6(gamerTagId: Int, string: String): Void { return untyped __lua__('N_0x7b7723747ccb55b6')(gamerTagId, string); }
    @:pure static inline function N_0x7bf1a54ae67ac070(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0x7bf1a54ae67ac070')(p0, p1, p2); }
    @:pure static inline function N_0x7c0043fdff6436bc(vehicle: Int): Void { return untyped __lua__('N_0x7c0043fdff6436bc')(vehicle); }
    
    /**
    * Used for cash gifts
    * Console Hash
    */
    @:pure static inline function N_0x7c4fccd2e4deb394(): Int { return untyped __lua__('N_0x7c4fccd2e4deb394')(); }
    @:pure static inline function N_0x7c9c0b1eeb1f9072(p0: Int): Void { return untyped __lua__('N_0x7c9c0b1eeb1f9072')(p0); }
    @:pure static inline function N_0x7cd934010e115c2c(ped: Int): Void { return untyped __lua__('N_0x7cd934010e115c2c')(ped); }
    
    /**
    * From the scripts:
    * AUDIO::_7CDC8C3B89F661B3(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("PAIGE_PVG"));
    * AUDIO::_7CDC8C3B89F661B3(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("TALINA_PVG"));
    * AUDIO::_7CDC8C3B89F661B3(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("FEMALE_LOST_BLACK_PVG"));
    * AUDIO::_7CDC8C3B89F661B3(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("FEMALE_LOST_WHITE_PVG"));
    */
    @:pure static inline function N_0x7cdc8c3b89f661b3(playerPed: Int, p1: EitherType<String, Int>): Void { return untyped __lua__('N_0x7cdc8c3b89f661b3')(playerPed, p1); }
    @:pure static inline function N_0x7d395ea61622e116(p0: Bool): Void { return untyped __lua__('N_0x7d395ea61622e116')(p0); }
    @:pure static inline function N_0x7d41e9d2d17c5b2d(p0: Int): Int { return untyped __lua__('N_0x7d41e9d2d17c5b2d')(p0); }
    
    /**
    * what does this native do?
    * Here's some pseudocode of the internal setter function:
    * __int64 __fastcall sub_140CD86B4(signed int vehicle, char a2, char a3)
    * {
    * char v3; // di@1
    * char v4; // bl@1
    * __int64 result; // rax@1
    * __int16 v6; // cx@3
    * v3 = a3;
    * v4 = a2;
    * result = GetScriptHandleAddressVehicleCheck(vehicle);
    * if ( result )
    * {
    * if ( v3 || (v6 = *(_WORD *)(result + 0xDA), (v6 &amp; 0xFu) - 6 &lt;= 1) )
    * {
    * *(_BYTE *)(result + 0x89B) &amp;= 0xDFu;
    * *(_BYTE *)(result + 0x89B) |= 32 * (v4 &amp; 1);
    * }
    * }
    * return result;
    * }
    * Now it's time for you to find out :P
    */
    @:pure static inline function N_0x7d6f9a3ef26136a0(vehicle: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('N_0x7d6f9a3ef26136a0')(vehicle, p1, p2); }
    
    /**
    * i found this function just like VEHICLE::TRACK_VEHICLE_VISIBILITY
    * example:
    * PED::_0x7D7A2E43E74E2EB8(ped);// TRACK_PED_VISIBILITY
    * if (PED::IS_TRACKED_PED_VISIBLE(ped))
    * {
    * }
    */
    @:pure static inline function N_0x7d7a2e43e74e2eb8(p0: Int): Void { return untyped __lua__('N_0x7d7a2e43e74e2eb8')(p0); }
    @:pure static inline function N_0x7db53b37a2f211a0(): Int { return untyped __lua__('N_0x7db53b37a2f211a0')(); }
    @:pure static inline function N_0x7e17be53e1aaabaf(): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x7e17be53e1aaabaf')(); }
    @:pure static inline function N_0x7e2bd3ef6c205f09(p0: Int, p1: Int): Void { return untyped __lua__('N_0x7e2bd3ef6c205f09')(p0, p1); }
    @:pure static inline function N_0x7e6946f68a38b74f(p0: Int): Int { return untyped __lua__('N_0x7e6946f68a38b74f')(p0); }
    @:pure static inline function N_0x7ec6f9a478a6a512(): Void { return untyped __lua__('N_0x7ec6f9a478a6a512')(); }
    
    /**
    * _PLAYSTATS_ROB_ARMOURD_TRUCK
    */
    @:pure static inline function N_0x7eec2a316c250073(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0x7eec2a316c250073')(p0, p1, p2); }
    @:pure static inline function N_0x7f2c4cdf2e82df4c(p0: Int): Int { return untyped __lua__('N_0x7f2c4cdf2e82df4c')(p0); }
    @:pure static inline function N_0x7f2f4f13ac5257ef(p0: Int): Int { return untyped __lua__('N_0x7f2f4f13ac5257ef')(p0); }
    @:pure static inline function N_0x7f8f6405f4777af6(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Bool): Int { return untyped __lua__('N_0x7f8f6405f4777af6')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); }
    @:pure static inline function N_0x7f96f23fa9b73327(modelHash: EitherType<String, Int>): Void { return untyped __lua__('N_0x7f96f23fa9b73327')(modelHash); }
    @:pure static inline function N_0x7fa5d82b8f58ec06(): Int { return untyped __lua__('N_0x7fa5d82b8f58ec06')(); }
    @:pure static inline function N_0x7fcc39c46c3c03bd(p0: Int): Int { return untyped __lua__('N_0x7fcc39c46c3c03bd')(p0); }
    @:pure static inline function N_0x7fd2990af016795e(p2: Int, p3: Int, p4: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x7fd2990af016795e')(p2, p3, p4); }
    @:pure static inline function N_0x80054d7fcc70eec6(p0: Int): Void { return untyped __lua__('N_0x80054d7fcc70eec6')(p0); }
    @:pure static inline function N_0x806058bbdc136e06(): Void { return untyped __lua__('N_0x806058bbdc136e06')(); }
    @:pure static inline function N_0x8098c8d6597aae18(p0: Int): Int { return untyped __lua__('N_0x8098c8d6597aae18')(p0); }
    
    /**
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function N_0x80c2fd58d720c801(inputGroup: Int, control: Int, p2: Bool): String { return untyped __lua__('N_0x80c2fd58d720c801')(inputGroup, control, p2); }
    
    /**
    * gets some camera fov
    */
    @:pure static inline function N_0x80ec114669daeff4(): Int { return untyped __lua__('N_0x80ec114669daeff4')(); }
    @:pure static inline function N_0x80fe4f3ab4e1b62a(): Void { return untyped __lua__('N_0x80fe4f3ab4e1b62a')(); }
    @:pure static inline function N_0x8147fff6a718e1ad(p0: Int): Int { return untyped __lua__('N_0x8147fff6a718e1ad')(p0); }
    
    /**
    * UI::_817B86108EB94E51(1, &amp;g_189F36._f10CD1[0 -- [[16]] ], &amp;g_189F36._f10CD1[1 -- [[16]] ], &amp;g_189F36._f10CD1[2 -- [[16]] ], &amp;g_189F36._f10CD1[3 -- [[16]] ], &amp;g_189F36._f10CD1[4 -- [[16]] ], &amp;g_189F36._f10CD1[5 -- [[16]] ], &amp;g_189F36._f10CD1[6 -- [[16]] ], &amp;g_189F36._f10CD1[7 -- [[16]] ]);
    */
    @:pure static inline function N_0x817b86108eb94e51(p0: Bool): { a0: Int, a1: Int, a2: Int, a3: Int, a4: Int, a5: Int, a6: Int, a7: Int } { return untyped __lua__('N_0x817b86108eb94e51')(p0); }
    @:pure static inline function N_0x81cbae94390f9f89(): Void { return untyped __lua__('N_0x81cbae94390f9f89')(); }
    
    /**
    * "GET_OBJ_ENTITY" seems highly unlikely.
    */
    @:pure static inline function N_0x82377b65e943f72d(p0: Int): Int { return untyped __lua__('N_0x82377b65e943f72d')(p0); }
    
    /**
    * Only found 2 times in decompiled scripts. Not a whole lot to go off of.
    * GAMEPLAY::_8269816F6CFD40F8(&amp;a_0._f1F5A._f6[0 -- [[8]] ], "TEMPSTAT_LABEL"); // gets saved in a struct called "g_SaveData_STRING_ScriptSaves"
    * GAMEPLAY::_8269816F6CFD40F8(&amp;a_0._f4B4[v_1A -- [[8]] ], &amp;v_5); // where v_5 is "Name0" thru "Name9", gets saved in a struct called "OUTFIT_Name"
    */
    @:pure static inline function N_0x8269816f6cfd40f8(name: String): Int { return untyped __lua__('N_0x8269816f6cfd40f8')(name); }
    
    /**
    * HUD_COLOUR_CONTROLLER_CHOP = 174;
    * UI::GET_HUD_COLOUR(174, &amp;v_6, &amp;v_7, &amp;v_8, &amp;v_9);
    * CONTROLS::_8290252FFF36ACB5(0, v_6, v_7, v_8);
    */
    @:pure static inline function N_0x8290252fff36acb5(p0: Int, red: Int, green: Int, blue: Int): Void { return untyped __lua__('N_0x8290252fff36acb5')(p0, red, green, blue); }
    @:pure static inline function N_0x82cedc33687e1f50(p0: Bool): Void { return untyped __lua__('N_0x82cedc33687e1f50')(p0); }
    @:pure static inline function N_0x82ebb79e258fa2b7(entity: Int, interiorID: Int): Void { return untyped __lua__('N_0x82ebb79e258fa2b7')(entity, interiorID); }
    
    /**
    * only documented to be continued...
    */
    @:pure static inline function N_0x82fde6a57ee4ee44(ped: Int, weaponhash: EitherType<String, Int>, p2: Int, p3: Int, p4: Int, p5: Bool): Int { return untyped __lua__('N_0x82fde6a57ee4ee44')(ped, weaponhash, p2, p3, p4, p5); }
    @:pure static inline function N_0x83a169eabcdb10a2(p0: Int, p1: Int): Void { return untyped __lua__('N_0x83a169eabcdb10a2')(p0, p1); }
    @:pure static inline function N_0x83b8201ed82a9a2d(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0x83b8201ed82a9a2d')(p0, p1, p2, p3); }
    
    /**
    * Saves a JSON file? It might even be saving it to the Rockstar Cloud, but I have no way of verifying this
    * "shrinkletter.c4", line ~378:
    * DATAFILE::DATAFILE_CREATE();
    * v_5 = DATAFILE::_GET_ROOT_OBJECT();
    * DATAFILE::_OBJECT_VALUE_ADD_INTEGER(v_5, "in", a_2);
    * DATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, "st", &amp;a_2._f1);
    * DATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, "mp", &amp;a_2._f2);
    * DATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, "ms", &amp;a_2._f3);
    * DATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, "sc", &amp;a_2._f5);
    * DATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, "pr", &amp;a_2._f6);
    * DATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, "fa", &amp;a_2._f7);
    * DATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, "sm", &amp;a_2._f8);
    * DATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, "kp", &amp;a_2._f9);
    * DATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, "sv", &amp;a_2._fA);
    * DATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, "yo", &amp;a_2._fB);
    * DATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, "fi", &amp;a_2._fC);
    * DATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, "rc", &amp;a_2._fD);
    * DATAFILE::_OBJECT_VALUE_ADD_STRING(v_5, "co", &amp;a_2._fE);
    * DATAFILE::_OBJECT_VALUE_ADD_INTEGER(v_5, "su", a_2._fF);
    * DATAFILE::_83BCCE3224735F05("gta5/psych/index.json"); // saves the file?
    */
    @:pure static inline function N_0x83bcce3224735f05(filename: String): Int { return untyped __lua__('N_0x83bcce3224735f05')(filename); }
    @:pure static inline function N_0x83f28ce49fbbffba(p0: Int, p1: Int, p2: Bool): Int { return untyped __lua__('N_0x83f28ce49fbbffba')(p0, p1, p2); }
    @:pure static inline function N_0x83fe8d7229593017(): Void { return untyped __lua__('N_0x83fe8d7229593017')(); }
    
    /**
    * sfink: from scripts:
    * func_720(socialclub::_0x8416FE4E4629D7D7("bIgnoreCheaterOverride"));
    * func_719(socialclub::_0x8416FE4E4629D7D7("bIgnoreBadSportOverride"));
    */
    @:pure static inline function N_0x8416fe4e4629d7d7(p0: String): Int { return untyped __lua__('N_0x8416fe4e4629d7d7')(p0); }
    @:pure static inline function N_0x84698ab38d0c6636(hash: EitherType<String, Int>): Int { return untyped __lua__('N_0x84698ab38d0c6636')(hash); }
    @:pure static inline function N_0x84de3b5fb3e666f0(p0: Int): Int { return untyped __lua__('N_0x84de3b5fb3e666f0')(p0); }
    @:pure static inline function N_0x851cd923176eba7c(): Void { return untyped __lua__('N_0x851cd923176eba7c')(); }
    @:pure static inline function N_0x85535acf97fc0969(p0: Int): Int { return untyped __lua__('N_0x85535acf97fc0969')(p0); }
    @:pure static inline function N_0x855bc38818f6f684(): Int { return untyped __lua__('N_0x855bc38818f6f684')(); }
    @:pure static inline function N_0x85a0ef54a500882c(p0: Int): Int { return untyped __lua__('N_0x85a0ef54a500882c')(p0); }
    @:pure static inline function N_0x85b6c850546fdde2(p0: Int, p1: Bool, p2: Bool, p3: Bool, p4: Int): Int { return untyped __lua__('N_0x85b6c850546fdde2')(p0, p1, p2, p3, p4); }
    @:pure static inline function N_0x85f6c9aba1de2bcf(): Int { return untyped __lua__('N_0x85f6c9aba1de2bcf')(); }
    @:pure static inline function N_0x869daacbbe9fa006(): Int { return untyped __lua__('N_0x869daacbbe9fa006')(); }
    @:pure static inline function N_0x86e0660e4f5c956d(): Void { return untyped __lua__('N_0x86e0660e4f5c956d')(); }
    @:pure static inline function N_0x876928dddfccc9cd(): Int { return untyped __lua__('N_0x876928dddfccc9cd')(); }
    @:pure static inline function N_0x87e0052f08bd64e6(p0: Int, p1: Int): Int { return untyped __lua__('N_0x87e0052f08bd64e6')(p0, p1); }
    @:pure static inline function N_0x87e5c46c187fe0ae(p0: Int, p1: Int): Int { return untyped __lua__('N_0x87e5c46c187fe0ae')(p0, p1); }
    @:pure static inline function N_0x8806cebfabd3ce05(p0: Int): Int { return untyped __lua__('N_0x8806cebfabd3ce05')(p0); }
    @:pure static inline function N_0x8817605c2ba76200(): Void { return untyped __lua__('N_0x8817605c2ba76200')(); }
    @:pure static inline function N_0x883d79c4071e18b3(): Int { return untyped __lua__('N_0x883d79c4071e18b3')(); }
    @:pure static inline function N_0x88578f6ec36b4a3a(p0: Int, p1: Int): Int { return untyped __lua__('N_0x88578f6ec36b4a3a')(p0, p1); }
    @:pure static inline function N_0x886913bbeaca68c1(p0: Int): Int { return untyped __lua__('N_0x886913bbeaca68c1')(p0); }
    
    /**
    * MulleDK19: This function is hard-coded to always return 0.
    */
    @:pure static inline function N_0x88b588b41ff7868e(): Int { return untyped __lua__('N_0x88b588b41ff7868e')(); }
    @:pure static inline function N_0x88bc673ca9e0ae99(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x88bc673ca9e0ae99')(vehicle, p1); }
    
    /**
    * SET_PED_PATH_*
    * Could be the move speed on the path. Needs testing.
    * Default is 1.0 and maximum is 10.0
    */
    @:pure static inline function N_0x88e32db8c1a4aa4b(ped: Int, p1: Int): Void { return untyped __lua__('N_0x88e32db8c1a4aa4b')(ped, p1); }
    
    /**
    * SET_LOCAL_PLAYER_*
    */
    @:pure static inline function N_0x88eaec617cd26926(p0: EitherType<String, Int>, p1: Bool): Void { return untyped __lua__('N_0x88eaec617cd26926')(p0, p1); }
    
    /**
    * Something to do with time, used in context:
    * NETWORK::GET_TIME_DIFFERENCE(NETWORK::_89023FBBF9200E9F(), ... )
    * sfink: returns the same value as NETWORK::GET_NETWORK_TIME in freemode.
    */
    @:pure static inline function N_0x89023fbbf9200e9f(): Int { return untyped __lua__('N_0x89023fbbf9200e9f')(); }
    @:pure static inline function N_0x89215ec747df244a(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int): Int { return untyped __lua__('N_0x89215ec747df244a')(p0, p1, p2, p3, p4, p5, p6, p7, p8); }
    @:pure static inline function N_0x892b6ab8f33606f5(p0: Int, p1: Int): Void { return untyped __lua__('N_0x892b6ab8f33606f5')(p0, p1); }
    @:pure static inline function N_0x8951eb9c6906d3c8(): Void { return untyped __lua__('N_0x8951eb9c6906d3c8')(); }
    @:pure static inline function N_0x897433d292b44130(): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x897433d292b44130')(); }
    @:pure static inline function N_0x89d630cf5ea96d23(vehicle: Int, entity: Int): Int { return untyped __lua__('N_0x89d630cf5ea96d23')(vehicle, entity); }
    @:pure static inline function N_0x8a35c742130c6080(p0: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x8a35c742130c6080')(p0); }
    
    /**
    * One call found in the b617d scripts:
    * AUDIO::_8A694D7A68F8DC38(NETWORK::NET_TO_PED(l_3989._f26F[0 -- [[1]] ]), "CONV_INTERRUPT_QUIT_IT", "LESTER");
    */
    @:pure static inline function N_0x8a694d7a68f8dc38(p0: Int, p1: String, p2: String): Void { return untyped __lua__('N_0x8a694d7a68f8dc38')(p0, p1, p2); }
    
    /**
    * REQUEST_*
    * Something to do with interiors that have been loaded.
    * STREAMING::_8A7A40100EDFEC58(l_13BC, "V_FIB01_cur_elev");
    * STREAMING::_8A7A40100EDFEC58(l_13BC, "limbo");
    * STREAMING::_8A7A40100EDFEC58(l_13BB, "V_Office_gnd_lifts");
    * STREAMING::_8A7A40100EDFEC58(l_13BB, "limbo");
    * STREAMING::_8A7A40100EDFEC58(l_13BC, "v_fib01_jan_elev");
    * STREAMING::_8A7A40100EDFEC58(l_13BC, "limbo");
    */
    @:pure static inline function N_0x8a7a40100edfec58(interiorID: Int, roomName: String): Void { return untyped __lua__('N_0x8a7a40100edfec58')(interiorID, roomName); }
    @:pure static inline function N_0x8aa464d4e0f6accd(): Int { return untyped __lua__('N_0x8aa464d4e0f6accd')(); }
    @:pure static inline function N_0x8aa9180de2fedd45(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x8aa9180de2fedd45')(vehicle, p1); }
    @:pure static inline function N_0x8abe8608576d9ce3(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0x8abe8608576d9ce3')(p0, p1, p2, p3); }
    
    /**
    * MulleDK19: This function is hard-coded to always return 0.
    */
    @:pure static inline function N_0x8b0c2964ba471961(): Int { return untyped __lua__('N_0x8b0c2964ba471961')(); }
    @:pure static inline function N_0x8bbacbf51da047a8(p0: Int): Void { return untyped __lua__('N_0x8bbacbf51da047a8')(p0); }
    @:pure static inline function N_0x8bd6c6dea20e82c6(p0: Int): Int { return untyped __lua__('N_0x8bd6c6dea20e82c6')(p0); }
    
    /**
    * only documented to be continued...
    * Vector3 func_164(Vector3 vParam0, Vector3 vParam1)
    * {
    * return vParam0.y * vParam1.z - vParam0.z * vParam1.y, vParam0.z * vParam1.x - vParam0.x * vParam1.z, vParam0.x * vParam1.y - vParam0.y * vParam1.x;
    * }
    * float func_67(vector3 vParam0, vector3 vParam1)
    * {
    * return vParam0.x * vParam1.x + vParam0.y * vParam1.y + vParam0.z * vParam1.z;
    * }
    * float p3; Vector3 p4;
    * _0x64D91CED(coords0to.x, coords0to.y, coords0to.z, &amp;p3, &amp;p4);
    */
    @:pure static inline function N_0x8bdc7bfc57a81e76(x: Int, y: Int, z: Int): { a0: Int, a1: Int, a2: Array<Int> } { return untyped __lua__('N_0x8bdc7bfc57a81e76')(x, y, z); }
    @:pure static inline function N_0x8bf907833be275de(p0: Int, p1: Int): Void { return untyped __lua__('N_0x8bf907833be275de')(p0, p1); }
    @:pure static inline function N_0x8bfceb5ea1b161b6(): Int { return untyped __lua__('N_0x8bfceb5ea1b161b6')(); }
    @:pure static inline function N_0x8c4f3bf23b6237db(ped: Int, p1: Bool, p2: Bool): Int { return untyped __lua__('N_0x8c4f3bf23b6237db')(ped, p1, p2); }
    @:pure static inline function N_0x8c8d2739ba44af0f(p0: Int): Int { return untyped __lua__('N_0x8c8d2739ba44af0f')(p0); }
    @:pure static inline function N_0x8cc469ab4d349b7c(p0: Int, p1: String, p2: Int): Int { return untyped __lua__('N_0x8cc469ab4d349b7c')(p0, p1, p2); }
    
    /**
    * console hash: 0x19EC0001
    */
    @:pure static inline function N_0x8cde909a0370bb3a(p0: Bool): Void { return untyped __lua__('N_0x8cde909a0370bb3a')(p0); }
    
    /**
    * Maybe NETWORK_IS_PSN_AVAILABLE as it only applies to the PS4 version.
    */
    @:pure static inline function N_0x8d11e61a4abf49cc(): Int { return untyped __lua__('N_0x8d11e61a4abf49cc')(); }
    @:pure static inline function N_0x8d30f648014a92b5(): Int { return untyped __lua__('N_0x8d30f648014a92b5')(); }
    
    /**
    * GAMEPLAY::_8D74E26F54B4E5C3("");
    */
    @:pure static inline function N_0x8d74e26f54b4e5c3(p0: String): Void { return untyped __lua__('N_0x8d74e26f54b4e5c3')(p0); }
    @:pure static inline function N_0x8d7a43ec6a5fea45(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int): Int { return untyped __lua__('N_0x8d7a43ec6a5fea45')(p0, p1, p2, p3, p4, p5, p6, p7, p8); }
    
    /**
    * Example of usage:
    * v_2 = SCRIPT::_30B4FA1C82DD4B9F(); // int _GET_ID_OF_NEXT_SCRIPT_IN_ENUMERATION()
    * CUTSCENE::_8D9DF6ECA8768583(v_2);
    */
    @:pure static inline function N_0x8d9df6eca8768583(p0: Int): Void { return untyped __lua__('N_0x8d9df6eca8768583')(p0); }
    @:pure static inline function N_0x8e2a065abdae6994(): Void { return untyped __lua__('N_0x8e2a065abdae6994')(); }
    @:pure static inline function N_0x8ec74ceb042e7cff(p0: Int): Void { return untyped __lua__('N_0x8ec74ceb042e7cff')(p0); }
    @:pure static inline function N_0x8ef5573a1f801a5c(p0: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x8ef5573a1f801a5c')(p0); }
    
    /**
    * Example, only occurrence in the scripts:
    * UI::_8EFCCF6EC66D85E4(&amp;v_23, &amp;v_13, &amp;v_13, 1, v_34);
    */
    @:pure static inline function N_0x8efccf6ec66d85e4(p3: Bool, p4: Bool): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('N_0x8efccf6ec66d85e4')(p3, p4); }
    @:pure static inline function N_0x8f08017f9d7c47bd(p0: Int, p2: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x8f08017f9d7c47bd')(p0, p2); }
    @:pure static inline function N_0x8f5ea1c01d65a100(p0: Int): Int { return untyped __lua__('N_0x8f5ea1c01d65a100')(p0); }
    
    /**
    * No observed effect.
    */
    @:pure static inline function N_0x8f719973e1445ba2(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x8f719973e1445ba2')(vehicle, p1); }
    @:pure static inline function N_0x8fa9c42fc5d7c64b(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Bool): Void { return untyped __lua__('N_0x8fa9c42fc5d7c64b')(p0, p1, p2, p3, p4, p5); }
    
    /**
    * Appears only in fm_mission_controller and used only 3 times.
    * ped was always PLAYER_PED_ID()
    * p1 was always true
    * p2 was always true
    */
    @:pure static inline function N_0x8fd89a6240813fd0(ped: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('N_0x8fd89a6240813fd0')(ped, p1, p2); }
    
    /**
    * SET_GPS_???
    */
    @:pure static inline function N_0x900086f371220b6f(p0: Bool, p1: Int, p2: Int): Void { return untyped __lua__('N_0x900086f371220b6f')(p0, p1, p2); }
    @:pure static inline function N_0x9007a2f21dc108d4(p0: Int, p1: Int): Void { return untyped __lua__('N_0x9007a2f21dc108d4')(p0, p1); }
    @:pure static inline function N_0x9049fe339d5f6f6f(): Int { return untyped __lua__('N_0x9049fe339d5f6f6f')(); }
    @:pure static inline function N_0x90a6526cf0381030(p0: Int, p2: Int, p3: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x90a6526cf0381030')(p0, p2, p3); }
    @:pure static inline function N_0x90a78ecaa4e78453(): Int { return untyped __lua__('N_0x90a78ecaa4e78453')(); }
    @:pure static inline function N_0x90d0622866e80445(p0: Int, p1: String): Void { return untyped __lua__('N_0x90d0622866e80445')(p0, p1); }
    
    /**
    * return bool according to scripts
    */
    @:pure static inline function N_0x9135584d09a3437e(): Int { return untyped __lua__('N_0x9135584d09a3437e')(); }
    @:pure static inline function N_0x918c7b2d2ff3928b(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Int { return untyped __lua__('N_0x918c7b2d2ff3928b')(p0, p1, p2, p3, p4, p5, p6); }
    @:pure static inline function N_0x919b3c98ed8292f9(p0: Int): Int { return untyped __lua__('N_0x919b3c98ed8292f9')(p0); }
    @:pure static inline function N_0x91a0bd635321f145(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x91a0bd635321f145')(vehicle, p1); }
    
    /**
    * bool?
    * am_crate_drop.c
    * &lt;...&gt;
    * if (network::_network_are_ros_available())
    * {
    * if (network::_0x91B87C55093DE351())
    * &lt;..&gt;
    */
    @:pure static inline function N_0x91b87c55093de351(): Int { return untyped __lua__('N_0x91b87c55093de351')(); }
    @:pure static inline function N_0x91d6dd290888cbab(): Int { return untyped __lua__('N_0x91d6dd290888cbab')(); }
    @:pure static inline function N_0x91ef6ee6419e5b97(p0: Bool): Void { return untyped __lua__('N_0x91ef6ee6419e5b97')(p0); }
    @:pure static inline function N_0x920d853f3e17f1da(interiorID: Int, roomHashKey: EitherType<String, Int>): Void { return untyped __lua__('N_0x920d853f3e17f1da')(interiorID, roomHashKey); }
    @:pure static inline function N_0x921ce12c489c4c41(PlayerID: Int): Int { return untyped __lua__('N_0x921ce12c489c4c41')(PlayerID); }
    @:pure static inline function N_0x9237e334f6e43156(p0: Int): Int { return untyped __lua__('N_0x9237e334f6e43156')(p0); }
    @:pure static inline function N_0x9245e81072704b8a(p0: Bool): Void { return untyped __lua__('N_0x9245e81072704b8a')(p0); }
    @:pure static inline function N_0x92523b76657a517d(p0: Int, p1: Int): Int { return untyped __lua__('N_0x92523b76657a517d')(p0, p1); }
    
    /**
    * I can 100% confirm this is some kind of START_* native.
    * Next character in the name is either C, D or E.
    * Used only once in the scripts (benchmark.ysc).
    */
    @:pure static inline function N_0x92790862e36c2ada(): Void { return untyped __lua__('N_0x92790862e36c2ada')(); }
    @:pure static inline function N_0x92aefb5f6e294023(object: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('N_0x92aefb5f6e294023')(object, p1, p2); }
    @:pure static inline function N_0x92ccc17a7a2285da(): Void { return untyped __lua__('N_0x92ccc17a7a2285da')(); }
    @:pure static inline function N_0x92da6e70ef249bd1(p0: String, p1: Int): Int { return untyped __lua__('N_0x92da6e70ef249bd1')(p0, p1); }
    
    /**
    * Unknown.
    * Seems to return either 0, 1, or -1.
    */
    @:pure static inline function N_0x930de22f07b1cce3(p0: Int): Int { return untyped __lua__('N_0x930de22f07b1cce3')(p0); }
    @:pure static inline function N_0x933bbeeb8c61b5f4(): Int { return untyped __lua__('N_0x933bbeeb8c61b5f4')(); }
    @:pure static inline function N_0x941e5306bcd7c2c7(): Int { return untyped __lua__('N_0x941e5306bcd7c2c7')(); }
    @:pure static inline function N_0x94538037ee44f5cf(p0: Bool): Void { return untyped __lua__('N_0x94538037ee44f5cf')(p0); }
    @:pure static inline function N_0x9465e683b12d3f6b(): Void { return untyped __lua__('N_0x9465e683b12d3f6b')(); }
    
    /**
    * MulleDK19: This function is hard-coded to always return 0.
    */
    @:pure static inline function N_0x9489659372a81585(): Int { return untyped __lua__('N_0x9489659372a81585')(); }
    @:pure static inline function N_0x949f397a288b28b3(p0: Int): Void { return untyped __lua__('N_0x949f397a288b28b3')(p0); }
    
    /**
    * NETWORK_IS_*
    */
    @:pure static inline function N_0x94a8394d150b013a(): Int { return untyped __lua__('N_0x94a8394d150b013a')(); }
    
    /**
    * Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_MASKED_INT"?
    */
    @:pure static inline function N_0x94f12abf9c79e339(p0: Int): Int { return untyped __lua__('N_0x94f12abf9c79e339')(p0); }
    @:pure static inline function N_0x952f06beecd775cc(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0x952f06beecd775cc')(p0, p1, p2, p3); }
    @:pure static inline function N_0x953563ce563143af(p0: Int): Int { return untyped __lua__('N_0x953563ce563143af')(p0); }
    @:pure static inline function N_0x95a7dabddbb78ae7(): { a0: Int, a1: Int } { return untyped __lua__('N_0x95a7dabddbb78ae7')(); }
    
    /**
    * in the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer.
    */
    @:pure static inline function N_0x95cf53b3d687f9fa(vehicle: Int): Void { return untyped __lua__('N_0x95cf53b3d687f9fa')(vehicle); }
    @:pure static inline function N_0x95cf81bd06ee1887(): Void { return untyped __lua__('N_0x95cf81bd06ee1887')(); }
    @:pure static inline function N_0x9614b71f8adb982b(): Int { return untyped __lua__('N_0x9614b71f8adb982b')(); }
    @:pure static inline function N_0x966dd84fb6a46017(): Void { return untyped __lua__('N_0x966dd84fb6a46017')(); }
    @:pure static inline function N_0x967278682cb6967a(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0x967278682cb6967a')(p0, p1, p2, p3); }
    @:pure static inline function N_0x9689123e3f213aa5(): Int { return untyped __lua__('N_0x9689123e3f213aa5')(); }
    
    /**
    * SET_VEHICLE_DOORS_LOCKED_FOR_*
    */
    @:pure static inline function N_0x9737a37136f07e75(vehicle: Int, toggle: Bool): Void { return untyped __lua__('N_0x9737a37136f07e75')(vehicle, toggle); }
    @:pure static inline function N_0x973d76aa760a6cb6(p0: Bool): Void { return untyped __lua__('N_0x973d76aa760a6cb6')(p0); }
    @:pure static inline function N_0x975d66a0bc17064c(p0: Int): Void { return untyped __lua__('N_0x975d66a0bc17064c')(p0); }
    
    /**
    * p4 and p5 are always 0 in scripts
    */
    @:pure static inline function N_0x9769f811d1785b03(player: Int, x: Int, y: Int, z: Int, p4: Bool, p5: Bool): Void { return untyped __lua__('N_0x9769f811d1785b03')(player, x, y, z, p4, p5); }
    
    /**
    * gets some camera far depth of field
    */
    @:pure static inline function N_0x9780f32bcaf72431(): Int { return untyped __lua__('N_0x9780f32bcaf72431')(); }
    @:pure static inline function N_0x97e7e2c04245115b(p0: Int): Void { return untyped __lua__('N_0x97e7e2c04245115b')(p0); }
    @:pure static inline function N_0x98215325a695e78a(p0: Bool): Void { return untyped __lua__('N_0x98215325a695e78a')(p0); }
    
    /**
    * It's called after 0xD3A10FC7FD8D98CD and 0xF1CEA8A4198D8E9A
    * p0 was always "CELEBRATION_WINNER"
    */
    @:pure static inline function N_0x98c4fe6ec34154ca(p0: String, ped: Int, p2: Int, posX: Int, posY: Int, posZ: Int): Int { return untyped __lua__('N_0x98c4fe6ec34154ca')(p0, ped, p2, posX, posY, posZ); }
    @:pure static inline function N_0x98e2bc1ca26287c3(): Void { return untyped __lua__('N_0x98e2bc1ca26287c3')(); }
    @:pure static inline function N_0x98edf76a7271e4f2(): Void { return untyped __lua__('N_0x98edf76a7271e4f2')(); }
    @:pure static inline function N_0x9911f4a24485f653(p0: Bool): Void { return untyped __lua__('N_0x9911f4a24485f653')(p0); }
    @:pure static inline function N_0x993cbe59d350d225(p0: Int): Int { return untyped __lua__('N_0x993cbe59d350d225')(p0); }
    @:pure static inline function N_0x996dd1e1e02f1008(): Int { return untyped __lua__('N_0x996dd1e1e02f1008')(); }
    @:pure static inline function N_0x99ac7f0d8b9c893d(p0: Int): Void { return untyped __lua__('N_0x99ac7f0d8b9c893d')(p0); }
    @:pure static inline function N_0x99ad4cccb128cbc9(vehicle: Int): Void { return untyped __lua__('N_0x99ad4cccb128cbc9')(vehicle); }
    
    /**
    * console hash: 0x99F58A07
    */
    @:pure static inline function N_0x99b72c7abde5c910(ped: Int, player: Int): Int { return untyped __lua__('N_0x99b72c7abde5c910')(ped, player); }
    @:pure static inline function N_0x99cad8e7afdb60fa(vehicle: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0x99cad8e7afdb60fa')(vehicle, p1, p2); }
    @:pure static inline function N_0x9a62ec95ae10e011(): Int { return untyped __lua__('N_0x9a62ec95ae10e011')(); }
    
    /**
    * Example gotten from chinese2.c4
    * VEHICLE::_9A75585FB2E54FAD(2004.4471435546875, 3076.806640625, 46.60689926147461, 10.0);
    */
    @:pure static inline function N_0x9a75585fb2e54fad(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0x9a75585fb2e54fad')(p0, p1, p2, p3); }
    @:pure static inline function N_0x9a77dfd295e29b09(p0: Int, p1: Bool): Void { return untyped __lua__('N_0x9a77dfd295e29b09')(p0, p1); }
    @:pure static inline function N_0x9aa47fff660cb932(p0: Int, p1: Int): Void { return untyped __lua__('N_0x9aa47fff660cb932')(p0, p1); }
    @:pure static inline function N_0x9ac92eed5e4793ab(): Void { return untyped __lua__('N_0x9ac92eed5e4793ab')(); }
    @:pure static inline function N_0x9b079e5221d984d3(p0: Bool): Void { return untyped __lua__('N_0x9b079e5221d984d3')(p0); }
    @:pure static inline function N_0x9b2bd3773123ea2f(type: Int, toggle: Bool): Void { return untyped __lua__('N_0x9b2bd3773123ea2f')(type, toggle); }
    @:pure static inline function N_0x9b4bd21d69b1e609(): Void { return untyped __lua__('N_0x9b4bd21d69b1e609')(); }
    @:pure static inline function N_0x9b6e70c5ceef4eeb(p0: Int): Int { return untyped __lua__('N_0x9b6e70c5ceef4eeb')(p0); }
    @:pure static inline function N_0x9ba001cb45cbf627(doorHash: EitherType<String, Int>, heading: Int, p2: Bool, p3: Bool): Void { return untyped __lua__('N_0x9ba001cb45cbf627')(doorHash, heading, p2, p3); }
    
    /**
    * Console Hash: 0x50CDB295
    */
    @:pure static inline function N_0x9bddc73cc6a115d4(vehicle: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('N_0x9bddc73cc6a115d4')(vehicle, p1, p2); }
    @:pure static inline function N_0x9becd4b9fef3f8a6(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x9becd4b9fef3f8a6')(vehicle, p1); }
    
    /**
    * Gets some kind of data related to missions like the online player created races n stuff
    */
    @:pure static inline function N_0x9bf438815f5d96ea(p0: Int, p1: Int, p3: Int, p4: Int, p5: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x9bf438815f5d96ea')(p0, p1, p3, p4, p5); }
    @:pure static inline function N_0x9c6a6c19b6c0c496(p0: Int, p1: Int): Int { return untyped __lua__('N_0x9c6a6c19b6c0c496')(p0, p1); }
    @:pure static inline function N_0x9cb0bfa7a9342c3d(p0: Int, p1: Bool): Int { return untyped __lua__('N_0x9cb0bfa7a9342c3d')(p0, p1); }
    
    /**
    * Only appeared in Golf &amp; Golf_mp. Parameters were all ptrs
    */
    @:pure static inline function N_0x9cfdd90b2b844bf7(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('N_0x9cfdd90b2b844bf7')(p0, p1, p2, p3, p4); }
    @:pure static inline function N_0x9d3af56e94c9ae98(p0: Int, p1: Int): Void { return untyped __lua__('N_0x9d3af56e94c9ae98')(p0, p1); }
    @:pure static inline function N_0x9d728c1e12bf5518(p0: Int): Int { return untyped __lua__('N_0x9d728c1e12bf5518')(p0); }
    @:pure static inline function N_0x9d7afcbf21c51712(p0: Bool): Void { return untyped __lua__('N_0x9d7afcbf21c51712')(p0); }
    @:pure static inline function N_0x9d8d44adbba61ef2(p0: Bool): Void { return untyped __lua__('N_0x9d8d44adbba61ef2')(p0); }
    
    /**
    * Found in the b617d scripts:
    * PED::_9DBA107B4937F809(v_7, "trevor_heist_cover_2h");
    */
    @:pure static inline function N_0x9dba107b4937f809(p0: Int, p1: String): Void { return untyped __lua__('N_0x9dba107b4937f809')(p0, p1); }
    @:pure static inline function N_0x9e30e91fb03a2caf(): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x9e30e91fb03a2caf')(); }
    @:pure static inline function N_0x9e4cfff989258472(): Void { return untyped __lua__('N_0x9e4cfff989258472')(); }
    
    /**
    * Only found 4 times in Rockstar scripts.
    * Clearly has something to do with Cutscenes.
    */
    @:pure static inline function N_0x9e6542f0ce8e70a3(toggle: Bool): Void { return untyped __lua__('N_0x9e6542f0ce8e70a3')(toggle); }
    
    /**
    * UI::0x7AD67C95("Gallery");
    * UI::0x7AD67C95("Missions");
    * UI::0x7AD67C95("General");
    * UI::0x7AD67C95("Playlists");
    */
    @:pure static inline function N_0x9e778248d6685fe0(p0: String): Void { return untyped __lua__('N_0x9e778248d6685fe0')(p0); }
    
    /**
    * p2 - mainly set as false in scripts
    */
    @:pure static inline function N_0x9ebc85ed0fffe51c(entity: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('N_0x9ebc85ed0fffe51c')(entity, p1, p2); }
    @:pure static inline function N_0x9edd76e87d5d51ba(player: Int): Void { return untyped __lua__('N_0x9edd76e87d5d51ba')(player); }
    @:pure static inline function N_0x9f3f689b814f2599(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x9f3f689b814f2599')(vehicle, p1); }
    @:pure static inline function N_0x9f5e6bb6b34540da(p0: Int): Void { return untyped __lua__('N_0x9f5e6bb6b34540da')(p0); }
    @:pure static inline function N_0x9f6e2821885caee2(p0: Int, p1: Int, p2: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x9f6e2821885caee2')(p0, p1, p2); }
    @:pure static inline function N_0x9fedf86898f100e9(): Int { return untyped __lua__('N_0x9fedf86898f100e9')(); }
    @:pure static inline function N_0xa01bc64dd4bfbbac(vehicle: Int, p1: Int): Int { return untyped __lua__('N_0xa01bc64dd4bfbbac')(vehicle, p1); }
    
    /**
    * gets some camera near depth of field
    */
    @:pure static inline function N_0xa03502fc581f7d9b(): Int { return untyped __lua__('N_0xa03502fc581f7d9b')(); }
    @:pure static inline function N_0xa049a5be0f04f2f8(): Int { return untyped __lua__('N_0xa049a5be0f04f2f8')(); }
    @:pure static inline function N_0xa071e0ed98f91286(p0: Int, p1: Int): Void { return untyped __lua__('N_0xa071e0ed98f91286')(p0, p1); }
    @:pure static inline function N_0xa08fe5e49bdc39dd(p0: Int, p1: Int, p2: Bool): Void { return untyped __lua__('N_0xa08fe5e49bdc39dd')(p0, p1, p2); }
    @:pure static inline function N_0xa097ab275061fb21(): Int { return untyped __lua__('N_0xa097ab275061fb21')(); }
    @:pure static inline function N_0xa09f896ce912481f(p0: Bool): Int { return untyped __lua__('N_0xa09f896ce912481f')(p0); }
    @:pure static inline function N_0xa0cefcea390aab9b(p0: Int): Void { return untyped __lua__('N_0xa0cefcea390aab9b')(p0); }
    @:pure static inline function N_0xa0f93d5465b3094d(p0: Int): Int { return untyped __lua__('N_0xa0f93d5465b3094d')(p0); }
    
    /**
    * MulleDK19: This function is hard-coded to always return 0.
    */
    @:pure static inline function N_0xa0fa4ec6a05da44e(): Int { return untyped __lua__('N_0xa0fa4ec6a05da44e')(); }
    @:pure static inline function N_0xa0fe76168a189ddb(): Int { return untyped __lua__('N_0xa0fe76168a189ddb')(); }
    @:pure static inline function N_0xa134777ff7f33331(p0: Int, p1: Int): Int { return untyped __lua__('N_0xa134777ff7f33331')(p0, p1); }
    @:pure static inline function N_0xa13c11e1b5c06bfc(): Void { return untyped __lua__('N_0xa13c11e1b5c06bfc')(); }
    @:pure static inline function N_0xa13e93403f26c812(p0: Int): Int { return untyped __lua__('N_0xa13e93403f26c812')(p0); }
    @:pure static inline function N_0xa1607996431332df(netId: Int): Int { return untyped __lua__('N_0xa1607996431332df')(netId); }
    @:pure static inline function N_0xa17bad153b51547e(cargobob: Int, p1: Int): Void { return untyped __lua__('N_0xa17bad153b51547e')(cargobob, p1); }
    @:pure static inline function N_0xa1c996c2a744262e(p0: Int): Int { return untyped __lua__('N_0xa1c996c2a744262e')(p0); }
    @:pure static inline function N_0xa1e5e0204a6fcc70(): Void { return untyped __lua__('N_0xa1e5e0204a6fcc70')(); }
    
    /**
    * MulleDK19: This function is hard-coded to always return 1.
    */
    @:pure static inline function N_0xa213b11dff526300(): Int { return untyped __lua__('N_0xa213b11dff526300')(); }
    @:pure static inline function N_0xa21c118553bbdf02(p0: Int): Void { return untyped __lua__('N_0xa21c118553bbdf02')(p0); }
    @:pure static inline function N_0xa238192f33110615(): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('N_0xa238192f33110615')(); }
    @:pure static inline function N_0xa2767257a320fc82(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xa2767257a320fc82')(p0, p1); }
    @:pure static inline function N_0xa277800a9eae340e(): Int { return untyped __lua__('N_0xa277800a9eae340e')(); }
    @:pure static inline function N_0xa2c1f5e92afe49ed(): Void { return untyped __lua__('N_0xa2c1f5e92afe49ed')(); }
    
    /**
    * Needs more research. If the "phone_cam12" filter is applied, this function is called with "TRUE"; otherwise, "FALSE".
    * Example (XBOX 360):
    * // check current filter selection
    * if (GAMEPLAY::ARE_STRINGS_EQUAL(getElem(g_2471024, &amp;l_17, 4), "phone_cam12") != 0)
    * {
    * MOBILE::_0xC273BB4D(0); // FALSE
    * }
    * else
    * {
    * MOBILE::_0xC273BB4D(1); // TRUE
    * }
    */
    @:pure static inline function N_0xa2ccbe62cd4c91a4(toggle: Int): Void { return untyped __lua__('N_0xa2ccbe62cd4c91a4')(toggle); }
    @:pure static inline function N_0xa2e9c1ab8a92e8cd(p0: Bool): Void { return untyped __lua__('N_0xa2e9c1ab8a92e8cd')(p0); }
    @:pure static inline function N_0xa2f952104fc6dd4b(p0: Int): Int { return untyped __lua__('N_0xa2f952104fc6dd4b')(p0); }
    @:pure static inline function N_0xa306f470d1660581(): Int { return untyped __lua__('N_0xa306f470d1660581')(); }
    @:pure static inline function N_0xa31fd15197b192bd(): Int { return untyped __lua__('N_0xa31fd15197b192bd')(); }
    @:pure static inline function N_0xa356990e161c9e65(p0: Bool): Void { return untyped __lua__('N_0xa356990e161c9e65')(p0); }
    @:pure static inline function N_0xa3a9299c4f2adb98(p0: Int): Void { return untyped __lua__('N_0xa3a9299c4f2adb98')(p0); }
    
    /**
    * Only called once in the scripts:
    * if (sub_1abd() &amp;&amp; (!PED::_A3F3564A5B3646C0(l_8C))) {
    * if (sub_52e3("RESNA_CELLR", 0)) {
    * PED::SET_PED_CAN_PLAY_GESTURE_ANIMS(l_8C, 1);
    * PED::SET_PED_CAN_PLAY_AMBIENT_ANIMS(l_8C, 1);
    * PED::SET_PED_CAN_PLAY_VISEME_ANIMS(l_8C, 1, 0);
    * l_184 += 1;
    * }
    * }
    */
    @:pure static inline function N_0xa3f3564a5b3646c0(ped: Int): Int { return untyped __lua__('N_0xa3f3564a5b3646c0')(ped); }
    @:pure static inline function N_0xa41bcd7213805aac(p0: Bool): Void { return untyped __lua__('N_0xa41bcd7213805aac')(p0); }
    @:pure static inline function N_0xa44ff770dfbc5dae(): Void { return untyped __lua__('N_0xa44ff770dfbc5dae')(); }
    @:pure static inline function N_0xa4664972a9b8f8ba(p0: Int): Int { return untyped __lua__('N_0xa4664972a9b8f8ba')(p0); }
    @:pure static inline function N_0xa46b73faa3460ae1(p0: Bool): Void { return untyped __lua__('N_0xa46b73faa3460ae1')(p0); }
    @:pure static inline function N_0xa4819f5e23e2ffad(): Int { return untyped __lua__('N_0xa4819f5e23e2ffad')(); }
    @:pure static inline function N_0xa4822f1cf23f4810(p1: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int): { a0: Int, a1: Array<Int>, a2: Array<Int> } { return untyped __lua__('N_0xa4822f1cf23f4810')(p1, p3, p4, p5, p6, p7, p8); }
    @:pure static inline function N_0xa48931185f0536fe(): Int { return untyped __lua__('N_0xa48931185f0536fe')(); }
    @:pure static inline function N_0xa4a0065e39c9f25c(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0xa4a0065e39c9f25c')(p0, p1, p2, p3); }
    @:pure static inline function N_0xa4dede28b1814289(): Void { return untyped __lua__('N_0xa4dede28b1814289')(); }
    @:pure static inline function N_0xa51c4b86b71652ae(p0: Bool): Void { return untyped __lua__('N_0xa51c4b86b71652ae')(p0); }
    @:pure static inline function N_0xa52d5247a4227e14(p0: Int): Void { return untyped __lua__('N_0xa52d5247a4227e14')(p0); }
    @:pure static inline function N_0xa5342d390cda41d6(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xa5342d390cda41d6')(p0, p1); }
    @:pure static inline function N_0xa586fbeb32a53dbb(): Int { return untyped __lua__('N_0xa586fbeb32a53dbb')(); }
    @:pure static inline function N_0xa5c80d8e768a9e66(p0: Int): Int { return untyped __lua__('N_0xa5c80d8e768a9e66')(p0); }
    
    /**
    * NOTE: 'p1' might be some kind of array.
    */
    @:pure static inline function N_0xa5efc3e847d60507(p0: String, p1: String, p2: String, p3: String, p4: Bool): Int { return untyped __lua__('N_0xa5efc3e847d60507')(p0, p1, p2, p3, p4); }
    @:pure static inline function N_0xa5f377b175a699c5(p0: Int): Void { return untyped __lua__('N_0xa5f377b175a699c5')(p0); }
    @:pure static inline function N_0xa635c11b8c44afc2(): Int { return untyped __lua__('N_0xa635c11b8c44afc2')(); }
    @:pure static inline function N_0xa6385deb180f319f(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0xa6385deb180f319f')(p0, p1, p2); }
    @:pure static inline function N_0xa660faf550eb37e5(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xa660faf550eb37e5')(p0, p1); }
    @:pure static inline function N_0xa67c35c56eb1bd9d(): Int { return untyped __lua__('N_0xa67c35c56eb1bd9d')(); }
    
    /**
    * Displays a bunch of icons above the players name, and level, and their name twice
    */
    @:pure static inline function N_0xa67f9c46d612b6f1(headDisplayId: Int, p1: Bool): Void { return untyped __lua__('N_0xa67f9c46d612b6f1')(headDisplayId, p1); }
    @:pure static inline function N_0xa68d3d229f4f3b06(p0: String): Void { return untyped __lua__('N_0xa68d3d229f4f3b06')(p0); }
    @:pure static inline function N_0xa699957e60d80214(p0: Int): Int { return untyped __lua__('N_0xa699957e60d80214')(p0); }
    @:pure static inline function N_0xa69ac4ade82b57a4(p0: Int): Int { return untyped __lua__('N_0xa69ac4ade82b57a4')(p0); }
    
    /**
    * Appears to remove stealth kill action from memory
    */
    @:pure static inline function N_0xa6a12939f16d85be(hash: EitherType<String, Int>, p1: Bool): Void { return untyped __lua__('N_0xa6a12939f16d85be')(hash, p1); }
    @:pure static inline function N_0xa72835064dd63e4c(): Int { return untyped __lua__('N_0xa72835064dd63e4c')(); }
    @:pure static inline function N_0xa735353c77334ea0(): { a0: Int, a1: Int } { return untyped __lua__('N_0xa735353c77334ea0')(); }
    @:pure static inline function N_0xa736cf7fb7c5bff4(): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('N_0xa736cf7fb7c5bff4')(); }
    
    /**
    * Called 4 times in the b617d scripts:
    * GAMEPLAY::_A74802FB8D0B7814("CONTRAILS", 0);
    */
    @:pure static inline function N_0xa74802fb8d0b7814(p0: String, p1: Int): Void { return untyped __lua__('N_0xa74802fb8d0b7814')(p0, p1); }
    @:pure static inline function N_0xa75e2b6733da5142(): Int { return untyped __lua__('N_0xa75e2b6733da5142')(); }
    @:pure static inline function N_0xa76359fc80b2438e(p0: Int): Void { return untyped __lua__('N_0xa76359fc80b2438e')(p0); }
    @:pure static inline function N_0xa7862bc5ed1dfd7e(p0: Int, p1: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0xa7862bc5ed1dfd7e')(p0, p1); }
    
    /**
    * STATS::0xE3247582(0);
    * STATS::0xE3247582(1);
    * STATS::0xE3247582(2);
    * STATS::0xE3247582(3);
    * STATS::0xE3247582(4);
    * STATS::0xE3247582(5);
    * STATS::0xE3247582(6);
    */
    @:pure static inline function N_0xa78b8fa58200da56(p0: Int): Void { return untyped __lua__('N_0xa78b8fa58200da56')(p0); }
    @:pure static inline function N_0xa7a1127490312c36(p0: Int): Void { return untyped __lua__('N_0xa7a1127490312c36')(p0); }
    @:pure static inline function N_0xa7dcdf4ded40a8f4(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0xa7dcdf4ded40a8f4')(vehicle, p1); }
    
    /**
    * NETWORK_OVERRIDE_???
    */
    @:pure static inline function N_0xa7e30de9272b6d49(ped: Int, x: Int, y: Int, z: Int, p4: Int): Void { return untyped __lua__('N_0xa7e30de9272b6d49')(ped, x, y, z, p4); }
    
    /**
    * Found in scripts:
    * if (AI::_A7FFBA498E4AAF67(l_9BC, "Run")) {
    * if (AI::_A7FFBA498E4AAF67(l_9BC, "Escape")) {
    * p0 is probably Ped and this native checks if the ped is doing the AI task in p1. Just a guess though.
    */
    @:pure static inline function N_0xa7ffba498e4aaf67(p0: Int, p1: String): Int { return untyped __lua__('N_0xa7ffba498e4aaf67')(p0, p1); }
    
    /**
    * p1 always false.
    */
    @:pure static inline function N_0xa80ae305e0a3044f(entity: Int, p1: Bool): Void { return untyped __lua__('N_0xa80ae305e0a3044f')(entity, p1); }
    @:pure static inline function N_0xa8434f1dff41d6e7(p0: Int): Void { return untyped __lua__('N_0xa8434f1dff41d6e7')(p0); }
    @:pure static inline function N_0xa85a21582451e951(doorHash: EitherType<String, Int>, p1: Bool): Void { return untyped __lua__('N_0xa85a21582451e951')(doorHash, p1); }
    @:pure static inline function N_0xa8733668d1047b51(p0: Int): Void { return untyped __lua__('N_0xa8733668d1047b51')(p0); }
    @:pure static inline function N_0xa8acb6459542a8c8(): Int { return untyped __lua__('N_0xa8acb6459542a8c8')(); }
    @:pure static inline function N_0xa8fdb297a8d25fba(): Void { return untyped __lua__('N_0xa8fdb297a8d25fba')(); }
    @:pure static inline function N_0xa905192a6781c41b(x: Int, y: Int, z: Int): Void { return untyped __lua__('N_0xa905192a6781c41b')(x, y, z); }
    @:pure static inline function N_0xa9240a96c74cca13(p0: Int): Int { return untyped __lua__('N_0xa9240a96c74cca13')(p0); }
    @:pure static inline function N_0xa9b61a329bfdcbea(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xa9b61a329bfdcbea')(p0, p1); }
    @:pure static inline function N_0xa9cbfd40b3fa3010(): Int { return untyped __lua__('N_0xa9cbfd40b3fa3010')(); }
    @:pure static inline function N_0xa9f9c2e0fde11cbb(p0: Int, p1: Int, p2: Int): Int { return untyped __lua__('N_0xa9f9c2e0fde11cbb')(p0, p1, p2); }
    @:pure static inline function N_0xaa19f5572c38b564(p0: Int): Int { return untyped __lua__('N_0xaa19f5572c38b564')(p0); }
    @:pure static inline function N_0xaa76052dda9bfc3e(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Void { return untyped __lua__('N_0xaa76052dda9bfc3e')(p0, p1, p2, p3, p4, p5, p6); }
    
    /**
    * console hash: 0xFD0F7EDD
    */
    @:pure static inline function N_0xaaa553e7dd28a457(p0: Bool): Void { return untyped __lua__('N_0xaaa553e7dd28a457')(p0); }
    @:pure static inline function N_0xaaa6a3698a69e048(p0: Int): Int { return untyped __lua__('N_0xaaa6a3698a69e048')(p0); }
    @:pure static inline function N_0xab04325045427aae(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0xab04325045427aae')(vehicle, p1); }
    @:pure static inline function N_0xab13a5565480b6d9(p0: Int, p1: Int): Int { return untyped __lua__('N_0xab13a5565480b6d9')(p0, p1); }
    @:pure static inline function N_0xabb2fa71c83a1b72(): Int { return untyped __lua__('N_0xabb2fa71c83a1b72')(); }
    
    /**
    * Only one occurence in the scripts:
    * auto sub_cb43(auto a_0, auto a_1) {
    * if (g_2594CB._f1) {
    * if (NETWORK::_855BC38818F6F684()) {
    * NETWORK::_ABD5E88B8A2D3DB2(&amp;a_0._fB93);
    * g_2594CB._f14 -- [[{13}]]  = a_0._fB93;
    * g_2594CB._f4 -- [["64"]]  = a_1;
    * return 1;
    * }
    * }
    * return 0;
    * }
    * other:
    * looks like it passes a player in the paramater
    * Contains string "NETWORK_VOICE_CONNECT_TO_PLAYER" in ida
    */
    @:pure static inline function N_0xabd5e88b8a2d3db2(globalPtr: Int): Void { return untyped __lua__('N_0xabd5e88b8a2d3db2')(globalPtr); }
    @:pure static inline function N_0xac2890471901861c(p0: Int): Void { return untyped __lua__('N_0xac2890471901861c')(p0); }
    
    /**
    * For planes only!
    * value can be 1.0 or lower (higher values will automatically result in 1.0).
    */
    @:pure static inline function N_0xad2d28a1afdff131(vehicle: Int, value: Int): Void { return untyped __lua__('N_0xad2d28a1afdff131')(vehicle, value); }
    @:pure static inline function N_0xad5fdf34b81bfe79(): Void { return untyped __lua__('N_0xad5fdf34b81bfe79')(); }
    @:pure static inline function N_0xad6875bbc0fc899c(p0: Int): Void { return untyped __lua__('N_0xad6875bbc0fc899c')(p0); }
    
    /**
    * This has been found in use in the decompiled files.
    */
    @:pure static inline function N_0xad73ce5a09e42d12(player: Int): Int { return untyped __lua__('N_0xad73ce5a09e42d12')(player); }
    @:pure static inline function N_0xadb57e5b663cca8b(p0: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0xadb57e5b663cca8b')(p0); }
    @:pure static inline function N_0xaddd1c754e2e2914(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int): Void { return untyped __lua__('N_0xaddd1c754e2e2914')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9); }
    @:pure static inline function N_0xaded7f5748acafe6(): Void { return untyped __lua__('N_0xaded7f5748acafe6')(); }
    @:pure static inline function N_0xae3fee8709b39dcb(vehicle: Int): Int { return untyped __lua__('N_0xae3fee8709b39dcb')(vehicle); }
    @:pure static inline function N_0xae51bc858f32ba66(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('N_0xae51bc858f32ba66')(p0, p1, p2, p3, p4); }
    @:pure static inline function N_0xaeab987727c5a8a4(p0: Int): Int { return untyped __lua__('N_0xaeab987727c5a8a4')(p0); }
    @:pure static inline function N_0xaeef48cdf5b6ce7c(p0: Int, p1: Int): Int { return untyped __lua__('N_0xaeef48cdf5b6ce7c')(p0, p1); }
    
    /**
    * Possible p0 values:
    * "prologue"
    * "Prologue_Main"
    */
    @:pure static inline function N_0xaf12610c644a35c9(p0: String, p1: Bool): Void { return untyped __lua__('N_0xaf12610c644a35c9')(p0, p1); }
    
    /**
    * Exemple of use(carmod_shop.c4)
    * INTERIOR::_AF348AFCB575A441("V_CarModRoom");
    */
    @:pure static inline function N_0xaf348afcb575a441(roomName: String): Void { return untyped __lua__('N_0xaf348afcb575a441')(roomName); }
    @:pure static inline function N_0xaf42195a42c63bba(): Int { return untyped __lua__('N_0xaf42195a42c63bba')(); }
    @:pure static inline function N_0xaf66dcee6609b148(): Void { return untyped __lua__('N_0xaf66dcee6609b148')(); }
    @:pure static inline function N_0xafc976fd0580c7b3(ped: Int, toggle: Bool): Void { return untyped __lua__('N_0xafc976fd0580c7b3')(ped, toggle); }
    @:pure static inline function N_0xaff4710e2a0a6c12(ped: Int): Void { return untyped __lua__('N_0xaff4710e2a0a6c12')(ped); }
    @:pure static inline function N_0xb055a34527cb8fd7(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0xb055a34527cb8fd7')(vehicle, p1); }
    @:pure static inline function N_0xb07d3185e11657a5(p0: Int): Int { return untyped __lua__('N_0xb07d3185e11657a5')(p0); }
    @:pure static inline function N_0xb088e9a47ae6edd5(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0xb088e9a47ae6edd5')(vehicle, p1); }
    @:pure static inline function N_0xb08b85d860e7ba3c(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0xb08b85d860e7ba3c')(p0, p1, p2); }
    @:pure static inline function N_0xb094bc1db4018240(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0xb094bc1db4018240')(p0, p1, p2, p3); }
    
    /**
    * Examples:
    * AI::_B0A6CFD2C69C1088(PLAYER::PLAYER_PED_ID(), "isFirstPerson", 0);
    * AI::_B0A6CFD2C69C1088(PLAYER::PLAYER_PED_ID(), "isFirstPerson", 1);
    * AI::_B0A6CFD2C69C1088(PLAYER::PLAYER_PED_ID(), "isBlocked", sub_179027());
    */
    @:pure static inline function N_0xb0a6cfd2c69c1088(p0: Int, p2: Bool): Int { return untyped __lua__('N_0xb0a6cfd2c69c1088')(p0, p2); }
    @:pure static inline function N_0xb0c56bd3d808d863(p0: Bool): Void { return untyped __lua__('N_0xb0c56bd3d808d863')(p0); }
    @:pure static inline function GetBroadcastFinshedLosSound(p0: Bool): Void { return untyped __lua__('GetBroadcastFinshedLosSound')(p0); }
    
    /**
    * Has something to do with player switch.
    * Only possible values:
    * - "CSM_ST_BOX3x3"
    */
    @:pure static inline function N_0xb11d94bc55f41932(p0: String): Void { return untyped __lua__('N_0xb11d94bc55f41932')(p0); }
    
    /**
    * p0 is the handle returned from _0xFDBF4CDBC07E1706
    * console hash: 0x7DBCEF6F
    * Most likely REMOVE_CURRENT_*
    */
    @:pure static inline function N_0xb1252e3e59a82aaf(p0: Int): Void { return untyped __lua__('N_0xb1252e3e59a82aaf')(p0); }
    @:pure static inline function N_0xb129e447a2eda4bf(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xb129e447a2eda4bf')(p0, p1); }
    @:pure static inline function N_0xb13e88e655e5a3bc(): Void { return untyped __lua__('N_0xb13e88e655e5a3bc')(); }
    @:pure static inline function N_0xb1577667c3708f9b(): Void { return untyped __lua__('N_0xb1577667c3708f9b')(); }
    @:pure static inline function N_0xb1b6216ca2e7b55e(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('N_0xb1b6216ca2e7b55e')(p0, p1, p2); }
    
    /**
    * 12 matches across 4 scripts. All 4 scripts were job creators.
    * type ranged from 0 - 2.
    * p4 was always 0.2f. Likely scale.
    * assuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255).
    * Tested but noticed nothing.
    */
    @:pure static inline function N_0xb1bb03742917a5d6(type: Int, xPos: Int, yPos: Int, zPos: Int, p4: Int, red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('N_0xb1bb03742917a5d6')(type, xPos, yPos, zPos, p4, red, green, blue, alpha); }
    @:pure static inline function N_0xb1d2bb1e1631f5b1(): Int { return untyped __lua__('N_0xb1d2bb1e1631f5b1')(); }
    
    /**
    * This native doesn't seem to do anything, might be a debug-only native.
    * Confirmed, it is a debug native.
    */
    @:pure static inline function N_0xb264c4d2f2b0a78b(vehicle: Int): Void { return untyped __lua__('N_0xb264c4d2f2b0a78b')(vehicle); }
    
    /**
    * No observed effect.
    */
    @:pure static inline function N_0xb28b1fe5bfadd7f5(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0xb28b1fe5bfadd7f5')(vehicle, p1); }
    @:pure static inline function N_0xb2a592b04648a9cb(): Int { return untyped __lua__('N_0xb2a592b04648a9cb')(); }
    @:pure static inline function N_0xb2aff10216defa2f(x: Int, y: Int, z: Int, p3: Int, p4: Int, p5: Int, p6: Int, interiorFlags: Int, scale: Int, duration: Int): Void { return untyped __lua__('N_0xb2aff10216defa2f')(x, y, z, p3, p4, p5, p6, interiorFlags, scale, duration); }
    @:pure static inline function N_0xb2d0bde54f0e8e5a(object: Int, toggle: Bool): Void { return untyped __lua__('N_0xb2d0bde54f0e8e5a')(object, toggle); }
    @:pure static inline function N_0xb2ebe8cbc58b90e9(): Int { return untyped __lua__('N_0xb2ebe8cbc58b90e9')(); }
    @:pure static inline function N_0xb309ebea797e001f(p0: Int): Int { return untyped __lua__('N_0xb309ebea797e001f')(p0); }
    
    /**
    * This line found 48 times in the scripts:
    * GAMEPLAY::_B335F761606DB47C(&amp;v_4, &amp;v_7, a_0, v_A);
    */
    @:pure static inline function N_0xb335f761606db47c(p2: Int, p3: Bool): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0xb335f761606db47c')(p2, p3); }
    @:pure static inline function N_0xb37e4e6a2388ca7b(): Int { return untyped __lua__('N_0xb37e4e6a2388ca7b')(); }
    @:pure static inline function N_0xb3c641f3630bf6da(p0: Int): Void { return untyped __lua__('N_0xb3c641f3630bf6da')(p0); }
    @:pure static inline function N_0xb3cd58cca6cda852(): Void { return untyped __lua__('N_0xb3cd58cca6cda852')(); }
    
    /**
    * This function is hard-coded to always return 1.
    */
    @:pure static inline function N_0xb3da2606774a8e2d(): Int { return untyped __lua__('N_0xb3da2606774a8e2d')(); }
    @:pure static inline function N_0xb3e6360dde733e82(p0: Int): Void { return untyped __lua__('N_0xb3e6360dde733e82')(p0); }
    @:pure static inline function N_0xb4271092ca7edf48(p0: Int): Int { return untyped __lua__('N_0xb4271092ca7edf48')(p0); }
    
    /**
    * PLAYER::0xBF6993C7(rPtr((&amp;l_122) + 71)); // Found in decompilation
    * ***
    * In "am_hold_up.ysc" used once:
    * l_8d._f47 = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(18.0, 28.0);
    * PLAYER::_B45EFF719D8427A6((l_8d._f47));
    */
    @:pure static inline function N_0xb45eff719d8427a6(p0: Int): Void { return untyped __lua__('N_0xb45eff719d8427a6')(p0); }
    @:pure static inline function N_0xb475f27c6a994d65(): Void { return untyped __lua__('N_0xb475f27c6a994d65')(); }
    
    /**
    * Found in the b617d scripts, duplicates removed:
    * AUDIO::_B4BBFD9CD8B3922B("V_CARSHOWROOM_PS_WINDOW_UNBROKEN");
    * AUDIO::_B4BBFD9CD8B3922B("V_CIA_PS_WINDOW_UNBROKEN");
    * AUDIO::_B4BBFD9CD8B3922B("V_DLC_HEIST_APARTMENT_DOOR_CLOSED");
    * AUDIO::_B4BBFD9CD8B3922B("V_FINALEBANK_PS_VAULT_INTACT");
    * AUDIO::_B4BBFD9CD8B3922B("V_MICHAEL_PS_BATHROOM_WITH_WINDOW");
    */
    @:pure static inline function N_0xb4bbfd9cd8b3922b(p0: String): Void { return untyped __lua__('N_0xb4bbfd9cd8b3922b')(p0); }
    
    /**
    * This does not take a weapon hash...
    */
    @:pure static inline function N_0xb4c8d77c80c0421e(ped: Int, p1: Int): Int { return untyped __lua__('N_0xb4c8d77c80c0421e')(ped, p1); }
    @:pure static inline function N_0xb4f47213df45a64c(p0: Int, p1: Int): Int { return untyped __lua__('N_0xb4f47213df45a64c')(p0, p1); }
    @:pure static inline function N_0xb50eb4ccb29704ac(p0: Int): Void { return untyped __lua__('N_0xb50eb4ccb29704ac')(p0); }
    @:pure static inline function N_0xb51b9ab9ef81868c(toggle: Bool): Void { return untyped __lua__('N_0xb51b9ab9ef81868c')(toggle); }
    @:pure static inline function N_0xb542de8c3d1cb210(p0: Bool): Void { return untyped __lua__('N_0xb542de8c3d1cb210')(p0); }
    
    /**
    * "Can request assets for cutscene entity"? (found in decompiled scripts)
    */
    @:pure static inline function N_0xb56bbbcc2955d9cb(): Int { return untyped __lua__('N_0xb56bbbcc2955d9cb')(); }
    @:pure static inline function N_0xb57a49545ba53ce7(p0: Int): Int { return untyped __lua__('N_0xb57a49545ba53ce7')(p0); }
    @:pure static inline function N_0xb5a4db34fe89b88a(): Void { return untyped __lua__('N_0xb5a4db34fe89b88a')(); }
    @:pure static inline function N_0xb5d3453c98456528(): Int { return untyped __lua__('N_0xb5d3453c98456528')(); }
    @:pure static inline function N_0xb606e6cc59664972(p0: Int): Void { return untyped __lua__('N_0xb606e6cc59664972')(p0); }
    @:pure static inline function N_0xb6871b0555b02996(p2: Int, p5: Int): { a0: Int, a1: Int, a2: Int, a3: Int, a4: Int } { return untyped __lua__('N_0xb6871b0555b02996')(p2, p5); }
    @:pure static inline function N_0xb695e2cd0a2da9ee(): Void { return untyped __lua__('N_0xb695e2cd0a2da9ee')(); }
    @:pure static inline function N_0xb743f735c03d7810(p0: Int, p1: Int): Void { return untyped __lua__('N_0xb743f735c03d7810')(p0, p1); }
    @:pure static inline function N_0xb746d20b17f2a229(): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0xb746d20b17f2a229')(); }
    @:pure static inline function N_0xb782f8238512bad5(p0: Int, p1: Int): Void { return untyped __lua__('N_0xb782f8238512bad5')(p0, p1); }
    @:pure static inline function N_0xb7c7f6ad6424304b(): Void { return untyped __lua__('N_0xb7c7f6ad6424304b')(); }
    @:pure static inline function N_0xb7ed70c49521a61d(p0: Int): Void { return untyped __lua__('N_0xb7ed70c49521a61d')(p0); }
    @:pure static inline function N_0xb8721407ee9c3ff6(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0xb8721407ee9c3ff6')(p0, p1, p2); }
    
    /**
    * Old Gen: 0x47D6004E
    * Disables something. Used only once in R* scripts (freemode.ysc).
    */
    @:pure static inline function N_0xb885852c39cc265d(): Void { return untyped __lua__('N_0xb885852c39cc265d')(); }
    
    /**
    * if (!$B8B52E498014F5B0(PLAYER::PLAYER_PED_ID())) {
    */
    @:pure static inline function N_0xb8b52e498014f5b0(ped: Int): Int { return untyped __lua__('N_0xb8b52e498014f5b0')(ped); }
    @:pure static inline function N_0xb8f87ead7533b176(p0: Int): Void { return untyped __lua__('N_0xb8f87ead7533b176')(p0); }
    @:pure static inline function N_0xb9449845f73f5e9c(functionName: String): Int { return untyped __lua__('N_0xb9449845f73f5e9c')(functionName); }
    @:pure static inline function N_0xb9854dfde0d833d6(p0: Int): Void { return untyped __lua__('N_0xb9854dfde0d833d6')(p0); }
    @:pure static inline function N_0xb99c4e4d9499df29(p0: Bool): Void { return untyped __lua__('N_0xb99c4e4d9499df29')(p0); }
    
    /**
    * Seem to return bool
    */
    @:pure static inline function N_0xb9cf1f793a9f1bf1(): Int { return untyped __lua__('N_0xb9cf1f793a9f1bf1')(); }
    
    /**
    * Every p2 - p5 occurrence was 0f.
    */
    @:pure static inline function N_0xba3d65906822bed5(p0: Bool, p1: Bool, p2: Int, p3: Int, p4: Int, p5: Int): Void { return untyped __lua__('N_0xba3d65906822bed5')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function N_0xba4b8d83bdc75551(p0: Int): Void { return untyped __lua__('N_0xba4b8d83bdc75551')(p0); }
    @:pure static inline function N_0xba63d9fe45412247(ped: Int, p1: Bool): Int { return untyped __lua__('N_0xba63d9fe45412247')(ped, p1); }
    @:pure static inline function N_0xba751764f0821256(): Void { return untyped __lua__('N_0xba751764f0821256')(); }
    @:pure static inline function N_0xba8d65c1c65702e5(p0: Bool): Void { return untyped __lua__('N_0xba8d65c1c65702e5')(p0); }
    @:pure static inline function N_0xba96394a0eecfa65(): Void { return untyped __lua__('N_0xba96394a0eecfa65')(); }
    @:pure static inline function N_0xba9775570db788cf(): Int { return untyped __lua__('N_0xba9775570db788cf')(); }
    @:pure static inline function N_0xbae4f9b97cd43b30(p0: Bool): Void { return untyped __lua__('N_0xbae4f9b97cd43b30')(p0); }
    @:pure static inline function N_0xbaf6babf9e7ccc13(p0: Int, p1: Int): Int { return untyped __lua__('N_0xbaf6babf9e7ccc13')(p0, p1); }
    @:pure static inline function N_0xbb0527ec6341496d(): Int { return untyped __lua__('N_0xbb0527ec6341496d')(); }
    @:pure static inline function N_0xbb90e12cac1dab25(p0: Int): Void { return untyped __lua__('N_0xbb90e12cac1dab25')(p0); }
    @:pure static inline function N_0xbbb45c3cf5c8aa85(): Int { return untyped __lua__('N_0xbbb45c3cf5c8aa85')(); }
    @:pure static inline function N_0xbbdf066252829606(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xbbdf066252829606')(p0, p1); }
    @:pure static inline function N_0xbbf327ded94e4deb(p0: String): Void { return untyped __lua__('N_0xbbf327ded94e4deb')(p0); }
    
    /**
    * var num3 = PLAYER::GET_PLAYER_PED(l_2171); // proof l_2171 is a player
    * var num17 = PLAYER::0x9DF75B2A(l_2171, 100, 0); // l_2171
    * .ysc:
    * if (PLAYER::GET_PLAYER_WANTED_LEVEL(l_6EF) &lt; v_4) { // l_6EF is a player
    * PLAYER::SET_PLAYER_WANTED_LEVEL(l_6EF, v_4, 0); // l_6EF
    * PLAYER::SET_PLAYER_WANTED_LEVEL_NOW(l_6EF, 0); // l_6EF
    * } else {
    * PLAYER::_4669B3ED80F24B4E(l_6EF); // l_6EF
    * UI::_BA8D65C1C65702E5(1);
    * a_0 = 1;
    * }
    * if (l_4B24[l_6F2 -- [[156]] ]._f8C != PLAYER::_BC0753C9CA14B506(l_6EF, 100, 0)) { // l_6EF
    * l_4B24[l_6F2 -- [[156]] ]._f8C = PLAYER::_BC0753C9CA14B506(l_6EF, 100, 0); // l_6EF
    * }
    * Both was taken from fm_mission_controller
    * GET_PLAYER_*
    */
    @:pure static inline function N_0xbc0753c9ca14b506(player: Int, p1: Int, p2: Bool): Int { return untyped __lua__('N_0xbc0753c9ca14b506')(player, p1, p2); }
    
    /**
    * Most likely ROPE_ATTACH_*
    */
    @:pure static inline function N_0xbc0ce682d4d05650(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int, p10: Int, p11: Int, p12: Int, p13: Int): Void { return untyped __lua__('N_0xbc0ce682d4d05650')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13); }
    @:pure static inline function N_0xbc1cc91205ec8d6e(): Int { return untyped __lua__('N_0xbc1cc91205ec8d6e')(); }
    @:pure static inline function N_0xbc3cca5844452b06(p0: Int): Void { return untyped __lua__('N_0xbc3cca5844452b06')(p0); }
    
    /**
    * Seems to only appear in scripts used in Singleplayer.
    * AI_PHONE_ARGS is a hash collision!!!
    * Always used like this in scripts
    * PLAYER::_BC9490CA15AEA8FB(PLAYER::PLAYER_ID());
    */
    @:pure static inline function N_0xbc9490ca15aea8fb(player: Int): Void { return untyped __lua__('N_0xbc9490ca15aea8fb')(player); }
    @:pure static inline function N_0xbc9823ab80a3dcac(): Int { return untyped __lua__('N_0xbc9823ab80a3dcac')(); }
    @:pure static inline function N_0xbce595371a5fbaaf(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xbce595371a5fbaaf')(p0, p1); }
    @:pure static inline function N_0xbcedb009461da156(): Int { return untyped __lua__('N_0xbcedb009461da156')(); }
    @:pure static inline function N_0xbcfc632db7673bf0(p0: Int, p1: Int): Void { return untyped __lua__('N_0xbcfc632db7673bf0')(p0, p1); }
    @:pure static inline function N_0xbd0be0bfc927eac1(): Void { return untyped __lua__('N_0xbd0be0bfc927eac1')(); }
    
    /**
    * MulleDK19: This function is hard-coded to always return 1.
    */
    @:pure static inline function N_0xbd545d44cce70597(): Int { return untyped __lua__('N_0xbd545d44cce70597')(); }
    @:pure static inline function N_0xbd605b8e0e18b3bb(): Void { return untyped __lua__('N_0xbd605b8e0e18b3bb')(); }
    @:pure static inline function N_0xbdb6f89c729cf388(): Int { return untyped __lua__('N_0xbdb6f89c729cf388')(); }
    @:pure static inline function N_0xbdeb86f4d5809204(p0: Int): Void { return untyped __lua__('N_0xbdeb86f4d5809204')(p0); }
    
    /**
    * This function is hard-coded to always return 0.
    */
    @:pure static inline function N_0xbe197eaa669238f4(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0xbe197eaa669238f4')(p0, p1, p2, p3); }
    @:pure static inline function N_0xbe5c1255a1830ff5(vehicle: Int, toggle: Bool): Void { return untyped __lua__('N_0xbe5c1255a1830ff5')(vehicle, toggle); }
    @:pure static inline function N_0xbeb2d9a1d9a8f55a(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0xbeb2d9a1d9a8f55a')(p0, p1, p2, p3); }
    @:pure static inline function N_0xbeb3d46bb7f043c0(p0: Int): Void { return untyped __lua__('N_0xbeb3d46bb7f043c0')(p0); }
    @:pure static inline function N_0xbed8ca5ff5e04113(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0xbed8ca5ff5e04113')(p0, p1, p2, p3); }
    @:pure static inline function N_0xbed9f5693f34ed17(statName: EitherType<String, Int>, p1: Int, outValue: Int): Int { return untyped __lua__('N_0xbed9f5693f34ed17')(statName, p1, outValue); }
    @:pure static inline function N_0xbef34b1d9624d5dd(p0: Bool): Void { return untyped __lua__('N_0xbef34b1d9624d5dd')(p0); }
    @:pure static inline function N_0xbf09786a7fcab582(p0: Int): Int { return untyped __lua__('N_0xbf09786a7fcab582')(p0); }
    @:pure static inline function N_0xbf22e0f32968e967(player: Int, p1: Bool): Void { return untyped __lua__('N_0xbf22e0f32968e967')(player, p1); }
    @:pure static inline function N_0xbf4dc1784be94dfa(p0: Int, p1: Bool, p2: Int): Void { return untyped __lua__('N_0xbf4dc1784be94dfa')(p0, p1, p2); }
    @:pure static inline function N_0xbf4f34a85ca2970c(): Void { return untyped __lua__('N_0xbf4f34a85ca2970c')(); }
    
    /**
    * Something to do with timecycles.
    */
    @:pure static inline function N_0xbf59707b3e5ed531(p0: String): Void { return untyped __lua__('N_0xbf59707b3e5ed531')(p0); }
    @:pure static inline function N_0xbf72910d0f26f025(): Int { return untyped __lua__('N_0xbf72910d0f26f025')(); }
    @:pure static inline function N_0xbfa0a56a817c6c7d(p0: Bool): Void { return untyped __lua__('N_0xbfa0a56a817c6c7d')(p0); }
    
    /**
    * GET_VEHICLE_MODEL_MAX_*
    * max braking if air vehicle, else max braking + 0.1
    * -------------------
    * For a full list, see here: pastebin.com/Cb9L1Cn0
    */
    @:pure static inline function N_0xbfba3ba79cff7ebf(modelHash: EitherType<String, Int>): Int { return untyped __lua__('N_0xbfba3ba79cff7ebf')(modelHash); }
    
    /**
    * Since latest patches has 18 parameters.
    * Console Hash: 0xCCDC33CC
    * only documented to be continued...
    */
    @:pure static inline function N_0xbfe5756e7407064a(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, damage: Int, p7: Bool, weaponHash: EitherType<String, Int>, ownerPed: Int, isAudible: Bool, isInvisible: Bool, speed: Int, entity: Int, p14: Bool, p15: Bool, p16: Bool, p17: Bool): Void { return untyped __lua__('N_0xbfe5756e7407064a')(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity, p14, p15, p16, p17); }
    @:pure static inline function N_0xc0416b061f2b7e5e(p0: Bool): Void { return untyped __lua__('N_0xc0416b061f2b7e5e')(p0); }
    
    /**
    * Use _GET_VEHICLE_MOD_DATA for modData
    * Appears to be a GET_DLC_VEHICLE_MOD_* native.
    */
    @:pure static inline function N_0xc098810437312fff(modData: Int): Int { return untyped __lua__('N_0xc098810437312fff')(modData); }
    @:pure static inline function N_0xc0d2af00bcc234ca(): Int { return untyped __lua__('N_0xc0d2af00bcc234ca')(); }
    @:pure static inline function N_0xc0e0d686ddfc6eae(): Int { return untyped __lua__('N_0xc0e0d686ddfc6eae')(); }
    @:pure static inline function N_0xc13c38e47ea5df31(p0: Int): Int { return untyped __lua__('N_0xc13c38e47ea5df31')(p0); }
    @:pure static inline function N_0xc141b8917e0017ec(): Void { return untyped __lua__('N_0xc141b8917e0017ec')(); }
    @:pure static inline function N_0xc15907d667f7cfb2(vehicle: Int, toggle: Bool): Void { return untyped __lua__('N_0xc15907d667f7cfb2')(vehicle, toggle); }
    @:pure static inline function N_0xc17ad0e5752becda(componentHash: EitherType<String, Int>): Int { return untyped __lua__('N_0xc17ad0e5752becda')(componentHash); }
    @:pure static inline function N_0xc1805d05e6d4fe10(vehicle: Int): Void { return untyped __lua__('N_0xc1805d05e6d4fe10')(vehicle); }
    @:pure static inline function N_0xc1f6ebf9a3d55538(p0: Int, p1: Int): Void { return untyped __lua__('N_0xc1f6ebf9a3d55538')(p0, p1); }
    
    /**
    * same call as VEHICLE::_0x0F3B4D4E43177236
    */
    @:pure static inline function N_0xc1f981a6f74f0c23(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xc1f981a6f74f0c23')(p0, p1); }
    @:pure static inline function N_0xc22912b1d85f26b1(p0: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0xc22912b1d85f26b1')(p0); }
    @:pure static inline function N_0xc265df9fb44a9fbd(p0: Int): Int { return untyped __lua__('N_0xc265df9fb44a9fbd')(p0); }
    
    /**
    * This seems to be related to Steam achievements.
    * p0 and p1 are int (?)
    * ------
    * Can't say anything about the Steam version but it is hardcoded to always return false int the retail version.
    */
    @:pure static inline function N_0xc2afffdabbdc2c5c(p0: Int, p1: Int): Int { return untyped __lua__('N_0xc2afffdabbdc2c5c')(p0, p1); }
    @:pure static inline function N_0xc2d15bef167e27bc(): Void { return untyped __lua__('N_0xc2d15bef167e27bc')(); }
    
    /**
    * CAM::_C2EAE3FB8CDBED31("SHAKE_CAM_medium", "medium", "", 0.5f);
    */
    @:pure static inline function N_0xc2eae3fb8cdbed31(p0: String, p1: String, p2: String, p3: Int): Void { return untyped __lua__('N_0xc2eae3fb8cdbed31')(p0, p1, p2, p3); }
    @:pure static inline function N_0xc2ee020f5fb4db53(ped: Int): Void { return untyped __lua__('N_0xc2ee020f5fb4db53')(ped); }
    @:pure static inline function N_0xc32ea7a2f6ca7557(): Int { return untyped __lua__('N_0xc32ea7a2f6ca7557')(); }
    
    /**
    * - This is called after SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME
    * hash collision
    */
    @:pure static inline function N_0xc3376f42b1faccc6(player: Int): Void { return untyped __lua__('N_0xc3376f42b1faccc6')(player); }
    
    /**
    * - This is called after SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME
    * hash collision
    */
    @:pure static inline function SetAreasGeneratorOrientation(player: Int): Void { return untyped __lua__('SetAreasGeneratorOrientation')(player); }
    @:pure static inline function N_0xc35a6d07c93802b2(): Void { return untyped __lua__('N_0xc35a6d07c93802b2')(); }
    @:pure static inline function N_0xc361aa040d6637a8(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0xc361aa040d6637a8')(vehicle, p1); }
    @:pure static inline function N_0xc38dc1e90d22547c(): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('N_0xc38dc1e90d22547c')(); }
    @:pure static inline function N_0xc3c221addde31a11(p0: Int): Void { return untyped __lua__('N_0xc3c221addde31a11')(p0); }
    @:pure static inline function N_0xc3ead29ab273ece8(p0: Int): Void { return untyped __lua__('N_0xc3ead29ab273ece8')(p0); }
    @:pure static inline function N_0xc4278f70131baa6d(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xc4278f70131baa6d')(p0, p1); }
    @:pure static inline function N_0xc42dd763159f3461(): Int { return untyped __lua__('N_0xc42dd763159f3461')(); }
    @:pure static inline function N_0xc45c27ef50f36adc(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0xc45c27ef50f36adc')(vehicle, p1); }
    @:pure static inline function N_0xc485e07e4f0b7958(doorHash: EitherType<String, Int>, p1: Bool, p2: Bool, p3: Bool): Void { return untyped __lua__('N_0xc485e07e4f0b7958')(doorHash, p1, p2, p3); }
    @:pure static inline function N_0xc505036a35afd01b(p0: Bool): Void { return untyped __lua__('N_0xc505036a35afd01b')(p0); }
    @:pure static inline function N_0xc50ce861b55eab8b(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0xc50ce861b55eab8b')(vehicle, p1); }
    
    /**
    * This seems to edit the water wave, intensity around your current location.
    * 0.0f = Normal
    * 1.0f = So Calm and Smooth, a boat will stay still.
    * 3.0f = Really Intense.
    */
    @:pure static inline function N_0xc54a08c85ae4d410(p0: Int): Void { return untyped __lua__('N_0xc54a08c85ae4d410')(p0); }
    @:pure static inline function N_0xc55854c7d7274882(): Void { return untyped __lua__('N_0xc55854c7d7274882')(); }
    @:pure static inline function N_0xc55a0b40ffb1ed23(): Int { return untyped __lua__('N_0xc55a0b40ffb1ed23')(); }
    @:pure static inline function N_0xc56fbf2f228e1dac(p0: Int, p1: Int, p2: Int): Int { return untyped __lua__('N_0xc56fbf2f228e1dac')(p0, p1, p2); }
    
    /**
    * NETWORK_IS_TRANSITION_???
    */
    @:pure static inline function N_0xc571d0e77d8bbc29(): Int { return untyped __lua__('N_0xc571d0e77d8bbc29')(); }
    
    /**
    * Interesting fact: A hash collision for this is RESET_JETPACK_MODEL_SETTINGS
    */
    @:pure static inline function N_0xc594b315edf2d4af(ped: Int): Void { return untyped __lua__('N_0xc594b315edf2d4af')(ped); }
    @:pure static inline function N_0xc5be134ec7ba96a0(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('N_0xc5be134ec7ba96a0')(p0, p1, p2, p3, p4); }
    @:pure static inline function N_0xc6033d32241f6fb5(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xc6033d32241f6fb5')(p0, p1); }
    
    /**
    * Toggles a value (bool) for cutscenes.
    */
    @:pure static inline function N_0xc61b86c9f61eb404(toggle: Bool): Void { return untyped __lua__('N_0xc61b86c9f61eb404')(toggle); }
    @:pure static inline function N_0xc6372ecd45d73bcd(p0: Bool): Void { return untyped __lua__('N_0xc6372ecd45d73bcd')(p0); }
    @:pure static inline function N_0xc64ded7ef0d2fe37(p0: Int): Int { return untyped __lua__('N_0xc64ded7ef0d2fe37')(p0); }
    
    /**
    * Often called after _REMOVE_LOADING_PROMPT. Unsure what exactly it does, but It references busy_spinner, I can only guess its freeing the busy_spinner scaleform from memory
    */
    @:pure static inline function N_0xc65ab383cd91df98(): Void { return untyped __lua__('N_0xc65ab383cd91df98')(); }
    
    /**
    * GET_VEHICLE_MODEL_*
    * Function pertains only to aviation vehicles.
    * For a full list, see here: pastebin.com/JwuGNp2K
    */
    @:pure static inline function N_0xc6ad107ddc9054cc(modelHash: EitherType<String, Int>): Int { return untyped __lua__('N_0xc6ad107ddc9054cc')(modelHash); }
    @:pure static inline function N_0xc6e0e2616a7576bb(): Int { return untyped __lua__('N_0xc6e0e2616a7576bb')(); }
    @:pure static inline function N_0xc70ddce56d0d3a99(): Int { return untyped __lua__('N_0xc70ddce56d0d3a99')(); }
    @:pure static inline function N_0xc7397a83f7a2a462(p1: Int, p2: Bool): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0xc7397a83f7a2a462')(p1, p2); }
    @:pure static inline function N_0xc78e239ac5b2ddb9(p0: Bool, p1: Int, p2: Int): Void { return untyped __lua__('N_0xc78e239ac5b2ddb9')(p0, p1, p2); }
    @:pure static inline function N_0xc79196dcb36f6121(p0: Int): Void { return untyped __lua__('N_0xc79196dcb36f6121')(p0); }
    @:pure static inline function N_0xc79ae21974b01fb2(): Void { return untyped __lua__('N_0xc79ae21974b01fb2')(); }
    @:pure static inline function N_0xc7abac5de675ee3b(): Int { return untyped __lua__('N_0xc7abac5de675ee3b')(); }
    @:pure static inline function N_0xc7be335216b5ec7c(): Int { return untyped __lua__('N_0xc7be335216b5ec7c')(); }
    @:pure static inline function N_0xc7db36c24634f52b(): Void { return untyped __lua__('N_0xc7db36c24634f52b')(); }
    @:pure static inline function N_0xc7e7181c09f33b69(p0: Bool): Void { return untyped __lua__('N_0xc7e7181c09f33b69')(p0); }
    @:pure static inline function N_0xc7f29ca00f46350e(p0: Bool): Void { return untyped __lua__('N_0xc7f29ca00f46350e')(p0); }
    @:pure static inline function N_0xc8391c309684595a(): Void { return untyped __lua__('N_0xc8391c309684595a')(); }
    @:pure static inline function N_0xc84527e235fca219(p0: String, p1: Bool, p2: String, type: String, p6: Bool): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0xc84527e235fca219')(p0, p1, p2, type, p6); }
    @:pure static inline function N_0xc847b43f369ac0b5(): Void { return untyped __lua__('N_0xc847b43f369ac0b5')(); }
    @:pure static inline function N_0xc87e740d9f3872cc(): Int { return untyped __lua__('N_0xc87e740d9f3872cc')(); }
    @:pure static inline function N_0xc8b1b2425604cdd0(): Int { return untyped __lua__('N_0xc8b1b2425604cdd0')(); }
    @:pure static inline function N_0xc8b5c4a79cc18b94(p0: Int): Void { return untyped __lua__('N_0xc8b5c4a79cc18b94')(p0); }
    @:pure static inline function N_0xc8e1071177a23be5(): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('N_0xc8e1071177a23be5')(); }
    @:pure static inline function N_0xc8ede9bdbccba6d4(p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0xc8ede9bdbccba6d4')(p1, p2, p3); }
    @:pure static inline function N_0xc8f3aaf93d0600bf(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0xc8f3aaf93d0600bf')(p0, p1, p2, p3); }
    @:pure static inline function N_0xc91c6c55199308ca(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0xc91c6c55199308ca')(p0, p1, p2, p3); }
    @:pure static inline function N_0xc92717ef615b6704(p0: Int): Void { return untyped __lua__('N_0xc92717ef615b6704')(p0); }
    @:pure static inline function N_0xc980e62e33df1d5c(): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0xc980e62e33df1d5c')(); }
    
    /**
    * Seems to be called before SPECIAL_ABILITY_DEACTIVATE. Needs more research.
    * SPECIAL_ABILITY_CHARGE_*
    */
    @:pure static inline function N_0xc9a763d8fe87436a(player: Int): Void { return untyped __lua__('N_0xc9a763d8fe87436a')(player); }
    @:pure static inline function N_0xc9b18b4619f48f7b(p0: Int): Void { return untyped __lua__('N_0xc9b18b4619f48f7b')(p0); }
    @:pure static inline function N_0xc9b43a33d09cada7(p0: Int): Void { return untyped __lua__('N_0xc9b43a33d09cada7')(p0); }
    @:pure static inline function N_0xca4ae345a153d573(p0: Bool): Void { return untyped __lua__('N_0xca4ae345a153d573')(p0); }
    @:pure static inline function N_0xca575c391fea25cc(p0: Int): Void { return untyped __lua__('N_0xca575c391fea25cc')(p0); }
    @:pure static inline function N_0xca6b2f7ce32ab653(p0: Int, p2: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0xca6b2f7ce32ab653')(p0, p2); }
    @:pure static inline function N_0xca94551b50b4932c(p0: Int): Int { return untyped __lua__('N_0xca94551b50b4932c')(p0); }
    @:pure static inline function N_0xca9d2aa3e326d720(): Int { return untyped __lua__('N_0xca9d2aa3e326d720')(); }
    
    /**
    * Found in "director_mode", "fm_bj_race_controler", "fm_deathmatch_controler", "fm_impromptu_dm_controler", "fm_race_controler", "gb_deathmatch".
    */
    @:pure static inline function N_0xcac57395b151135f(player: Int, p1: Bool): Void { return untyped __lua__('N_0xcac57395b151135f')(player, p1); }
    @:pure static inline function N_0xcac66558b944da67(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0xcac66558b944da67')(vehicle, p1); }
    
    /**
    * Only call found in the b617d scripts:
    * AUDIO::_CADA5A0D0702381E("BACK", "HUD_FREEMODE_SOUNDSET");
    */
    @:pure static inline function N_0xcada5a0d0702381e(p0: String, soundset: String): Void { return untyped __lua__('N_0xcada5a0d0702381e')(p0, soundset); }
    @:pure static inline function N_0xcae55f48d3d7875c(p0: Int): Void { return untyped __lua__('N_0xcae55f48d3d7875c')(p0); }
    @:pure static inline function N_0xcb00196b31c39eb1(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0xcb00196b31c39eb1')(p0, p1, p2, p3); }
    @:pure static inline function N_0xcb0360efefb2580d(p0: Int): Void { return untyped __lua__('N_0xcb0360efefb2580d')(p0); }
    @:pure static inline function N_0xcb215c4b56a7fae7(p0: Bool): Int { return untyped __lua__('N_0xcb215c4b56a7fae7')(p0); }
    @:pure static inline function N_0xcb82a0bf0e3e3265(p0: Int): Int { return untyped __lua__('N_0xcb82a0bf0e3e3265')(p0); }
    @:pure static inline function N_0xcb968b53fc7f916d(p0: Int, p1: Bool, p2: Int, p3: Int): Void { return untyped __lua__('N_0xcb968b53fc7f916d')(p0, p1, p2, p3); }
    @:pure static inline function N_0xcc3fdded67bcfc63(): Void { return untyped __lua__('N_0xcc3fdded67bcfc63')(); }
    
    /**
    * RESET_*
    */
    @:pure static inline function N_0xcc6e963682533882(p0: Int): Void { return untyped __lua__('N_0xcc6e963682533882')(p0); }
    
    /**
    * p4 seems to vary from 0 to 3.
    */
    @:pure static inline function N_0xcc9682b8951c5229(ped: Int, r: Int, g: Int, b: Int, p4: Int): Void { return untyped __lua__('N_0xcc9682b8951c5229')(ped, r, g, b, p4); }
    @:pure static inline function N_0xcca4318e1ab03f1f(p0: Int): Int { return untyped __lua__('N_0xcca4318e1ab03f1f')(p0); }
    @:pure static inline function N_0xccd078c2665d2973(p0: Bool): Void { return untyped __lua__('N_0xccd078c2665d2973')(p0); }
    @:pure static inline function N_0xcd018c591f94cb43(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xcd018c591f94cb43')(p0, p1); }
    @:pure static inline function N_0xcd71a4ecab22709e(entity: Int): Void { return untyped __lua__('N_0xcd71a4ecab22709e')(entity); }
    @:pure static inline function N_0xcdca26e80faecb8f(): Void { return untyped __lua__('N_0xcdca26e80faecb8f')(); }
    @:pure static inline function N_0xce5aa445aba8dee0(p0: Int): Int { return untyped __lua__('N_0xce5aa445aba8dee0')(p0); }
    @:pure static inline function N_0xced08cbe8ebb97c7(p0: Int, p1: Int): Void { return untyped __lua__('N_0xced08cbe8ebb97c7')(p0, p1); }
    @:pure static inline function N_0xceda60a74219d064(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xceda60a74219d064')(p0, p1); }
    @:pure static inline function N_0xcef214315d276fd1(p0: Bool): Void { return untyped __lua__('N_0xcef214315d276fd1')(p0); }
    @:pure static inline function N_0xcf1182f682f65307(p0: Int, p1: Int): Void { return untyped __lua__('N_0xcf1182f682f65307')(p0, p1); }
    @:pure static inline function N_0xcf38dafbb49ede5e(p0: Int): Int { return untyped __lua__('N_0xcf38dafbb49ede5e')(p0); }
    @:pure static inline function N_0xcf61d4b4702ee9eb(): Int { return untyped __lua__('N_0xcf61d4b4702ee9eb')(); }
    @:pure static inline function N_0xcfd115b373c0df63(p0: Int, p1: Int): Void { return untyped __lua__('N_0xcfd115b373c0df63')(p0, p1); }
    
    /**
    * what does this do?
    */
    @:pure static inline function N_0xcfd778e7904c255e(vehicle: Int): Void { return untyped __lua__('N_0xcfd778e7904c255e')(vehicle); }
    @:pure static inline function N_0xcfeb46dcd7d8d5eb(p0: Bool): Void { return untyped __lua__('N_0xcfeb46dcd7d8d5eb')(p0); }
    @:pure static inline function N_0xcfeb8af24fc1d0bb(p0: Bool): Void { return untyped __lua__('N_0xcfeb8af24fc1d0bb')(p0); }
    
    /**
    * gets some camera near clip
    */
    @:pure static inline function N_0xd0082607100d7193(): Int { return untyped __lua__('N_0xd0082607100d7193')(); }
    @:pure static inline function N_0xd00d76a7dfc9d852(p0: Int): Void { return untyped __lua__('N_0xd00d76a7dfc9d852')(p0); }
    @:pure static inline function N_0xd01005d2ba2eb778(p0: Int): Void { return untyped __lua__('N_0xd01005d2ba2eb778')(p0); }
    @:pure static inline function N_0xd01015c7316ae176(ped: Int, p1: String): Int { return untyped __lua__('N_0xd01015c7316ae176')(ped, p1); }
    @:pure static inline function N_0xd05d1a6c74da3498(p1: Bool): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0xd05d1a6c74da3498')(p1); }
    
    /**
    * x360 Hash: 0xF637166E
    */
    @:pure static inline function N_0xd0a484cb2f829fbe(): Int { return untyped __lua__('N_0xd0a484cb2f829fbe')(); }
    @:pure static inline function N_0xd0bc1c6fb18ee154(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Void { return untyped __lua__('N_0xd0bc1c6fb18ee154')(p0, p1, p2, p3, p4, p5, p6); }
    @:pure static inline function N_0xd0ee05fe193646ea(): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('N_0xd0ee05fe193646ea')(); }
    @:pure static inline function N_0xd10282b6e3751ba0(): Int { return untyped __lua__('N_0xd10282b6e3751ba0')(); }
    @:pure static inline function N_0xd1032e482629049e(p0: Bool): Void { return untyped __lua__('N_0xd1032e482629049e')(p0); }
    @:pure static inline function N_0xd10f442036302d50(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0xd10f442036302d50')(p0, p1, p2); }
    @:pure static inline function N_0xd1871251f3b5acd7(ped: Int): Int { return untyped __lua__('N_0xd1871251f3b5acd7')(ped); }
    @:pure static inline function N_0xd1b0f412f109ea5d(p0: Int, p1: Int): Void { return untyped __lua__('N_0xd1b0f412f109ea5d')(p0, p1); }
    
    /**
    * SET_TV_???
    */
    @:pure static inline function N_0xd1c55b110e4df534(p0: Int): Void { return untyped __lua__('N_0xd1c55b110e4df534')(p0); }
    @:pure static inline function N_0xd1c7cb175e012964(scaleformHandle: Int): Int { return untyped __lua__('N_0xd1c7cb175e012964')(scaleformHandle); }
    @:pure static inline function N_0xd1f8363dfad03848(p0: Int): Void { return untyped __lua__('N_0xd1f8363dfad03848')(p0); }
    
    /**
    * returns a notification handle, prints out a notification like below:
    * type range: 0
    * if you set type to 1, image goes from 0 - 39 - Xbox you can add text to
    * example:
    * UI::_0xD202B92CBF1D816F(1, 20, "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
    */
    @:pure static inline function N_0xd202b92cbf1d816f(type: Int, image: Int, text: String): Int { return untyped __lua__('N_0xd202b92cbf1d816f')(type, image, text); }
    @:pure static inline function N_0xd2049635deb9c375(): Void { return untyped __lua__('N_0xd2049635deb9c375')(); }
    
    /**
    * "SwitchHUDFranklinOut",
    * "SwitchHUDMichaelOut",
    * "SwitchHUDOut",
    * "SwitchHUDTrevorOut",
    * "SwitchOpenFranklinOut",
    * "SwitchOpenMichaelIn",
    * "SwitchOpenNeutral"
    */
    @:pure static inline function N_0xd2209be128b5418c(graphicsName: String): Void { return untyped __lua__('N_0xd2209be128b5418c')(graphicsName); }
    @:pure static inline function N_0xd2300034310557e4(vehicle: Int, p1: Int): Void { return untyped __lua__('N_0xd2300034310557e4')(vehicle, p1); }
    @:pure static inline function N_0xd261ba3e7e998072(p0: Int, p1: Int): Void { return untyped __lua__('N_0xd261ba3e7e998072')(p0, p1); }
    @:pure static inline function N_0xd2936cab8b58fcbd(p0: Int, p1: Bool, p2: Int, p3: Int, p4: Int, p5: Int, p6: Bool, p7: Int): Void { return untyped __lua__('N_0xd2936cab8b58fcbd')(p0, p1, p2, p3, p4, p5, p6, p7); }
    
    /**
    * 1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
    */
    @:pure static inline function N_0xd2b315b6689d537d(player: Int, p1: Bool): Void { return untyped __lua__('N_0xd2b315b6689d537d')(player, p1); }
    @:pure static inline function N_0xd2b32be3fc1626c6(): Void { return untyped __lua__('N_0xd2b32be3fc1626c6')(); }
    @:pure static inline function N_0xd2cc78cd3d0b50f9(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xd2cc78cd3d0b50f9')(p0, p1); }
    @:pure static inline function N_0xd2dccd8e16e20997(p0: Int): Void { return untyped __lua__('N_0xd2dccd8e16e20997')(p0); }
    @:pure static inline function N_0xd302e99edf0449cf(p0: Int): Int { return untyped __lua__('N_0xd302e99edf0449cf')(p0); }
    @:pure static inline function N_0xd313de83394af134(): Int { return untyped __lua__('N_0xd313de83394af134')(); }
    @:pure static inline function N_0xd33daa36272177c4(ped: Int): Void { return untyped __lua__('N_0xd33daa36272177c4')(ped); }
    @:pure static inline function N_0xd38c4a6d047c019d(): Int { return untyped __lua__('N_0xd38c4a6d047c019d')(); }
    @:pure static inline function N_0xd39b3fff8ffdd5bf(p0: Int): Int { return untyped __lua__('N_0xd39b3fff8ffdd5bf')(p0); }
    @:pure static inline function N_0xd39d13c9febf0511(p0: Bool): Void { return untyped __lua__('N_0xd39d13c9febf0511')(p0); }
    @:pure static inline function N_0xd3a10fc7fd8d98cd(): Int { return untyped __lua__('N_0xd3a10fc7fd8d98cd')(); }
    @:pure static inline function N_0xd3a6a0ef48823a8c(): Int { return untyped __lua__('N_0xd3a6a0ef48823a8c')(); }
    @:pure static inline function N_0xd3d15555431ab793(): Int { return untyped __lua__('N_0xd3d15555431ab793')(); }
    @:pure static inline function N_0xd4438c0564490e63(): Void { return untyped __lua__('N_0xd4438c0564490e63')(); }
    @:pure static inline function N_0xd4793dff3af2abcd(): Void { return untyped __lua__('N_0xd4793dff3af2abcd')(); }
    
    /**
    * SET_*_MULTIPLIER_THIS_FRAME
    */
    @:pure static inline function N_0xd4b8e3d1917bc86b(toggle: Bool): Void { return untyped __lua__('N_0xd4b8e3d1917bc86b')(toggle); }
    
    /**
    * Only used like this:
    * if (VEHICLE::_D4C4642CB7F50B5D(ENTITY::GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(v_3))) {                                                        sub_157e9c(g_40001._f1868, 0);
    * }
    */
    @:pure static inline function N_0xd4c4642cb7f50b5d(vehicle: Int): Int { return untyped __lua__('N_0xd4c4642cb7f50b5d')(vehicle); }
    @:pure static inline function N_0xd53acdbef24a46e8(): Int { return untyped __lua__('N_0xd53acdbef24a46e8')(); }
    @:pure static inline function N_0xd57aaae0e2214d11(): Void { return untyped __lua__('N_0xd57aaae0e2214d11')(); }
    @:pure static inline function N_0xd5a4b59980401588(p0: Int, p1: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0xd5a4b59980401588')(p0, p1); }
    
    /**
    * p0 - PLAYER::PLAYER_PED_ID();
    * p1 - "Phase", "Wobble", "x_axis","y_axis","introphase","speed".
    * p2 - From what i can see it goes up to 1f (maybe).
    * -LcGamingHD
    * Example: AI::_D5BB4025AE449A4E(PLAYER::PLAYER_PED_ID(), "Phase", 0.5);
    */
    @:pure static inline function N_0xd5bb4025ae449a4e(p0: Int, p1: String, p2: Int): Void { return untyped __lua__('N_0xd5bb4025ae449a4e')(p0, p1, p2); }
    @:pure static inline function N_0xd642319c54aadeb6(): Int { return untyped __lua__('N_0xd642319c54aadeb6')(); }
    @:pure static inline function N_0xd66c9e72b3cc4982(p1: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0xd66c9e72b3cc4982')(p1); }
    @:pure static inline function N_0xd68a5ff8a3a89874(r: Int, g: Int, b: Int, a: Int): Void { return untyped __lua__('N_0xd68a5ff8a3a89874')(r, g, b, a); }
    
    /**
    * Something related to the environmental effects natives.
    * In the "agency_heist3b" script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}
    */
    @:pure static inline function N_0xd69411aa0cebf9e9(ped: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0xd69411aa0cebf9e9')(ped, p1, p2, p3); }
    @:pure static inline function N_0xd6ade981781fca09(p0: Int): Void { return untyped __lua__('N_0xd6ade981781fca09')(p0); }
    
    /**
    * Only one match in the scripts:
    * GRAPHICS::_D7021272EB0A451E("int_carrier_hanger");
    */
    @:pure static inline function N_0xd7021272eb0a451e(p0: String): Void { return untyped __lua__('N_0xd7021272eb0a451e')(p0); }
    @:pure static inline function N_0xd79185689f8fd5df(p0: Bool): Void { return untyped __lua__('N_0xd79185689f8fd5df')(p0); }
    @:pure static inline function N_0xd7d0b00177485411(p0: Int, p1: Int): Void { return untyped __lua__('N_0xd7d0b00177485411')(p0, p1); }
    @:pure static inline function N_0xd7d22f5592aed8ba(p0: Int): Int { return untyped __lua__('N_0xd7d22f5592aed8ba')(p0); }
    
    /**
    * 4 matches across 2 scripts.
    * appcamera:
    * called after UI::HIDE_HUD_AND_RADAR_THIS_FRAME() and before GRAPHICS::0x108F36CC();
    * cellphone_controller:
    * called after GRAPHICS::0xE9F2B68F(0, 0) and before GRAPHICS::0x108F36CC();
    */
    @:pure static inline function N_0xd801cc02177fa3f1(): Void { return untyped __lua__('N_0xd801cc02177fa3f1')(); }
    @:pure static inline function N_0xd8122c407663b995(): Int { return untyped __lua__('N_0xd8122c407663b995')(); }
    @:pure static inline function N_0xd8295af639fd9cb8(p0: Int): Void { return untyped __lua__('N_0xd8295af639fd9cb8')(p0); }
    @:pure static inline function N_0xd8c3be3ee94caf2d(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('N_0xd8c3be3ee94caf2d')(p0, p1, p2, p3, p4); }
    @:pure static inline function N_0xd8e694757bcea8e9(): Void { return untyped __lua__('N_0xd8e694757bcea8e9')(); }
    @:pure static inline function N_0xd9454b5752c857dc(): Void { return untyped __lua__('N_0xd9454b5752c857dc')(); }
    @:pure static inline function N_0xd972df67326f966e(): Void { return untyped __lua__('N_0xd972df67326f966e')(); }
    @:pure static inline function N_0xd9b71952f78a2640(doorHash: EitherType<String, Int>, p1: Bool): Void { return untyped __lua__('N_0xd9b71952f78a2640')(doorHash, p1); }
    @:pure static inline function N_0xd9f692d349249528(): Void { return untyped __lua__('N_0xd9f692d349249528')(); }
    @:pure static inline function N_0xda024bdbd600f44a(p0: Int): Void { return untyped __lua__('N_0xda024bdbd600f44a')(p0); }
    
    /**
    * Set profile setting 866
    */
    @:pure static inline function N_0xdac073c7901f9e15(p0: Int): Void { return untyped __lua__('N_0xdac073c7901f9e15')(p0); }
    @:pure static inline function N_0xdaf87174be7454ff(p0: Int): Int { return untyped __lua__('N_0xdaf87174be7454ff')(p0); }
    @:pure static inline function N_0xdb34e8d56fc13b08(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('N_0xdb34e8d56fc13b08')(p0, p1, p2); }
    @:pure static inline function N_0xdb41d07a45a6d4b7(p0: Int): Int { return untyped __lua__('N_0xdb41d07a45a6d4b7')(p0); }
    @:pure static inline function N_0xdb90c6cca48940f1(p0: Bool): Void { return untyped __lua__('N_0xdb90c6cca48940f1')(p0); }
    
    /**
    * REQUEST_VEHICLE_*
    */
    @:pure static inline function N_0xdba3c090e3d74690(vehicle: Int): Void { return untyped __lua__('N_0xdba3c090e3d74690')(vehicle); }
    @:pure static inline function N_0xdbaa5ec848ba2d46(p0: Int, p1: Int): Void { return untyped __lua__('N_0xdbaa5ec848ba2d46')(p0, p1); }
    
    /**
    * Related to locking the vehicle or something similar.
    * In the decompiled scripts, its always called after
    * VEHICLE::_SET_EXCLUSIVE_DRIVER(a_0, 0, 0);
    * VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(a_0, 1);
    * VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(a_0, PLAYER::PLAYER_ID(), 0);
    */
    @:pure static inline function N_0xdbc631f109350b8c(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0xdbc631f109350b8c')(vehicle, p1); }
    
    /**
    * probably 0x3461981 on console
    */
    @:pure static inline function N_0xdc18531d7019a535(p0: Int, p1: Int): Int { return untyped __lua__('N_0xdc18531d7019a535')(p0, p1); }
    @:pure static inline function N_0xdc459cfa0cce245b(p0: Bool): Void { return untyped __lua__('N_0xdc459cfa0cce245b')(p0); }
    @:pure static inline function N_0xdc48473142545431(): Int { return untyped __lua__('N_0xdc48473142545431')(); }
    @:pure static inline function N_0xdc54a7af8b3a14ef(): Int { return untyped __lua__('N_0xdc54a7af8b3a14ef')(); }
    @:pure static inline function N_0xdc57a637a20006ed(p0: Int, p1: Int): Void { return untyped __lua__('N_0xdc57a637a20006ed')(p0, p1); }
    
    /**
    * Has something to do with police.
    */
    @:pure static inline function N_0xdc64d2c53493ed12(player: Int): Void { return untyped __lua__('N_0xdc64d2c53493ed12')(player); }
    
    /**
    * SET_ENTITY_*
    * x360 Hash: 0xA0466A69
    * Only called within 1 script for x360. 'fm_mission_controller' and it used on an object.
    * Ran after these 2 natives,
    * set_object_targettable(uParam0, 0);
    * set_entity_invincible(uParam0, 1);
    */
    @:pure static inline function N_0xdc6f8601faf2e893(entity: Int, p1: Bool): Void { return untyped __lua__('N_0xdc6f8601faf2e893')(entity, p1); }
    @:pure static inline function N_0xdc9274a7ef6b2867(): Int { return untyped __lua__('N_0xdc9274a7ef6b2867')(); }
    @:pure static inline function N_0xdc9da9e8789f5246(): Void { return untyped __lua__('N_0xdc9da9e8789f5246')(); }
    @:pure static inline function N_0xdcca191df9980fd7(ped: Int): Int { return untyped __lua__('N_0xdcca191df9980fd7')(ped); }
    @:pure static inline function N_0xdcfb5d4db8bf367e(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xdcfb5d4db8bf367e')(p0, p1); }
    @:pure static inline function N_0xdd2238f57b977751(p0: Int): Int { return untyped __lua__('N_0xdd2238f57b977751')(p0); }
    
    /**
    * 2 occurrences in agency_heist3a. p1 was 0.7f then 0.4f.
    */
    @:pure static inline function N_0xdd2620b7b9d16ff1(player: Int, p1: Int): Int { return untyped __lua__('N_0xdd2620b7b9d16ff1')(player, p1); }
    
    /**
    * Tune Backwards... ?
    */
    @:pure static inline function N_0xdd6bcf9e94425df9(): Void { return untyped __lua__('N_0xdd6bcf9e94425df9')(); }
    
    /**
    * returns a notification handle, prints out a notification like below:
    * type range: 0
    * if you set type to 1, button accepts "~INPUT_SOMETHING~"
    * example:
    * UI::_0xDD6CB2CCE7C2735C(1, "~INPUT_TALK~", "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
    * - imgur.com/UPy0Ial
    * Examples from the scripts:
    * l_D1[1 -- [[1]] ]=UI::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
    * l_D1[2 -- [[1]] ]=UI::_DD6CB2CCE7C2735C(1,"~INPUT_SAVE_REPLAY_CLIP~","");
    * l_D1[1 -- [[1]] ]=UI::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
    * l_D1[2 -- [[1]] ]=UI::_DD6CB2CCE7C2735C(1,"~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~","");
    */
    @:pure static inline function N_0xdd6cb2cce7c2735c(type: Int, button: String, text: String): Int { return untyped __lua__('N_0xdd6cb2cce7c2735c')(type, button, text); }
    @:pure static inline function N_0xdd79df9f4d26e1c9(): Void { return untyped __lua__('N_0xdd79df9f4d26e1c9')(); }
    @:pure static inline function N_0xddc635d5b3262c56(p0: Int): Void { return untyped __lua__('N_0xddc635d5b3262c56')(p0); }
    @:pure static inline function N_0xde03620f8703a9df(): Int { return untyped __lua__('N_0xde03620f8703a9df')(); }
    
    /**
    * No use in scripts.
    */
    @:pure static inline function N_0xde45d1a1ef45ee61(player: Int, toggle: Bool): Void { return untyped __lua__('N_0xde45d1a1ef45ee61')(player, toggle); }
    
    /**
    * No use in scripts.
    */
    @:pure static inline function SetHudAnimStopLevel(player: Int, toggle: Bool): Void { return untyped __lua__('SetHudAnimStopLevel')(player, toggle); }
    @:pure static inline function N_0xde81239437e8c5a8(): Void { return untyped __lua__('N_0xde81239437e8c5a8')(); }
    @:pure static inline function N_0xdea36202fc3382df(p0: Bool): Void { return untyped __lua__('N_0xdea36202fc3382df')(p0); }
    @:pure static inline function N_0xdeaaf77eb3687e97(p0: Int, p1: Int): Int { return untyped __lua__('N_0xdeaaf77eb3687e97')(p0, p1); }
    
    /**
    * Only found twice in decompiled scripts. Something to do with an entity/object?
    * On a side note, it's very interesting how the hash for this native is "DEADC0DE" - this is usually used as padding for initializing a buffer of some sort. I wonder if this native is actually "dead"?
    * "carmod_shop.ysc", line 9520:
    * if (ENTITY::DOES_ENTITY_EXIST(l_324._f6)) {
    * GRAPHICS::_0xDEADC0DEDEADC0DE(l_324._f6);
    * }
    * "fm_mission_controller.ysc", line 189641:
    * if (GAMEPLAY::IS_BIT_SET(g_1870E1._f7B64[a_0 -- [[104]] ]._f25, 28)) {
    * GRAPHICS::_0xDEADC0DEDEADC0DE(NETWORK::NET_TO_OBJ(l_4064._f26A._f87[a_0 -- [[1]] ]));
    * if (!GAMEPLAY::IS_BIT_SET(g_1870E1._f7B64[a_0 -- [[104]] ]._f25, 31)) {
    * if (!ENTITY::IS_ENTITY_DEAD(v_7)) {
    * AUDIO::PLAY_SOUND_FROM_ENTITY(-1, "EMP_Vehicle_Hum", v_7, "DLC_HEIST_BIOLAB_DELIVER_EMP_SOUNDS", 0, 0);
    * GAMEPLAY::SET_BIT(&amp;g_1870E1._f7B64[a_0 -- [[104]] ]._f25, 31);
    * }
    * }
    * }
    * Console Hash: 0xC12AC47A
    * ----------
    * It's most likely named UPDATE_* (like UPDATE_ENTITY_SHIT_OR_SOMETHING).
    */
    @:pure static inline function N_0xdeadc0dedeadc0de(object: Int): Void { return untyped __lua__('N_0xdeadc0dedeadc0de')(object); }
    @:pure static inline function N_0xdeb2b99a1af1a2a6(p0: Int): Int { return untyped __lua__('N_0xdeb2b99a1af1a2a6')(p0); }
    
    /**
    * Scripts use 0.2, 0.5 and 1.0.
    * SET_DRIVER_*
    */
    @:pure static inline function N_0xded5af5a0ea4b297(driver: Int, p1: Int): Void { return untyped __lua__('N_0xded5af5a0ea4b297')(driver, p1); }
    @:pure static inline function N_0xdf4b952f7d381b95(): Int { return untyped __lua__('N_0xdf4b952f7d381b95')(); }
    @:pure static inline function N_0xdf649c4e9afdd788(): Int { return untyped __lua__('N_0xdf649c4e9afdd788')(); }
    
    /**
    * Outputs 2 Vector3's.
    * Scripts check if out2.x - out1.x &gt; someshit.x
    * Could be suspension related, as in max suspension height and min suspension height, considering the natives location.
    */
    @:pure static inline function N_0xdf7e3eeb29642c38(vehicle: Int): { a0: Array<Int>, a1: Array<Int> } { return untyped __lua__('N_0xdf7e3eeb29642c38')(vehicle); }
    @:pure static inline function N_0xdf97cdd4fc08fd34(p0: Int): Int { return untyped __lua__('N_0xdf97cdd4fc08fd34')(p0); }
    @:pure static inline function N_0xdfa80cb25d0a19b3(): Int { return untyped __lua__('N_0xdfa80cb25d0a19b3')(); }
    
    /**
    * From a quick disassembly I can say that this has something to do with weapons.
    * Added params according to what I could see in IDA.
    */
    @:pure static inline function N_0xdfb4138eefed7b81(ped: Int, weaponHash: EitherType<String, Int>, radius: Int, p4: Bool): { a0: Int, a1: Int } { return untyped __lua__('N_0xdfb4138eefed7b81')(ped, weaponHash, radius, p4); }
    
    /**
    * gets some camera far clip
    */
    @:pure static inline function N_0xdfc8cbc606fdb0fc(): Int { return untyped __lua__('N_0xdfc8cbc606fdb0fc')(); }
    @:pure static inline function N_0xdffcef48e511db48(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xdffcef48e511db48')(p0, p1); }
    @:pure static inline function N_0xe0130b41d3cf4574(): Int { return untyped __lua__('N_0xe0130b41d3cf4574')(); }
    @:pure static inline function N_0xe01903c47c7ac89e(): Void { return untyped __lua__('N_0xe01903c47c7ac89e')(); }
    @:pure static inline function N_0xe058175f8eafe79a(p0: Bool): Void { return untyped __lua__('N_0xe058175f8eafe79a')(p0); }
    @:pure static inline function N_0xe05dd0e9707003a3(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xe05dd0e9707003a3')(p0, p1); }
    @:pure static inline function N_0xe0a6138401bcb837(): Int { return untyped __lua__('N_0xe0a6138401bcb837')(); }
    @:pure static inline function N_0xe111a7c0d200cbc5(p0: Int, p1: Int): Void { return untyped __lua__('N_0xe111a7c0d200cbc5')(p0, p1); }
    
    /**
    * p1 always false.
    */
    @:pure static inline function N_0xe12abe5e3a389a6c(entity: Int, p1: Bool): Void { return untyped __lua__('N_0xe12abe5e3a389a6c')(entity, p1); }
    
    /**
    * This function is hard-coded to always return 1.
    */
    @:pure static inline function N_0xe154b48b68ef72bc(p0: Int): Int { return untyped __lua__('N_0xe154b48b68ef72bc')(p0); }
    @:pure static inline function N_0xe16142b94664defd(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0xe16142b94664defd')(vehicle, p1); }
    
    /**
    * Used with IS_LOOK_INVERTED() and negates its affect.
    * --
    * Not sure how the person above got that description, but here's an actual example:
    * if (CONTROLS::_GET_LAST_INPUT_METHOD(2)) {
    * if (a_5) {
    * if (CONTROLS::IS_LOOK_INVERTED()) {
    * a_3 *= -1;
    * }
    * if (CONTROLS::_E1615EC03B3BB4FD()) {
    * a_3 *= -1;
    * }
    * }
    * }
    */
    @:pure static inline function N_0xe1615ec03b3bb4fd(): Int { return untyped __lua__('N_0xe1615ec03b3bb4fd')(); }
    @:pure static inline function N_0xe1c8709406f2c41c(): Void { return untyped __lua__('N_0xe1c8709406f2c41c')(); }
    @:pure static inline function N_0xe1ca84ebf72e691d(p0: Int, p1: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0xe1ca84ebf72e691d')(p0, p1); }
    @:pure static inline function N_0xe1cd1e48e025e661(): Void { return untyped __lua__('N_0xe1cd1e48e025e661')(); }
    @:pure static inline function N_0xe260e0bb9cd995ac(p0: Int): Int { return untyped __lua__('N_0xe260e0bb9cd995ac')(p0); }
    @:pure static inline function N_0xe266ed23311f24d4(p0: Int, p3: Int, p4: Int, p5: Bool): { a0: Int, a1: Int } { return untyped __lua__('N_0xe266ed23311f24d4')(p0, p3, p4, p5); }
    @:pure static inline function N_0xe2892e7e55d7073a(p0: Int): Void { return untyped __lua__('N_0xe2892e7e55d7073a')(p0); }
    @:pure static inline function N_0xe301bd63e9e13cf0(vehicle: Int, cargobob: Int): Void { return untyped __lua__('N_0xe301bd63e9e13cf0')(vehicle, cargobob); }
    
    /**
    * REMOTE_VEHICLE_*
    */
    @:pure static inline function N_0xe30524e1871f481d(p0: Int): Void { return untyped __lua__('N_0xe30524e1871f481d')(p0); }
    
    /**
    * IS_*
    */
    @:pure static inline function N_0xe33ffa906ce74880(vehicle: Int, p1: Int): Int { return untyped __lua__('N_0xe33ffa906ce74880')(vehicle, p1); }
    @:pure static inline function N_0xe36a98d8ab3d3c66(p0: Bool): Void { return untyped __lua__('N_0xe36a98d8ab3d3c66')(p0); }
    
    /**
    * only documented to be continued...
    */
    @:pure static inline function N_0xe3a7742e0b7a2f8b(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, damage: Int, p7: Bool, weaponHash: EitherType<String, Int>, ownerPed: Int, isAudible: Bool, isInvisible: Bool, speed: Int, entity: Int): Void { return untyped __lua__('N_0xe3a7742e0b7a2f8b')(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, entity); }
    @:pure static inline function N_0xe3b05614dce1d014(p0: Int): Int { return untyped __lua__('N_0xe3b05614dce1d014')(p0); }
    
    /**
    * sets something to 1
    */
    @:pure static inline function N_0xe3d969d2785ffb5e(): Void { return untyped __lua__('N_0xe3d969d2785ffb5e')(); }
    @:pure static inline function N_0xe3e2c1b4c59dbc77(p0: Int): Void { return untyped __lua__('N_0xe3e2c1b4c59dbc77')(p0); }
    @:pure static inline function N_0xe3e5a7c64ca2c6ed(): Int { return untyped __lua__('N_0xe3e5a7c64ca2c6ed')(); }
    
    /**
    * No observed effect.
    */
    @:pure static inline function N_0xe3ebaae484798530(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0xe3ebaae484798530')(vehicle, p1); }
    @:pure static inline function N_0xe43a13c9e4cccbcf(ped: Int, p1: Bool): Void { return untyped __lua__('N_0xe43a13c9e4cccbcf')(ped, p1); }
    @:pure static inline function N_0xe44a982368a4af23(vehicle: Int, vehicle2: Int): Void { return untyped __lua__('N_0xe44a982368a4af23')(vehicle, vehicle2); }
    @:pure static inline function N_0xe45087d85f468bc2(p0: Bool, p1: Int): Void { return untyped __lua__('N_0xe45087d85f468bc2')(p0, p1); }
    @:pure static inline function N_0xe4723db6e736ccff(ped: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Bool): Void { return untyped __lua__('N_0xe4723db6e736ccff')(ped, p1, p2, p3, p4, p5, p6); }
    @:pure static inline function N_0xe496a53ba5f50a56(p0: Int): Int { return untyped __lua__('N_0xe496a53ba5f50a56')(p0); }
    @:pure static inline function N_0xe4dcec7fd5b739a5(ped: Int): Void { return untyped __lua__('N_0xe4dcec7fd5b739a5')(ped); }
    @:pure static inline function N_0xe4e6dd5566d28c82(): Void { return untyped __lua__('N_0xe4e6dd5566d28c82')(); }
    @:pure static inline function N_0xe52b8e7f85d39a08(ped: Int, unk: Int): Void { return untyped __lua__('N_0xe52b8e7f85d39a08')(ped, unk); }
    @:pure static inline function N_0xe532ec1a63231b4f(p0: Int, p1: Int): Void { return untyped __lua__('N_0xe532ec1a63231b4f')(p0, p1); }
    @:pure static inline function N_0xe5810ac70602f2f5(vehicle: Int, p1: Int): Void { return untyped __lua__('N_0xe5810ac70602f2f5')(vehicle, p1); }
    @:pure static inline function N_0xe59343e9e96529e7(): Int { return untyped __lua__('N_0xe59343e9e96529e7')(); }
    @:pure static inline function N_0xe599a503b3837e1b(): Int { return untyped __lua__('N_0xe599a503b3837e1b')(); }
    @:pure static inline function N_0xe620fd3512a04f18(p0: Int): Void { return untyped __lua__('N_0xe620fd3512a04f18')(p0); }
    @:pure static inline function N_0xe63d7c6eececb66b(p0: Bool): Void { return untyped __lua__('N_0xe63d7c6eececb66b')(p0); }
    @:pure static inline function N_0xe64a3ca08dfa37a9(p0: Int): Int { return untyped __lua__('N_0xe64a3ca08dfa37a9')(p0); }
    @:pure static inline function N_0xe66c690248f11150(p0: Int, p1: Int): Void { return untyped __lua__('N_0xe66c690248f11150')(p0, p1); }
    @:pure static inline function N_0xe67c6dfd386ea5e7(p0: Bool): Void { return untyped __lua__('N_0xe67c6dfd386ea5e7')(p0); }
    @:pure static inline function N_0xe6869becdd8f2403(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xe6869becdd8f2403')(p0, p1); }
    
    /**
    * Performs the same type of trace as START_SHAPE_TEST_CAPSULE, but with some different hardcoded parameters.
    */
    @:pure static inline function N_0xe6ac6c45fbe83004(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, radius: Int, flags: Int, entity: Int, p9: Int): Int { return untyped __lua__('N_0xe6ac6c45fbe83004')(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9); }
    
    /**
    * GET_VEHICLE_*
    */
    @:pure static inline function N_0xe6b0e8cfc3633bf0(vehicle: Int): Int { return untyped __lua__('N_0xe6b0e8cfc3633bf0')(vehicle); }
    @:pure static inline function N_0xe6c0c80b8c867537(p0: Bool): Void { return untyped __lua__('N_0xe6c0c80b8c867537')(p0); }
    @:pure static inline function N_0xe6ca85e7259ce16b(p0: Int): Void { return untyped __lua__('N_0xe6ca85e7259ce16b')(p0); }
    @:pure static inline function N_0xe6de0561d9232a64(): Void { return untyped __lua__('N_0xe6de0561d9232a64')(); }
    @:pure static inline function N_0xe6f13851780394da(vehicle: Int, p1: Int): Void { return untyped __lua__('N_0xe6f13851780394da')(vehicle, p1); }
    @:pure static inline function N_0xe70ba7b90f8390dc(p0: Int, p1: Int, p2: Bool, p3: Int): Void { return untyped __lua__('N_0xe70ba7b90f8390dc')(p0, p1, p2, p3); }
    @:pure static inline function N_0xe73364db90778ffa(): Int { return untyped __lua__('N_0xe73364db90778ffa')(); }
    
    /**
    * This function is hard-coded to always return 0.
    */
    @:pure static inline function N_0xe791df1f73ed2c8b(p0: Int): Int { return untyped __lua__('N_0xe791df1f73ed2c8b')(p0); }
    @:pure static inline function N_0xe7e4c198b0185900(p0: Int, p1: Int, p2: Bool): Void { return untyped __lua__('N_0xe7e4c198b0185900')(p0, p1, p2); }
    
    /**
    * This method is the equivalent to PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING when using it to add a new button (like "INSTRUCTIONAL_BUTTONS").
    * When switching with a controller, the icons update and become the controller's icons.
    */
    @:pure static inline function N_0xe83a3e3557a56640(button: String): Void { return untyped __lua__('N_0xe83a3e3557a56640')(button); }
    
    /**
    * Vehicle must be a boat.
    */
    @:pure static inline function N_0xe842a9398079bd82(vehicle: Int, p1: Int): Void { return untyped __lua__('N_0xe842a9398079bd82')(vehicle, p1); }
    @:pure static inline function N_0xe851e480b814d4ba(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0xe851e480b814d4ba')(vehicle, p1); }
    @:pure static inline function N_0xe861d0b05c7662b8(p0: Int, p1: Bool, p2: Int): Void { return untyped __lua__('N_0xe861d0b05c7662b8')(p0, p1, p2); }
    @:pure static inline function N_0xe8a169e666cbc541(): Int { return untyped __lua__('N_0xe8a169e666cbc541')(); }
    @:pure static inline function N_0xe8b9c0ec9e183f35(): Int { return untyped __lua__('N_0xe8b9c0ec9e183f35')(); }
    @:pure static inline function N_0xe95b0c7d5ba3b96b(p0: Int): Int { return untyped __lua__('N_0xe95b0c7d5ba3b96b')(p0); }
    @:pure static inline function N_0xe95c8a1875a02ca4(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0xe95c8a1875a02ca4')(p0, p1, p2); }
    @:pure static inline function N_0xe9b99b6853181409(): Void { return untyped __lua__('N_0xe9b99b6853181409')(); }
    @:pure static inline function N_0xe9ea16d6e54cdca4(p0: Int, p1: Int): Int { return untyped __lua__('N_0xe9ea16d6e54cdca4')(p0, p1); }
    @:pure static inline function N_0xea14eef5b7cd2c30(): Int { return untyped __lua__('N_0xea14eef5b7cd2c30')(); }
    @:pure static inline function N_0xea2f2061875eed90(): Int { return untyped __lua__('N_0xea2f2061875eed90')(); }
    @:pure static inline function N_0xea9960d07dadcf10(p0: Int): Int { return untyped __lua__('N_0xea9960d07dadcf10')(p0); }
    @:pure static inline function N_0xeaf0fa793d05c592(): Int { return untyped __lua__('N_0xeaf0fa793d05c592')(); }
    @:pure static inline function N_0xeb078ca2b5e82add(p0: Int, p1: Int): Void { return untyped __lua__('N_0xeb078ca2b5e82add')(p0, p1); }
    @:pure static inline function N_0xeb2104e905c6f2e9(): Int { return untyped __lua__('N_0xeb2104e905c6f2e9')(); }
    @:pure static inline function N_0xeb2d525b57f42b40(): Void { return untyped __lua__('N_0xeb2d525b57f42b40')(); }
    @:pure static inline function N_0xeb3dac2c86001e5e(): Int { return untyped __lua__('N_0xeb3dac2c86001e5e')(); }
    @:pure static inline function N_0xeb6f1a9b5510a5d2(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xeb6f1a9b5510a5d2')(p0, p1); }
    @:pure static inline function N_0xeb709a36958abe0d(gamerTagId: Int): Int { return untyped __lua__('N_0xeb709a36958abe0d')(gamerTagId); }
    @:pure static inline function N_0xebb376779a760aa8(): Int { return untyped __lua__('N_0xebb376779a760aa8')(); }
    
    /**
    * MulleDK19: This function is hard-coded to always return 1.
    */
    @:pure static inline function N_0xebcab9e5048434f4(): Int { return untyped __lua__('N_0xebcab9e5048434f4')(); }
    @:pure static inline function N_0xebd0edba5be957cf(ped: Int): Int { return untyped __lua__('N_0xebd0edba5be957cf')(ped); }
    @:pure static inline function N_0xebd3205a207939ed(p0: Int): Void { return untyped __lua__('N_0xebd3205a207939ed')(p0); }
    
    /**
    * example from scripts:
    * unk_0xE0C28DB5(0,Global_2398291.imm_726,1);
    * that global is for ps3/xbox not pc
    * no idea what this does does
    */
    @:pure static inline function N_0xebefc2e77084f599(p0: Int, p1: String, p2: Bool): Void { return untyped __lua__('N_0xebefc2e77084f599')(p0, p1, p2); }
    @:pure static inline function N_0xebf8284d8cadeb53(): Void { return untyped __lua__('N_0xebf8284d8cadeb53')(); }
    @:pure static inline function N_0xebfa8d50addc54c4(p0: Int): Int { return untyped __lua__('N_0xebfa8d50addc54c4')(p0); }
    
    /**
    * SET_PED_*
    * Has most likely to do with some shooting attributes as it sets the float which is in the same range as shootRate.
    */
    @:pure static inline function N_0xec4b4b3b9908052a(ped: Int, unk: Int): Void { return untyped __lua__('N_0xec4b4b3b9908052a')(ped, unk); }
    @:pure static inline function N_0xec52c631a1831c03(p0: Int): Void { return untyped __lua__('N_0xec52c631a1831c03')(p0); }
    @:pure static inline function N_0xec6935ebe0847b90(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0xec6935ebe0847b90')(p0, p1, p2, p3); }
    
    /**
    * This function is hard-coded to always return 0.
    */
    @:pure static inline function N_0xec72c258667be5ea(p0: Int): Int { return untyped __lua__('N_0xec72c258667be5ea')(p0); }
    @:pure static inline function N_0xec9264727eec0f28(): Void { return untyped __lua__('N_0xec9264727eec0f28')(); }
    @:pure static inline function N_0xecb41ac6ab754401(): Int { return untyped __lua__('N_0xecb41ac6ab754401')(); }
    @:pure static inline function N_0xecf128344e9ff9f1(p0: Bool): Void { return untyped __lua__('N_0xecf128344e9ff9f1')(p0); }
    @:pure static inline function N_0xed3c76adfa6d07c4(p0: Int): Void { return untyped __lua__('N_0xed3c76adfa6d07c4')(p0); }
    @:pure static inline function N_0xed6d8e27a43b8cde(p0: Int): Int { return untyped __lua__('N_0xed6d8e27a43b8cde')(p0); }
    @:pure static inline function N_0xed8286f71a819baa(cargobob: Int, p1: Int): Void { return untyped __lua__('N_0xed8286f71a819baa')(cargobob, p1); }
    @:pure static inline function N_0xedf7f927136c224b(): Int { return untyped __lua__('N_0xedf7f927136c224b')(); }
    @:pure static inline function N_0xee066c7006c49c0a(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0xee066c7006c49c0a')(p0, p1, p2); }
    
    /**
    * Hides the hud element displayed by _0x523A590C1A3CC0D3
    */
    @:pure static inline function N_0xee4c0e6dbc6f2c6f(): Void { return untyped __lua__('N_0xee4c0e6dbc6f2c6f')(); }
    @:pure static inline function N_0xee76ff7e6a0166b0(headDisplayId: Int, p1: Bool): Void { return untyped __lua__('N_0xee76ff7e6a0166b0')(headDisplayId, p1); }
    
    /**
    * interprets the result of CAM::_0x19CAFA3C87F7C2FF()
    * example: // checks if you're currently in first person
    * if ((CAM::_EE778F8C7E1142E2(CAM::_19CAFA3C87F7C2FF()) == 4) &amp;&amp; (!__463_$28ED382849B17AFC())) {
    * UI::_FDEC055AB549E328();
    * UI::_SET_NOTIFICATION_TEXT_ENTRY("REC_FEED_WAR");
    * l_CE[0 -- [[1]] ] = UI::_DRAW_NOTIFICATION(0, 1);
    * }
    */
    @:pure static inline function N_0xee778f8c7e1142e2(p0: Int): Int { return untyped __lua__('N_0xee778f8c7e1142e2')(p0); }
    
    /**
    * Some kind of flags.
    */
    @:pure static inline function N_0xeebfc7a7efdc35b4(vehicle: Int): Int { return untyped __lua__('N_0xeebfc7a7efdc35b4')(vehicle); }
    @:pure static inline function N_0xeeed8fafec331a70(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0xeeed8fafec331a70')(p0, p1, p2, p3); }
    
    /**
    * dont know what this native does but im storing some documentation here
    * _NETWORK_VOICE_CONNECT_TO_PLAYER
    * _NETWORK_GET_GAMER_STATUS
    * _NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED
    * _NETWORK_SEND_PRESENCE_INVITE
    * _NETWORK_SEND_PRESENCE_TRANSITION_INVITE
    * _NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE
    * _NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE
    * _NETWORK_CAN_COMMUNICATE_WITH_GAMER
    * _NETWORK_CRC_HASH_CHECK_EVENT
    */
    @:pure static inline function N_0xef0912ddf7c4cb4b(): Int { return untyped __lua__('N_0xef0912ddf7c4cb4b')(); }
    @:pure static inline function N_0xef398beee4ef45f9(p0: Bool): Void { return untyped __lua__('N_0xef398beee4ef45f9')(p0); }
    @:pure static inline function N_0xef39ee20c537e98c(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Void { return untyped __lua__('N_0xef39ee20c537e98c')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function N_0xef49cf0270307cbe(): Void { return untyped __lua__('N_0xef49cf0270307cbe')(); }
    @:pure static inline function N_0xef7d17bc6c85264c(): Int { return untyped __lua__('N_0xef7d17bc6c85264c')(); }
    @:pure static inline function N_0xefabc7722293da7c(): Void { return untyped __lua__('N_0xefabc7722293da7c')(); }
    @:pure static inline function N_0xefb55e7c25d3b3be(): Void { return untyped __lua__('N_0xefb55e7c25d3b3be')(); }
    @:pure static inline function N_0xf033419d1b81fae8(p0: Int): Int { return untyped __lua__('N_0xf033419d1b81fae8')(p0); }
    @:pure static inline function N_0xf03755696450470c(): Void { return untyped __lua__('N_0xf03755696450470c')(); }
    @:pure static inline function N_0xf06ebb91a81e09e3(p0: Bool): Void { return untyped __lua__('N_0xf06ebb91a81e09e3')(p0); }
    @:pure static inline function N_0xf083835b70ba9bfe(): Void { return untyped __lua__('N_0xf083835b70ba9bfe')(); }
    @:pure static inline function N_0xf086ad9354fac3a3(p0: Int): Void { return untyped __lua__('N_0xf086ad9354fac3a3')(p0); }
    @:pure static inline function N_0xf0daef2f545bee25(p0: Int): Int { return untyped __lua__('N_0xf0daef2f545bee25')(p0); }
    
    /**
    * Adds some kind of shadow to the vehicle.
    */
    @:pure static inline function N_0xf0e4ba16d1db546c(vehicle: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0xf0e4ba16d1db546c')(vehicle, p1, p2); }
    
    /**
    * IS_OBJECT_???
    */
    @:pure static inline function N_0xf0eed5a6bc7b237a(p0: Int, entity: Int, p2: Int): Int { return untyped __lua__('N_0xf0eed5a6bc7b237a')(p0, entity, p2); }
    @:pure static inline function N_0xf0f2103efaf8cba7(p0: Int, p1: Int): Array<Int> { return untyped __lua__('N_0xf0f2103efaf8cba7')(p0, p1); }
    
    /**
    * Only 1 occurrence. p1 was 2.
    */
    @:pure static inline function N_0xf10b44fd479d69f3(player: Int, p1: Int): Int { return untyped __lua__('N_0xf10b44fd479d69f3')(player, p1); }
    @:pure static inline function N_0xf13fe2a80c05c561(): Int { return untyped __lua__('N_0xf13fe2a80c05c561')(); }
    @:pure static inline function N_0xf154b8d1775b2dec(p0: Bool): Void { return untyped __lua__('N_0xf154b8d1775b2dec')(p0); }
    
    /**
    * Sets profile setting 933
    */
    @:pure static inline function N_0xf1a1803d3476f215(value: Int): Void { return untyped __lua__('N_0xf1a1803d3476f215')(value); }
    @:pure static inline function N_0xf1a6c18b35bcade6(p0: Bool): Void { return untyped __lua__('N_0xf1a6c18b35bcade6')(p0); }
    
    /**
    * LEADERBOARDS2_READ_BY_???
    */
    @:pure static inline function N_0xf1ae5dcdbfca2721(): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('N_0xf1ae5dcdbfca2721')(); }
    @:pure static inline function N_0xf1b84178f8674195(p0: Int): Void { return untyped __lua__('N_0xf1b84178f8674195')(p0); }
    @:pure static inline function N_0xf1c03a5352243a30(p0: Int): Void { return untyped __lua__('N_0xf1c03a5352243a30')(p0); }
    @:pure static inline function N_0xf1cea8a4198d8e9a(p0: String): Int { return untyped __lua__('N_0xf1cea8a4198d8e9a')(p0); }
    @:pure static inline function N_0xf1e22dc13f5eebad(p0: Int): Void { return untyped __lua__('N_0xf1e22dc13f5eebad')(p0); }
    @:pure static inline function N_0xf1eea2dda9ffa69d(p0: Int): Void { return untyped __lua__('N_0xf1eea2dda9ffa69d')(p0); }
    
    /**
    * 2 calls found in the b617d scripts:
    * AUDIO::_F1F8157B8C3F171C(l_A42, "Franklin_Bike_Rev", "BIG_SCORE_3A_SOUNDS");
    * AUDIO::_F1F8157B8C3F171C(l_166, "Trevor_Revs_Off", "PALETO_SCORE_SETUP_SOUNDS");
    */
    @:pure static inline function N_0xf1f8157b8c3f171c(p0: Int, p1: String, p2: String): Void { return untyped __lua__('N_0xf1f8157b8c3f171c')(p0, p1, p2); }
    @:pure static inline function N_0xf22ca0fd74b80e7a(p0: Int): Int { return untyped __lua__('N_0xf22ca0fd74b80e7a')(p0); }
    @:pure static inline function N_0xf2385935bffd4d92(p0: Int): Int { return untyped __lua__('N_0xf2385935bffd4d92')(p0); }
    @:pure static inline function N_0xf239400e16c23e08(p0: Int, p1: Int): Void { return untyped __lua__('N_0xf239400e16c23e08')(p0, p1); }
    @:pure static inline function N_0xf25e02cb9c5818f8(): Void { return untyped __lua__('N_0xf25e02cb9c5818f8')(); }
    @:pure static inline function N_0xf284ac67940c6812(): Int { return untyped __lua__('N_0xf284ac67940c6812')(); }
    
    /**
    * toggle was always 0 except in one instance (b678).
    * The one time this is set to true seems to do with when you fail the mission.
    */
    @:pure static inline function N_0xf2bebcdfafdaa19e(toggle: Bool): Void { return untyped __lua__('N_0xf2bebcdfafdaa19e')(toggle); }
    
    /**
    * MulleDK19: This function is hard-coded to always return 0.
    */
    @:pure static inline function N_0xf2ca003f167e21d2(): Int { return untyped __lua__('N_0xf2ca003f167e21d2')(); }
    
    /**
    * MulleDK19: This function is hard-coded to always return 0.
    */
    @:pure static inline function ReturnZero(): Int { return untyped __lua__('ReturnZero')(); }
    
    /**
    * MulleDK19: This function is hard-coded to always return 1.
    */
    @:pure static inline function N_0xf2e07819ef1a5289(): Int { return untyped __lua__('N_0xf2e07819ef1a5289')(); }
    @:pure static inline function N_0xf2e1a7133dd356a6(hash: EitherType<String, Int>, toggle: Bool): Void { return untyped __lua__('N_0xf2e1a7133dd356a6')(hash, toggle); }
    @:pure static inline function N_0xf2eac213d5ea0623(): Int { return untyped __lua__('N_0xf2eac213d5ea0623')(); }
    @:pure static inline function N_0xf2f6a2fa49278625(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('N_0xf2f6a2fa49278625')(p0, p1, p2, p3, p4, p5, p6, p7, p8); }
    @:pure static inline function N_0xf3365489e0dd50f9(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xf3365489e0dd50f9')(p0, p1); }
    
    /**
    * characters
    * 0: Michael
    * 1: Franklin
    * 2: Trevor
    * 3: MPMale
    * 4: MPFemale
    */
    @:pure static inline function N_0xf3fbe2d50a6a8c28(character: Int, p1: Bool): Int { return untyped __lua__('N_0xf3fbe2d50a6a8c28')(character, p1); }
    @:pure static inline function N_0xf41b5d290c99a3d6(p0: Int): Int { return untyped __lua__('N_0xf41b5d290c99a3d6')(p0); }
    @:pure static inline function N_0xf434a10ba01c37d0(p0: Bool): Void { return untyped __lua__('N_0xf434a10ba01c37d0')(p0); }
    @:pure static inline function N_0xf445de8da80a1792(): Int { return untyped __lua__('N_0xf445de8da80a1792')(); }
    
    /**
    * Another function related to "HUD scaleforms"
    */
    @:pure static inline function N_0xf44a5456ac3f4f97(p0: Int): Void { return untyped __lua__('N_0xf44a5456ac3f4f97')(p0); }
    
    /**
    * bufferSize is 35 in the scripts.
    */
    @:pure static inline function N_0xf45352426ff3a4f0(bufferSize: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0xf45352426ff3a4f0')(bufferSize); }
    @:pure static inline function N_0xf46a1e03e8755980(p0: Bool): Void { return untyped __lua__('N_0xf46a1e03e8755980')(p0); }
    @:pure static inline function N_0xf488c566413b4232(p0: Int, p1: Int): Void { return untyped __lua__('N_0xf488c566413b4232')(p0, p1); }
    @:pure static inline function N_0xf49abc20d8552257(p0: Int): Void { return untyped __lua__('N_0xf49abc20d8552257')(p0); }
    @:pure static inline function N_0xf4a0dadb70f57fa6(): Void { return untyped __lua__('N_0xf4a0dadb70f57fa6')(); }
    
    /**
    * Something to do with shake:
    * CAM::_F4C8CF9E353AFECA("HAND_SHAKE", 0.2);
    */
    @:pure static inline function N_0xf4c8cf9e353afeca(p0: String, p1: Int): Void { return untyped __lua__('N_0xf4c8cf9e353afeca')(p0, p1); }
    
    /**
    * Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_BOOL_MASKED"?
    */
    @:pure static inline function N_0xf4d8e7ac2a27758c(p0: Int): Int { return untyped __lua__('N_0xf4d8e7ac2a27758c')(p0); }
    @:pure static inline function N_0xf4f2c0d4ee209e20(): Void { return untyped __lua__('N_0xf4f2c0d4ee209e20')(); }
    @:pure static inline function N_0xf4ff020a08bc8863(p0: Int, p1: Int): Void { return untyped __lua__('N_0xf4ff020a08bc8863')(p0, p1); }
    
    /**
    * This does not move an existing checkpoint... so wtf.
    */
    @:pure static inline function N_0xf51d36185993515d(checkpoint: Int, posX: Int, posY: Int, posZ: Int, unkX: Int, unkY: Int, unkZ: Int): Void { return untyped __lua__('N_0xf51d36185993515d')(checkpoint, posX, posY, posZ, unkX, unkY, unkZ); }
    @:pure static inline function N_0xf53e48461b71eecb(p0: Int): Int { return untyped __lua__('N_0xf53e48461b71eecb')(p0); }
    @:pure static inline function N_0xf55e4046f6f831dc(p0: Int, p1: Int): Void { return untyped __lua__('N_0xf55e4046f6f831dc')(p0, p1); }
    @:pure static inline function N_0xf56dfb7b61be7276(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int, p10: Int, p11: Int, p12: Int): Int { return untyped __lua__('N_0xf56dfb7b61be7276')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12); }
    @:pure static inline function N_0xf5846edb26a98a24(ped: Int, p1: Bool): Void { return untyped __lua__('N_0xf5846edb26a98a24')(ped, p1); }
    @:pure static inline function N_0xf5bb8dac426a52c0(): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('N_0xf5bb8dac426a52c0')(); }
    
    /**
    * 3 matches across 3 scripts. First 2 were 0, 3rd was 1. Possibly a bool.
    * appcamera, appmedia, and cellphone_controller.
    */
    @:pure static inline function N_0xf5bed327cea362b1(p0: Int): Int { return untyped __lua__('N_0xf5bed327cea362b1')(p0); }
    @:pure static inline function N_0xf60165e1d2c5370b(ped: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0xf60165e1d2c5370b')(ped); }
    
    /**
    * Set profile setting 501
    */
    @:pure static inline function N_0xf6792800ac95350d(p0: Int): Void { return untyped __lua__('N_0xf6792800ac95350d')(p0); }
    @:pure static inline function N_0xf6baaaf762e1bf40(p0: String, p1: Int): Int { return untyped __lua__('N_0xf6baaaf762e1bf40')(p0, p1); }
    @:pure static inline function N_0xf70efa14fe091429(p0: Int): Int { return untyped __lua__('N_0xf70efa14fe091429')(p0); }
    @:pure static inline function N_0xf751b16fb32abc1d(p0: Int): Void { return untyped __lua__('N_0xf751b16fb32abc1d')(p0); }
    @:pure static inline function N_0xf78b803082d4386f(p0: Int): Void { return untyped __lua__('N_0xf78b803082d4386f')(p0); }
    @:pure static inline function N_0xf78f94d60248c737(p0: Int, p1: Bool): Int { return untyped __lua__('N_0xf78f94d60248c737')(p0, p1); }
    @:pure static inline function N_0xf79f9def0aade61a(ped: Int): Void { return untyped __lua__('N_0xf79f9def0aade61a')(ped); }
    
    /**
    * SET_TV_???
    */
    @:pure static inline function N_0xf7b38b8305f1fe8b(p0: Int, p1: String, p2: Bool): Void { return untyped __lua__('N_0xf7b38b8305f1fe8b')(p0, p1, p2); }
    
    /**
    * Only did a quick disassembly, but this function seems to load all path nodes in the given area. Parameters appear to be start x, start y, end x, end y.
    */
    @:pure static inline function N_0xf7b79a50b905a30d(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0xf7b79a50b905a30d')(p0, p1, p2, p3); }
    
    /**
    * IS_S*
    */
    @:pure static inline function N_0xf7f203e31f96f6a1(vehicle: Int, flag: Bool): Int { return untyped __lua__('N_0xf7f203e31f96f6a1')(vehicle, flag); }
    @:pure static inline function N_0xf814fec6a19fd6e0(): Void { return untyped __lua__('N_0xf814fec6a19fd6e0')(); }
    @:pure static inline function N_0xf8155a7f03ddfc8e(p0: Int): Void { return untyped __lua__('N_0xf8155a7f03ddfc8e')(p0); }
    @:pure static inline function N_0xf854439efbb3b583(): Void { return untyped __lua__('N_0xf854439efbb3b583')(); }
    @:pure static inline function N_0xf87d9f2301f7d206(p0: Int): Void { return untyped __lua__('N_0xf87d9f2301f7d206')(p0); }
    @:pure static inline function N_0xf8bdbf3d573049a1(p0: Int): Void { return untyped __lua__('N_0xf8bdbf3d573049a1')(p0); }
    @:pure static inline function N_0xf8c54a461c3e11dc(): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('N_0xf8c54a461c3e11dc')(); }
    @:pure static inline function N_0xf8cc1ebe0b62e29f(p0: Int): Int { return untyped __lua__('N_0xf8cc1ebe0b62e29f')(p0); }
    @:pure static inline function N_0xf8ebccc96adb9fb7(p0: Int, p1: Int, p2: Bool): Void { return untyped __lua__('N_0xf8ebccc96adb9fb7')(p0, p1, p2); }
    @:pure static inline function N_0xf92099527db8e2a7(p0: Int, p1: Int): Void { return untyped __lua__('N_0xf92099527db8e2a7')(p0, p1); }
    @:pure static inline function N_0xf98dde0a8ed09323(p0: Bool): Void { return untyped __lua__('N_0xf98dde0a8ed09323')(p0); }
    @:pure static inline function N_0xf98e4b3e56afc7b1(p0: Int, p1: Int): Void { return untyped __lua__('N_0xf98e4b3e56afc7b1')(p0, p1); }
    
    /**
    * p1 was always 1 (true).
    * Kicks the ped from the current vehicle and keeps the rendering-focus on this ped (also disables its collision). If doing this for your player ped, you'll still be able to drive the vehicle.
    */
    @:pure static inline function N_0xf9acf4a08098ea25(ped: Int, p1: Bool): Void { return untyped __lua__('N_0xf9acf4a08098ea25')(ped, p1); }
    @:pure static inline function N_0xf9b83b77929d8863(): Int { return untyped __lua__('N_0xf9b83b77929d8863')(); }
    @:pure static inline function N_0xf9c1681347c8bd15(object: Int): Void { return untyped __lua__('N_0xf9c1681347c8bd15')(object); }
    @:pure static inline function N_0xf9e1ccae8ba4c281(p0: Int, p1: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0xf9e1ccae8ba4c281')(p0, p1); }
    @:pure static inline function N_0xfa1e0e893d915215(p0: Bool): Void { return untyped __lua__('N_0xfa1e0e893d915215')(p0); }
    @:pure static inline function N_0xfa2888e3833c8e96(): Void { return untyped __lua__('N_0xfa2888e3833c8e96')(); }
    
    /**
    * Another unknown label type...
    * GAMEPLAY::_FAA457EF263E8763(a_0, "Thumb_label");
    * GAMEPLAY::_FAA457EF263E8763(&amp;a_0._f10, "Photo_label");
    * GAMEPLAY::_FAA457EF263E8763(a_0, "GXTlabel");
    * GAMEPLAY::_FAA457EF263E8763(&amp;a_0._f21, "StringComp");
    * GAMEPLAY::_FAA457EF263E8763(&amp;a_0._f43, "SecondStringComp");
    * GAMEPLAY::_FAA457EF263E8763(&amp;a_0._f53, "ThirdStringComp");
    * GAMEPLAY::_FAA457EF263E8763(&amp;a_0._f32, "SenderStringComp");
    * GAMEPLAY::_FAA457EF263E8763(&amp;a_0._f726[v_1A -- [[16]] ], &amp;v_20); // where v_20 is "LastJobTL_0_1" thru "LastJobTL_2_1", gets saved in a struct called "LAST_JobGamer_TL"
    * GAMEPLAY::_FAA457EF263E8763(&amp;a_0._f4B, "PAID_PLAYER");
    * GAMEPLAY::_FAA457EF263E8763(&amp;a_0._f5B, "RADIO_STATION");
    */
    @:pure static inline function N_0xfaa457ef263e8763(name: String): Int { return untyped __lua__('N_0xfaa457ef263e8763')(name); }
    @:pure static inline function N_0xfae628f1e9adb239(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0xfae628f1e9adb239')(p0, p1, p2); }
    @:pure static inline function N_0xfaf2a78061fd9ef4(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0xfaf2a78061fd9ef4')(p0, p1, p2, p3); }
    @:pure static inline function N_0xfb00ca71da386228(): Void { return untyped __lua__('N_0xfb00ca71da386228')(); }
    @:pure static inline function N_0xfb199266061f820a(): Int { return untyped __lua__('N_0xfb199266061f820a')(); }
    
    /**
    * p0 is always 0. p1 is pointing to a global.
    */
    @:pure static inline function N_0xfb1f9381e80fa13f(p0: Int, p1: Int): Int { return untyped __lua__('N_0xfb1f9381e80fa13f')(p0, p1); }
    @:pure static inline function N_0xfb680d403909dc70(p0: Int, p1: Int): Void { return untyped __lua__('N_0xfb680d403909dc70')(p0, p1); }
    @:pure static inline function N_0xfb8f2a6f3df08cbe(): Void { return untyped __lua__('N_0xfb8f2a6f3df08cbe')(); }
    @:pure static inline function N_0xfbc5e768c7a77a6a(): Int { return untyped __lua__('N_0xfbc5e768c7a77a6a')(); }
    @:pure static inline function N_0xfbe20329593dec9d(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0xfbe20329593dec9d')(p0, p1, p2, p3); }
    @:pure static inline function N_0xfc18db55ae19e046(p0: Bool): Void { return untyped __lua__('N_0xfc18db55ae19e046')(p0); }
    @:pure static inline function N_0xfc859e2374407556(): Int { return untyped __lua__('N_0xfc859e2374407556')(); }
    @:pure static inline function N_0xfccae5b92a830878(p0: Int): Int { return untyped __lua__('N_0xfccae5b92a830878')(p0); }
    @:pure static inline function N_0xfcf37a457cb96dc0(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Int { return untyped __lua__('N_0xfcf37a457cb96dc0')(p0, p1, p2, p3, p4); }
    @:pure static inline function N_0xfd3151cd37ea2245(p0: Int): Void { return untyped __lua__('N_0xfd3151cd37ea2245')(p0); }
    @:pure static inline function N_0xfd75dabc0957bf33(p0: Bool): Void { return untyped __lua__('N_0xfd75dabc0957bf33')(p0); }
    
    /**
    * NETWORK_IS_IN_???
    */
    @:pure static inline function N_0xfd8b834a8ba05048(): Int { return untyped __lua__('N_0xfd8b834a8ba05048')(); }
    @:pure static inline function N_0xfdb423997fa30340(): Void { return untyped __lua__('N_0xfdb423997fa30340')(); }
    
    /**
    * console hash: 0x45268B6F
    * Most likely ADD_CURRENT_*
    */
    @:pure static inline function N_0xfdbf4cdbc07e1706(x: Int, y: Int, z: Int, radius: Int, unk: Int): Int { return untyped __lua__('N_0xfdbf4cdbc07e1706')(x, y, z, radius, unk); }
    @:pure static inline function N_0xfdd85225b2dea55e(): Void { return untyped __lua__('N_0xfdd85225b2dea55e')(); }
    @:pure static inline function N_0xfdec055ab549e328(): Void { return untyped __lua__('N_0xfdec055ab549e328')(); }
    @:pure static inline function N_0xfe07ff6495d52e2a(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0xfe07ff6495d52e2a')(p0, p1, p2, p3); }
    @:pure static inline function N_0xfe26117a5841b2ff(vehicle: Int, p1: Int): Int { return untyped __lua__('N_0xfe26117a5841b2ff')(vehicle, p1); }
    @:pure static inline function N_0xfe4c1d0d3b9cc17e(p0: Int, p1: Int): Int { return untyped __lua__('N_0xfe4c1d0d3b9cc17e')(p0, p1); }
    @:pure static inline function N_0xfec9a3b1820f3331(p0: Int): Int { return untyped __lua__('N_0xfec9a3b1820f3331')(p0); }
    @:pure static inline function N_0xfee4a5459472a9f8(): Void { return untyped __lua__('N_0xfee4a5459472a9f8')(); }
    
    /**
    * Tune Forward... ?
    */
    @:pure static inline function N_0xff266d1d0eb1195d(): Void { return untyped __lua__('N_0xff266d1d0eb1195d')(); }
    
    /**
    * gets byte at offset 0x862 in the specified players data (ped data + 0xbd0) and stores the bool p1 in it.
    * lwz       r3, 0xBD0(r3) ;r3 is player data
    * lbz       r4, 0x862(r3) ;r4 is now the byte
    * insrwi    r4, r31, 1,28 ;stores p1 as a bit in place 28 idk
    * stb       r4, 0x862(r3) ; puts the newly modified one back in
    * SET_PLAYER_*
    */
    @:pure static inline function N_0xff300c7649724a0b(player: Int, p1: Bool): Void { return untyped __lua__('N_0xff300c7649724a0b')(player, p1); }
    @:pure static inline function N_0xff4803bc019852d9(p0: Int, p1: Int): Void { return untyped __lua__('N_0xff4803bc019852d9')(p0, p1); }
    @:pure static inline function N_0xff56381874f82086(p0: Int, p1: Int, outComponent: Int): Int { return untyped __lua__('N_0xff56381874f82086')(p0, p1, outComponent); }
    
    /**
    * Actual name starts with START_SHAPE_TEST_??? and it returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT.
    * In its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7
    */
    @:pure static inline function N_0xff6be494c7987f34(flag: Int, entity: Int, flag2: Int): { a0: Int, a1: Array<Int>, a2: Array<Int> } { return untyped __lua__('N_0xff6be494c7987f34')(flag, entity, flag2); }
    @:pure static inline function N_0xff8f3a92b75ed67a(): Int { return untyped __lua__('N_0xff8f3a92b75ed67a')(); }
    
    /**
    * may be 0xBF21818E
    * related to: NETWORK_BAIL
    * NETWORK_BAIL_TRANSITION
    * NETWORK_JOIN_GROUP_ACTIVITY
    * NETWORK_JOIN_TRANSITION
    * NETWORK_LAUNCH_TRANSITION
    * NETWORK_SESSION_HOST
    * NETWORK_SESSION_HOST_CLOSED
    * NETWORK_SESSION_HOST_FRIENDS_ONLY
    * NETWORK_SESSION_HOST_SINGLE_PLAYER
    * NETWORK_SESSION_VOICE_LEAVE
    */
    @:pure static inline function N_0xffe1e5b792d92b34(): Int { return untyped __lua__('N_0xffe1e5b792d92b34')(); }
    @:pure static inline function N_0xffee8fa29ab9a18e(player: Int): Void { return untyped __lua__('N_0xffee8fa29ab9a18e')(player); }
    @:pure static inline function NetToEnt(netHandle: Int): Int { return untyped __lua__('NetToEnt')(netHandle); }
    @:pure static inline function NetToObj(netHandle: Int): Int { return untyped __lua__('NetToObj')(netHandle); }
    @:pure static inline function NetToPed(netHandle: Int): Int { return untyped __lua__('NetToPed')(netHandle); }
    @:pure static inline function NetToVeh(netHandle: Int): Int { return untyped __lua__('NetToVeh')(netHandle); }
    @:pure static inline function NetworkAcceptPresenceInvite(p0: Int): Int { return untyped __lua__('NetworkAcceptPresenceInvite')(p0); }
    
    /**
    * Some of the tunable contexts used in the PC scripts:
    * - "CONTENT_MODIFIER_MP_FM_RACES"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CAR"
    * - "CONTENT_MODIFIER_MP_FM_RACES_SEA"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CAR"
    * - "CONTENT_MODIFIER_MP_FM_RACES_AIR"
    * - "CONTENT_MODIFIER_MP_FM_BASEJUMP"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CYCLE"
    * - "CONTENT_MODIFIER_MP_FM_RACES_BIKE"
    * - "CONTENT_MODIFIER_MP_FM_MISSIONS"
    * - "CONTENT_MODIFIER_MP_FM_CONTACT"
    * - "CONTENT_MODIFIER_MP_FM_RANDOM"
    * - "CONTENT_MODIFIER_MP_FM_VERSUS"
    * - "CONTENT_MODIFIER_MP_FM_LTS"
    * - "CONTENT_MODIFIER_MP_FM_CAPTURE"
    * - "CONTENT_MODIFIER_MP_FM_DM"
    * - "CONTENT_MODIFIER_MP_FM_SURVIVAL"
    * - "CONTENT_MODIFIER_MP_FM_GANG_ATTACK"
    * - "CONTENT_MODIFIER_MP_FM_BASEJUMP"
    * - "BASE_GLOBALS"
    * - "MP_GLOBAL"
    * and some of the tunable names used in the PC scripts:
    * - "XP_MULTIPLIER"
    * - "CASH_MULTIPLIER"
    * - "ARMOUR_REWARD_GIFT"
    * - "TOGGLE_CREATORS_OFF"
    * - "MULTIPLAYER_DISABLED"
    */
    @:pure static inline function NetworkAccessTunableBool(tunableContext: String, tunableName: String): Int { return untyped __lua__('NetworkAccessTunableBool')(tunableContext, tunableName); }
    
    /**
    * Some of the tunable contexts used in the PC scripts:
    * - "CONTENT_MODIFIER_MP_FM_RACES"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CAR"
    * - "CONTENT_MODIFIER_MP_FM_RACES_SEA"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CAR"
    * - "CONTENT_MODIFIER_MP_FM_RACES_AIR"
    * - "CONTENT_MODIFIER_MP_FM_BASEJUMP"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CYCLE"
    * - "CONTENT_MODIFIER_MP_FM_RACES_BIKE"
    * - "CONTENT_MODIFIER_MP_FM_MISSIONS"
    * - "CONTENT_MODIFIER_MP_FM_CONTACT"
    * - "CONTENT_MODIFIER_MP_FM_RANDOM"
    * - "CONTENT_MODIFIER_MP_FM_VERSUS"
    * - "CONTENT_MODIFIER_MP_FM_LTS"
    * - "CONTENT_MODIFIER_MP_FM_CAPTURE"
    * - "CONTENT_MODIFIER_MP_FM_DM"
    * - "CONTENT_MODIFIER_MP_FM_SURVIVAL"
    * - "CONTENT_MODIFIER_MP_FM_GANG_ATTACK"
    * - "CONTENT_MODIFIER_MP_FM_BASEJUMP"
    * - "BASE_GLOBALS"
    * - "MP_GLOBAL"
    * and some of the tunable names used in the PC scripts:
    * - "XP_MULTIPLIER"
    * - "CASH_MULTIPLIER"
    * - "ARMOUR_REWARD_GIFT"
    * - "TOGGLE_CREATORS_OFF"
    * - "MULTIPLAYER_DISABLED"
    */
    @:pure static inline function N_0xaa6a47a573abb75a(tunableContext: String, tunableName: String): Int { return untyped __lua__('N_0xaa6a47a573abb75a')(tunableContext, tunableName); }
    
    /**
    * Console Hash - 0x18867C61 = NETWORK_ACCESS_TUNABLE_BOOL_HASH
    */
    @:pure static inline function NetworkAccessTunableBoolHash(tunableContext: EitherType<String, Int>, tunableName: EitherType<String, Int>): Int { return untyped __lua__('NetworkAccessTunableBoolHash')(tunableContext, tunableName); }
    
    /**
    * Console Hash - 0x18867C61 = NETWORK_ACCESS_TUNABLE_BOOL_HASH
    */
    @:pure static inline function N_0xea16b69d93d71a45(tunableContext: EitherType<String, Int>, tunableName: EitherType<String, Int>): Int { return untyped __lua__('N_0xea16b69d93d71a45')(tunableContext, tunableName); }
    
    /**
    * Returns a default value if the tunable don't exist.
    * Console Hash
    */
    @:pure static inline function NetworkAccessTunableBoolHashFailVal(tunableContext: EitherType<String, Int>, tunableName: EitherType<String, Int>, defaultValue: Bool): Int { return untyped __lua__('NetworkAccessTunableBoolHashFailVal')(tunableContext, tunableName, defaultValue); }
    
    /**
    * Returns a default value if the tunable don't exist.
    * Console Hash
    */
    @:pure static inline function N_0xc7420099936ce286(tunableContext: EitherType<String, Int>, tunableName: EitherType<String, Int>, defaultValue: Bool): Int { return untyped __lua__('N_0xc7420099936ce286')(tunableContext, tunableName, defaultValue); }
    
    /**
    * Some of the tunable contexts used in the PC scripts:
    * - "CONTENT_MODIFIER_MP_FM_RACES"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CAR"
    * - "CONTENT_MODIFIER_MP_FM_RACES_SEA"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CAR"
    * - "CONTENT_MODIFIER_MP_FM_RACES_AIR"
    * - "CONTENT_MODIFIER_MP_FM_BASEJUMP"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CYCLE"
    * - "CONTENT_MODIFIER_MP_FM_RACES_BIKE"
    * - "CONTENT_MODIFIER_MP_FM_MISSIONS"
    * - "CONTENT_MODIFIER_MP_FM_CONTACT"
    * - "CONTENT_MODIFIER_MP_FM_RANDOM"
    * - "CONTENT_MODIFIER_MP_FM_VERSUS"
    * - "CONTENT_MODIFIER_MP_FM_LTS"
    * - "CONTENT_MODIFIER_MP_FM_CAPTURE"
    * - "CONTENT_MODIFIER_MP_FM_DM"
    * - "CONTENT_MODIFIER_MP_FM_SURVIVAL"
    * - "CONTENT_MODIFIER_MP_FM_GANG_ATTACK"
    * - "CONTENT_MODIFIER_MP_FM_BASEJUMP"
    * - "BASE_GLOBALS"
    * - "MP_GLOBAL"
    * - "MP_CNC_TEAM_COP"
    * - "MP_CNC_TEAM_VAGOS"
    * - "MP_CNC_TEAM_LOST"
    * - "MP_FM_DM"
    * - "MP_FM_RACES"
    * - "MP_FM_RACES_CAR"
    * - "MP_FM_RACES_BIKE"
    * - "MP_FM_RACES_CYCLE"
    * - "MP_FM_RACES_AIR"
    * - "MP_FM_RACES_SEA"
    * - "MP_FM_MISSIONS"
    * - "MP_FM_SURVIVAL
    * - "MP_FM_BASEJUMP"
    * - "MP_FM_CAPTURE"
    * - "MP_FM_LTS"
    * -"MP_FM_GANG_ATTACK"
    * and some of the tunable names used in the PC scripts:
    * - "XP_MULTIPLIER"
    * - "CASH_MULTIPLIER"
    * - "ARMOUR_REWARD_GIFT"
    * - "TOGGLE_CREATORS_OFF"
    */
    @:pure static inline function NetworkAccessTunableFloat(tunableContext: String, tunableName: String, value: Int): Int { return untyped __lua__('NetworkAccessTunableFloat')(tunableContext, tunableName, value); }
    
    /**
    * Some of the tunable contexts used in the PC scripts:
    * - "CONTENT_MODIFIER_MP_FM_RACES"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CAR"
    * - "CONTENT_MODIFIER_MP_FM_RACES_SEA"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CAR"
    * - "CONTENT_MODIFIER_MP_FM_RACES_AIR"
    * - "CONTENT_MODIFIER_MP_FM_BASEJUMP"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CYCLE"
    * - "CONTENT_MODIFIER_MP_FM_RACES_BIKE"
    * - "CONTENT_MODIFIER_MP_FM_MISSIONS"
    * - "CONTENT_MODIFIER_MP_FM_CONTACT"
    * - "CONTENT_MODIFIER_MP_FM_RANDOM"
    * - "CONTENT_MODIFIER_MP_FM_VERSUS"
    * - "CONTENT_MODIFIER_MP_FM_LTS"
    * - "CONTENT_MODIFIER_MP_FM_CAPTURE"
    * - "CONTENT_MODIFIER_MP_FM_DM"
    * - "CONTENT_MODIFIER_MP_FM_SURVIVAL"
    * - "CONTENT_MODIFIER_MP_FM_GANG_ATTACK"
    * - "CONTENT_MODIFIER_MP_FM_BASEJUMP"
    * - "BASE_GLOBALS"
    * - "MP_GLOBAL"
    * - "MP_CNC_TEAM_COP"
    * - "MP_CNC_TEAM_VAGOS"
    * - "MP_CNC_TEAM_LOST"
    * - "MP_FM_DM"
    * - "MP_FM_RACES"
    * - "MP_FM_RACES_CAR"
    * - "MP_FM_RACES_BIKE"
    * - "MP_FM_RACES_CYCLE"
    * - "MP_FM_RACES_AIR"
    * - "MP_FM_RACES_SEA"
    * - "MP_FM_MISSIONS"
    * - "MP_FM_SURVIVAL
    * - "MP_FM_BASEJUMP"
    * - "MP_FM_CAPTURE"
    * - "MP_FM_LTS"
    * -"MP_FM_GANG_ATTACK"
    * and some of the tunable names used in the PC scripts:
    * - "XP_MULTIPLIER"
    * - "CASH_MULTIPLIER"
    * - "ARMOUR_REWARD_GIFT"
    * - "TOGGLE_CREATORS_OFF"
    */
    @:pure static inline function N_0xe5608ca7bc163a5f(tunableContext: String, tunableName: String, value: Int): Int { return untyped __lua__('N_0xe5608ca7bc163a5f')(tunableContext, tunableName, value); }
    
    /**
    * Console Hash - 0x3972551F = NETWORK_ACCESS_TUNABLE_FLOAT_HASH
    */
    @:pure static inline function NetworkAccessTunableFloatHash(tunableContext: EitherType<String, Int>, tunableName: EitherType<String, Int>, value: Int): Int { return untyped __lua__('NetworkAccessTunableFloatHash')(tunableContext, tunableName, value); }
    
    /**
    * Console Hash - 0x3972551F = NETWORK_ACCESS_TUNABLE_FLOAT_HASH
    */
    @:pure static inline function N_0x972bc203bbc4c4d5(tunableContext: EitherType<String, Int>, tunableName: EitherType<String, Int>, value: Int): Int { return untyped __lua__('N_0x972bc203bbc4c4d5')(tunableContext, tunableName, value); }
    
    /**
    * Some of the tunable contexts used in the PC scripts:
    * - "CONTENT_MODIFIER_MP_FM_RACES"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CAR"
    * - "CONTENT_MODIFIER_MP_FM_RACES_SEA"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CAR"
    * - "CONTENT_MODIFIER_MP_FM_RACES_AIR"
    * - "CONTENT_MODIFIER_MP_FM_BASEJUMP"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CYCLE"
    * - "CONTENT_MODIFIER_MP_FM_RACES_BIKE"
    * - "CONTENT_MODIFIER_MP_FM_MISSIONS"
    * - "CONTENT_MODIFIER_MP_FM_CONTACT"
    * - "CONTENT_MODIFIER_MP_FM_RANDOM"
    * - "CONTENT_MODIFIER_MP_FM_VERSUS"
    * - "CONTENT_MODIFIER_MP_FM_LTS"
    * - "CONTENT_MODIFIER_MP_FM_CAPTURE"
    * - "CONTENT_MODIFIER_MP_FM_DM"
    * - "CONTENT_MODIFIER_MP_FM_SURVIVAL"
    * - "CONTENT_MODIFIER_MP_FM_GANG_ATTACK"
    * - "CONTENT_MODIFIER_MP_FM_BASEJUMP"
    * - "BASE_GLOBALS"
    * - "MP_GLOBAL"
    * and some of the tunable names used in the PC scripts:
    * - "XP_MULTIPLIER"
    * - "CASH_MULTIPLIER"
    * - "ARMOUR_REWARD_GIFT"
    * - "TOGGLE_CREATORS_OFF"
    */
    @:pure static inline function NetworkAccessTunableInt(tunableContext: String, tunableName: String, value: Int): Int { return untyped __lua__('NetworkAccessTunableInt')(tunableContext, tunableName, value); }
    
    /**
    * Some of the tunable contexts used in the PC scripts:
    * - "CONTENT_MODIFIER_MP_FM_RACES"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CAR"
    * - "CONTENT_MODIFIER_MP_FM_RACES_SEA"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CAR"
    * - "CONTENT_MODIFIER_MP_FM_RACES_AIR"
    * - "CONTENT_MODIFIER_MP_FM_BASEJUMP"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CYCLE"
    * - "CONTENT_MODIFIER_MP_FM_RACES_BIKE"
    * - "CONTENT_MODIFIER_MP_FM_MISSIONS"
    * - "CONTENT_MODIFIER_MP_FM_CONTACT"
    * - "CONTENT_MODIFIER_MP_FM_RANDOM"
    * - "CONTENT_MODIFIER_MP_FM_VERSUS"
    * - "CONTENT_MODIFIER_MP_FM_LTS"
    * - "CONTENT_MODIFIER_MP_FM_CAPTURE"
    * - "CONTENT_MODIFIER_MP_FM_DM"
    * - "CONTENT_MODIFIER_MP_FM_SURVIVAL"
    * - "CONTENT_MODIFIER_MP_FM_GANG_ATTACK"
    * - "CONTENT_MODIFIER_MP_FM_BASEJUMP"
    * - "BASE_GLOBALS"
    * - "MP_GLOBAL"
    * and some of the tunable names used in the PC scripts:
    * - "XP_MULTIPLIER"
    * - "CASH_MULTIPLIER"
    * - "ARMOUR_REWARD_GIFT"
    * - "TOGGLE_CREATORS_OFF"
    */
    @:pure static inline function N_0x8be1146dfd5d4468(tunableContext: String, tunableName: String, value: Int): Int { return untyped __lua__('N_0x8be1146dfd5d4468')(tunableContext, tunableName, value); }
    
    /**
    * Console Hash - 0xB2E83B75 = NETWORK_ACCESS_TUNABLE_INT_HASH
    */
    @:pure static inline function NetworkAccessTunableIntHash(tunableContext: EitherType<String, Int>, tunableName: EitherType<String, Int>, value: Int): Int { return untyped __lua__('NetworkAccessTunableIntHash')(tunableContext, tunableName, value); }
    
    /**
    * Console Hash - 0xB2E83B75 = NETWORK_ACCESS_TUNABLE_INT_HASH
    */
    @:pure static inline function N_0x40fce03e50e8dbe8(tunableContext: EitherType<String, Int>, tunableName: EitherType<String, Int>, value: Int): Int { return untyped __lua__('N_0x40fce03e50e8dbe8')(tunableContext, tunableName, value); }
    @:pure static inline function NetworkActionFollowInvite(): Int { return untyped __lua__('NetworkActionFollowInvite')(); }
    @:pure static inline function N_0xc88156ebb786f8d5(): Int { return untyped __lua__('N_0xc88156ebb786f8d5')(); }
    
    /**
    * Console hash: 0xCD69BEA1
    */
    @:pure static inline function NetworkAddEntityAngledArea(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Int { return untyped __lua__('NetworkAddEntityAngledArea')(p0, p1, p2, p3, p4, p5, p6); }
    
    /**
    * Console hash: 0xCD69BEA1
    */
    @:pure static inline function N_0x376c6375ba60293a(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Int { return untyped __lua__('N_0x376c6375ba60293a')(p0, p1, p2, p3, p4, p5, p6); }
    @:pure static inline function NetworkAddEntityArea(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Int { return untyped __lua__('NetworkAddEntityArea')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function NetworkAddEntityToSynchronisedScene(entity: Int, netScene: Int, animDict: String, animName: String, speed: Int, speedMulitiplier: Int, flag: Int): Void { return untyped __lua__('NetworkAddEntityToSynchronisedScene')(entity, netScene, animDict, animName, speed, speedMulitiplier, flag); }
    
    /**
    * ..
    */
    @:pure static inline function NetworkAddFollowers(p1: Int): Int { return untyped __lua__('NetworkAddFollowers')(p1); }
    
    /**
    * ..
    */
    @:pure static inline function N_0x236406f60cf216d6(p1: Int): Int { return untyped __lua__('N_0x236406f60cf216d6')(p1); }
    @:pure static inline function NetworkAddFriend(p1: String): { a0: Int, a1: Int } { return untyped __lua__('NetworkAddFriend')(p1); }
    @:pure static inline function NetworkAddPedToSynchronisedScene(ped: Int, netScene: Int, animDict: String, animnName: String, speed: Int, speedMultiplier: Int, duration: Int, flag: Int, playbackRate: Int, p9: Int): Void { return untyped __lua__('NetworkAddPedToSynchronisedScene')(ped, netScene, animDict, animnName, speed, speedMultiplier, duration, flag, playbackRate, p9); }
    @:pure static inline function NetworkAmIBlockedByGamer(p0: Int): Int { return untyped __lua__('NetworkAmIBlockedByGamer')(p0); }
    @:pure static inline function NetworkAmIBlockedByPlayer(player: Int): Int { return untyped __lua__('NetworkAmIBlockedByPlayer')(player); }
    @:pure static inline function NetworkAmIMutedByGamer(p0: Int): Int { return untyped __lua__('NetworkAmIMutedByGamer')(p0); }
    @:pure static inline function NetworkAmIMutedByPlayer(player: Int): Int { return untyped __lua__('NetworkAmIMutedByPlayer')(player); }
    @:pure static inline function NetworkApplyTransitionParameter(p0: Int, p1: Int): Void { return untyped __lua__('NetworkApplyTransitionParameter')(p0, p1); }
    @:pure static inline function N_0x521638ada1ba0d18(p0: Int, p1: Int): Void { return untyped __lua__('N_0x521638ada1ba0d18')(p0, p1); }
    @:pure static inline function NetworkAreHandlesTheSame(): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('NetworkAreHandlesTheSame')(); }
    
    /**
    * Returns whether the Rockstar game services are available or not:
    * SCLB_NO_ROS = The Rockstar game services are unavailable right now. Please try again later.
    * prod.ros.rockstargames.com
    * prod.telemetry.ros.rockstargames.com
    * conductor-prod.ros.rockstargames.com
    */
    @:pure static inline function NetworkAreRosAvailable(): Int { return untyped __lua__('NetworkAreRosAvailable')(); }
    
    /**
    * Returns whether the Rockstar game services are available or not:
    * SCLB_NO_ROS = The Rockstar game services are unavailable right now. Please try again later.
    * prod.ros.rockstargames.com
    * prod.telemetry.ros.rockstargames.com
    * conductor-prod.ros.rockstargames.com
    */
    @:pure static inline function N_0x85443ff4c328f53b(): Int { return untyped __lua__('N_0x85443ff4c328f53b')(); }
    @:pure static inline function NetworkAreTransitionDetailsValid(p0: Int): Int { return untyped __lua__('NetworkAreTransitionDetailsValid')(p0); }
    @:pure static inline function N_0x2615aa2a695930c1(p0: Int): Int { return untyped __lua__('N_0x2615aa2a695930c1')(p0); }
    @:pure static inline function NetworkAttachSynchronisedSceneToEntity(netScene: Int, entity: Int, bone: Int): Void { return untyped __lua__('NetworkAttachSynchronisedSceneToEntity')(netScene, entity, bone); }
    @:pure static inline function NetworkBail(): Void { return untyped __lua__('NetworkBail')(); }
    @:pure static inline function NetworkBailTransition(): Void { return untyped __lua__('NetworkBailTransition')(); }
    @:pure static inline function NetworkBlockInvites(toggle: Bool): Void { return untyped __lua__('NetworkBlockInvites')(toggle); }
    @:pure static inline function NetworkBlockKickedPlayers(p0: Bool): Void { return untyped __lua__('NetworkBlockKickedPlayers')(p0); }
    @:pure static inline function N_0x6b07b9ce4d390375(p0: Bool): Void { return untyped __lua__('N_0x6b07b9ce4d390375')(p0); }
    
    /**
    * p1 = 0 (always)
    * p2 = 1 (always)
    */
    @:pure static inline function NetworkBuyAirstrike(cost: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkBuyAirstrike')(cost, p1, p2); }
    
    /**
    * p1 is just an assumption. p2 was false and p3 was true.
    */
    @:pure static inline function NetworkBuyBounty(amount: Int, victim: Int, p2: Bool, p3: Bool): Void { return untyped __lua__('NetworkBuyBounty')(amount, victim, p2, p3); }
    
    /**
    * The first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.
    * The last 3 parameters are,
    * 2,0,1 in the am_ferriswheel.c
    * 1,0,1 in the am_rollercoaster.c
    */
    @:pure static inline function NetworkBuyFairgroundRide(amountSpent: Int, p1: Int, p2: Bool, p3: Bool): Void { return untyped __lua__('NetworkBuyFairgroundRide')(amountSpent, p1, p2, p3); }
    
    /**
    * The first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.
    * The last 3 parameters are,
    * 2,0,1 in the am_ferriswheel.c
    * 1,0,1 in the am_rollercoaster.c
    */
    @:pure static inline function N_0x8a7b3952dd64d2b5(amountSpent: Int, p1: Int, p2: Bool, p3: Bool): Void { return untyped __lua__('N_0x8a7b3952dd64d2b5')(amountSpent, p1, p2, p3); }
    @:pure static inline function NetworkBuyHealthcare(cost: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkBuyHealthcare')(cost, p1, p2); }
    
    /**
    * p1 = 0 (always)
    * p2 = 1 (always)
    */
    @:pure static inline function NetworkBuyHeliStrike(cost: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkBuyHeliStrike')(cost, p1, p2); }
    @:pure static inline function NetworkBuyItem(player: Int, item: EitherType<String, Int>, p2: Int, p3: Int, p4: Bool, item_name: String, p6: Int, p7: Int, p8: Int, p9: Bool): Void { return untyped __lua__('NetworkBuyItem')(player, item, p2, p3, p4, item_name, p6, p7, p8, p9); }
    @:pure static inline function NetworkBuyProperty(propertyCost: Int, propertyName: EitherType<String, Int>, p2: Bool, p3: Bool): Void { return untyped __lua__('NetworkBuyProperty')(propertyCost, propertyName, p2, p3); }
    
    /**
    * 11 - Need to download tunables.
    * 12 - Need to download background script.
    * Returns 1 if the multiplayer is loaded, otherwhise 0.
    */
    @:pure static inline function NetworkCanAccessMultiplayer(loadingState: Int): Int { return untyped __lua__('NetworkCanAccessMultiplayer')(loadingState); }
    
    /**
    * 11 - Need to download tunables.
    * 12 - Need to download background script.
    * Returns 1 if the multiplayer is loaded, otherwhise 0.
    */
    @:pure static inline function N_0xaf50da1a3f8b1ba4(loadingState: Int): Int { return untyped __lua__('N_0xaf50da1a3f8b1ba4')(loadingState); }
    @:pure static inline function NetworkCanBail(): Int { return untyped __lua__('NetworkCanBail')(); }
    @:pure static inline function NetworkCanBet(p0: Int): Int { return untyped __lua__('NetworkCanBet')(p0); }
    @:pure static inline function N_0x3a54e33660ded67f(p0: Int): Int { return untyped __lua__('N_0x3a54e33660ded67f')(p0); }
    @:pure static inline function NetworkCanCommunicateWithGamer(player: Int): Int { return untyped __lua__('NetworkCanCommunicateWithGamer')(player); }
    @:pure static inline function NetworkCanEnterMultiplayer(): Int { return untyped __lua__('NetworkCanEnterMultiplayer')(); }
    @:pure static inline function NetworkCanReceivePlayerCash(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('NetworkCanReceivePlayerCash')(p0, p1, p2, p3); }
    @:pure static inline function NetworkCanSessionEnd(): Int { return untyped __lua__('NetworkCanSessionEnd')(); }
    @:pure static inline function NetworkCanSetWaypoint(): Int { return untyped __lua__('NetworkCanSetWaypoint')(); }
    @:pure static inline function NetworkCanSpendMoney(p0: Int, p1: Bool, p2: Bool, p3: Bool, p4: Int): Int { return untyped __lua__('NetworkCanSpendMoney')(p0, p1, p2, p3, p4); }
    @:pure static inline function N_0xab3caa6b422164da(p0: Int, p1: Bool, p2: Bool, p3: Bool, p4: Int): Int { return untyped __lua__('N_0xab3caa6b422164da')(p0, p1, p2, p3, p4); }
    @:pure static inline function NetworkChangeTransitionSlots(p0: Int, p1: Int): Void { return untyped __lua__('NetworkChangeTransitionSlots')(p0, p1); }
    @:pure static inline function N_0xeeeda5e6d7080987(p0: Int, p1: Int): Void { return untyped __lua__('N_0xeeeda5e6d7080987')(p0, p1); }
    
    /**
    * Only documented...
    */
    @:pure static inline function NetworkClanAnimation(animDict: String, animName: String): Int { return untyped __lua__('NetworkClanAnimation')(animDict, animName); }
    
    /**
    * Only documented...
    */
    @:pure static inline function N_0x729e3401f0430686(animDict: String, animName: String): Int { return untyped __lua__('N_0x729e3401f0430686')(animDict, animName); }
    @:pure static inline function NetworkClanDownloadMembership(networkHandle: Int): Int { return untyped __lua__('NetworkClanDownloadMembership')(networkHandle); }
    @:pure static inline function NetworkClanDownloadMembershipPending(p0: Int): Int { return untyped __lua__('NetworkClanDownloadMembershipPending')(p0); }
    
    /**
    * BOOL DEBUG_MEMBRESHIP(int Param)
    * {
    * int membership;
    * networkHandleMgr handle;
    * NETWORK_HANDLE_FROM_PLAYER(iSelectedPlayer, &amp;handle.netHandle, 13);
    * if (!_NETWORK_IS_CLAN_MEMBERSHIP_FINISHED_DOWNLOADING())
    * {
    * if (NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(&amp;Param))
    * {
    * if (NETWORK_CLAN_GET_MEMBERSHIP_COUNT(&amp;Param) &gt; 0)
    * {
    * if (NETWORK_CLAN_GET_MEMBERSHIP_VALID(&amp;Param, 0))
    * {
    * if (NETWORK_CLAN_GET_MEMBERSHIP(&amp;Param, &amp;membership, -1))
    * {
    * _0xF633805A(&amp;membership, 35, &amp;handle.netHandle);
    * }
    * }
    * }
    * }
    * }
    * else
    * {
    * NETWORK_CLAN_DOWNLOAD_MEMBERSHIP(&amp;handle.netHandle);
    * }
    * }
    */
    @:pure static inline function NetworkClanGetMembership(p2: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('NetworkClanGetMembership')(p2); }
    @:pure static inline function NetworkClanGetMembershipCount(p0: Int): Int { return untyped __lua__('NetworkClanGetMembershipCount')(p0); }
    
    /**
    * networkMembershipMgr memShip;
    * int maxMemship = _GET_NUM_MEMBERSHIP_DESC();
    * for (int i = 0; i &lt; maxMemship; i++)
    * {
    * NETWORK_CLAN_GET_MEMBERSHIP_DESC(&amp;memShip.memHandle, i);
    * }
    */
    @:pure static inline function NetworkClanGetMembershipDesc(p1: Int): { a0: Int, a1: Int } { return untyped __lua__('NetworkClanGetMembershipDesc')(p1); }
    @:pure static inline function NetworkClanGetMembershipValid(p1: Int): { a0: Int, a1: Int } { return untyped __lua__('NetworkClanGetMembershipValid')(p1); }
    @:pure static inline function NetworkClanJoin(clanDesc: Int): Int { return untyped __lua__('NetworkClanJoin')(clanDesc); }
    
    /**
    * bufferSize is 35 in the scripts.
    * bufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that.
    * the answer is: because p0 an int64_t* / int64_t[35].  and FYI p2 is an int64_t[13]
    * pastebin.com/cSZniHak
    */
    @:pure static inline function NetworkClanPlayerGetDesc(bufferSize: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('NetworkClanPlayerGetDesc')(bufferSize); }
    @:pure static inline function NetworkClanPlayerIsActive(networkHandle: Int): Int { return untyped __lua__('NetworkClanPlayerIsActive')(networkHandle); }
    @:pure static inline function NetworkClanRemoteMembershipsAreInCache(p0: Int): Int { return untyped __lua__('NetworkClanRemoteMembershipsAreInCache')(p0); }
    @:pure static inline function NetworkClearCharacterWallet(p0: Int): Void { return untyped __lua__('NetworkClearCharacterWallet')(p0); }
    @:pure static inline function N_0xa921ded15fdf28f5(p0: Int): Void { return untyped __lua__('N_0xa921ded15fdf28f5')(p0); }
    @:pure static inline function NetworkClearFollowInvite(): Int { return untyped __lua__('NetworkClearFollowInvite')(); }
    @:pure static inline function N_0x439bfde3cd0610f6(): Int { return untyped __lua__('N_0x439bfde3cd0610f6')(); }
    @:pure static inline function NetworkClearFollowers(): Void { return untyped __lua__('NetworkClearFollowers')(); }
    @:pure static inline function N_0x058f43ec59a8631a(): Void { return untyped __lua__('N_0x058f43ec59a8631a')(); }
    @:pure static inline function NetworkClearFoundGamers(): Void { return untyped __lua__('NetworkClearFoundGamers')(); }
    @:pure static inline function NetworkClearPropertyId(): Void { return untyped __lua__('NetworkClearPropertyId')(); }
    @:pure static inline function N_0xc2b82527ca77053e(): Void { return untyped __lua__('N_0xc2b82527ca77053e')(); }
    @:pure static inline function NetworkClearTransitionCreatorHandle(): Void { return untyped __lua__('NetworkClearTransitionCreatorHandle')(); }
    @:pure static inline function NetworkClearVoiceChannel(): Void { return untyped __lua__('NetworkClearVoiceChannel')(); }
    @:pure static inline function N_0xe036a705f989e049(): Void { return untyped __lua__('N_0xe036a705f989e049')(); }
    @:pure static inline function NetworkCloseTransitionMatchmaking(): Void { return untyped __lua__('NetworkCloseTransitionMatchmaking')(); }
    @:pure static inline function N_0x43f4dba69710e01e(): Void { return untyped __lua__('N_0x43f4dba69710e01e')(); }
    
    /**
    * returns netScene
    * this native is missing 2 params
    * float p10, float p11
    */
    @:pure static inline function NetworkCreateSynchronisedScene(x: Int, y: Int, z: Int, xRot: Int, yRot: Int, zRot: Int, p6: Int, p7: Int, p8: Int, p9: Int): Int { return untyped __lua__('NetworkCreateSynchronisedScene')(x, y, z, xRot, yRot, zRot, p6, p7, p8, p9); }
    
    /**
    * Note the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash);
    */
    @:pure static inline function NetworkDeleteCharacter(characterIndex: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkDeleteCharacter')(characterIndex, p1, p2); }
    
    /**
    * hash collision???
    */
    @:pure static inline function NetworkDisableInvincibleFlashing(player: Int, p1: Bool): Void { return untyped __lua__('NetworkDisableInvincibleFlashing')(player, p1); }
    
    /**
    * hash collision???
    */
    @:pure static inline function N_0x9dd368bf06983221(player: Int, p1: Bool): Void { return untyped __lua__('N_0x9dd368bf06983221')(player, p1); }
    @:pure static inline function NetworkDoTransitionQuickmatch(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('NetworkDoTransitionQuickmatch')(p0, p1, p2, p3); }
    @:pure static inline function N_0x71fb0ebcd4915d56(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0x71fb0ebcd4915d56')(p0, p1, p2, p3); }
    @:pure static inline function NetworkDoTransitionQuickmatchAsync(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('NetworkDoTransitionQuickmatchAsync')(p0, p1, p2, p3); }
    @:pure static inline function N_0xa091a5e44f0072e5(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0xa091a5e44f0072e5')(p0, p1, p2, p3); }
    @:pure static inline function NetworkDoTransitionQuickmatchWithGroup(p0: Int, p1: Int, p2: Int, p3: Int, p5: Int): { a0: Int, a1: Int } { return untyped __lua__('NetworkDoTransitionQuickmatchWithGroup')(p0, p1, p2, p3, p5); }
    
    /**
    * p2 is true 3/4 of the occurrences I found.
    * 'players' is the number of players for a session. On PS3/360 it's always 18. On PC it's 32.
    */
    @:pure static inline function NetworkDoTransitionToFreemode(p1: Int, p2: Bool, players: Int, p4: Bool): { a0: Int, a1: Int } { return untyped __lua__('NetworkDoTransitionToFreemode')(p1, p2, players, p4); }
    @:pure static inline function NetworkDoTransitionToGame(p0: Bool, maxPlayers: Int): Int { return untyped __lua__('NetworkDoTransitionToGame')(p0, maxPlayers); }
    @:pure static inline function NetworkDoTransitionToNewFreemode(players: Int, p3: Bool, p4: Bool, p5: Bool): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('NetworkDoTransitionToNewFreemode')(players, p3, p4, p5); }
    @:pure static inline function NetworkDoTransitionToNewGame(p0: Bool, maxPlayers: Int, p2: Bool): Int { return untyped __lua__('NetworkDoTransitionToNewGame')(p0, maxPlayers, p2); }
    @:pure static inline function NetworkDoesEntityExistWithNetworkId(entity: Int): Int { return untyped __lua__('NetworkDoesEntityExistWithNetworkId')(entity); }
    @:pure static inline function NetworkDoesNetworkIdExist(netID: Int): Int { return untyped __lua__('NetworkDoesNetworkIdExist')(netID); }
    
    /**
    * Some of the tunable contexts used in the PC scripts:
    * - "CONTENT_MODIFIER_MP_FM_RACES"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CAR"
    * - "CONTENT_MODIFIER_MP_FM_RACES_SEA"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CAR"
    * - "CONTENT_MODIFIER_MP_FM_RACES_AIR"
    * - "CONTENT_MODIFIER_MP_FM_BASEJUMP"
    * - "CONTENT_MODIFIER_MP_FM_RACES_CYCLE"
    * - "CONTENT_MODIFIER_MP_FM_RACES_BIKE"
    * - "CONTENT_MODIFIER_MP_FM_MISSIONS"
    * - "CONTENT_MODIFIER_MP_FM_CONTACT"
    * - "CONTENT_MODIFIER_MP_FM_RANDOM"
    * - "CONTENT_MODIFIER_MP_FM_VERSUS"
    * - "CONTENT_MODIFIER_MP_FM_LTS"
    * - "CONTENT_MODIFIER_MP_FM_CAPTURE"
    * - "CONTENT_MODIFIER_MP_FM_DM"
    * - "CONTENT_MODIFIER_MP_FM_SURVIVAL"
    * - "CONTENT_MODIFIER_MP_FM_GANG_ATTACK"
    * - "CONTENT_MODIFIER_MP_FM_BASEJUMP"
    * - "BASE_GLOBALS"
    * - "MP_GLOBAL"
    * and some of the tunable names used in the PC scripts:
    * - "XP_MULTIPLIER"
    * - "CASH_MULTIPLIER"
    * - "ARMOUR_REWARD_GIFT"
    * - "TOGGLE_CREATORS_OFF"
    */
    @:pure static inline function NetworkDoesTunableExist(tunableContext: String, tunableName: String): Int { return untyped __lua__('NetworkDoesTunableExist')(tunableContext, tunableName); }
    
    /**
    * Console Hash - 0x25915CB9 = NETWORK_DOES_TUNABLE_EXIST_HASH
    */
    @:pure static inline function NetworkDoesTunableExistHash(tunbaleContext: EitherType<String, Int>, tunableName: EitherType<String, Int>): Int { return untyped __lua__('NetworkDoesTunableExistHash')(tunbaleContext, tunableName); }
    
    /**
    * Console Hash - 0x25915CB9 = NETWORK_DOES_TUNABLE_EXIST_HASH
    */
    @:pure static inline function N_0xe4e53e1419d81127(tunbaleContext: EitherType<String, Int>, tunableName: EitherType<String, Int>): Int { return untyped __lua__('N_0xe4e53e1419d81127')(tunbaleContext, tunableName); }
    
    /**
    * DSPORT
    */
    @:pure static inline function NetworkEarnFromAiTargetKill(p0: Int, p1: Int): Void { return untyped __lua__('NetworkEarnFromAiTargetKill')(p0, p1); }
    
    /**
    * DSPORT
    */
    @:pure static inline function N_0x515b4a22e4d3c6d7(p0: Int, p1: Int): Void { return untyped __lua__('N_0x515b4a22e4d3c6d7')(p0, p1); }
    
    /**
    * Console Hash - 0xA14CC95D = NETWORK_EARN_FROM_AMBIENT_JOB
    * Example for p1: "AM_DISTRACT_COPS"
    */
    @:pure static inline function NetworkEarnFromAmbientJob(p0: Int, p1: String, p2: Int): Void { return untyped __lua__('NetworkEarnFromAmbientJob')(p0, p1, p2); }
    
    /**
    * Console Hash - 0xA14CC95D = NETWORK_EARN_FROM_AMBIENT_JOB
    * Example for p1: "AM_DISTRACT_COPS"
    */
    @:pure static inline function N_0xfb6db092fbae29e6(p0: Int, p1: String, p2: Int): Void { return untyped __lua__('N_0xfb6db092fbae29e6')(p0, p1, p2); }
    
    /**
    * For the money bags that drop a max of $40,000. Often called 40k bags.
    * Most likely NETWORK_EARN_FROM_ROB***
    */
    @:pure static inline function NetworkEarnFromArmourTruck(amount: Int): Void { return untyped __lua__('NetworkEarnFromArmourTruck')(amount); }
    
    /**
    * For the money bags that drop a max of $40,000. Often called 40k bags.
    * Most likely NETWORK_EARN_FROM_ROB***
    */
    @:pure static inline function N_0xf514621e8ea463d0(amount: Int): Void { return untyped __lua__('N_0xf514621e8ea463d0')(amount); }
    @:pure static inline function NetworkEarnFromBetting(amount: Int, p1: String): Void { return untyped __lua__('NetworkEarnFromBetting')(amount, p1); }
    @:pure static inline function NetworkEarnFromBounty(amount: Int, p3: Int): { a0: Int, a1: Int } { return untyped __lua__('NetworkEarnFromBounty')(amount, p3); }
    @:pure static inline function NetworkEarnFromChallengeWin(p0: Int, p2: Bool): Int { return untyped __lua__('NetworkEarnFromChallengeWin')(p0, p2); }
    @:pure static inline function N_0x2b171e6b2f64d8df(p0: Int, p2: Bool): Int { return untyped __lua__('N_0x2b171e6b2f64d8df')(p0, p2); }
    @:pure static inline function NetworkEarnFromCrateDrop(amount: Int): Void { return untyped __lua__('NetworkEarnFromCrateDrop')(amount); }
    @:pure static inline function N_0xb1cc1b9ec3007a2a(amount: Int): Void { return untyped __lua__('N_0xb1cc1b9ec3007a2a')(amount); }
    
    /**
    * Console Hash - 0xAB6BD72F = NETWORK_EARN_FROM_DAILY_OBJECTIVE
    */
    @:pure static inline function NetworkEarnFromDailyObjective(p0: Int, p1: String, p2: Int): Void { return untyped __lua__('NetworkEarnFromDailyObjective')(p0, p1, p2); }
    
    /**
    * Console Hash - 0xAB6BD72F = NETWORK_EARN_FROM_DAILY_OBJECTIVE
    */
    @:pure static inline function N_0x6ea318c91c1a8786(p0: Int, p1: String, p2: Int): Void { return untyped __lua__('N_0x6ea318c91c1a8786')(p0, p1, p2); }
    @:pure static inline function NetworkEarnFromGangPickup(amount: Int): Void { return untyped __lua__('NetworkEarnFromGangPickup')(amount); }
    @:pure static inline function N_0xa03d4ace0a3284ce(amount: Int): Void { return untyped __lua__('N_0xa03d4ace0a3284ce')(amount); }
    @:pure static inline function NetworkEarnFromHoldups(amount: Int): Void { return untyped __lua__('NetworkEarnFromHoldups')(amount); }
    @:pure static inline function NetworkEarnFromImportExport(p0: Int, p1: Int): Void { return untyped __lua__('NetworkEarnFromImportExport')(p0, p1); }
    @:pure static inline function NetworkEarnFromJob(amount: Int, p1: String): Void { return untyped __lua__('NetworkEarnFromJob')(amount, p1); }
    
    /**
    * Console Hash - 0xBEE23713 = NETWORK_EARN_FROM_JOB_BONUS
    */
    @:pure static inline function NetworkEarnFromJobBonus(p0: Int): { a0: Int, a1: Int } { return untyped __lua__('NetworkEarnFromJobBonus')(p0); }
    
    /**
    * Console Hash - 0xBEE23713 = NETWORK_EARN_FROM_JOB_BONUS
    */
    @:pure static inline function N_0x6816fb4416760775(p0: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x6816fb4416760775')(p0); }
    
    /**
    * Pretty sure this is actually a hash collision.
    * It should be NETWORK_EARN_FROM_A*** or NETWORK_EARN_FROM_B***
    * =============================================================
    * Not a hash collision, test it for yourself when finishing heist.
    * lackos; 2017.03.12
    */
    @:pure static inline function NetworkEarnFromMissionH(amount: Int, heistHash: String): Void { return untyped __lua__('NetworkEarnFromMissionH')(amount, heistHash); }
    
    /**
    * Pretty sure this is actually a hash collision.
    * It should be NETWORK_EARN_FROM_A*** or NETWORK_EARN_FROM_B***
    * =============================================================
    * Not a hash collision, test it for yourself when finishing heist.
    * lackos; 2017.03.12
    */
    @:pure static inline function N_0x61326ee6df15b0ca(amount: Int, heistHash: String): Void { return untyped __lua__('N_0x61326ee6df15b0ca')(amount, heistHash); }
    @:pure static inline function NetworkEarnFromNotBadsport(amount: Int): Void { return untyped __lua__('NetworkEarnFromNotBadsport')(amount); }
    @:pure static inline function N_0x4337511fa8221d36(amount: Int): Void { return untyped __lua__('N_0x4337511fa8221d36')(amount); }
    
    /**
    * Now has 9 parameters.
    */
    @:pure static inline function NetworkEarnFromPersonalVehicle(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int): Void { return untyped __lua__('NetworkEarnFromPersonalVehicle')(p0, p1, p2, p3, p4, p5, p6, p7, p8); }
    
    /**
    * Now has 9 parameters.
    */
    @:pure static inline function N_0x3f4d00167e41e0ad(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int): Void { return untyped __lua__('N_0x3f4d00167e41e0ad')(p0, p1, p2, p3, p4, p5, p6, p7, p8); }
    @:pure static inline function NetworkEarnFromPickup(amount: Int): Int { return untyped __lua__('NetworkEarnFromPickup')(amount); }
    @:pure static inline function NetworkEarnFromProperty(amount: Int, propertyName: EitherType<String, Int>): Void { return untyped __lua__('NetworkEarnFromProperty')(amount, propertyName); }
    
    /**
    * This merely adds an entry in the Network Transaction Log;
    * it does not grant cash to the player (on PC).
    * Max value for amount is 9999999.
    */
    @:pure static inline function NetworkEarnFromRockstar(amount: Int): Void { return untyped __lua__('NetworkEarnFromRockstar')(amount); }
    
    /**
    * Now has 8 params.
    */
    @:pure static inline function NetworkEarnFromVehicle(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int): Void { return untyped __lua__('NetworkEarnFromVehicle')(p0, p1, p2, p3, p4, p5, p6, p7); }
    
    /**
    * Pretty sure this is a hash collision
    */
    @:pure static inline function NetworkEnableMotionDrugged(): Int { return untyped __lua__('NetworkEnableMotionDrugged')(); }
    
    /**
    * Pretty sure this is a hash collision
    */
    @:pure static inline function N_0x0b0cc10720653f3b(): Int { return untyped __lua__('N_0x0b0cc10720653f3b')(); }
    @:pure static inline function NetworkEndTutorialSession(): Void { return untyped __lua__('NetworkEndTutorialSession')(); }
    
    /**
    * In the console script dumps, this is only referenced once.
    * NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0);
    * ^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters.
    * Which as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param?
    * am_plane_takedown.c
    * network_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0);
    * armenian2.c
    * network_explode_vehicle(Local_80[6 &lt;2&gt;], 1, 0, 0);
    * fm_horde_controler.c
    * network_explode_vehicle(net_to_veh(*uParam0), 1, 0, *uParam0);
    * fm_mission_controller.c, has 6 hits so not going to list them.
    * Side note, setting the first parameter to 0 seems to mute sound or so?
    * Seems it's like ADD_EXPLOSION, etc. the first 2 params. The 3rd atm no need to worry since it always seems to be 0.
    */
    @:pure static inline function NetworkExplodeVehicle(vehicle: Int, isAudible: Bool, isInvisible: Bool, p3: Bool): Int { return untyped __lua__('NetworkExplodeVehicle')(vehicle, isAudible, isInvisible, p3); }
    
    /**
    * state - 0 does 5 fades
    * state - 1 does 6 fades
    * native is missing third argument, also boolean, setting to 1 made vehicle fade in slower, probably "slow" as per NETWORK_FADE_OUT_ENTITY
    */
    @:pure static inline function NetworkFadeInEntity(entity: Int, state: Bool): Void { return untyped __lua__('NetworkFadeInEntity')(entity, state); }
    
    /**
    * normal - transition like when your coming out of LSC
    * slow - transition like when you walk into a mission
    */
    @:pure static inline function NetworkFadeOutEntity(entity: Int, normal: Bool, slow: Bool): Void { return untyped __lua__('NetworkFadeOutEntity')(entity, normal, slow); }
    @:pure static inline function NetworkFindMatchedGamers(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('NetworkFindMatchedGamers')(p0, p1, p2, p3); }
    @:pure static inline function N_0xf7b2cfde5c9f700d(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0xf7b2cfde5c9f700d')(p0, p1, p2, p3); }
    @:pure static inline function NetworkForceLocalUseOfSyncedSceneCamera(netScene: Int, animDict: String, animName: String): Void { return untyped __lua__('NetworkForceLocalUseOfSyncedSceneCamera')(netScene, animDict, animName); }
    @:pure static inline function N_0xcf8bd3b0bd6d42d7(netScene: Int, animDict: String, animName: String): Void { return untyped __lua__('N_0xcf8bd3b0bd6d42d7')(netScene, animDict, animName); }
    @:pure static inline function NetworkGamerHasHeadset(p0: Int): Int { return untyped __lua__('NetworkGamerHasHeadset')(p0); }
    @:pure static inline function NetworkGamertagFromHandlePending(): Int { return untyped __lua__('NetworkGamertagFromHandlePending')(); }
    @:pure static inline function NetworkGamertagFromHandleStart(networkHandle: Int): Int { return untyped __lua__('NetworkGamertagFromHandleStart')(networkHandle); }
    @:pure static inline function NetworkGamertagFromHandleSucceeded(): Int { return untyped __lua__('NetworkGamertagFromHandleSucceeded')(); }
    @:pure static inline function NetworkGetActivityPlayerNum(p0: Bool): Int { return untyped __lua__('NetworkGetActivityPlayerNum')(p0); }
    @:pure static inline function NetworkGetBackgroundLoadingRecipients(p0: Int, p1: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('NetworkGetBackgroundLoadingRecipients')(p0, p1); }
    @:pure static inline function N_0x97a770beef227e2b(p0: Int, p1: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x97a770beef227e2b')(p0, p1); }
    
    /**
    * Console Hash: Probably 0xAA7EA3BD
    */
    @:pure static inline function NetworkGetBankBalanceString(): String { return untyped __lua__('NetworkGetBankBalanceString')(); }
    
    /**
    * Console Hash: Probably 0xAA7EA3BD
    */
    @:pure static inline function N_0xa6fa3979bed01b81(): String { return untyped __lua__('N_0xa6fa3979bed01b81')(); }
    @:pure static inline function NetworkGetCurrentlySelectedGamerHandleFromInviteMenu(p0: Int): Int { return untyped __lua__('NetworkGetCurrentlySelectedGamerHandleFromInviteMenu')(p0); }
    @:pure static inline function NetworkGetDesroyerOfEntity(p0: Int, p1: Int, p2: Int): Int { return untyped __lua__('NetworkGetDesroyerOfEntity')(p0, p1, p2); }
    @:pure static inline function N_0x4caca84440fa26f6(p0: Int, p1: Int, p2: Int): Int { return untyped __lua__('N_0x4caca84440fa26f6')(p0, p1, p2); }
    @:pure static inline function NetworkGetDestroyerOfNetworkId(netId: Int, weaponHash: Int): Int { return untyped __lua__('NetworkGetDestroyerOfNetworkId')(netId, weaponHash); }
    @:pure static inline function NetworkGetEntityFromNetworkId(netId: Int): Int { return untyped __lua__('NetworkGetEntityFromNetworkId')(netId); }
    @:pure static inline function NetworkGetEntityIsLocal(entity: Int): Int { return untyped __lua__('NetworkGetEntityIsLocal')(entity); }
    @:pure static inline function NetworkGetEntityIsNetworked(entity: Int): Int { return untyped __lua__('NetworkGetEntityIsNetworked')(entity); }
    @:pure static inline function N_0xc7827959479dcc78(entity: Int): Int { return untyped __lua__('N_0xc7827959479dcc78')(entity); }
    @:pure static inline function NetworkGetEntityKillerOfPlayer(player: Int, weaponHash: Int): Int { return untyped __lua__('NetworkGetEntityKillerOfPlayer')(player, weaponHash); }
    @:pure static inline function NetworkGetFoundGamer(p1: Int): { a0: Int, a1: Int } { return untyped __lua__('NetworkGetFoundGamer')(p1); }
    @:pure static inline function NetworkGetFriendCount(): Int { return untyped __lua__('NetworkGetFriendCount')(); }
    @:pure static inline function NetworkGetFriendName(player: Int): String { return untyped __lua__('NetworkGetFriendName')(player); }
    @:pure static inline function NetworkGetFriendNameFromIndex(friendIndex: Int): String { return untyped __lua__('NetworkGetFriendNameFromIndex')(friendIndex); }
    @:pure static inline function NetworkGetGamertagFromHandle(networkHandle: Int): String { return untyped __lua__('NetworkGetGamertagFromHandle')(networkHandle); }
    
    /**
    * scriptName examples:
    * "freemode", "AM_CR_SecurityVan", ...
    * Most of the time, these values are used:
    * p1 = -1
    * p2 = 0
    */
    @:pure static inline function NetworkGetHostOfScript(scriptName: String, p1: Int, p2: Int): Int { return untyped __lua__('NetworkGetHostOfScript')(scriptName, p1, p2); }
    @:pure static inline function NetworkGetHostOfThisScript(): Int { return untyped __lua__('NetworkGetHostOfThisScript')(); }
    
    /**
    * Retrieves the local player's NetworkHandle* and stores it in the given buffer.
    * * Currently unknown struct
    */
    @:pure static inline function NetworkGetLocalHandle(bufferSize: Int): Int { return untyped __lua__('NetworkGetLocalHandle')(bufferSize); }
    @:pure static inline function NetworkGetMaxFriends(): Int { return untyped __lua__('NetworkGetMaxFriends')(); }
    @:pure static inline function NetworkGetNetworkIdFromEntity(entity: Int): Int { return untyped __lua__('NetworkGetNetworkIdFromEntity')(entity); }
    
    /**
    * Returns the amount of players connected in the current session. Only works when connected to a session/server.
    */
    @:pure static inline function NetworkGetNumConnectedPlayers(): Int { return untyped __lua__('NetworkGetNumConnectedPlayers')(); }
    @:pure static inline function NetworkGetNumFoundGamers(): Int { return untyped __lua__('NetworkGetNumFoundGamers')(); }
    @:pure static inline function NetworkGetNumParticipants(): Int { return untyped __lua__('NetworkGetNumParticipants')(); }
    
    /**
    * Seems to always return 0, but it's used in quite a few loops.
    * for (num3 = 0; num3 &lt; NETWORK::0xCCD8C02D(); num3++)
    * {
    * if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::0x98F3B274(num3)) != 0)
    * {
    * var num5 = NETWORK::NETWORK_GET_PLAYER_INDEX(PLAYER::0x98F3B274(num3));
    */
    @:pure static inline function NetworkGetNumParticipantsHost(): Int { return untyped __lua__('NetworkGetNumParticipantsHost')(); }
    @:pure static inline function NetworkGetNumPresenceInvites(): Int { return untyped __lua__('NetworkGetNumPresenceInvites')(); }
    @:pure static inline function N_0xcefa968912d0f78d(): Int { return untyped __lua__('N_0xcefa968912d0f78d')(); }
    @:pure static inline function NetworkGetNumScriptParticipants(p1: Int, p2: Int): { a0: Int, a1: Int } { return untyped __lua__('NetworkGetNumScriptParticipants')(p1, p2); }
    @:pure static inline function N_0x3658e8cd94fc121a(p1: Int, p2: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x3658e8cd94fc121a')(p1, p2); }
    @:pure static inline function NetworkGetParticipantIndex(index: Int): Int { return untyped __lua__('NetworkGetParticipantIndex')(index); }
    @:pure static inline function NetworkGetPlayerFromGamerHandle(networkHandle: Int): Int { return untyped __lua__('NetworkGetPlayerFromGamerHandle')(networkHandle); }
    @:pure static inline function NetworkGetPlayerIndex(player: Int): Int { return untyped __lua__('NetworkGetPlayerIndex')(player); }
    
    /**
    * Returns the Player associated to a given Ped when in an online session.
    */
    @:pure static inline function NetworkGetPlayerIndexFromPed(ped: Int): Int { return untyped __lua__('NetworkGetPlayerIndexFromPed')(ped); }
    
    /**
    * Returns the Player associated to a given Ped when in an online session.
    */
    @:pure static inline function N_0x6c0e2e0125610278(ped: Int): Int { return untyped __lua__('N_0x6c0e2e0125610278')(ped); }
    @:pure static inline function NetworkGetPlayerLoudness(p0: Int): Int { return untyped __lua__('NetworkGetPlayerLoudness')(p0); }
    @:pure static inline function NetworkGetPresenceInviteHandle(p0: Int, p1: Int): Int { return untyped __lua__('NetworkGetPresenceInviteHandle')(p0, p1); }
    @:pure static inline function NetworkGetPresenceInviteId(p0: Int): Int { return untyped __lua__('NetworkGetPresenceInviteId')(p0); }
    @:pure static inline function N_0xdff09646e12ec386(p0: Int): Int { return untyped __lua__('N_0xdff09646e12ec386')(p0); }
    @:pure static inline function NetworkGetPresenceInviteInviter(p0: Int): Int { return untyped __lua__('NetworkGetPresenceInviteInviter')(p0); }
    @:pure static inline function N_0x4962cc4aa2f345b7(p0: Int): Int { return untyped __lua__('N_0x4962cc4aa2f345b7')(p0); }
    @:pure static inline function NetworkGetPresenceInviteSessionId(p0: Int): Int { return untyped __lua__('NetworkGetPresenceInviteSessionId')(p0); }
    @:pure static inline function N_0x26e1cd96b0903d60(p0: Int): Int { return untyped __lua__('N_0x26e1cd96b0903d60')(p0); }
    @:pure static inline function NetworkGetPrimaryClanDataCancel(): Void { return untyped __lua__('NetworkGetPrimaryClanDataCancel')(); }
    @:pure static inline function N_0x042e4b70b93e6054(): Void { return untyped __lua__('N_0x042e4b70b93e6054')(); }
    @:pure static inline function NetworkGetPrimaryClanDataClear(): Int { return untyped __lua__('NetworkGetPrimaryClanDataClear')(); }
    @:pure static inline function N_0x9aa46badad0e27ed(): Int { return untyped __lua__('N_0x9aa46badad0e27ed')(); }
    @:pure static inline function NetworkGetPrimaryClanDataNew(): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('NetworkGetPrimaryClanDataNew')(); }
    @:pure static inline function NetworkGetPrimaryClanDataPending(): Int { return untyped __lua__('NetworkGetPrimaryClanDataPending')(); }
    @:pure static inline function N_0xb5074db804e28ce7(): Int { return untyped __lua__('N_0xb5074db804e28ce7')(); }
    @:pure static inline function NetworkGetPrimaryClanDataStart(p1: Int): { a0: Int, a1: Int } { return untyped __lua__('NetworkGetPrimaryClanDataStart')(p1); }
    @:pure static inline function NetworkGetPrimaryClanDataSuccess(): Int { return untyped __lua__('NetworkGetPrimaryClanDataSuccess')(); }
    @:pure static inline function N_0x5b4f04f19376a0ba(): Int { return untyped __lua__('N_0x5b4f04f19376a0ba')(); }
    @:pure static inline function NetworkGetRandomInt(): Int { return untyped __lua__('NetworkGetRandomInt')(); }
    @:pure static inline function N_0x599e4fa1f87eb5ff(): Int { return untyped __lua__('N_0x599e4fa1f87eb5ff')(); }
    
    /**
    * Same as GAMEPLAY::GET_RANDOM_INT_IN_RANGE
    */
    @:pure static inline function NetworkGetRandomIntInRange(rangeStart: Int, rangeEnd: Int): Int { return untyped __lua__('NetworkGetRandomIntInRange')(rangeStart, rangeEnd); }
    
    /**
    * Same as GAMEPLAY::GET_RANDOM_INT_IN_RANGE
    */
    @:pure static inline function N_0xe30cf56f1efa5f43(rangeStart: Int, rangeEnd: Int): Int { return untyped __lua__('N_0xe30cf56f1efa5f43')(rangeStart, rangeEnd); }
    
    /**
    * Based on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range..
    */
    @:pure static inline function NetworkGetRespawnResult(randomInt: Int): { a0: Array<Int>, a1: Int } { return untyped __lua__('NetworkGetRespawnResult')(randomInt); }
    @:pure static inline function NetworkGetScriptStatus(): Int { return untyped __lua__('NetworkGetScriptStatus')(); }
    @:pure static inline function NetworkGetServerTime(): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('NetworkGetServerTime')(); }
    @:pure static inline function N_0x6d03bfbd643b2a02(): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0x6d03bfbd643b2a02')(); }
    @:pure static inline function NetworkGetTalkerProximity(): Int { return untyped __lua__('NetworkGetTalkerProximity')(); }
    @:pure static inline function NetworkGetThisScriptIsNetworkScript(): Int { return untyped __lua__('NetworkGetThisScriptIsNetworkScript')(); }
    @:pure static inline function NetworkGetTimeoutTime(): Int { return untyped __lua__('NetworkGetTimeoutTime')(); }
    @:pure static inline function N_0x5ed0356a0ce3a34f(): Int { return untyped __lua__('N_0x5ed0356a0ce3a34f')(); }
    @:pure static inline function NetworkGetTransitionHost(networkHandle: Int): Int { return untyped __lua__('NetworkGetTransitionHost')(networkHandle); }
    @:pure static inline function NetworkGetTransitionMembers(p1: Int): { a0: Int, a1: Int } { return untyped __lua__('NetworkGetTransitionMembers')(p1); }
    @:pure static inline function NetworkGetVcBalance(): Int { return untyped __lua__('NetworkGetVcBalance')(); }
    @:pure static inline function N_0x5cbad97e059e1b94(): Int { return untyped __lua__('N_0x5cbad97e059e1b94')(); }
    
    /**
    * From what I can see in ida, I believe it retrieves the players online bank balance.
    */
    @:pure static inline function NetworkGetVcBankBalance(): Int { return untyped __lua__('NetworkGetVcBankBalance')(); }
    
    /**
    * From what I can see in ida, I believe it retrieves the players online bank balance.
    */
    @:pure static inline function N_0x76ef28da05ea395a(): Int { return untyped __lua__('N_0x76ef28da05ea395a')(); }
    
    /**
    * From what I understand, it retrieves STAT_WALLET_BALANCE for the specified character (-1 means use MPPLY_LAST_MP_CHAR)
    */
    @:pure static inline function NetworkGetVcWalletBalance(character: Int): Int { return untyped __lua__('NetworkGetVcWalletBalance')(character); }
    
    /**
    * From what I understand, it retrieves STAT_WALLET_BALANCE for the specified character (-1 means use MPPLY_LAST_MP_CHAR)
    */
    @:pure static inline function N_0xa40f9c2623f6a8b5(character: Int): Int { return untyped __lua__('N_0xa40f9c2623f6a8b5')(character); }
    @:pure static inline function NetworkGivePlayerJobshareCash(amount: Int, networkHandle: Int): Void { return untyped __lua__('NetworkGivePlayerJobshareCash')(amount, networkHandle); }
    @:pure static inline function NetworkHandleFromFriend(friendIndex: Int, bufferSize: Int): Int { return untyped __lua__('NetworkHandleFromFriend')(friendIndex, bufferSize); }
    
    /**
    * Returns a NetworkHandle* from the specified member ID and stores it in a given buffer.
    * * Currently unknown struct
    */
    @:pure static inline function NetworkHandleFromMemberId(memberId: String, bufferSize: Int): Int { return untyped __lua__('NetworkHandleFromMemberId')(memberId, bufferSize); }
    
    /**
    * Returns a handle to networkHandle* from the specified player handle and stores it in a given buffer.
    * * Currently unknown struct
    * Example:
    * std::vector&lt;UINT64&gt; GetPlayerNetworkHandle(Player player) {
    * const int size = 13;
    * uint64_t *buffer = std::make_unique&lt;uint64_t[]&gt;(size).get();
    * NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, reinterpret_cast&lt;int *&gt;(buffer), 13);
    * for (int i = 0; i &lt; size; i++) {
    * Log::Msg("networkhandle[%i]: %llx", i, buffer[i]);
    * }
    * std::vector&lt;UINT64&gt; result(buffer, buffer + sizeof(buffer));
    * return result;
    * }
    */
    @:pure static inline function NetworkHandleFromPlayer(player: Int, bufferSize: Int): Int { return untyped __lua__('NetworkHandleFromPlayer')(player, bufferSize); }
    
    /**
    * Returns a NetworkHandle* from the specified user ID and stores it in a given buffer.
    * * Currently unknown struct
    */
    @:pure static inline function NetworkHandleFromUserId(userId: String, bufferSize: Int): Int { return untyped __lua__('NetworkHandleFromUserId')(userId, bufferSize); }
    @:pure static inline function NetworkHasControlOfDoor(doorID: Int): Int { return untyped __lua__('NetworkHasControlOfDoor')(doorID); }
    @:pure static inline function NetworkHasControlOfEntity(entity: Int): Int { return untyped __lua__('NetworkHasControlOfEntity')(entity); }
    @:pure static inline function NetworkHasControlOfNetworkId(netId: Int): Int { return untyped __lua__('NetworkHasControlOfNetworkId')(netId); }
    @:pure static inline function NetworkHasControlOfPavementStats(hash: EitherType<String, Int>): Int { return untyped __lua__('NetworkHasControlOfPavementStats')(hash); }
    @:pure static inline function N_0xc01e93fac20c3346(hash: EitherType<String, Int>): Int { return untyped __lua__('N_0xc01e93fac20c3346')(hash); }
    @:pure static inline function NetworkHasControlOfPickup(pickup: Int): Int { return untyped __lua__('NetworkHasControlOfPickup')(pickup); }
    @:pure static inline function NetworkHasFollowInvite(): Int { return untyped __lua__('NetworkHasFollowInvite')(); }
    @:pure static inline function N_0x76d9b976c4c09fde(): Int { return untyped __lua__('N_0x76d9b976c4c09fde')(); }
    @:pure static inline function NetworkHasHeadset(): Int { return untyped __lua__('NetworkHasHeadset')(); }
    @:pure static inline function NetworkHasInvitedGamer(p0: Int): Int { return untyped __lua__('NetworkHasInvitedGamer')(p0); }
    @:pure static inline function NetworkHasInvitedGamerToTransition(p0: Int): Int { return untyped __lua__('NetworkHasInvitedGamerToTransition')(p0); }
    @:pure static inline function NetworkHasPendingInvite(): Int { return untyped __lua__('NetworkHasPendingInvite')(); }
    @:pure static inline function NetworkHasPlayerStartedTransition(player: Int): Int { return untyped __lua__('NetworkHasPlayerStartedTransition')(player); }
    
    /**
    * console hash: 0x5AC9F04D = network_hash_from_gamer_handle
    */
    @:pure static inline function NetworkHashFromGamerHandle(networkHandle: Int): Int { return untyped __lua__('NetworkHashFromGamerHandle')(networkHandle); }
    
    /**
    * console hash: 0x5AC9F04D = network_hash_from_gamer_handle
    */
    @:pure static inline function N_0x58575ac3cf2ca8ec(networkHandle: Int): Int { return untyped __lua__('N_0x58575ac3cf2ca8ec')(networkHandle); }
    
    /**
    * console hash: 0xF8D7AF3B = NETWORK_HASH_FROM_PLAYER_HANDLE
    */
    @:pure static inline function NetworkHashFromPlayerHandle(player: Int): Int { return untyped __lua__('NetworkHashFromPlayerHandle')(player); }
    
    /**
    * console hash: 0xF8D7AF3B = NETWORK_HASH_FROM_PLAYER_HANDLE
    */
    @:pure static inline function N_0xbc1d768f2f5d6c05(player: Int): Int { return untyped __lua__('N_0xbc1d768f2f5d6c05')(player); }
    @:pure static inline function NetworkHaveOnlinePrivileges(): Int { return untyped __lua__('NetworkHaveOnlinePrivileges')(); }
    @:pure static inline function NetworkHostTransition(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Int { return untyped __lua__('NetworkHostTransition')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function NetworkInitializeCash(p0: Int, p1: Int): Void { return untyped __lua__('NetworkInitializeCash')(p0, p1); }
    @:pure static inline function N_0x3da5ecd1a56cba6d(p0: Int, p1: Int): Void { return untyped __lua__('N_0x3da5ecd1a56cba6d')(p0, p1); }
    @:pure static inline function NetworkInviteGamers(p1: Int): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('NetworkInviteGamers')(p1); }
    @:pure static inline function NetworkInviteGamersToTransition(p1: Int): { a0: Int, a1: Int } { return untyped __lua__('NetworkInviteGamersToTransition')(p1); }
    @:pure static inline function NetworkIsActivitySession(): Int { return untyped __lua__('NetworkIsActivitySession')(); }
    @:pure static inline function NetworkIsActivitySpectator(): Int { return untyped __lua__('NetworkIsActivitySpectator')(); }
    @:pure static inline function NetworkIsActivitySpectatorFromHandle(networkHandle: Int): Int { return untyped __lua__('NetworkIsActivitySpectatorFromHandle')(networkHandle); }
    @:pure static inline function NetworkIsAddingFriend(): Int { return untyped __lua__('NetworkIsAddingFriend')(); }
    @:pure static inline function NetworkIsCableConnected(): Int { return untyped __lua__('NetworkIsCableConnected')(); }
    @:pure static inline function N_0xeffb25453d8600f9(): Int { return untyped __lua__('N_0xeffb25453d8600f9')(); }
    
    /**
    * This would be nice to see if someone is in party chat, but 2 sad notes.
    * 1) It only becomes true if said person is speaking in that party at the time.
    * 2) It will never, become true unless you are in that party with said person.
    */
    @:pure static inline function NetworkIsChattingInPlatformParty(networkHandle: Int): Int { return untyped __lua__('NetworkIsChattingInPlatformParty')(networkHandle); }
    @:pure static inline function NetworkIsClanMembershipFinishedDownloading(): Int { return untyped __lua__('NetworkIsClanMembershipFinishedDownloading')(); }
    @:pure static inline function N_0xb3f64a6a91432477(): Int { return untyped __lua__('N_0xb3f64a6a91432477')(); }
    @:pure static inline function NetworkIsClockTimeOverridden(): Int { return untyped __lua__('NetworkIsClockTimeOverridden')(); }
    @:pure static inline function N_0xd7c95d322ff57522(): Int { return untyped __lua__('N_0xd7c95d322ff57522')(); }
    @:pure static inline function NetworkIsCloudAvailable(): Int { return untyped __lua__('NetworkIsCloudAvailable')(); }
    @:pure static inline function NetworkIsFindingGamers(): Int { return untyped __lua__('NetworkIsFindingGamers')(); }
    @:pure static inline function NetworkIsFriend(networkHandle: Int): Int { return untyped __lua__('NetworkIsFriend')(networkHandle); }
    @:pure static inline function NetworkIsFriendInMultiplayer(friendName: String): Int { return untyped __lua__('NetworkIsFriendInMultiplayer')(friendName); }
    
    /**
    * In scripts R* calls 'NETWORK_GET_FRIEND_NAME' in this param.
    */
    @:pure static inline function NetworkIsFriendInSameTitle(friendName: String): Int { return untyped __lua__('NetworkIsFriendInSameTitle')(friendName); }
    @:pure static inline function NetworkIsFriendIndexOnline(friendIndex: Int): Int { return untyped __lua__('NetworkIsFriendIndexOnline')(friendIndex); }
    @:pure static inline function N_0xbad8f2a42b844821(friendIndex: Int): Int { return untyped __lua__('N_0xbad8f2a42b844821')(friendIndex); }
    @:pure static inline function NetworkIsFriendOnline(name: String): Int { return untyped __lua__('NetworkIsFriendOnline')(name); }
    @:pure static inline function NetworkIsFriendOnline_2(networkHandle: Int): Int { return untyped __lua__('NetworkIsFriendOnline_2')(networkHandle); }
    @:pure static inline function N_0x87eb7a3ffcb314db(networkHandle: Int): Int { return untyped __lua__('N_0x87eb7a3ffcb314db')(networkHandle); }
    @:pure static inline function NetworkIsGameInProgress(): Int { return untyped __lua__('NetworkIsGameInProgress')(); }
    @:pure static inline function NetworkIsGamerBlockedByMe(p0: Int): Int { return untyped __lua__('NetworkIsGamerBlockedByMe')(p0); }
    @:pure static inline function NetworkIsGamerInMySession(networkHandle: Int): Int { return untyped __lua__('NetworkIsGamerInMySession')(networkHandle); }
    @:pure static inline function NetworkIsGamerMutedByMe(p0: Int): Int { return untyped __lua__('NetworkIsGamerMutedByMe')(p0); }
    @:pure static inline function NetworkIsGamerTalking(p0: Int): Int { return untyped __lua__('NetworkIsGamerTalking')(p0); }
    @:pure static inline function NetworkIsHandleValid(bufferSize: Int): { a0: Int, a1: Int } { return untyped __lua__('NetworkIsHandleValid')(bufferSize); }
    
    /**
    * If you are host, returns true else returns false.
    * anyone know how to use this to find correct host? is possible?
    */
    @:pure static inline function NetworkIsHost(): Int { return untyped __lua__('NetworkIsHost')(); }
    @:pure static inline function NetworkIsHostOfThisScript(): Int { return untyped __lua__('NetworkIsHostOfThisScript')(); }
    @:pure static inline function NetworkIsInMpCutscene(): Int { return untyped __lua__('NetworkIsInMpCutscene')(); }
    
    /**
    * Note according to IDA TU27 X360(Console),
    * This native &amp; 'NETWORK_IS_PARTY_MEMBER' both jump to the same location.
    * Side note: This location just stops where it's at once jumped to.
    * Screenshot for side note,
    * h t t p ://i.imgur.com/m2ci1mF.png
    * h t t p://i.imgur.com/Z0Wx2B6.png
    */
    @:pure static inline function NetworkIsInParty(): Int { return untyped __lua__('NetworkIsInParty')(); }
    @:pure static inline function NetworkIsInSession(): Int { return untyped __lua__('NetworkIsInSession')(); }
    @:pure static inline function NetworkIsInSpectatorMode(): Int { return untyped __lua__('NetworkIsInSpectatorMode')(); }
    @:pure static inline function NetworkIsInTransition(): Int { return untyped __lua__('NetworkIsInTransition')(); }
    @:pure static inline function NetworkIsInTutorialSession(): Int { return untyped __lua__('NetworkIsInTutorialSession')(); }
    @:pure static inline function NetworkIsInactiveProfile(p0: Int): Int { return untyped __lua__('NetworkIsInactiveProfile')(p0); }
    @:pure static inline function NetworkIsLocalPlayerInvincible(): Int { return untyped __lua__('NetworkIsLocalPlayerInvincible')(); }
    @:pure static inline function NetworkIsMultiplayerDisabled(): Int { return untyped __lua__('NetworkIsMultiplayerDisabled')(); }
    @:pure static inline function N_0x9747292807126eda(): Int { return untyped __lua__('N_0x9747292807126eda')(); }
    @:pure static inline function NetworkIsParticipantActive(p0: Int): Int { return untyped __lua__('NetworkIsParticipantActive')(p0); }
    
    /**
    * Note according to IDA TU27 X360(Console),
    * This native &amp; 'NETWORK_IS_PARTY_MEMBER' both jump to the same location.
    * Side note: This location just stops where it's at once jumped to.
    * Screenshot for side note,
    * h t t p ://i.imgur.com/m2ci1mF.png
    * h t t p://i.imgur.com/Z0Wx2B6.png
    */
    @:pure static inline function NetworkIsPartyMember(networkHandle: Int): Int { return untyped __lua__('NetworkIsPartyMember')(networkHandle); }
    
    /**
    * This function is hard-coded to always return 0.
    */
    @:pure static inline function NetworkIsPendingFriend(p0: Int): Int { return untyped __lua__('NetworkIsPendingFriend')(p0); }
    @:pure static inline function NetworkIsPlayerAParticipant(p0: Int): Int { return untyped __lua__('NetworkIsPlayerAParticipant')(p0); }
    @:pure static inline function NetworkIsPlayerActive(player: Int): Int { return untyped __lua__('NetworkIsPlayerActive')(player); }
    
    /**
    * hash collision
    */
    @:pure static inline function NetworkIsPlayerAnimationDrawingSynchronized(): Void { return untyped __lua__('NetworkIsPlayerAnimationDrawingSynchronized')(); }
    @:pure static inline function NetworkIsPlayerBlockedByMe(player: Int): Int { return untyped __lua__('NetworkIsPlayerBlockedByMe')(player); }
    @:pure static inline function NetworkIsPlayerConnected(player: Int): Int { return untyped __lua__('NetworkIsPlayerConnected')(player); }
    
    /**
    * NETWORK_ARE_*
    */
    @:pure static inline function NetworkIsPlayerEqualToIndex(player: Int, index: Int): Int { return untyped __lua__('NetworkIsPlayerEqualToIndex')(player, index); }
    
    /**
    * NETWORK_ARE_*
    */
    @:pure static inline function N_0x9de986fc9a87c474(player: Int, index: Int): Int { return untyped __lua__('N_0x9de986fc9a87c474')(player, index); }
    @:pure static inline function NetworkIsPlayerInMpCutscene(player: Int): Int { return untyped __lua__('NetworkIsPlayerInMpCutscene')(player); }
    @:pure static inline function NetworkIsPlayerMutedByMe(player: Int): Int { return untyped __lua__('NetworkIsPlayerMutedByMe')(player); }
    @:pure static inline function NetworkIsPlayerTalking(player: Int): Int { return untyped __lua__('NetworkIsPlayerTalking')(player); }
    @:pure static inline function NetworkIsScriptActive(scriptName: String, p1: Int, p2: Bool, p3: Int): Int { return untyped __lua__('NetworkIsScriptActive')(scriptName, p1, p2, p3); }
    @:pure static inline function NetworkIsSessionActive(): Int { return untyped __lua__('NetworkIsSessionActive')(); }
    @:pure static inline function NetworkIsSessionBusy(): Int { return untyped __lua__('NetworkIsSessionBusy')(); }
    
    /**
    * This checks if player is playing on gta online or not.
    * Please add an if and block your mod if this is "true".
    */
    @:pure static inline function NetworkIsSessionStarted(): Int { return untyped __lua__('NetworkIsSessionStarted')(); }
    
    /**
    * Returns whether the player is signed into Social Club.
    */
    @:pure static inline function NetworkIsSignedIn(): Int { return untyped __lua__('NetworkIsSignedIn')(); }
    
    /**
    * Returns whether the game is not in offline mode.
    * seemed not to work for some ppl
    */
    @:pure static inline function NetworkIsSignedOnline(): Int { return untyped __lua__('NetworkIsSignedOnline')(); }
    
    /**
    * Same as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash.
    */
    @:pure static inline function NetworkIsTextChatActive(): Int { return untyped __lua__('NetworkIsTextChatActive')(); }
    @:pure static inline function NetworkIsTransitionBusy(): Int { return untyped __lua__('NetworkIsTransitionBusy')(); }
    @:pure static inline function NetworkIsTransitionHost(): Int { return untyped __lua__('NetworkIsTransitionHost')(); }
    @:pure static inline function NetworkIsTransitionHostFromHandle(networkHandle: Int): Int { return untyped __lua__('NetworkIsTransitionHostFromHandle')(networkHandle); }
    @:pure static inline function NetworkIsTransitionMatchmaking(): Int { return untyped __lua__('NetworkIsTransitionMatchmaking')(); }
    @:pure static inline function N_0x292564c735375edf(): Int { return untyped __lua__('N_0x292564c735375edf')(); }
    @:pure static inline function NetworkIsTransitionStarted(): Int { return untyped __lua__('NetworkIsTransitionStarted')(); }
    @:pure static inline function NetworkIsTransitionToGame(): Int { return untyped __lua__('NetworkIsTransitionToGame')(); }
    @:pure static inline function NetworkJoinGroupActivity(): Int { return untyped __lua__('NetworkJoinGroupActivity')(); }
    @:pure static inline function N_0xa06509a691d12be4(): Int { return untyped __lua__('N_0xa06509a691d12be4')(); }
    
    /**
    * int handle[76];
    * NETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &amp;handle[0], 13);
    * Player uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&amp;handle[0]);
    * NETWORK_JOIN_TRANSITION(uVar2);
    * nothing doin.
    */
    @:pure static inline function NetworkJoinTransition(player: Int): Int { return untyped __lua__('NetworkJoinTransition')(player); }
    @:pure static inline function NetworkLaunchTransition(): Int { return untyped __lua__('NetworkLaunchTransition')(); }
    @:pure static inline function NetworkLeaveTransition(): Int { return untyped __lua__('NetworkLeaveTransition')(); }
    @:pure static inline function NetworkMarkTransitionGamerAsFullyJoined(p0: Int): Int { return untyped __lua__('NetworkMarkTransitionGamerAsFullyJoined')(p0); }
    @:pure static inline function NetworkMemberIdFromGamerHandle(networkHandle: Int): String { return untyped __lua__('NetworkMemberIdFromGamerHandle')(networkHandle); }
    @:pure static inline function NetworkMoneyCanBet(p0: Int, p1: Bool, p2: Bool): Int { return untyped __lua__('NetworkMoneyCanBet')(p0, p1, p2); }
    @:pure static inline function N_0x81404f3dc124fe5b(p0: Int, p1: Bool, p2: Bool): Int { return untyped __lua__('N_0x81404f3dc124fe5b')(p0, p1, p2); }
    @:pure static inline function NetworkOpenTransitionMatchmaking(): Void { return untyped __lua__('NetworkOpenTransitionMatchmaking')(); }
    @:pure static inline function N_0x2b3a8f7ca3a38fde(): Void { return untyped __lua__('N_0x2b3a8f7ca3a38fde')(); }
    
    /**
    * Could possibly bypass being muted or automatically muted? Who knows.
    */
    @:pure static inline function NetworkOverrideChatRestrictions(player: Int, toggle: Bool): Void { return untyped __lua__('NetworkOverrideChatRestrictions')(player, toggle); }
    
    /**
    * Could possibly bypass being muted or automatically muted? Who knows.
    */
    @:pure static inline function N_0x3039ae5ad2c9c0c4(player: Int, toggle: Bool): Void { return untyped __lua__('N_0x3039ae5ad2c9c0c4')(player, toggle); }
    
    /**
    * Works in Singleplayer too.
    * Actually has a 4th param (BOOL) that sets byte_14273C46C (in b944) to whatever was passed to p3.
    */
    @:pure static inline function NetworkOverrideClockTime(Hours: Int, Minutes: Int, Seconds: Int): Void { return untyped __lua__('NetworkOverrideClockTime')(Hours, Minutes, Seconds); }
    
    /**
    * R* uses this to hear all player when spectating.
    * It allows you to hear other online players when their chat is on none, crew and or friends
    */
    @:pure static inline function NetworkOverrideReceiveRestrictions(player: Int, toggle: Bool): Void { return untyped __lua__('NetworkOverrideReceiveRestrictions')(player, toggle); }
    
    /**
    * R* uses this to hear all player when spectating.
    * It allows you to hear other online players when their chat is on none, crew and or friends
    */
    @:pure static inline function N_0xddf73e2b1fec5ab4(player: Int, toggle: Bool): Void { return untyped __lua__('N_0xddf73e2b1fec5ab4')(player, toggle); }
    
    /**
    * Console Hash: 0x6C344AE3
    * "NETWORK_OVERRIDE_SEND_RESTRICTIONS" is right, but dev-c put a _ by default.
    * This is used alongside the native,
    * 'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read it's description for more info.
    */
    @:pure static inline function NetworkOverrideSendRestrictions(player: Int, toggle: Bool): Void { return untyped __lua__('NetworkOverrideSendRestrictions')(player, toggle); }
    
    /**
    * Console Hash: 0x6C344AE3
    * "NETWORK_OVERRIDE_SEND_RESTRICTIONS" is right, but dev-c put a _ by default.
    * This is used alongside the native,
    * 'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read it's description for more info.
    */
    @:pure static inline function N_0x97dd4c5944cc2e6a(player: Int, toggle: Bool): Void { return untyped __lua__('N_0x97dd4c5944cc2e6a')(player, toggle); }
    @:pure static inline function NetworkOverrideTransitionChat(p0: Bool): Void { return untyped __lua__('NetworkOverrideTransitionChat')(p0); }
    @:pure static inline function N_0xaf66059a131aa269(p0: Bool): Void { return untyped __lua__('N_0xaf66059a131aa269')(p0); }
    @:pure static inline function NetworkPayEmployeeWage(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkPayEmployeeWage')(p0, p1, p2); }
    @:pure static inline function N_0x5fd5ed82cbbe9989(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('N_0x5fd5ed82cbbe9989')(p0, p1, p2); }
    @:pure static inline function NetworkPayMatchEntryFee(value: Int, p2: Bool, p3: Bool): Int { return untyped __lua__('NetworkPayMatchEntryFee')(value, p2, p3); }
    @:pure static inline function N_0x9346e14f2af74d46(value: Int, p2: Bool, p3: Bool): Int { return untyped __lua__('N_0x9346e14f2af74d46')(value, p2, p3); }
    @:pure static inline function NetworkPayUtilityBill(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkPayUtilityBill')(p0, p1, p2); }
    @:pure static inline function N_0xafe08b35ec0c9eae(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('N_0xafe08b35ec0c9eae')(p0, p1, p2); }
    
    /**
    * Returns the name of a given player. Returns "**Invalid**" if CPlayerInfo of the given player cannot be retrieved or the player doesn't exist.
    */
    @:pure static inline function NetworkPlayerGetName(player: Int): String { return untyped __lua__('NetworkPlayerGetName')(player); }
    
    /**
    * Returns the user id of a given player. Returns "**Invalid**" if CPlayerInfo of the given player cannot be retrieved or the player doesn't exist.
    */
    @:pure static inline function NetworkPlayerGetUserid(player: Int, userID: Int): String { return untyped __lua__('NetworkPlayerGetUserid')(player, userID); }
    
    /**
    * Returns the user id of a given player. Returns "**Invalid**" if CPlayerInfo of the given player cannot be retrieved or the player doesn't exist.
    */
    @:pure static inline function NetworkPlayerGetUserId(player: Int, userID: Int): String { return untyped __lua__('NetworkPlayerGetUserId')(player, userID); }
    @:pure static inline function NetworkPlayerHasHeadset(player: Int): Int { return untyped __lua__('NetworkPlayerHasHeadset')(player); }
    
    /**
    * Does exactly the same thing as PLAYER_ID()
    */
    @:pure static inline function NetworkPlayerIdToInt(): Int { return untyped __lua__('NetworkPlayerIdToInt')(); }
    
    /**
    * Returns whether the player has been reported too often or not.
    * Example : griefing.
    */
    @:pure static inline function NetworkPlayerIsBadsport(): Int { return untyped __lua__('NetworkPlayerIsBadsport')(); }
    @:pure static inline function NetworkPlayerIsCheater(): Int { return untyped __lua__('NetworkPlayerIsCheater')(); }
    @:pure static inline function NetworkPlayerIsInClan(): Int { return untyped __lua__('NetworkPlayerIsInClan')(); }
    
    /**
    * Checks if a specific value (BYTE) in CPlayerInfo is nonzero.
    * Returns always false in Singleplayer.
    * No longer used for dev checks since first mods were released on PS3 &amp; 360.
    * R* now checks with the is_dlc_present native for the dlc hash 2532323046,
    * if that is present it will unlock dev stuff.
    */
    @:pure static inline function NetworkPlayerIsRockstarDev(player: Int): Int { return untyped __lua__('NetworkPlayerIsRockstarDev')(player); }
    @:pure static inline function NetworkReceivePlayerJobshareCash(value: Int, networkHandle: Int): Void { return untyped __lua__('NetworkReceivePlayerJobshareCash')(value, networkHandle); }
    
    /**
    * index
    * -------
    * See function sub_1005 in am_boat_taxi.ysc
    * context
    * ----------
    * "BACKUP_VAGOS"
    * "BACKUP_LOST"
    * "BACKUP_FAMILIES"
    * "HIRE_MUGGER"
    * "HIRE_MERCENARY"
    * "BUY_CARDROPOFF"
    * "HELI_PICKUP"
    * "BOAT_PICKUP"
    * "CLEAR_WANTED"
    * "HEAD_2_HEAD"
    * "CHALLENGE"
    * "SHARE_LAST_JOB"
    * "DEFAULT"
    * reason
    * ---------
    * "NOTREACHTARGET"
    * "TARGET_ESCAPE"
    * "DELIVERY_FAIL"
    * "NOT_USED"
    * "TEAM_QUIT"
    * "SERVER_ERROR"
    * "RECEIVE_LJ_L"
    * "CHALLENGE_PLAYER_LEFT"
    * "DEFAULT"
    * unk
    * -----
    * Unknown bool value
    */
    @:pure static inline function NetworkRefundCash(index: Int, context: String, reason: String, unk: Bool): Void { return untyped __lua__('NetworkRefundCash')(index, context, reason, unk); }
    
    /**
    * index
    * -------
    * See function sub_1005 in am_boat_taxi.ysc
    * context
    * ----------
    * "BACKUP_VAGOS"
    * "BACKUP_LOST"
    * "BACKUP_FAMILIES"
    * "HIRE_MUGGER"
    * "HIRE_MERCENARY"
    * "BUY_CARDROPOFF"
    * "HELI_PICKUP"
    * "BOAT_PICKUP"
    * "CLEAR_WANTED"
    * "HEAD_2_HEAD"
    * "CHALLENGE"
    * "SHARE_LAST_JOB"
    * "DEFAULT"
    * reason
    * ---------
    * "NOTREACHTARGET"
    * "TARGET_ESCAPE"
    * "DELIVERY_FAIL"
    * "NOT_USED"
    * "TEAM_QUIT"
    * "SERVER_ERROR"
    * "RECEIVE_LJ_L"
    * "CHALLENGE_PLAYER_LEFT"
    * "DEFAULT"
    * unk
    * -----
    * Unknown bool value
    */
    @:pure static inline function N_0xf9c812cd7c46e817(index: Int, context: String, reason: String, unk: Bool): Void { return untyped __lua__('N_0xf9c812cd7c46e817')(index, context, reason, unk); }
    @:pure static inline function NetworkRegisterEntityAsNetworked(entity: Int): Void { return untyped __lua__('NetworkRegisterEntityAsNetworked')(entity); }
    @:pure static inline function N_0x06faacd625d80caa(entity: Int): Void { return untyped __lua__('N_0x06faacd625d80caa')(entity); }
    @:pure static inline function NetworkRegisterHostBroadcastVariables(numVars: Int): Int { return untyped __lua__('NetworkRegisterHostBroadcastVariables')(numVars); }
    @:pure static inline function NetworkRegisterPlayerBroadcastVariables(numVars: Int): Int { return untyped __lua__('NetworkRegisterPlayerBroadcastVariables')(numVars); }
    @:pure static inline function NetworkRemoveAllTransitionInvite(): Void { return untyped __lua__('NetworkRemoveAllTransitionInvite')(); }
    @:pure static inline function N_0x726e0375c7a26368(): Void { return untyped __lua__('N_0x726e0375c7a26368')(); }
    @:pure static inline function NetworkRemoveEntityArea(p0: Int): Int { return untyped __lua__('NetworkRemoveEntityArea')(p0); }
    @:pure static inline function NetworkRemovePresenceInvite(p0: Int): Int { return untyped __lua__('NetworkRemovePresenceInvite')(p0); }
    @:pure static inline function N_0xf0210268db0974b1(p0: Int): Int { return untyped __lua__('N_0xf0210268db0974b1')(p0); }
    @:pure static inline function NetworkRemoveTransitionInvite(p0: Int): Void { return untyped __lua__('NetworkRemoveTransitionInvite')(p0); }
    
    /**
    * NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS - Correct console hash is 0x98EFB921
    * Start the downloading of BG_NG.RPF from R* Cloud which contains hotfix.
    * The console hash given is incorrect for Xbox360 that is. I searched in IDA and found 0x98EFB921 which came right after 0x155465EE. Then I searched it in TU27 X360 scripts and found it was the same results same scripts as the PC Hash for this which is obviously correct. I found the correct one as I noticed TU27 X360 script search pulled no results for 0x29532731 when it should have.
    * As you can see here you will see the 155465EE first then the correct hash for this native. Then the current 29532731 one which could be the native below or the native below's hash could be the has below the 29532731
    * puu.sh/nhdQI/e0ca5567b4.png
    * 0x98EFB921 is the correct console hash for "_DOWNLOAD_BG_SCRIPT_RPF". 0x29532731 is "_HAS_BG_SCRIPT_BEEN_DOWNLOADED"
    */
    @:pure static inline function NetworkRequestCloudBackgroundScripts(): Int { return untyped __lua__('NetworkRequestCloudBackgroundScripts')(); }
    
    /**
    * NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS - Correct console hash is 0x98EFB921
    * Start the downloading of BG_NG.RPF from R* Cloud which contains hotfix.
    * The console hash given is incorrect for Xbox360 that is. I searched in IDA and found 0x98EFB921 which came right after 0x155465EE. Then I searched it in TU27 X360 scripts and found it was the same results same scripts as the PC Hash for this which is obviously correct. I found the correct one as I noticed TU27 X360 script search pulled no results for 0x29532731 when it should have.
    * As you can see here you will see the 155465EE first then the correct hash for this native. Then the current 29532731 one which could be the native below or the native below's hash could be the has below the 29532731
    * puu.sh/nhdQI/e0ca5567b4.png
    * 0x98EFB921 is the correct console hash for "_DOWNLOAD_BG_SCRIPT_RPF". 0x29532731 is "_HAS_BG_SCRIPT_BEEN_DOWNLOADED"
    */
    @:pure static inline function N_0x924426bffd82e915(): Int { return untyped __lua__('N_0x924426bffd82e915')(); }
    
    /**
    * This native start the download of tunables from R* cloud
    */
    @:pure static inline function NetworkRequestCloudTunables(): Void { return untyped __lua__('NetworkRequestCloudTunables')(); }
    
    /**
    * This native start the download of tunables from R* cloud
    */
    @:pure static inline function N_0x42fb3b532d526e6c(): Void { return untyped __lua__('N_0x42fb3b532d526e6c')(); }
    @:pure static inline function NetworkRequestControlOfDoor(doorID: Int): Int { return untyped __lua__('NetworkRequestControlOfDoor')(doorID); }
    @:pure static inline function NetworkRequestControlOfEntity(entity: Int): Int { return untyped __lua__('NetworkRequestControlOfEntity')(entity); }
    @:pure static inline function NetworkRequestControlOfNetworkId(netId: Int): Int { return untyped __lua__('NetworkRequestControlOfNetworkId')(netId); }
    
    /**
    * hash collision?? - Not sure, but fits alphabetically
    */
    @:pure static inline function NetworkResetBodyTracker(): Void { return untyped __lua__('NetworkResetBodyTracker')(); }
    @:pure static inline function NetworkResurrectLocalPlayer(x: Int, y: Int, z: Int, heading: Int, unk: Bool, changetime: Bool): Void { return untyped __lua__('NetworkResurrectLocalPlayer')(x, y, z, heading, unk, changetime); }
    @:pure static inline function NetworkSendPresenceInvite(p2: Int, p3: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('NetworkSendPresenceInvite')(p2, p3); }
    @:pure static inline function N_0xc3c7a6afdb244624(p2: Int, p3: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0xc3c7a6afdb244624')(p2, p3); }
    
    /**
    * String "NETWORK_SEND_PRESENCE_TRANSITION_INVITE" is contained in the function in ida so this one is correct.
    */
    @:pure static inline function NetworkSendPresenceTransitionInvite(p2: Int, p3: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('NetworkSendPresenceTransitionInvite')(p2, p3); }
    
    /**
    * String "NETWORK_SEND_PRESENCE_TRANSITION_INVITE" is contained in the function in ida so this one is correct.
    */
    @:pure static inline function N_0xc116ff9b4d488291(p2: Int, p3: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('N_0xc116ff9b4d488291')(p2, p3); }
    
    /**
    * how can I increase the character limit on this native?
    * --------------------------------
    * return - it's possible for it to have an error and return a value. One error is if it cannot find space to create the event it doesn't send the text and returns zero. It also returns 0 is the strlen is 0 or the strlen &gt; 0x100 (I thought it was 64 so idk why it's checking 265. I may just be dumb :P ) There are other ways it could return 0 also but who the hell cares cuz it's very unlikely, but it returns a bool.
    * to the top guy, idk if it is possible. It is probably read a max of 64 characters on the recieving end so even if we did modify it to send more it probably wouldn't work. One of the other problems is that in part of the function it copies the string to the local stack which means we would have to change that to make it work.
    */
    @:pure static inline function NetworkSendTextMessage(message: String, networkHandle: Int): Int { return untyped __lua__('NetworkSendTextMessage')(message, networkHandle); }
    
    /**
    * the first arg seems to be the network player handle (&amp;handle) and the second var is pretty much always "" and the third seems to be a number between 0 and ~10 and the 4th is is something like 0 to 5 and I guess the 5th is a bool cuz it is always 0 or 1
    * does this send an invite to a player?
    */
    @:pure static inline function NetworkSendTransitionGamerInstruction(p1: String, p2: Int, p3: Int, p4: Bool): { a0: Int, a1: Int } { return untyped __lua__('NetworkSendTransitionGamerInstruction')(p1, p2, p3, p4); }
    @:pure static inline function NetworkSessionActivityQuickmatch(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('NetworkSessionActivityQuickmatch')(p0, p1, p2, p3); }
    @:pure static inline function N_0xbe3e347a87aceb82(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('N_0xbe3e347a87aceb82')(p0, p1, p2, p3); }
    @:pure static inline function NetworkSessionBlockJoinRequests(p0: Bool): Void { return untyped __lua__('NetworkSessionBlockJoinRequests')(p0); }
    @:pure static inline function N_0xa73667484d7037c3(p0: Bool): Void { return untyped __lua__('N_0xa73667484d7037c3')(p0); }
    @:pure static inline function NetworkSessionCancelInvite(): Void { return untyped __lua__('NetworkSessionCancelInvite')(); }
    @:pure static inline function NetworkSessionChangeSlots(p0: Int, p1: Bool): Void { return untyped __lua__('NetworkSessionChangeSlots')(p0, p1); }
    @:pure static inline function N_0xb4ab419e0d86acae(p0: Int, p1: Bool): Void { return untyped __lua__('N_0xb4ab419e0d86acae')(p0, p1); }
    @:pure static inline function NetworkSessionCrewMatchmaking(p0: Int, p1: Int, p2: Int, maxPlayers: Int, p4: Bool): Int { return untyped __lua__('NetworkSessionCrewMatchmaking')(p0, p1, p2, maxPlayers, p4); }
    @:pure static inline function N_0x94bc51e9449d917f(p0: Int, p1: Int, p2: Int, maxPlayers: Int, p4: Bool): Int { return untyped __lua__('N_0x94bc51e9449d917f')(p0, p1, p2, maxPlayers, p4); }
    
    /**
    * p0 is always false and p1 varies.
    * NETWORK_SESSION_END(0, 1)
    * NETWORK_SESSION_END(0, 0)
    * Results in: "Connection to session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later."
    */
    @:pure static inline function NetworkSessionEnd(p0: Bool, p1: Bool): Int { return untyped __lua__('NetworkSessionEnd')(p0, p1); }
    
    /**
    * unknown params
    * p0 = 0, 2, or 999 (The global is 999 by default.)
    * p1 = 0 (Always in every script it's found in atleast.)
    * p2 = 0, 3, or 4 (Based on a var that is determined by a function.)
    * p3 = maxPlayers (It's obvious in x360 scripts it's always 18)
    * p4 = 0 (Always in every script it's found in atleast.)
    * p5 = 0 or 1. (1 if network_can_enter_multiplayer, but set to 0 if other checks after that are passed.)
    * p5 is reset to 0 if,
    * Global_1315318 = 0 or Global_1315323 = 9 or 12 or (Global_1312629 = 0 &amp;&amp; Global_1312631 = true/1) those are passed.
    */
    @:pure static inline function NetworkSessionEnter(p0: Int, p1: Int, p2: Int, maxPlayers: Int, p4: Int, p5: Int): Int { return untyped __lua__('NetworkSessionEnter')(p0, p1, p2, maxPlayers, p4, p5); }
    @:pure static inline function NetworkSessionForceCancelInvite(): Void { return untyped __lua__('NetworkSessionForceCancelInvite')(); }
    @:pure static inline function N_0xa29177f7703b5644(): Void { return untyped __lua__('N_0xa29177f7703b5644')(); }
    @:pure static inline function NetworkSessionFriendMatchmaking(p0: Int, p1: Int, maxPlayers: Int, p3: Bool): Int { return untyped __lua__('NetworkSessionFriendMatchmaking')(p0, p1, maxPlayers, p3); }
    @:pure static inline function N_0x2cfc76e0d087c994(p0: Int, p1: Int, maxPlayers: Int, p3: Bool): Int { return untyped __lua__('N_0x2cfc76e0d087c994')(p0, p1, maxPlayers, p3); }
    @:pure static inline function NetworkSessionGetInviter(networkHandle: Int): Void { return untyped __lua__('NetworkSessionGetInviter')(networkHandle); }
    @:pure static inline function NetworkSessionGetUnk(p0: Int): Int { return untyped __lua__('NetworkSessionGetUnk')(p0); }
    @:pure static inline function N_0x56ce820830ef040b(p0: Int): Int { return untyped __lua__('N_0x56ce820830ef040b')(p0); }
    
    /**
    * Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
    */
    @:pure static inline function NetworkSessionHost(p0: Int, maxPlayers: Int, p2: Bool): Int { return untyped __lua__('NetworkSessionHost')(p0, maxPlayers, p2); }
    @:pure static inline function NetworkSessionHostClosed(p0: Int, maxPlayers: Int): Int { return untyped __lua__('NetworkSessionHostClosed')(p0, maxPlayers); }
    @:pure static inline function N_0xed34c0c02c098bb7(p0: Int, maxPlayers: Int): Int { return untyped __lua__('N_0xed34c0c02c098bb7')(p0, maxPlayers); }
    
    /**
    * Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
    */
    @:pure static inline function NetworkSessionHostFriendsOnly(p0: Int, maxPlayers: Int): Int { return untyped __lua__('NetworkSessionHostFriendsOnly')(p0, maxPlayers); }
    
    /**
    * Loads up the map that is loaded when beeing in mission creator
    * Player gets placed in a mix between online/offline mode
    * p0 is always 2 in R* scripts.
    * Appears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812
    */
    @:pure static inline function NetworkSessionHostSinglePlayer(p0: Int): Void { return untyped __lua__('NetworkSessionHostSinglePlayer')(p0); }
    @:pure static inline function NetworkSessionHosted(p0: Bool): Void { return untyped __lua__('NetworkSessionHosted')(p0); }
    @:pure static inline function N_0xc19f6c8e7865a6ff(p0: Bool): Void { return untyped __lua__('N_0xc19f6c8e7865a6ff')(p0); }
    @:pure static inline function NetworkSessionIsClosedCrew(): Int { return untyped __lua__('NetworkSessionIsClosedCrew')(); }
    @:pure static inline function N_0x74732c6ca90da2b4(): Int { return untyped __lua__('N_0x74732c6ca90da2b4')(); }
    @:pure static inline function NetworkSessionIsClosedFriends(): Int { return untyped __lua__('NetworkSessionIsClosedFriends')(); }
    @:pure static inline function N_0xfbcfa2ea2e206890(): Int { return untyped __lua__('N_0xfbcfa2ea2e206890')(); }
    @:pure static inline function NetworkSessionIsPlayerVotedToKick(player: Int): Int { return untyped __lua__('NetworkSessionIsPlayerVotedToKick')(player); }
    @:pure static inline function NetworkSessionArePlayersVotingToKick(player: Int): Int { return untyped __lua__('NetworkSessionArePlayersVotingToKick')(player); }
    @:pure static inline function NetworkSessionIsPrivate(): Int { return untyped __lua__('NetworkSessionIsPrivate')(); }
    @:pure static inline function N_0xcef70aa5b3f89ba1(): Int { return untyped __lua__('N_0xcef70aa5b3f89ba1')(); }
    @:pure static inline function NetworkSessionIsSolo(): Int { return untyped __lua__('NetworkSessionIsSolo')(); }
    @:pure static inline function N_0xf3929c2379b60cce(): Int { return untyped __lua__('N_0xf3929c2379b60cce')(); }
    @:pure static inline function NetworkSessionIsVisible(): Int { return untyped __lua__('NetworkSessionIsVisible')(); }
    @:pure static inline function N_0xba416d68c631496a(): Int { return untyped __lua__('N_0xba416d68c631496a')(); }
    
    /**
    * Only works when you are host.
    */
    @:pure static inline function NetworkSessionKickPlayer(player: Int): Void { return untyped __lua__('NetworkSessionKickPlayer')(player); }
    @:pure static inline function NetworkSessionLeaveSinglePlayer(): Void { return untyped __lua__('NetworkSessionLeaveSinglePlayer')(); }
    @:pure static inline function NetworkSessionMarkVisible(p0: Bool): Void { return untyped __lua__('NetworkSessionMarkVisible')(p0); }
    @:pure static inline function N_0x271cc6ab59ebf9a5(p0: Bool): Void { return untyped __lua__('N_0x271cc6ab59ebf9a5')(p0); }
    
    /**
    * playerTypes:
    * 0 = regular joiner
    * 4 = spectator
    * 8 = unknown
    */
    @:pure static inline function NetworkSessionSetMaxPlayers(playerType: Int, playerCount: Int): Void { return untyped __lua__('NetworkSessionSetMaxPlayers')(playerType, playerCount); }
    
    /**
    * playerTypes:
    * 0 = regular joiner
    * 4 = spectator
    * 8 = unknown
    */
    @:pure static inline function N_0x8b6a4dd0af9ce215(playerType: Int, playerCount: Int): Void { return untyped __lua__('N_0x8b6a4dd0af9ce215')(playerType, playerCount); }
    @:pure static inline function NetworkSessionVoiceHost(): Void { return untyped __lua__('NetworkSessionVoiceHost')(); }
    @:pure static inline function NetworkSessionVoiceLeave(): Void { return untyped __lua__('NetworkSessionVoiceLeave')(); }
    @:pure static inline function NetworkSessionWasInvited(): Int { return untyped __lua__('NetworkSessionWasInvited')(); }
    @:pure static inline function N_0x23dfb504655d0ce4(): Int { return untyped __lua__('N_0x23dfb504655d0ce4')(); }
    @:pure static inline function NetworkSetActivitySpectator(toggle: Bool): Void { return untyped __lua__('NetworkSetActivitySpectator')(toggle); }
    @:pure static inline function NetworkSetActivitySpectatorMax(maxSpectators: Int): Void { return untyped __lua__('NetworkSetActivitySpectatorMax')(maxSpectators); }
    @:pure static inline function NetworkSetCurrentlySelectedGamerHandleFromInviteMenu(p0: Int): Int { return untyped __lua__('NetworkSetCurrentlySelectedGamerHandleFromInviteMenu')(p0); }
    @:pure static inline function NetworkSetEntityCanBlend(entity: Int, toggle: Bool): Void { return untyped __lua__('NetworkSetEntityCanBlend')(entity, toggle); }
    
    /**
    * if set to true other network players can't see it
    * if set to false other network player can see it
    * =========================================
    * ^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.
    * pc or last gen?
    * ^^ last-gen
    */
    @:pure static inline function NetworkSetEntityVisibleToNetwork(entity: Int, toggle: Bool): Void { return untyped __lua__('NetworkSetEntityVisibleToNetwork')(entity, toggle); }
    
    /**
    * if set to true other network players can't see it
    * if set to false other network player can see it
    * =========================================
    * ^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.
    * pc or last gen?
    * ^^ last-gen
    */
    @:pure static inline function N_0xf1ca12b18aef5298(entity: Int, toggle: Bool): Void { return untyped __lua__('N_0xf1ca12b18aef5298')(entity, toggle); }
    
    /**
    * //friendly fire toggle
    */
    @:pure static inline function NetworkSetFriendlyFireOption(toggle: Bool): Void { return untyped __lua__('NetworkSetFriendlyFireOption')(toggle); }
    @:pure static inline function NetworkSetGamerInvitedToTransition(networkHandle: Int): Void { return untyped __lua__('NetworkSetGamerInvitedToTransition')(networkHandle); }
    @:pure static inline function NetworkSetInMpCutscene(p0: Bool, p1: Bool): Void { return untyped __lua__('NetworkSetInMpCutscene')(p0, p1); }
    @:pure static inline function NetworkSetInSpectatorMode(toggle: Bool, playerPed: Int): Void { return untyped __lua__('NetworkSetInSpectatorMode')(toggle, playerPed); }
    
    /**
    * hash collision???
    */
    @:pure static inline function NetworkSetKeepFocuspoint(p0: Bool, p1: Int): Void { return untyped __lua__('NetworkSetKeepFocuspoint')(p0, p1); }
    @:pure static inline function NetworkSetLocalPlayerInvincibleTime(time: Int): Void { return untyped __lua__('NetworkSetLocalPlayerInvincibleTime')(time); }
    @:pure static inline function NetworkSetMissionFinished(): Void { return untyped __lua__('NetworkSetMissionFinished')(); }
    @:pure static inline function NetworkSetNetworkIdDynamic(netID: Int, toggle: Bool): Void { return untyped __lua__('NetworkSetNetworkIdDynamic')(netID, toggle); }
    @:pure static inline function N_0x2b1813aba29016c5(netID: Int, toggle: Bool): Void { return untyped __lua__('N_0x2b1813aba29016c5')(netID, toggle); }
    @:pure static inline function NetworkSetOverrideSpectatorMode(toggle: Bool): Void { return untyped __lua__('NetworkSetOverrideSpectatorMode')(toggle); }
    @:pure static inline function NetworkSetPropertyId(p0: Int): Void { return untyped __lua__('NetworkSetPropertyId')(p0); }
    @:pure static inline function NetworkSetRichPresence(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('NetworkSetRichPresence')(p0, p1, p2, p3); }
    @:pure static inline function NetworkSetScriptIsSafeForNetworkGame(): Void { return untyped __lua__('NetworkSetScriptIsSafeForNetworkGame')(); }
    @:pure static inline function NetworkSetTalkerProximity(p0: Int): Void { return untyped __lua__('NetworkSetTalkerProximity')(p0); }
    @:pure static inline function NetworkSetTeamOnlyChat(toggle: Bool): Void { return untyped __lua__('NetworkSetTeamOnlyChat')(toggle); }
    
    /**
    * p1 is always 0
    */
    @:pure static inline function NetworkSetThisScriptIsNetworkScript(lobbySize: Int, p1: Bool, playerId: Int): Void { return untyped __lua__('NetworkSetThisScriptIsNetworkScript')(lobbySize, p1, playerId); }
    @:pure static inline function NetworkSetThisScriptMarked(p0: Int, p1: Bool, p2: Int): Int { return untyped __lua__('NetworkSetThisScriptMarked')(p0, p1, p2); }
    @:pure static inline function N_0xd1110739eeadb592(p0: Int, p1: Bool, p2: Int): Int { return untyped __lua__('N_0xd1110739eeadb592')(p0, p1, p2); }
    @:pure static inline function NetworkSetTransitionActivityId(p0: Int): Void { return untyped __lua__('NetworkSetTransitionActivityId')(p0); }
    @:pure static inline function N_0x30de938b516f0ad2(p0: Int): Void { return untyped __lua__('N_0x30de938b516f0ad2')(p0); }
    @:pure static inline function NetworkSetTransitionCreatorHandle(p0: Int): Void { return untyped __lua__('NetworkSetTransitionCreatorHandle')(p0); }
    @:pure static inline function NetworkSetVoiceActive(toggle: Bool): Void { return untyped __lua__('NetworkSetVoiceActive')(toggle); }
    @:pure static inline function NetworkSetVoiceChannel(p0: Int): Void { return untyped __lua__('NetworkSetVoiceChannel')(p0); }
    
    /**
    * p0 is pointer to a script array
    */
    @:pure static inline function NetworkShopBasketAddItem(p1: Int): { a0: Int, a1: Int } { return untyped __lua__('NetworkShopBasketAddItem')(p1); }
    
    /**
    * p0 is pointer to a script array
    */
    @:pure static inline function N_0xf30980718c8ed876(p1: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0xf30980718c8ed876')(p1); }
    
    /**
    * p0 =&gt; unk3::_network_shop_basket_apply_server_data(Global_2590199[iParam0  -- [[76]] ], &amp;uVar6); =&gt; script array
    */
    @:pure static inline function NetworkShopBasketApplyServerData(p0: Int, p1: Int): Int { return untyped __lua__('NetworkShopBasketApplyServerData')(p0, p1); }
    
    /**
    * p0 =&gt; unk3::_network_shop_basket_apply_server_data(Global_2590199[iParam0  -- [[76]] ], &amp;uVar6); =&gt; script array
    */
    @:pure static inline function N_0xe1a0450ed46a7812(p0: Int, p1: Int): Int { return untyped __lua__('N_0xe1a0450ed46a7812')(p0, p1); }
    @:pure static inline function NetworkShopBasketEnd(): Int { return untyped __lua__('NetworkShopBasketEnd')(); }
    @:pure static inline function N_0xa65568121df2ea26(): Int { return untyped __lua__('N_0xa65568121df2ea26')(); }
    @:pure static inline function NetworkShopBasketIsFull(): Int { return untyped __lua__('NetworkShopBasketIsFull')(); }
    @:pure static inline function N_0x27f76cc6c55ad30e(): Int { return untyped __lua__('N_0x27f76cc6c55ad30e')(); }
    @:pure static inline function NetworkShopBasketStart(p1: Int, p2: Int, p3: Int): { a0: Int, a1: Int } { return untyped __lua__('NetworkShopBasketStart')(p1, p2, p3); }
    
    /**
    * int netShop = 2147483647;
    * UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&amp;netShop, 1474183246, 1982688246, 1445302971, 90000000, 4);
    * if (!UNK3::_NETWORK_SHOP_CHECKOUT_START(netShop)) {
    * showNotification("Transaction failed!");
    * }
    */
    @:pure static inline function NetworkShopBeginService(p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): { a0: Int, a1: Int } { return untyped __lua__('NetworkShopBeginService')(p1, p2, p3, p4, p5); }
    
    /**
    * int netShop = 2147483647;
    * UNK3::_NETWORK_SHOP_BEGIN_SERVICE(&amp;netShop, 1474183246, 1982688246, 1445302971, 90000000, 4);
    * if (!UNK3::_NETWORK_SHOP_CHECKOUT_START(netShop)) {
    * showNotification("Transaction failed!");
    * }
    */
    @:pure static inline function N_0x3c5fd37b5499582e(p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x3c5fd37b5499582e')(p1, p2, p3, p4, p5); }
    @:pure static inline function NetworkShopCashTransferSetTelemetryNonceSeed(): Int { return untyped __lua__('NetworkShopCashTransferSetTelemetryNonceSeed')(); }
    @:pure static inline function N_0x498c1e05ce5f7877(): Int { return untyped __lua__('N_0x498c1e05ce5f7877')(); }
    @:pure static inline function NetworkShopCheckoutStart(p0: Int): Int { return untyped __lua__('NetworkShopCheckoutStart')(p0); }
    @:pure static inline function N_0x39be7cea8d9cc8e6(p0: Int): Int { return untyped __lua__('N_0x39be7cea8d9cc8e6')(p0); }
    @:pure static inline function NetworkShopDeleteSetTelemetryNonceSeed(): Int { return untyped __lua__('NetworkShopDeleteSetTelemetryNonceSeed')(); }
    @:pure static inline function N_0x112cef1615a1139f(): Int { return untyped __lua__('N_0x112cef1615a1139f')(); }
    
    /**
    * Belongs in UNK3, non-hashed version of 0x247F0F73A182EA0B
    */
    @:pure static inline function NetworkShopDoesItemExist(name: String): Int { return untyped __lua__('NetworkShopDoesItemExist')(name); }
    
    /**
    * Belongs in UNK3, non-hashed version of 0x247F0F73A182EA0B
    */
    @:pure static inline function N_0xbd4d7eaf8a30f637(name: String): Int { return untyped __lua__('N_0xbd4d7eaf8a30f637')(name); }
    
    /**
    * Belongs in UNK3, non-hashed version of 0x247F0F73A182EA0B
    */
    @:pure static inline function NetworkShopIsItemUnlocked(name: String): Int { return untyped __lua__('NetworkShopIsItemUnlocked')(name); }
    
    /**
    * ex.:
    * v_15 = sub_10cc8(VEHICLE::GET_VEHICLE_WHEEL_TYPE(a_2));
    * if (!MOBILE::_247F0F73A182EA0B(v_15)) {
    * return 1;
    * }
    * Belongs in UNK3, hashed version of 0xBD4D7EAF8A30F637
    */
    @:pure static inline function NetworkShopDoesItemExistHash(hash: EitherType<String, Int>): Int { return untyped __lua__('NetworkShopDoesItemExistHash')(hash); }
    
    /**
    * ex.:
    * v_15 = sub_10cc8(VEHICLE::GET_VEHICLE_WHEEL_TYPE(a_2));
    * if (!MOBILE::_247F0F73A182EA0B(v_15)) {
    * return 1;
    * }
    * Belongs in UNK3, hashed version of 0xBD4D7EAF8A30F637
    */
    @:pure static inline function N_0x247f0f73a182ea0b(hash: EitherType<String, Int>): Int { return untyped __lua__('N_0x247f0f73a182ea0b')(hash); }
    
    /**
    * ex.:
    * v_15 = sub_10cc8(VEHICLE::GET_VEHICLE_WHEEL_TYPE(a_2));
    * if (!MOBILE::_247F0F73A182EA0B(v_15)) {
    * return 1;
    * }
    * Belongs in UNK3, hashed version of 0xBD4D7EAF8A30F637
    */
    @:pure static inline function NetworkShopIsItemUnlockedHash(hash: EitherType<String, Int>): Int { return untyped __lua__('NetworkShopIsItemUnlockedHash')(hash); }
    @:pure static inline function NetworkShopEndService(p0: Int): Int { return untyped __lua__('NetworkShopEndService')(p0); }
    @:pure static inline function N_0xe2a99a9b524befff(p0: Int): Int { return untyped __lua__('N_0xe2a99a9b524befff')(p0); }
    
    /**
    * bool is always true in game scripts
    */
    @:pure static inline function NetworkShopGetPrice(hash: EitherType<String, Int>, hash2: EitherType<String, Int>, p2: Bool): Int { return untyped __lua__('NetworkShopGetPrice')(hash, hash2, p2); }
    @:pure static inline function NetworkShopGetTransactionsDisabled(): Int { return untyped __lua__('NetworkShopGetTransactionsDisabled')(); }
    @:pure static inline function N_0x810e8431c0614bf9(): Int { return untyped __lua__('N_0x810e8431c0614bf9')(); }
    @:pure static inline function NetworkShopGetTransactionsEnabledForCharacter(mpChar: Int): Int { return untyped __lua__('NetworkShopGetTransactionsEnabledForCharacter')(mpChar); }
    @:pure static inline function N_0xb24f0944da203d9e(mpChar: Int): Int { return untyped __lua__('N_0xb24f0944da203d9e')(mpChar); }
    @:pure static inline function NetworkShopSessionApplyReceivedData(p0: Int): Int { return untyped __lua__('NetworkShopSessionApplyReceivedData')(p0); }
    @:pure static inline function N_0x2f41d51ba3bcd1f1(p0: Int): Int { return untyped __lua__('N_0x2f41d51ba3bcd1f1')(p0); }
    @:pure static inline function NetworkShopSetTelemetryNonceSeed(p0: Int): Int { return untyped __lua__('NetworkShopSetTelemetryNonceSeed')(p0); }
    @:pure static inline function N_0x9507d4271988e1ae(p0: Int): Int { return untyped __lua__('N_0x9507d4271988e1ae')(p0); }
    @:pure static inline function NetworkShopStartSession(p0: Int): Int { return untyped __lua__('NetworkShopStartSession')(p0); }
    @:pure static inline function N_0xa135ac892a58fc07(p0: Int): Int { return untyped __lua__('N_0xa135ac892a58fc07')(p0); }
    
    /**
    * Example:
    * int playerHandle;
    * NETWORK_HANDLE_FROM_PLAYER(selectedPlayer, &amp;playerHandle, 13);
    * NETWORK_SHOW_PROFILE_UI(&amp;playerHandle);
    */
    @:pure static inline function NetworkShowProfileUi(networkHandle: Int): Void { return untyped __lua__('NetworkShowProfileUi')(networkHandle); }
    @:pure static inline function NetworkSpentAmmoDrop(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentAmmoDrop')(p0, p1, p2); }
    @:pure static inline function NetworkSpentArrestBail(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentArrestBail')(p0, p1, p2); }
    @:pure static inline function NetworkSpentBetting(p0: Int, p1: Int, p3: Bool, p4: Bool): Int { return untyped __lua__('NetworkSpentBetting')(p0, p1, p3, p4); }
    @:pure static inline function NetworkSpentBoatPickup(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentBoatPickup')(p0, p1, p2); }
    @:pure static inline function NetworkSpentBounty(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentBounty')(p0, p1, p2); }
    @:pure static inline function NetworkSpentBullShark(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentBullShark')(p0, p1, p2); }
    @:pure static inline function NetworkSpentBuyOfftheradar(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentBuyOfftheradar')(p0, p1, p2); }
    @:pure static inline function NetworkSpentBuyPassiveMode(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentBuyPassiveMode')(p0, p1, p2); }
    @:pure static inline function NetworkSpentBuyRevealPlayers(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentBuyRevealPlayers')(p0, p1, p2); }
    @:pure static inline function NetworkSpentBuyWantedlevel(p0: Int, p2: Bool, p3: Bool): Int { return untyped __lua__('NetworkSpentBuyWantedlevel')(p0, p2, p3); }
    @:pure static inline function NetworkSpentCallPlayer(p0: Int, p2: Bool, p3: Bool): Int { return untyped __lua__('NetworkSpentCallPlayer')(p0, p2, p3); }
    @:pure static inline function NetworkSpentCarwash(p0: Int, p1: Int, p2: Int, p3: Bool, p4: Bool): Void { return untyped __lua__('NetworkSpentCarwash')(p0, p1, p2, p3, p4); }
    @:pure static inline function NetworkSpentCashDrop(amount: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentCashDrop')(amount, p1, p2); }
    @:pure static inline function NetworkSpentCinema(p0: Int, p1: Int, p2: Bool, p3: Bool): Void { return untyped __lua__('NetworkSpentCinema')(p0, p1, p2, p3); }
    @:pure static inline function NetworkSpentFromRockstar(bank: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentFromRockstar')(bank, p1, p2); }
    @:pure static inline function N_0x6a445b64ed7abeb5(bank: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('N_0x6a445b64ed7abeb5')(bank, p1, p2); }
    @:pure static inline function NetworkSpentHeliPickup(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentHeliPickup')(p0, p1, p2); }
    @:pure static inline function NetworkSpentHireMercenary(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentHireMercenary')(p0, p1, p2); }
    
    /**
    * Only used once in a script (am_contact_requests)
    * p1 = 0
    * p2 = 1
    */
    @:pure static inline function NetworkSpentHireMugger(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentHireMugger')(p0, p1, p2); }
    @:pure static inline function NetworkSpentHoldups(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentHoldups')(p0, p1, p2); }
    @:pure static inline function NetworkSpentInStripclub(p0: Int, p1: Bool, p2: Int, p3: Bool): Void { return untyped __lua__('NetworkSpentInStripclub')(p0, p1, p2, p3); }
    @:pure static inline function N_0xee99784e4467689c(p0: Int, p1: Bool, p2: Int, p3: Bool): Void { return untyped __lua__('N_0xee99784e4467689c')(p0, p1, p2, p3); }
    @:pure static inline function NetworkSpentNoCops(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentNoCops')(p0, p1, p2); }
    @:pure static inline function N_0xd5bb406f4e04019f(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('N_0xd5bb406f4e04019f')(p0, p1, p2); }
    
    /**
    * According to how I understood this in the freemode script alone,
    * The first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it's gonna charge you for that specific vehicle model.
    * The second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter.
    * The third parameter is the network handle as they call their little struct&lt;13&gt; func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, "Previous_Owner").
    * The fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0.
    * The fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg,
    * bool hasTheMoney = NETWORKCASH::_GET_BANK_BALANCE() &lt; carCost.
    */
    @:pure static inline function NetworkSpentPayVehicleInsurancePremium(amount: Int, vehicleModel: EitherType<String, Int>, notBankrupt: Bool, hasTheMoney: Bool): Int { return untyped __lua__('NetworkSpentPayVehicleInsurancePremium')(amount, vehicleModel, notBankrupt, hasTheMoney); }
    @:pure static inline function NetworkSpentPlayerHealthcare(p0: Int, p1: Int, p2: Bool, p3: Bool): Void { return untyped __lua__('NetworkSpentPlayerHealthcare')(p0, p1, p2, p3); }
    @:pure static inline function N_0x7c99101f7fce2ee5(p0: Int, p1: Int, p2: Bool, p3: Bool): Void { return untyped __lua__('N_0x7c99101f7fce2ee5')(p0, p1, p2, p3); }
    @:pure static inline function NetworkSpentProstitutes(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentProstitutes')(p0, p1, p2); }
    
    /**
    * Console Hash 0xF4287778 = NETWORK_SPENT_REQUEST_HEIST
    */
    @:pure static inline function NetworkSpentRequestHeist(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentRequestHeist')(p0, p1, p2); }
    
    /**
    * Console Hash 0xF4287778 = NETWORK_SPENT_REQUEST_HEIST
    */
    @:pure static inline function N_0x9d26502bb97bfe62(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('N_0x9d26502bb97bfe62')(p0, p1, p2); }
    @:pure static inline function NetworkSpentRequestJob(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentRequestJob')(p0, p1, p2); }
    @:pure static inline function N_0x8204da7934df3155(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('N_0x8204da7934df3155')(p0, p1, p2); }
    @:pure static inline function NetworkSpentRobbedByMugger(amount: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentRobbedByMugger')(amount, p1, p2); }
    @:pure static inline function N_0x995a65f15f581359(amount: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('N_0x995a65f15f581359')(amount, p1, p2); }
    @:pure static inline function NetworkSpentTaxi(amount: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentTaxi')(amount, p1, p2); }
    @:pure static inline function NetworkSpentTelescope(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('NetworkSpentTelescope')(p0, p1, p2); }
    @:pure static inline function NetworkStartSynchronisedScene(netScene: Int): Void { return untyped __lua__('NetworkStartSynchronisedScene')(netScene); }
    @:pure static inline function NetworkStopLoadScene(): Void { return untyped __lua__('NetworkStopLoadScene')(); }
    @:pure static inline function NetworkStopSynchronisedScene(netScene: Int): Void { return untyped __lua__('NetworkStopSynchronisedScene')(netScene); }
    @:pure static inline function NetworkSuppressInvite(toggle: Bool): Void { return untyped __lua__('NetworkSuppressInvite')(toggle); }
    
    /**
    * used in atm_trigger script.
    * usage:
    * int iVar0;		STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("mpply_last_mp_char"), &amp;iVar0, -1);
    * UNK3::_NETWORK_TRANSFER_WALLET_TO_BANK(iVar0, amount);
    * used to deposit money into bank from wallet, shows up in transaction log.
    */
    @:pure static inline function NetworkTransferBankToWallet(charStatInt: Int, amount: Int): Int { return untyped __lua__('NetworkTransferBankToWallet')(charStatInt, amount); }
    
    /**
    * used in atm_trigger script.
    * usage:
    * int iVar0;		STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("mpply_last_mp_char"), &amp;iVar0, -1);
    * UNK3::_NETWORK_TRANSFER_WALLET_TO_BANK(iVar0, amount);
    * used to deposit money into bank from wallet, shows up in transaction log.
    */
    @:pure static inline function N_0xd47a2c1ba117471d(charStatInt: Int, amount: Int): Int { return untyped __lua__('N_0xd47a2c1ba117471d')(charStatInt, amount); }
    
    /**
    * used in atm_trigger script.
    * usage:
    * int iVar0; 		STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("mpply_last_mp_char"), &amp;iVar0, -1);
    * UNK3::_NETWORK_TRANSFER_BANK_TO_WALLET(iVar0, amount);
    * used to withdraw money from bank into wallet, shows up in transaction log.
    */
    @:pure static inline function NetworkTransferWalletToBank(charStatInt: Int, amount: Int): Int { return untyped __lua__('NetworkTransferWalletToBank')(charStatInt, amount); }
    
    /**
    * used in atm_trigger script.
    * usage:
    * int iVar0; 		STATS::STAT_GET_INT(GAMEPLAY::GET_HASH_KEY("mpply_last_mp_char"), &amp;iVar0, -1);
    * UNK3::_NETWORK_TRANSFER_BANK_TO_WALLET(iVar0, amount);
    * used to withdraw money from bank into wallet, shows up in transaction log.
    */
    @:pure static inline function N_0xc2f7fe5309181c7d(charStatInt: Int, amount: Int): Int { return untyped __lua__('N_0xc2f7fe5309181c7d')(charStatInt, amount); }
    
    /**
    * netScene to scene
    */
    @:pure static inline function NetworkUnlinkNetworkedSynchronisedScene(netScene: Int): Int { return untyped __lua__('NetworkUnlinkNetworkedSynchronisedScene')(netScene); }
    
    /**
    * netScene to scene
    */
    @:pure static inline function N_0x02c40bf885c567b6(netScene: Int): Int { return untyped __lua__('N_0x02c40bf885c567b6')(netScene); }
    @:pure static inline function NetworkUnregisterNetworkedEntity(entity: Int): Void { return untyped __lua__('NetworkUnregisterNetworkedEntity')(entity); }
    @:pure static inline function N_0x7368e683bb9038d6(entity: Int): Void { return untyped __lua__('N_0x7368e683bb9038d6')(entity); }
    @:pure static inline function NetworkUpdateLoadScene(): Int { return untyped __lua__('NetworkUpdateLoadScene')(); }
    @:pure static inline function NetworkXAffectsGamers(p0: Int): Int { return untyped __lua__('NetworkXAffectsGamers')(p0); }
    @:pure static inline function N_0xe532d6811b3a4d2a(p0: Int): Int { return untyped __lua__('N_0xe532d6811b3a4d2a')(p0); }
    @:pure static inline function NewLoadSceneStart(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int): Int { return untyped __lua__('NewLoadSceneStart')(p0, p1, p2, p3, p4, p5, p6, p7); }
    
    /**
    * if (!sub_8f12("START LOAD SCENE SAFE")) {
    * if (CUTSCENE::GET_CUTSCENE_TIME() &gt; 4178) {
    * STREAMING::_ACCFB4ACF53551B0(1973.845458984375, 3818.447265625, 32.43629837036133, 15.0, 2);
    * sub_8e9e("START LOAD SCENE SAFE", 1);
    * }
    * }
    * (Previously known as STREAMING::_NEW_LOAD_SCENE_START_SAFE)
    */
    @:pure static inline function NewLoadSceneStartSphere(x: Int, y: Int, z: Int, radius: Int, p4: Int): Int { return untyped __lua__('NewLoadSceneStartSphere')(x, y, z, radius, p4); }
    
    /**
    * if (!sub_8f12("START LOAD SCENE SAFE")) {
    * if (CUTSCENE::GET_CUTSCENE_TIME() &gt; 4178) {
    * STREAMING::_ACCFB4ACF53551B0(1973.845458984375, 3818.447265625, 32.43629837036133, 15.0, 2);
    * sub_8e9e("START LOAD SCENE SAFE", 1);
    * }
    * }
    * (Previously known as STREAMING::_NEW_LOAD_SCENE_START_SAFE)
    */
    @:pure static inline function N_0xaccfb4acf53551b0(x: Int, y: Int, z: Int, radius: Int, p4: Int): Int { return untyped __lua__('N_0xaccfb4acf53551b0')(x, y, z, radius, p4); }
    @:pure static inline function NewLoadSceneStop(): Void { return untyped __lua__('NewLoadSceneStop')(); }
    
    /**
    * This function and the one below it are for after you receive an invite, not sending it.
    * p0 = 1 or 0
    * nothin doin.
    * int invite(Player player)
    * {
    * int iVar2, iVar3;
    * networkHandleMgr handle;
    * NETWORK_HANDLE_FROM_PLAYER(player, &amp;handle.netHandle, 13);
    * networkClanMgr clan;
    * char *playerName = GET_PLAYER_NAME(player);
    * _SET_NOTIFICATION_TEXT_ENTRY("STRING");
    * _SET_NOTIFACTION_COLOR_NEXT(0);
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerName);
    * if (NETWORK_CLAN_PLAYER_GET_DESC(&amp;clan, 35, &amp;handle.netHandle))
    * {
    * iVar2 = 0;
    * if (ARE_STRINGS_EQUAL(clan.unk22, "Leader") &amp;&amp; clan.unk30 == 0)
    * {
    * iVar2 = 1;
    * }
    * if (clan.unk21 &gt; 0)
    * {
    * iVar3 = 0;
    * }
    * else
    * {
    * iVar3 = 1;
    * }
    * BOOL unused = _0x54E79E9C(&amp;clan.clanHandle, 35);
    * return _NOTIFICATION_SEND_APARTMENT_INVITE(iVar3, 0  -- [[unused]] , &amp;clan.unk17, clan.unk30, iVar2, 0, clan.clanHandle, 0, 0, 0);
    * }
    * }
    */
    @:pure static inline function NotificationSendApartmentInvite(p0: Bool, p1: Bool, p3: Int, isLeader: Bool, unk0: Bool, clanDesc: Int, R: Int, G: Int, B: Int): { a0: Int, a1: Int } { return untyped __lua__('NotificationSendApartmentInvite')(p0, p1, p3, isLeader, unk0, clanDesc, R, G, B); }
    
    /**
    * This function and the one below it are for after you receive an invite, not sending it.
    * p0 = 1 or 0
    * nothin doin.
    * int invite(Player player)
    * {
    * int iVar2, iVar3;
    * networkHandleMgr handle;
    * NETWORK_HANDLE_FROM_PLAYER(player, &amp;handle.netHandle, 13);
    * networkClanMgr clan;
    * char *playerName = GET_PLAYER_NAME(player);
    * _SET_NOTIFICATION_TEXT_ENTRY("STRING");
    * _SET_NOTIFACTION_COLOR_NEXT(0);
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerName);
    * if (NETWORK_CLAN_PLAYER_GET_DESC(&amp;clan, 35, &amp;handle.netHandle))
    * {
    * iVar2 = 0;
    * if (ARE_STRINGS_EQUAL(clan.unk22, "Leader") &amp;&amp; clan.unk30 == 0)
    * {
    * iVar2 = 1;
    * }
    * if (clan.unk21 &gt; 0)
    * {
    * iVar3 = 0;
    * }
    * else
    * {
    * iVar3 = 1;
    * }
    * BOOL unused = _0x54E79E9C(&amp;clan.clanHandle, 35);
    * return _NOTIFICATION_SEND_APARTMENT_INVITE(iVar3, 0  -- [[unused]] , &amp;clan.unk17, clan.unk30, iVar2, 0, clan.clanHandle, 0, 0, 0);
    * }
    * }
    */
    @:pure static inline function N_0x97c9e4e7024a8f2c(p0: Bool, p1: Bool, p3: Int, isLeader: Bool, unk0: Bool, clanDesc: Int, R: Int, G: Int, B: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x97c9e4e7024a8f2c')(p0, p1, p3, isLeader, unk0, clanDesc, R, G, B); }
    
    /**
    * p0 = 1 or 0
    * crashes my game...
    * this is for sending invites to network players - jobs/apartment/ect...
    * return notification handle
    * int invite(Player player)
    * {
    * networkHandleMgr netHandle;
    * networkClanMgr clan;
    * char *playerName = GET_PLAYER_NAME(player);
    * _SET_NOTIFICATION_TEXT_ENTRY("STRING");
    * _SET_NOTIFACTION_COLOR_NEXT(1);
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerName);
    * NETWORK_HANDLE_FROM_PLAYER(player, &amp;netHandle.netHandle, 13);
    * if (NETWORK_CLAN_PLAYER_IS_ACTIVE(&amp;netHandle.netHandle))
    * {
    * NETWORK_CLAN_PLAYER_GET_DESC(&amp;clan.clanHandle, 35, &amp;netHandle.netHandle);
    * _NOTIFICATION_SEND_CLAN_INVITE(0, _0x54E79E9C(&amp;clan.clanHandle, 35), &amp;clan.unk17, clan.isLeader, 0, 0, clan.clanHandle, playerName, 0, 0, 0);
    * }
    * }
    */
    @:pure static inline function NotificationSendClanInvite(p0: Bool, p1: Bool, p3: Int, isLeader: Bool, unk0: Bool, clanDesc: Int, playerName: String, R: Int, G: Int, B: Int): { a0: Int, a1: Int } { return untyped __lua__('NotificationSendClanInvite')(p0, p1, p3, isLeader, unk0, clanDesc, playerName, R, G, B); }
    
    /**
    * p0 = 1 or 0
    * crashes my game...
    * this is for sending invites to network players - jobs/apartment/ect...
    * return notification handle
    * int invite(Player player)
    * {
    * networkHandleMgr netHandle;
    * networkClanMgr clan;
    * char *playerName = GET_PLAYER_NAME(player);
    * _SET_NOTIFICATION_TEXT_ENTRY("STRING");
    * _SET_NOTIFACTION_COLOR_NEXT(1);
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(playerName);
    * NETWORK_HANDLE_FROM_PLAYER(player, &amp;netHandle.netHandle, 13);
    * if (NETWORK_CLAN_PLAYER_IS_ACTIVE(&amp;netHandle.netHandle))
    * {
    * NETWORK_CLAN_PLAYER_GET_DESC(&amp;clan.clanHandle, 35, &amp;netHandle.netHandle);
    * _NOTIFICATION_SEND_CLAN_INVITE(0, _0x54E79E9C(&amp;clan.clanHandle, 35), &amp;clan.unk17, clan.isLeader, 0, 0, clan.clanHandle, playerName, 0, 0, 0);
    * }
    * }
    */
    @:pure static inline function N_0x137bc35589e34e1e(p0: Bool, p1: Bool, p3: Int, isLeader: Bool, unk0: Bool, clanDesc: Int, playerName: String, R: Int, G: Int, B: Int): { a0: Int, a1: Int } { return untyped __lua__('N_0x137bc35589e34e1e')(p0, p1, p3, isLeader, unk0, clanDesc, playerName, R, G, B); }
    
    /**
    * Sets the value of the specified variable to 0.
    * Always returns true.
    * bool _NULLIFY(void* variable, int unused)
    * {
    * *variable = NULL;
    * return true;
    * }
    */
    @:pure static inline function Nullify(unused: Int): { a0: Int, a1: Int } { return untyped __lua__('Nullify')(unused); }
    
    /**
    * Lets objects spawn online simply do it like this:
    * int createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));
    */
    @:pure static inline function ObjToNet(object: Int): Int { return untyped __lua__('ObjToNet')(object); }
    
    /**
    * Please change back to _0x444D8CF241EC25C5 (hash collision)
    */
    @:pure static inline function ObjectDecalToggle(hash: EitherType<String, Int>): Void { return untyped __lua__('ObjectDecalToggle')(hash); }
    @:pure static inline function ObjectValueAddArray(key: String): { a0: Int, a1: Int } { return untyped __lua__('ObjectValueAddArray')(key); }
    @:pure static inline function ObjectValueAddBoolean(key: String, value: Bool): Int { return untyped __lua__('ObjectValueAddBoolean')(key, value); }
    @:pure static inline function ObjectValueAddFloat(key: String, value: Int): Int { return untyped __lua__('ObjectValueAddFloat')(key, value); }
    @:pure static inline function ObjectValueAddInteger(key: String, value: Int): Int { return untyped __lua__('ObjectValueAddInteger')(key, value); }
    @:pure static inline function ObjectValueAddObject(key: String): { a0: Int, a1: Int } { return untyped __lua__('ObjectValueAddObject')(key); }
    @:pure static inline function ObjectValueAddString(key: String, value: String): Int { return untyped __lua__('ObjectValueAddString')(key, value); }
    @:pure static inline function ObjectValueAddVector3(key: String, valueX: Int, valueY: Int, valueZ: Int): Int { return untyped __lua__('ObjectValueAddVector3')(key, valueX, valueY, valueZ); }
    @:pure static inline function ObjectValueGetArray(key: String): { a0: Int, a1: Int } { return untyped __lua__('ObjectValueGetArray')(key); }
    @:pure static inline function ObjectValueGetBoolean(key: String): { a0: Int, a1: Int } { return untyped __lua__('ObjectValueGetBoolean')(key); }
    @:pure static inline function ObjectValueGetFloat(key: String): { a0: Int, a1: Int } { return untyped __lua__('ObjectValueGetFloat')(key); }
    @:pure static inline function ObjectValueGetInteger(key: String): { a0: Int, a1: Int } { return untyped __lua__('ObjectValueGetInteger')(key); }
    @:pure static inline function ObjectValueGetObject(key: String): { a0: Int, a1: Int } { return untyped __lua__('ObjectValueGetObject')(key); }
    @:pure static inline function ObjectValueGetString(key: String): { a0: String, a1: Int } { return untyped __lua__('ObjectValueGetString')(key); }
    
    /**
    * Types:
    * 1 = Boolean
    * 2 = Integer
    * 3 = Float
    * 4 = String
    * 5 = Vector3
    * 6 = Object
    * 7 = Array
    */
    @:pure static inline function ObjectValueGetType(key: String): { a0: Int, a1: Int } { return untyped __lua__('ObjectValueGetType')(key); }
    @:pure static inline function ObjectValueGetVector3(key: String): { a0: Array<Int>, a1: Int } { return untyped __lua__('ObjectValueGetVector3')(key); }
    @:pure static inline function OpenBombBayDoors(vehicle: Int): Void { return untyped __lua__('OpenBombBayDoors')(vehicle); }
    @:pure static inline function OpenVehicleBombBay(vehicle: Int): Void { return untyped __lua__('OpenVehicleBombBay')(vehicle); }
    
    /**
    * patrolRoutes found in the b617d scripts:
    * "miss_Ass0",
    * "miss_Ass1",
    * "miss_Ass2",
    * "miss_Ass3",
    * "miss_Ass4",
    * "miss_Ass5",
    * "miss_Ass6",
    * "MISS_PATROL_6",
    * "MISS_PATROL_7",
    * "MISS_PATROL_8",
    * "MISS_PATROL_9",
    * "miss_Tower_01",
    * "miss_Tower_02",
    * "miss_Tower_03",
    * "miss_Tower_04",
    * "miss_Tower_05",
    * "miss_Tower_06",
    * "miss_Tower_07",
    * "miss_Tower_08",
    * "miss_Tower_10"
    */
    @:pure static inline function OpenPatrolRoute(patrolRoute: String): Void { return untyped __lua__('OpenPatrolRoute')(patrolRoute); }
    @:pure static inline function OpenSequenceTask(taskSequence: Int): Int { return untyped __lua__('OpenSequenceTask')(taskSequence); }
    
    /**
    * Max value for p1 is 15.
    */
    @:pure static inline function OverrideCamSplineMotionBlur(cam: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('OverrideCamSplineMotionBlur')(cam, p1, p2, p3); }
    @:pure static inline function OverrideCamSplineVelocity(cam: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('OverrideCamSplineVelocity')(cam, p1, p2, p3); }
    
    /**
    * Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
    * Modified example from "am_imp_exp.c4", line 6406:
    *  -- [[ popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
    * etc.
    * ]]
    * ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash);
    * STREAMING::REQUEST_MODEL(vehicleHash);
    */
    @:pure static inline function OverridePopscheduleVehicleModel(scheduleId: Int, vehicleHash: EitherType<String, Int>): Void { return untyped __lua__('OverridePopscheduleVehicleModel')(scheduleId, vehicleHash); }
    @:pure static inline function OverrideSaveHouse(p0: Bool, p1: Int, p2: Int, p3: Int, p4: Int, p5: Bool, p6: Int, p7: Int): Int { return untyped __lua__('OverrideSaveHouse')(p0, p1, p2, p3, p4, p5, p6, p7); }
    @:pure static inline function OverrideTrevorRage(p0: Int): Void { return untyped __lua__('OverrideTrevorRage')(p0); }
    @:pure static inline function OverrideUnderwaterStream(p1: Bool): Int { return untyped __lua__('OverrideUnderwaterStream')(p1); }
    
    /**
    * vehicle - the vehicle whose horn should be overwritten
    * mute - p1 seems to be an option for muting the horn
    * p2 - maybe a horn id, since the function AUDIO::GET_VEHICLE_DEFAULT_HORN(veh) exists?
    */
    @:pure static inline function OverrideVehHorn(vehicle: Int, mute: Bool, p2: Int): Void { return untyped __lua__('OverrideVehHorn')(vehicle, mute, p2); }
    
    /**
    * Return the local Participant ID
    */
    @:pure static inline function ParticipantId(): Int { return untyped __lua__('ParticipantId')(); }
    
    /**
    * Return the local Participant ID.
    * This native is exactly the same as 'PARTICIPANT_ID' native.
    */
    @:pure static inline function ParticipantIdToInt(): Int { return untyped __lua__('ParticipantIdToInt')(); }
    @:pure static inline function PauseClock(toggle: Bool): Void { return untyped __lua__('PauseClock')(toggle); }
    @:pure static inline function PausePlaybackRecordedVehicle(p0: Int): Void { return untyped __lua__('PausePlaybackRecordedVehicle')(p0); }
    @:pure static inline function PauseScriptedConversation(p0: Bool): Void { return untyped __lua__('PauseScriptedConversation')(p0); }
    @:pure static inline function PedHasUseScenarioTask(ped: Int): Int { return untyped __lua__('PedHasUseScenarioTask')(ped); }
    
    /**
    * [23.03.2017 19:08] by ins1de :
    * "_IS_PED_RELOADING" is totally a wrong name...
    * This native actually disables the reloading animation and script for the specified ped. Native renamed.
    */
    @:pure static inline function PedSkipNextReloading(ped: Int): Int { return untyped __lua__('PedSkipNextReloading')(ped); }
    
    /**
    * [23.03.2017 19:08] by ins1de :
    * "_IS_PED_RELOADING" is totally a wrong name...
    * This native actually disables the reloading animation and script for the specified ped. Native renamed.
    */
    @:pure static inline function PedToNet(ped: Int): Int { return untyped __lua__('PedToNet')(ped); }
    @:pure static inline function PinRopeVertex(rope: Int, vertex: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('PinRopeVertex')(rope, vertex, x, y, z); }
    @:pure static inline function PlaceObjectOnGroundProperly(object: Int): Int { return untyped __lua__('PlaceObjectOnGroundProperly')(object); }
    
    /**
    * Plays ambient speech. See also _0x444180DB.
    * ped: The ped to play the ambient speech.
    * speechName: Name of the speech to play, eg. "GENERIC_HI".
    * speechParam: Can be one of the following:
    * SPEECH_PARAMS_STANDARD
    * SPEECH_PARAMS_ALLOW_REPEAT
    * SPEECH_PARAMS_BEAT
    * SPEECH_PARAMS_FORCE
    * SPEECH_PARAMS_FORCE_FRONTEND
    * SPEECH_PARAMS_FORCE_NO_REPEAT_FRONTEND
    * SPEECH_PARAMS_FORCE_NORMAL
    * SPEECH_PARAMS_FORCE_NORMAL_CLEAR
    * SPEECH_PARAMS_FORCE_NORMAL_CRITICAL
    * SPEECH_PARAMS_FORCE_SHOUTED
    * SPEECH_PARAMS_FORCE_SHOUTED_CLEAR
    * SPEECH_PARAMS_FORCE_SHOUTED_CRITICAL
    * SPEECH_PARAMS_FORCE_PRELOAD_ONLY
    * SPEECH_PARAMS_MEGAPHONE
    * SPEECH_PARAMS_HELI
    * SPEECH_PARAMS_FORCE_MEGAPHONE
    * SPEECH_PARAMS_FORCE_HELI
    * SPEECH_PARAMS_INTERRUPT
    * SPEECH_PARAMS_INTERRUPT_SHOUTED
    * SPEECH_PARAMS_INTERRUPT_SHOUTED_CLEAR
    * SPEECH_PARAMS_INTERRUPT_SHOUTED_CRITICAL
    * SPEECH_PARAMS_INTERRUPT_NO_FORCE
    * SPEECH_PARAMS_INTERRUPT_FRONTEND
    * SPEECH_PARAMS_INTERRUPT_NO_FORCE_FRONTEND
    * SPEECH_PARAMS_ADD_BLIP
    * SPEECH_PARAMS_ADD_BLIP_ALLOW_REPEAT
    * SPEECH_PARAMS_ADD_BLIP_FORCE
    * SPEECH_PARAMS_ADD_BLIP_SHOUTED
    * SPEECH_PARAMS_ADD_BLIP_SHOUTED_FORCE
    * SPEECH_PARAMS_ADD_BLIP_INTERRUPT
    * SPEECH_PARAMS_ADD_BLIP_INTERRUPT_FORCE
    * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED
    * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CLEAR
    * SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CRITICAL
    * SPEECH_PARAMS_SHOUTED
    * SPEECH_PARAMS_SHOUTED_CLEAR
    * SPEECH_PARAMS_SHOUTED_CRITICAL
    * Note: A list of Name and Parameters can be found here pastebin.com/1GZS5dCL
    * Full list of speeches and voices names by alexguirre: gist.github.com/alexguirre/0af600eb3d4c91ad4f900120a63b8992
    */
    @:pure static inline function PlayAmbientSpeech1(ped: Int, speechName: String, speechParam: String): Void { return untyped __lua__('PlayAmbientSpeech1')(ped, speechName, speechParam); }
    
    /**
    * Plays ambient speech. See also _0x5C57B85D.
    * See _PLAY_AMBIENT_SPEECH1 for parameter specifications.
    * Full list of speeches and voices names by alexguirre: gist.github.com/alexguirre/0af600eb3d4c91ad4f900120a63b8992
    */
    @:pure static inline function PlayAmbientSpeech2(ped: Int, speechName: String, speechParam: String): Void { return untyped __lua__('PlayAmbientSpeech2')(ped, speechName, speechParam); }
    @:pure static inline function PlayAmbientSpeechAtCoords(p0: String, p1: String, p2: Int, p3: Int, p4: Int, p5: String): Void { return untyped __lua__('PlayAmbientSpeechAtCoords')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function N_0xed640017ed337e45(p0: String, p1: String, p2: Int, p3: Int, p4: Int, p5: String): Void { return untyped __lua__('N_0xed640017ed337e45')(p0, p1, p2, p3, p4, p5); }
    
    /**
    * This is the same as _PLAY_AMBIENT_SPEECH1 and _PLAY_AMBIENT_SPEECH2 but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals.
    * EX (C#):
    * GTA.Native.Function.Call(Hash._0x3523634255FC3318, Game.Player.Character, "GENERIC_INSULT_HIGH", "s_m_y_sheriff_01_white_full_01", "SPEECH_PARAMS_FORCE_SHOUTED", 0);
    * The first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.
    * Full list of speeches and voices names by alexguirre: gist.github.com/alexguirre/0af600eb3d4c91ad4f900120a63b8992
    */
    @:pure static inline function PlayAmbientSpeechWithVoice(p0: Int, speechName: String, voiceName: String, speechParam: String, p4: Bool): Void { return untyped __lua__('PlayAmbientSpeechWithVoice')(p0, speechName, voiceName, speechParam, p4); }
    
    /**
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    */
    @:pure static inline function PlayAnimOnRunningScenario(ped: Int, animDict: String, animName: String): Void { return untyped __lua__('PlayAnimOnRunningScenario')(ped, animDict, animName); }
    
    /**
    * Atleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter.
    * p9 is unknown at this time.
    * p10 throughout all the X360 Scripts is always 2.
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    */
    @:pure static inline function PlayCamAnim(cam: Int, animName: String, animDictionary: String, x: Int, y: Int, z: Int, xRot: Int, yRot: Int, zRot: Int, p9: Bool, p10: Int): Int { return untyped __lua__('PlayCamAnim')(cam, animName, animDictionary, x, y, z, xRot, yRot, zRot, p9, p10); }
    @:pure static inline function PlayEndCreditsMusic(play: Bool): Void { return untyped __lua__('PlayEndCreditsMusic')(play); }
    
    /**
    * delta and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in.
    * The only time bitset has a value is 0x4000 and the only time delta has a value is during stealth with usually &lt;1.0f values.
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    */
    @:pure static inline function PlayEntityAnim(entity: Int, animName: String, animDict: String, p3: Int, loop: Bool, stayInAnim: Bool, p6: Bool, delta: Int, bitset: Int): Int { return untyped __lua__('PlayEntityAnim')(entity, animName, animDict, p3, loop, stayInAnim, p6, delta, bitset); }
    @:pure static inline function PlayEntityScriptedAnim(p0: Int, p4: Int, p5: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('PlayEntityScriptedAnim')(p0, p4, p5); }
    @:pure static inline function PlayFacialAnim(ped: Int, animName: String, animDict: String): Void { return untyped __lua__('PlayFacialAnim')(ped, animName, animDict); }
    
    /**
    * Called 38 times in the scripts. There are 5 different audioNames used.
    * One unknown removed below.
    * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("DEAD");
    * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("FRANKLIN_BIG_01");
    * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("GENERIC_FAILED");
    * AUDIO::PLAY_MISSION_COMPLETE_AUDIO("TREVOR_SMALL_01");
    */
    @:pure static inline function PlayMissionCompleteAudio(audioName: String): Void { return untyped __lua__('PlayMissionCompleteAudio')(audioName); }
    
    /**
    * Needs another parameter [int p2]. The signature is PED::PLAY_PAIN(Ped ped, int painID, int p1, int p2);
    * Last 2 parameters always seem to be 0.
    * EX: Function.Call(Hash.PLAY_PAIN, TestPed, 6, 0, 0);
    * Known Pain IDs
    * ________________________
    * 1 - Doesn't seem to do anything. Does NOT crash the game like previously said. (Latest patch)
    * 6 - Scream (Short)
    * 7 - Scared Scream (Kinda Long)
    * 8 - On Fire
    */
    @:pure static inline function PlayPain(ped: Int, painID: Int, p1: Int): Void { return untyped __lua__('PlayPain')(ped, painID, p1); }
    
    /**
    * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/RFb4GTny
    * AUDIO::PLAY_PED_RINGTONE("Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
    * AUDIO::PLAY_PED_RINGTONE("Dial_and_Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
    */
    @:pure static inline function PlayPedRingtone(ringtoneName: String, ped: Int, p2: Bool): Void { return untyped __lua__('PlayPedRingtone')(ringtoneName, ped, p2); }
    
    /**
    * Please change to void. (Does not return anything!)
    * Plays the given police radio message.
    * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/GBnsQ5hr
    */
    @:pure static inline function PlayPoliceReport(name: String, p1: Int): Int { return untyped __lua__('PlayPoliceReport')(name, p1); }
    
    /**
    * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/A8Ny8AHZ
    */
    @:pure static inline function PlaySound(soundId: Int, audioName: String, audioRef: String, p3: Bool, p4: Int, p5: Bool): Void { return untyped __lua__('PlaySound')(soundId, audioName, audioRef, p3, p4, p5); }
    
    /**
    * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/eeFc5DiW
    * gtaforums.com/topic/795622-audio-for-mods
    */
    @:pure static inline function PlaySoundFromCoord(soundId: Int, audioName: String, x: Int, y: Int, z: Int, audioRef: String, p6: Bool, range: Int, p8: Bool): Void { return untyped __lua__('PlaySoundFromCoord')(soundId, audioName, x, y, z, audioRef, p6, range, p8); }
    
    /**
    * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/f2A7vTj0
    * No changes made in b678d.
    * gtaforums.com/topic/795622-audio-for-mods
    */
    @:pure static inline function PlaySoundFromEntity(soundId: Int, audioName: String, entity: Int, audioRef: String, p4: Bool, p5: Int): Void { return untyped __lua__('PlaySoundFromEntity')(soundId, audioName, entity, audioRef, p4, p5); }
    
    /**
    * list: pastebin.com/DCeRiaLJ
    * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/0neZdsZ5
    */
    @:pure static inline function PlaySoundFrontend(soundId: Int, audioName: String, audioRef: String, p3: Bool): Void { return untyped __lua__('PlaySoundFrontend')(soundId, audioName, audioRef, p3); }
    
    /**
    * Used with AUDIO::LOAD_STREAM
    * Example from finale_heist2b.c4:
    * AI::TASK_SYNCHRONIZED_SCENE(l_4C8[2 -- [[14]] ], l_4C8[2 -- [[14]] ]._f7, l_30A, "push_out_vault_l", 4.0, -1.5, 5, 713, 4.0, 0);
    * PED::SET_SYNCHRONIZED_SCENE_PHASE(l_4C8[2 -- [[14]] ]._f7, 0.0);
    * PED::_2208438012482A1A(l_4C8[2 -- [[14]] ], 0, 0);
    * PED::SET_PED_COMBAT_ATTRIBUTES(l_4C8[2 -- [[14]] ], 38, 1);
    * PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(l_4C8[2 -- [[14]] ], 1);
    * if (AUDIO::LOAD_STREAM("Gold_Cart_Push_Anim_01", "BIG_SCORE_3B_SOUNDS")) {
    * AUDIO::PLAY_STREAM_FROM_OBJECT(l_36F[0 -- [[1]] ]);
    * }
    */
    @:pure static inline function PlayStreamFromObject(object: Int): Void { return untyped __lua__('PlayStreamFromObject')(object); }
    @:pure static inline function PlayStreamFromPed(ped: Int): Void { return untyped __lua__('PlayStreamFromPed')(ped); }
    @:pure static inline function N_0x89049dd63c08b5d1(ped: Int): Void { return untyped __lua__('N_0x89049dd63c08b5d1')(ped); }
    @:pure static inline function PlayStreamFromVehicle(vehicle: Int): Void { return untyped __lua__('PlayStreamFromVehicle')(vehicle); }
    @:pure static inline function PlayStreamFrontend(): Void { return untyped __lua__('PlayStreamFrontend')(); }
    @:pure static inline function PlaySynchronizedAudioEvent(p0: Int): Int { return untyped __lua__('PlaySynchronizedAudioEvent')(p0); }
    
    /**
    * Examples:
    * CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::_02C40BF885C567B6(l_2739), "PLAYER_EXIT_L_CAM", "mp_doorbell");
    * CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[7 -- [[1]] ], l_F4D[15 -- [[1]] ], "ah3b_attackheli_cam2", "missheistfbi3b_helicrash");
    */
    @:pure static inline function PlaySynchronizedCamAnim(p0: Int, p1: Int, animName: String, animDictionary: String): Int { return untyped __lua__('PlaySynchronizedCamAnim')(p0, p1, animName, animDictionary); }
    
    /**
    * p4 and p7 are usually 1000.0f.
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    */
    @:pure static inline function PlaySynchronizedEntityAnim(entity: Int, syncedScene: Int, animation: String, propName: String, p4: Int, p5: Int, p6: Int, p7: Int): Int { return untyped __lua__('PlaySynchronizedEntityAnim')(entity, syncedScene, animation, propName, p4, p5, p6, p7); }
    
    /**
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    */
    @:pure static inline function PlaySynchronizedMapEntityAnim(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p8: Int, p9: Int, p10: Int, p11: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('PlaySynchronizedMapEntityAnim')(p0, p1, p2, p3, p4, p5, p8, p9, p10, p11); }
    
    /**
    * This native only comes up once. And in that one instance, p1 is "1".
    */
    @:pure static inline function PlayVehicleDoorCloseSound(vehicle: Int, p1: Int): Void { return untyped __lua__('PlayVehicleDoorCloseSound')(vehicle, p1); }
    
    /**
    * p1 appears to only be "0" or "3". I personally use "0" as p1.
    */
    @:pure static inline function PlayVehicleDoorOpenSound(vehicle: Int, p1: Int): Void { return untyped __lua__('PlayVehicleDoorOpenSound')(vehicle, p1); }
    
    /**
    * Only 1 match. ob_sofa_michael.
    * PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
    */
    @:pure static inline function PlayerAttachVirtualBound(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int): Void { return untyped __lua__('PlayerAttachVirtualBound')(p0, p1, p2, p3, p4, p5, p6, p7); }
    
    /**
    * 1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
    */
    @:pure static inline function PlayerDetachVirtualBound(): Void { return untyped __lua__('PlayerDetachVirtualBound')(); }
    
    /**
    * This returns YOUR 'identity' as a Player type.
    * Always returns 0 in story mode.
    */
    @:pure static inline function PlayerId(): Int { return untyped __lua__('PlayerId')(); }
    
    /**
    * Returns current player ped
    */
    @:pure static inline function PlayerPedId(): Int { return untyped __lua__('PlayerPedId')(); }
    @:pure static inline function PlaystatsAmbientMissionCrateCreated(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('PlaystatsAmbientMissionCrateCreated')(p0, p1, p2); }
    @:pure static inline function N_0xafc7e5e075a96f46(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('N_0xafc7e5e075a96f46')(p0, p1, p2); }
    @:pure static inline function PlaystatsAwardXp(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('PlaystatsAwardXp')(p0, p1, p2); }
    @:pure static inline function PlaystatsCheatApplied(cheat: String): Void { return untyped __lua__('PlaystatsCheatApplied')(cheat); }
    @:pure static inline function PlaystatsClothChange(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('PlaystatsClothChange')(p0, p1, p2, p3, p4); }
    @:pure static inline function PlaystatsFriendActivity(p0: Int, p1: Int): Void { return untyped __lua__('PlaystatsFriendActivity')(p0, p1); }
    @:pure static inline function PlaystatsMatchStarted(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Void { return untyped __lua__('PlaystatsMatchStarted')(p0, p1, p2, p3, p4, p5, p6); }
    @:pure static inline function PlaystatsMissionCheckpoint(p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('PlaystatsMissionCheckpoint')(p1, p2, p3); }
    @:pure static inline function PlaystatsMissionOver(p1: Int, p2: Int, p3: Bool, p4: Bool, p5: Bool): Int { return untyped __lua__('PlaystatsMissionOver')(p1, p2, p3, p4, p5); }
    @:pure static inline function PlaystatsMissionStarted(p1: Int, p2: Int, p3: Bool): Int { return untyped __lua__('PlaystatsMissionStarted')(p1, p2, p3); }
    @:pure static inline function PlaystatsNpcInvite(p0: Int): Void { return untyped __lua__('PlaystatsNpcInvite')(p0); }
    @:pure static inline function PlaystatsOddjobDone(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('PlaystatsOddjobDone')(p0, p1, p2); }
    @:pure static inline function PlaystatsPropChange(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('PlaystatsPropChange')(p0, p1, p2, p3); }
    @:pure static inline function PlaystatsRaceCheckpoint(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('PlaystatsRaceCheckpoint')(p0, p1, p2, p3, p4); }
    @:pure static inline function PlaystatsRankUp(p0: Int): Void { return untyped __lua__('PlaystatsRankUp')(p0); }
    @:pure static inline function PlaystatsShopItem(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('PlaystatsShopItem')(p0, p1, p2, p3, p4); }
    @:pure static inline function PlaystatsWebsiteVisited(scaleformHash: EitherType<String, Int>, p1: Int): Void { return untyped __lua__('PlaystatsWebsiteVisited')(scaleformHash, p1); }
    @:pure static inline function N_0xddf24d535060f811(scaleformHash: EitherType<String, Int>, p1: Int): Void { return untyped __lua__('N_0xddf24d535060f811')(scaleformHash, p1); }
    @:pure static inline function PointCamAtCoord(cam: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('PointCamAtCoord')(cam, x, y, z); }
    
    /**
    * p5 always seems to be 1 i.e TRUE
    */
    @:pure static inline function PointCamAtEntity(cam: Int, entity: Int, p2: Int, p3: Int, p4: Int, p5: Bool): Void { return untyped __lua__('PointCamAtEntity')(cam, entity, p2, p3, p4, p5); }
    
    /**
    * Parameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it's always 1. Please correct p0-p5 if any prove to be wrong.
    */
    @:pure static inline function PointCamAtPedBone(cam: Int, ped: Int, boneIndex: Int, x: Int, y: Int, z: Int, p6: Bool): Void { return untyped __lua__('PointCamAtPedBone')(cam, ped, boneIndex, x, y, z, p6); }
    
    /**
    * Pops and calls the Scaleform movie on the stack. Returns data from the function (not sure if this is a string).
    */
    @:pure static inline function PopScaleformMovieFunction(): Int { return untyped __lua__('PopScaleformMovieFunction')(); }
    
    /**
    * Pops and calls the Scaleform function on the stack
    */
    @:pure static inline function PopScaleformMovieFunctionVoid(): Void { return untyped __lua__('PopScaleformMovieFunctionVoid')(); }
    @:pure static inline function PopTimecycleModifier(): Void { return untyped __lua__('PopTimecycleModifier')(); }
    
    /**
    * spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
    */
    @:pure static inline function PopulateNow(): Void { return untyped __lua__('PopulateNow')(); }
    @:pure static inline function Pow(base: Int, exponent: Int): Int { return untyped __lua__('Pow')(base, exponent); }
    @:pure static inline function PrefetchSrl(srl: String): Void { return untyped __lua__('PrefetchSrl')(srl); }
    @:pure static inline function PreloadScriptConversation(p0: Bool, p1: Bool, p2: Bool, p3: Bool): Void { return untyped __lua__('PreloadScriptConversation')(p0, p1, p2, p3); }
    @:pure static inline function PreloadScriptPhoneConversation(p0: Bool, p1: Bool): Void { return untyped __lua__('PreloadScriptPhoneConversation')(p0, p1); }
    @:pure static inline function PreloadVehicleMod(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('PreloadVehicleMod')(p0, p1, p2); }
    
    /**
    * Example:
    * bool prepareAlarm = AUDIO::PREPARE_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
    */
    @:pure static inline function PrepareAlarm(alarmName: String): Int { return untyped __lua__('PrepareAlarm')(alarmName); }
    
    /**
    * All music event names found in the b617d scripts: pastebin.com/GnYt0R3P
    */
    @:pure static inline function PrepareMusicEvent(eventName: String): Int { return untyped __lua__('PrepareMusicEvent')(eventName); }
    @:pure static inline function PrepareSynchronizedAudioEvent(p0: String, p1: Int): Int { return untyped __lua__('PrepareSynchronizedAudioEvent')(p0, p1); }
    @:pure static inline function PrepareSynchronizedAudioEventForScene(p0: Int, p1: Int): Int { return untyped __lua__('PrepareSynchronizedAudioEventForScene')(p0, p1); }
    
    /**
    * This isn't a hash collision. It is used to give the player cash via the CASH_GIFT stats.
    */
    @:pure static inline function ProcessCashGift(p2: String): { a0: String, a1: Int, a2: Int } { return untyped __lua__('ProcessCashGift')(p2); }
    
    /**
    * This isn't a hash collision. It is used to give the player cash via the CASH_GIFT stats.
    */
    @:pure static inline function N_0x20194d48eaec9a41(p2: String): { a0: String, a1: Int, a2: Int } { return untyped __lua__('N_0x20194d48eaec9a41')(p2); }
    
    /**
    * Called to update entity attachments.
    */
    @:pure static inline function ProcessEntityAttachments(entity: Int): Void { return untyped __lua__('ProcessEntityAttachments')(entity); }
    @:pure static inline function PulseBlip(blip: Int): Void { return untyped __lua__('PulseBlip')(blip); }
    
    /**
    * Push a function from the Scaleform onto the stack
    */
    @:pure static inline function PushScaleformMovieFunction(scaleform: Int, functionName: String): Int { return untyped __lua__('PushScaleformMovieFunction')(scaleform, functionName); }
    
    /**
    * Pushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION, just a hud component id instead of a Scaleform.
    * Known components:
    * 19
    * 20
    * This native requires more research - all information can be found inside of 'hud.gfx'. Using a decompiler, the different components are located under "scripts\__Packages\com\rockstargames\gtav\hud\hudComponents" and "scripts\__Packages\com\rockstargames\gtav\Multiplayer".
    */
    @:pure static inline function PushScaleformMovieFunctionFromHudComponent(hudComponent: Int, functionName: String): Int { return untyped __lua__('PushScaleformMovieFunctionFromHudComponent')(hudComponent, functionName); }
    
    /**
    * Possibly calls "global" Scaleform functions - needs more research!
    */
    @:pure static inline function PushScaleformMovieFunctionN(functionName: String): Int { return untyped __lua__('PushScaleformMovieFunctionN')(functionName); }
    
    /**
    * Possibly calls "global" Scaleform functions - needs more research!
    */
    @:pure static inline function N_0xab58c27c2e6123c6(functionName: String): Int { return untyped __lua__('N_0xab58c27c2e6123c6')(functionName); }
    
    /**
    * Pushes a boolean for the Scaleform function onto the stack.
    */
    @:pure static inline function PushScaleformMovieFunctionParameterBool(value: Bool): Void { return untyped __lua__('PushScaleformMovieFunctionParameterBool')(value); }
    
    /**
    * Pushes a float for the Scaleform function onto the stack.
    */
    @:pure static inline function PushScaleformMovieFunctionParameterFloat(value: Int): Void { return untyped __lua__('PushScaleformMovieFunctionParameterFloat')(value); }
    
    /**
    * Pushes an integer for the Scaleform function onto the stack.
    */
    @:pure static inline function PushScaleformMovieFunctionParameterInt(value: Int): Void { return untyped __lua__('PushScaleformMovieFunctionParameterInt')(value); }
    @:pure static inline function PushScaleformMovieFunctionParameterString(value: String): Void { return untyped __lua__('PushScaleformMovieFunctionParameterString')(value); }
    @:pure static inline function PushTimecycleModifier(): Void { return untyped __lua__('PushTimecycleModifier')(); }
    @:pure static inline function RaiseConvertibleRoof(vehicle: Int, instantlyRaise: Bool): Void { return untyped __lua__('RaiseConvertibleRoof')(vehicle, instantlyRaise); }
    @:pure static inline function RefreshInterior(interiorID: Int): Void { return untyped __lua__('RefreshInterior')(interiorID); }
    @:pure static inline function RefreshWaypoint(): Void { return untyped __lua__('RefreshWaypoint')(); }
    @:pure static inline function RegisterBoolToSave(name: String): Int { return untyped __lua__('RegisterBoolToSave')(name); }
    @:pure static inline function RegisterCommand(commandName: String, handler: Dynamic, restricted: Bool): Void { return untyped __lua__('RegisterCommand')(commandName, handler, restricted); }
    @:pure static inline function RegisterEntityForCutscene(cutscenePed: Int, cutsceneEntName: String, p2: Int, modelHash: EitherType<String, Int>, p4: Int): Void { return untyped __lua__('RegisterEntityForCutscene')(cutscenePed, cutsceneEntName, p2, modelHash, p4); }
    @:pure static inline function RegisterEnumToSave(name: String): Int { return untyped __lua__('RegisterEnumToSave')(name); }
    @:pure static inline function RegisterFloatToSave(name: String): Int { return untyped __lua__('RegisterFloatToSave')(name); }
    
    /**
    * Registers a specified .gfx file as GFx font library.
    * The .gfx file has to be registered with the streamer already.
    * @param fileName The name of the .gfx file, without extension.
    */
    @:pure static inline function RegisterFontFile(fileName: String): Void { return untyped __lua__('RegisterFontFile')(fileName); }
    
    /**
    * Registers a specified font name for use with text draw commands.
    * @param fontName The name of the font in the GFx font library.
    * @return An index to use with [SET\_TEXT\_FONT](#_0x66E0276CC5F6B9DA) and similar natives.
    */
    @:pure static inline function RegisterFontId(fontName: String): Int { return untyped __lua__('RegisterFontId')(fontName); }
    
    /**
    * Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
    */
    @:pure static inline function RegisterHatedTargetsAroundPed(ped: Int, radius: Int): Void { return untyped __lua__('RegisterHatedTargetsAroundPed')(ped, radius); }
    @:pure static inline function RegisterIntToSave(name: String): Int { return untyped __lua__('RegisterIntToSave')(name); }
    @:pure static inline function RegisterNamedRendertarget(p0: String, p1: Bool): Int { return untyped __lua__('RegisterNamedRendertarget')(p0, p1); }
    @:pure static inline function RegisterNuiCallbackType(callbackType: String): Void { return untyped __lua__('RegisterNuiCallbackType')(callbackType); }
    
    /**
    * Registers a script for any object with a specific model hash.
    * BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN("ob_telescope", ${prop_telescope_01}, 100, 4.0, -1, 9);
    */
    @:pure static inline function RegisterObjectScriptBrain(scriptName: String, objectName: EitherType<String, Int>, p2: Int, p3: Int, p4: Int, p5: Int): Void { return untyped __lua__('RegisterObjectScriptBrain')(scriptName, objectName, p2, p3, p4, p5); }
    
    /**
    * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
    */
    @:pure static inline function RegisterPedheadshot(ped: Int): Int { return untyped __lua__('RegisterPedheadshot')(ped); }
    @:pure static inline function RegisterSaveHouse(p0: Int, p1: Int, p2: Int, p3: Int, p5: Int, p6: Int): { a0: Int, a1: Int } { return untyped __lua__('RegisterSaveHouse')(p0, p1, p2, p3, p5, p6); }
    @:pure static inline function RegisterScriptWithAudio(p0: Int): Void { return untyped __lua__('RegisterScriptWithAudio')(p0); }
    @:pure static inline function RegisterSynchronisedScriptSpeech(): Void { return untyped __lua__('RegisterSynchronisedScriptSpeech')(); }
    
    /**
    * PED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt.
    * l_216 = RECSBRobber1
    */
    @:pure static inline function RegisterTarget(ped: Int, target: Int): Void { return untyped __lua__('RegisterTarget')(ped, target); }
    @:pure static inline function RegisterTextLabelToSave(name: String): Int { return untyped __lua__('RegisterTextLabelToSave')(name); }
    @:pure static inline function RegisterWorldPointScriptBrain(p1: Int, p2: Int): Int { return untyped __lua__('RegisterWorldPointScriptBrain')(p1, p2); }
    @:pure static inline function ReleaseAmbientAudioBank(): Void { return untyped __lua__('ReleaseAmbientAudioBank')(); }
    @:pure static inline function ReleaseMissionAudioBank(): Void { return untyped __lua__('ReleaseMissionAudioBank')(); }
    @:pure static inline function ReleaseMovieMeshSet(movieMeshSet: Int): Void { return untyped __lua__('ReleaseMovieMeshSet')(movieMeshSet); }
    @:pure static inline function ReleaseNamedRendertarget(p0: Int): Int { return untyped __lua__('ReleaseNamedRendertarget')(p0); }
    @:pure static inline function ReleaseNamedScriptAudioBank(audioBank: String): Void { return untyped __lua__('ReleaseNamedScriptAudioBank')(audioBank); }
    @:pure static inline function ReleasePreloadMods(vehicle: Int): Void { return untyped __lua__('ReleasePreloadMods')(vehicle); }
    @:pure static inline function ReleaseScriptAudioBank(): Void { return untyped __lua__('ReleaseScriptAudioBank')(); }
    @:pure static inline function ReleaseSoundId(soundId: Int): Void { return untyped __lua__('ReleaseSoundId')(soundId); }
    @:pure static inline function RemoveActionModeAsset(asset: String): Void { return untyped __lua__('RemoveActionModeAsset')(asset); }
    @:pure static inline function RemoveAllCoverBlockingAreas(): Void { return untyped __lua__('RemoveAllCoverBlockingAreas')(); }
    
    /**
    * setting the last params to false it does that same so I would suggest its not a toggle
    */
    @:pure static inline function RemoveAllPedWeapons(ped: Int, p1: Bool): Void { return untyped __lua__('RemoveAllPedWeapons')(ped, p1); }
    
    /**
    * Pickup hashes: pastebin.com/8EuSv2r1
    */
    @:pure static inline function RemoveAllPickupsOfType(pickupHash: EitherType<String, Int>): Void { return untyped __lua__('RemoveAllPickupsOfType')(pickupHash); }
    
    /**
    * p1 seems always to be 0
    */
    @:pure static inline function RemoveAllProjectilesOfType(weaponHash: EitherType<String, Int>, p1: Bool): Void { return untyped __lua__('RemoveAllProjectilesOfType')(weaponHash, p1); }
    @:pure static inline function RemoveAllShockingEvents(p0: Bool): Void { return untyped __lua__('RemoveAllShockingEvents')(p0); }
    @:pure static inline function RemoveAnimDict(animDict: String): Void { return untyped __lua__('RemoveAnimDict')(animDict); }
    
    /**
    * Unloads the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
    * Animation set and clip set are synonymous.
    */
    @:pure static inline function RemoveAnimSet(animSet: String): Void { return untyped __lua__('RemoveAnimSet')(animSet); }
    
    /**
    * In the C++ SDK, this seems not to work-- the blip isn't removed immediately. I use it for saving cars.
    * E.g.:
    * Ped pped = PLAYER::PLAYER_PED_ID();
    * Vehicle v = PED::GET_VEHICLE_PED_IS_USING(pped);
    * Blip b = UI::ADD_BLIP_FOR_ENTITY(v);
    * works fine.
    * But later attempting to delete it with:
    * Blip b = UI::GET_BLIP_FROM_ENTITY(v);
    * if (UI::DOES_BLIP_EXIST(b)) UI::REMOVE_BLIP(&amp;b);
    * doesn't work. And yes, doesn't work without the DOES_BLIP_EXIST check either. Also, if you attach multiple blips to the same thing (say, a vehicle), and that thing disappears, the blips randomly attach to other things (in my case, a vehicle).
    * Thus for me, UI::REMOVE_BLIP(&amp;b) only works if there's one blip, (in my case) the vehicle is marked as no longer needed, you drive away from it and it eventually despawns, AND there is only one blip attached to it. I never intentionally attach multiple blips but if the user saves the car, this adds a blip. Then if they delete it, it is supposed to remove the blip, but it doesn't. Then they can immediately save it again, causing another blip to re-appear.
    * -------------
    * Passing the address of the variable instead of the value works for me.
    * e.g.
    * int blip = UI::ADD_BLIP_FOR_ENTITY(ped);
    * UI::REMOVE_BLIP(&amp;blip);
    * Remove blip will currently crash your game, just artificially remove the blip by setting the sprite to a id that is 'invisible'.
    * --
    * It crashes my game.
    */
    @:pure static inline function RemoveBlip(blip: Int): Void { return untyped __lua__('RemoveBlip')(blip); }
    
    /**
    * Alias for REMOVE_ANIM_SET.
    */
    @:pure static inline function RemoveClipSet(clipSet: String): Void { return untyped __lua__('RemoveClipSet')(clipSet); }
    @:pure static inline function RemoveCoverPoint(coverpoint: Int): Void { return untyped __lua__('RemoveCoverPoint')(coverpoint); }
    @:pure static inline function RemoveCutscene(): Void { return untyped __lua__('RemoveCutscene')(); }
    @:pure static inline function RemoveDecal(decal: Int): Void { return untyped __lua__('RemoveDecal')(decal); }
    @:pure static inline function RemoveDecalsFromObject(obj: Int): Void { return untyped __lua__('RemoveDecalsFromObject')(obj); }
    @:pure static inline function RemoveDecalsFromObjectFacing(obj: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('RemoveDecalsFromObjectFacing')(obj, x, y, z); }
    @:pure static inline function RemoveDecalsFromVehicle(vehicle: Int): Void { return untyped __lua__('RemoveDecalsFromVehicle')(vehicle); }
    
    /**
    * Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
    */
    @:pure static inline function RemoveDecalsInRange(x: Int, y: Int, z: Int, range: Int): Void { return untyped __lua__('RemoveDecalsInRange')(x, y, z, range); }
    @:pure static inline function RemoveDispatchSpawnBlockingArea(p0: Int): Void { return untyped __lua__('RemoveDispatchSpawnBlockingArea')(p0); }
    @:pure static inline function RemoveDoorFromSystem(doorHash: EitherType<String, Int>): Void { return untyped __lua__('RemoveDoorFromSystem')(doorHash); }
    @:pure static inline function RemoveForcedObject(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('RemoveForcedObject')(p0, p1, p2, p3, p4); }
    @:pure static inline function RemoveFromItemset(p0: Int, p1: Int): Void { return untyped __lua__('RemoveFromItemset')(p0, p1); }
    @:pure static inline function RemoveGroup(groupId: Int): Void { return untyped __lua__('RemoveGroup')(groupId); }
    
    /**
    * Removes an IPL from the map.
    * IPL List: pastebin.com/pwkh0uRP
    * Example:
    * C#:
    * Function.Call(Hash.REMOVE_IPL, "trevorstrailertidy");
    * C++:
    * STREAMING::REMOVE_IPL("trevorstrailertidy");
    * iplName = Name of IPL you want to remove.
    */
    @:pure static inline function RemoveIpl(iplName: String): Void { return untyped __lua__('RemoveIpl')(iplName); }
    
    /**
    * Removes the loading prompt at the bottom right of the screen, created by the UI::_SHOW_LOADING_PROMPT native.
    */
    @:pure static inline function RemoveLoadingPrompt(): Void { return untyped __lua__('RemoveLoadingPrompt')(); }
    
    /**
    * Removes the loading prompt at the bottom right of the screen, created by the UI::_SHOW_LOADING_PROMPT native.
    */
    @:pure static inline function N_0x10d373323e5b9c0d(): Void { return untyped __lua__('N_0x10d373323e5b9c0d')(); }
    @:pure static inline function RemoveModelHide(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Void { return untyped __lua__('RemoveModelHide')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function RemoveModelSwap(x: Int, y: Int, z: Int, radius: Int, originalModel: EitherType<String, Int>, newModel: EitherType<String, Int>, p6: Bool): Void { return untyped __lua__('RemoveModelSwap')(x, y, z, radius, originalModel, newModel, p6); }
    @:pure static inline function RemoveMpGamerTag(gamerTagId: Int): Void { return untyped __lua__('RemoveMpGamerTag')(gamerTagId); }
    @:pure static inline function N_0x31698aa80e0223f8(gamerTagId: Int): Void { return untyped __lua__('N_0x31698aa80e0223f8')(gamerTagId); }
    @:pure static inline function RemoveMultiplayerBankCash(): Void { return untyped __lua__('RemoveMultiplayerBankCash')(); }
    
    /**
    * Removes multiplayer cash hud each frame
    */
    @:pure static inline function RemoveMultiplayerHudCash(): Void { return untyped __lua__('RemoveMultiplayerHudCash')(); }
    
    /**
    * console hash: 0xC44762A1
    */
    @:pure static inline function RemoveNamedPtfxAsset(fxName: String): Void { return untyped __lua__('RemoveNamedPtfxAsset')(fxName); }
    @:pure static inline function RemoveNavmeshBlockingObject(p0: Int): Void { return untyped __lua__('RemoveNavmeshBlockingObject')(p0); }
    @:pure static inline function RemoveNavmeshRequiredRegions(): Void { return untyped __lua__('RemoveNavmeshRequiredRegions')(); }
    
    /**
    * Removes a notification instantly instead of waiting for it to disappear
    */
    @:pure static inline function RemoveNotification(notificationId: Int): Void { return untyped __lua__('RemoveNotification')(notificationId); }
    @:pure static inline function RemoveParticleFx(ptfxHandle: Int, p1: Bool): Void { return untyped __lua__('RemoveParticleFx')(ptfxHandle, p1); }
    @:pure static inline function RemoveParticleFxFromEntity(entity: Int): Void { return untyped __lua__('RemoveParticleFxFromEntity')(entity); }
    @:pure static inline function RemoveParticleFxInRange(X: Int, Y: Int, Z: Int, radius: Int): Void { return untyped __lua__('RemoveParticleFxInRange')(X, Y, Z, radius); }
    
    /**
    * Ped will no longer get angry when you stay near him.
    */
    @:pure static inline function RemovePedDefensiveArea(ped: Int, toggle: Bool): Void { return untyped __lua__('RemovePedDefensiveArea')(ped, toggle); }
    
    /**
    * Judging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it'll be marked as no longer needed.
    */
    @:pure static inline function RemovePedElegantly(ped: Int): Void { return untyped __lua__('RemovePedElegantly')(ped); }
    @:pure static inline function RemovePedFromGroup(ped: Int): Void { return untyped __lua__('RemovePedFromGroup')(ped); }
    @:pure static inline function RemovePedHelmet(ped: Int, instantly: Bool): Void { return untyped __lua__('RemovePedHelmet')(ped, instantly); }
    @:pure static inline function RemovePedPreferredCoverSet(ped: Int): Void { return untyped __lua__('RemovePedPreferredCoverSet')(ped); }
    @:pure static inline function N_0xfddb234cf74073d9(ped: Int): Void { return untyped __lua__('N_0xfddb234cf74073d9')(ped); }
    
    /**
    * Retracts the hook on the cargobob.
    * Note: after you retract it the natives for dropping the hook no longer work
    */
    @:pure static inline function RemovePickUpRopeForCargobob(cargobob: Int): Void { return untyped __lua__('RemovePickUpRopeForCargobob')(cargobob); }
    
    /**
    * Retracts the hook on the cargobob.
    * Note: after you retract it the natives for dropping the hook no longer work
    */
    @:pure static inline function RetractCargobobHook(cargobob: Int): Void { return untyped __lua__('RetractCargobobHook')(cargobob); }
    @:pure static inline function RemovePickup(pickup: Int): Void { return untyped __lua__('RemovePickup')(pickup); }
    @:pure static inline function RemovePlayerHelmet(player: Int, p2: Bool): Int { return untyped __lua__('RemovePlayerHelmet')(player, p2); }
    @:pure static inline function RemovePtfxAsset(): Void { return untyped __lua__('RemovePtfxAsset')(); }
    @:pure static inline function RemoveRelationshipGroup(groupHash: EitherType<String, Int>): Void { return untyped __lua__('RemoveRelationshipGroup')(groupHash); }
    @:pure static inline function RemoveScenarioBlockingArea(p0: Int, p1: Bool): Void { return untyped __lua__('RemoveScenarioBlockingArea')(p0, p1); }
    @:pure static inline function RemoveScenarioBlockingAreas(): Void { return untyped __lua__('RemoveScenarioBlockingAreas')(); }
    @:pure static inline function RemoveScriptFire(fireHandle: Int): Void { return untyped __lua__('RemoveScriptFire')(fireHandle); }
    @:pure static inline function RemoveShockingEvent(event: Int): Int { return untyped __lua__('RemoveShockingEvent')(event); }
    @:pure static inline function RemoveShockingEventSpawnBlockingAreas(): Void { return untyped __lua__('RemoveShockingEventSpawnBlockingAreas')(); }
    @:pure static inline function RemoveStealthModeAsset(asset: String): Void { return untyped __lua__('RemoveStealthModeAsset')(asset); }
    @:pure static inline function RemoveVehicleAsset(vehicleAsset: Int): Void { return untyped __lua__('RemoveVehicleAsset')(vehicleAsset); }
    @:pure static inline function RemoveVehicleHighDetailModel(vehicle: Int): Void { return untyped __lua__('RemoveVehicleHighDetailModel')(vehicle); }
    @:pure static inline function RemoveVehicleMod(vehicle: Int, modType: Int): Void { return untyped __lua__('RemoveVehicleMod')(vehicle, modType); }
    @:pure static inline function RemoveVehicleRecording(p0: Int, p1: Int): Void { return untyped __lua__('RemoveVehicleRecording')(p0, p1); }
    @:pure static inline function RemoveVehicleStuckCheck(vehicle: Int): Void { return untyped __lua__('RemoveVehicleStuckCheck')(vehicle); }
    @:pure static inline function RemoveVehicleUpsidedownCheck(vehicle: Int): Void { return untyped __lua__('RemoveVehicleUpsidedownCheck')(vehicle); }
    
    /**
    * windowIndex:
    * 0 = Front Right Window
    * 1 = Front Left Window
    * 2 = Back Right Window
    * 3 = Back Left Window
    */
    @:pure static inline function RemoveVehicleWindow(vehicle: Int, windowIndex: Int): Void { return untyped __lua__('RemoveVehicleWindow')(vehicle, windowIndex); }
    @:pure static inline function RemoveVehiclesFromGeneratorsInArea(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, unk: Int): Void { return untyped __lua__('RemoveVehiclesFromGeneratorsInArea')(x1, y1, z1, x2, y2, z2, unk); }
    
    /**
    * For a full list, see here: pastebin.com/Tp0XpBMN
    */
    @:pure static inline function RemoveWaypointRecording(name: String): Void { return untyped __lua__('RemoveWaypointRecording')(name); }
    @:pure static inline function RemoveWeaponAsset(weaponHash: EitherType<String, Int>): Void { return untyped __lua__('RemoveWeaponAsset')(weaponHash); }
    @:pure static inline function RemoveWeaponComponentFromPed(ped: Int, weaponHash: EitherType<String, Int>, componentHash: EitherType<String, Int>): Void { return untyped __lua__('RemoveWeaponComponentFromPed')(ped, weaponHash, componentHash); }
    @:pure static inline function RemoveWeaponComponentFromWeaponObject(p0: Int, p1: Int): Void { return untyped __lua__('RemoveWeaponComponentFromWeaponObject')(p0, p1); }
    
    /**
    * This native removes a specified weapon from your selected ped.
    * Weapon Hashes: pastebin.com/0wwDZgkF
    * Example:
    * C#:
    * Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);
    * C++:
    * WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);
    * The code above removes the knife from the player.
    */
    @:pure static inline function RemoveWeaponFromPed(ped: Int, weaponHash: EitherType<String, Int>): Void { return untyped __lua__('RemoveWeaponFromPed')(ped, weaponHash); }
    
    /**
    * This native makes the gameplay camera zoom into first person/third person with a special effect.
    * For example, if you were first person in a mission and after the cutscene ends, the camera would then zoom into the first person camera view.
    * if (CAM::GET_FOLLOW_PED_CAM_VIEW_MODE() != 4)
    * CAM::_C819F3CBB62BF692(1, 0, 3, 0)
    * This makes the camera zoom in to first person.
    * --------------------------------------------
    * 1st Param Options: 0 or 1 (Changes quit often, toggle?)
    * 2nd Param Options: 0, 0f, 1f, 3.8f, 10f, 20f (Mostly 0)
    * 3rd Param Options: 3, 2, 1 (Mostly 3);
    * Note for the 2nd param 10f (offroad_race.c) and 3rd param 20f (range_modern.c) are the only times those 2 high floats are called.
    * Note for the 3rd param 2 is only ever set in (franklin0.c), but it also sets it as 3. (0, 0, 3) ||(0, 0f, 2) || (0, 0, 3)
    */
    @:pure static inline function RenderFirstPersonCam(render: Bool, p1: Int, p2: Int): Void { return untyped __lua__('RenderFirstPersonCam')(render, p1, p2); }
    
    /**
    * This native makes the gameplay camera zoom into first person/third person with a special effect.
    * For example, if you were first person in a mission and after the cutscene ends, the camera would then zoom into the first person camera view.
    * if (CAM::GET_FOLLOW_PED_CAM_VIEW_MODE() != 4)
    * CAM::_C819F3CBB62BF692(1, 0, 3, 0)
    * This makes the camera zoom in to first person.
    * --------------------------------------------
    * 1st Param Options: 0 or 1 (Changes quit often, toggle?)
    * 2nd Param Options: 0, 0f, 1f, 3.8f, 10f, 20f (Mostly 0)
    * 3rd Param Options: 3, 2, 1 (Mostly 3);
    * Note for the 2nd param 10f (offroad_race.c) and 3rd param 20f (range_modern.c) are the only times those 2 high floats are called.
    * Note for the 3rd param 2 is only ever set in (franklin0.c), but it also sets it as 3. (0, 0, 3) ||(0, 0f, 2) || (0, 0, 3)
    */
    @:pure static inline function N_0xc819f3cbb62bf692(render: Bool, p1: Int, p2: Int): Void { return untyped __lua__('N_0xc819f3cbb62bf692')(render, p1, p2); }
    
    /**
    * ease - smooth transition between the camera's positions
    * easeTime - Time in milliseconds for the transition to happen
    * If you have created a script (rendering) camera, and want to go back to the
    * character (gameplay) camera, call this native with render set to 0.
    * Setting ease to 1 will smooth the transition.
    */
    @:pure static inline function RenderScriptCams(render: Bool, ease: Bool, easeTime: Int, p3: Bool, p4: Bool): Void { return untyped __lua__('RenderScriptCams')(render, ease, easeTime, p3, p4); }
    
    /**
    * PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1));
    * From am_armybase.ysc.c4:
    * PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4));
    * -----
    * This was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: pastebin.com/09qSMsN7
    * -----
    * crimeType:
    * 1: Firearms possession
    * 2: Person running a red light ("5-0-5")
    * 3: Reckless driver
    * 4: Speeding vehicle (a "5-10")
    * 5: Traffic violation (a "5-0-5")
    * 6: Motorcycle rider without a helmet
    * 7: Vehicle theft (a "5-0-3")
    * 8: Grand Theft Auto
    * 9: ???
    * 10: ???
    * 11: Assault on a civilian (a "2-40")
    * 12: Assault on an officer
    * 13: Assault with a deadly weapon (a "2-45")
    * 14: Officer shot (a "2-45")
    * 15: Pedestrian struck by a vehicle
    * 16: Officer struck by a vehicle
    * 17: Helicopter down (an "AC"?)
    * 18: Civilian on fire (a "2-40")
    * 19: Officer set on fire (a "10-99")
    * 20: Car on fire
    * 21: Air unit down (an "AC"?)
    * 22: An explosion (a "9-96")
    * 23: A stabbing (a "2-45") (also something else I couldn't understand)
    * 24: Officer stabbed (also something else I couldn't understand)
    * 25: Attack on a vehicle ("MDV"?)
    * 26: Damage to property
    * 27: Suspect threatening officer with a firearm
    * 28: Shots fired
    * 29: ???
    * 30: ???
    * 31: ???
    * 32: ???
    * 33: ???
    * 34: A "2-45"
    * 35: ???
    * 36: A "9-25"
    * 37: ???
    * 38: ???
    * 39: ???
    * 40: ???
    * 41: ???
    * 42: ???
    * 43: Possible disturbance
    * 44: Civilian in need of assistance
    * 45: ???
    * 46: ???
    */
    @:pure static inline function ReportCrime(player: Int, crimeType: Int, wantedLvlThresh: Int): Void { return untyped __lua__('ReportCrime')(player, crimeType, wantedLvlThresh); }
    @:pure static inline function RequestActionModeAsset(asset: String): Void { return untyped __lua__('RequestActionModeAsset')(asset); }
    
    /**
    * MulleDK19: Alias of REQUEST_COLLISION_AT_COORD.
    */
    @:pure static inline function RequestAdditionalCollisionAtCoord(p0: Int, p1: Int, p2: Int): Void { return untyped __lua__('RequestAdditionalCollisionAtCoord')(p0, p1, p2); }
    
    /**
    * Request a gxt into the passed slot.
    */
    @:pure static inline function RequestAdditionalText(gxt: String, slot: Int): Void { return untyped __lua__('RequestAdditionalText')(gxt, slot); }
    @:pure static inline function RequestAdditionalText_2(gxt: String, slot: Int): Void { return untyped __lua__('RequestAdditionalText_2')(gxt, slot); }
    
    /**
    * All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: pastebin.com/XZ1tmGEz
    */
    @:pure static inline function RequestAmbientAudioBank(p0: String, p1: Bool): Int { return untyped __lua__('RequestAmbientAudioBank')(p0, p1); }
    @:pure static inline function RequestAnimDict(animDict: String): Void { return untyped __lua__('RequestAnimDict')(animDict); }
    
    /**
    * Starts loading the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
    */
    @:pure static inline function RequestAnimSet(animSet: String): Void { return untyped __lua__('RequestAnimSet')(animSet); }
    @:pure static inline function RequestClipSet(clipSet: String): Void { return untyped __lua__('RequestClipSet')(clipSet); }
    @:pure static inline function RequestCollisionAtCoord(x: Int, y: Int, z: Int): Int { return untyped __lua__('RequestCollisionAtCoord')(x, y, z); }
    @:pure static inline function RequestCollisionForModel(model: EitherType<String, Int>): Void { return untyped __lua__('RequestCollisionForModel')(model); }
    
    /**
    * p1: usually 8
    */
    @:pure static inline function RequestCutscene(cutsceneName: String, p1: Int): Void { return untyped __lua__('RequestCutscene')(cutsceneName, p1); }
    
    /**
    * Example:
    * CUTSCENE::_0xC23DE0E91C30B58C("JOSH_1_INT_CONCAT", 13, 8);
    */
    @:pure static inline function RequestCutsceneEx(cutsceneName: String, p1: Int, p2: Int): Void { return untyped __lua__('RequestCutsceneEx')(cutsceneName, p1, p2); }
    
    /**
    * Example:
    * CUTSCENE::_0xC23DE0E91C30B58C("JOSH_1_INT_CONCAT", 13, 8);
    */
    @:pure static inline function N_0xc23de0e91c30b58c(cutsceneName: String, p1: Int, p2: Int): Void { return untyped __lua__('N_0xc23de0e91c30b58c')(cutsceneName, p1, p2); }
    
    /**
    * http://gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/?p=1068285912
    */
    @:pure static inline function RequestHudScaleform(hudComponent: Int): Void { return untyped __lua__('RequestHudScaleform')(hudComponent); }
    
    /**
    * http://gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/?p=1068285912
    */
    @:pure static inline function N_0x9304881d6f6537ea(hudComponent: Int): Void { return untyped __lua__('N_0x9304881d6f6537ea')(hudComponent); }
    
    /**
    * Exemple: REQUEST_IPL("TrevorsTrailerTrash");
    * IPL + Coords: http://pastebin.com/FyV5mMma
    */
    @:pure static inline function RequestIpl(iplName: String): Void { return untyped __lua__('RequestIpl')(iplName); }
    @:pure static inline function RequestMenuPedModel(model: EitherType<String, Int>): Void { return untyped __lua__('RequestMenuPedModel')(model); }
    @:pure static inline function N_0xa0261aef7acfc51e(model: EitherType<String, Int>): Void { return untyped __lua__('N_0xa0261aef7acfc51e')(model); }
    
    /**
    * All occurrences and usages found in b617d: pastebin.com/NzZZ2Tmm
    */
    @:pure static inline function RequestMissionAudioBank(p0: String, p1: Bool): Int { return untyped __lua__('RequestMissionAudioBank')(p0, p1); }
    
    /**
    * Request a model to be loaded into memory
    * Looking it the disassembly, it seems like it actually returns the model if it's already loaded.
    */
    @:pure static inline function RequestModel(model: EitherType<String, Int>): Void { return untyped __lua__('RequestModel')(model); }
    
    /**
    * From the b678d decompiled scripts:
    * STREAMING::REQUEST_NAMED_PTFX_ASSET("core_snow");
    * STREAMING::REQUEST_NAMED_PTFX_ASSET("fm_mission_controler");
    * STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");
    * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_apartment_mp");
    * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_biolab_heist");
    * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_fireworks");
    * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_parachute");
    * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_wheelsmoke");
    * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_cig_plane");
    * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_creator");
    * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_tankbattle");
    * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_ornate_heist");
    * STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_prison_break_heist_station");
    */
    @:pure static inline function RequestNamedPtfxAsset(fxName: String): Void { return untyped __lua__('RequestNamedPtfxAsset')(fxName); }
    
    /**
    * maps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty
    */
    @:pure static inline function RequestPtfxAsset(): Int { return untyped __lua__('RequestPtfxAsset')(); }
    
    /**
    * Gets a new native after almost every update.
    * Update 1.0.393.2
    * 0x67D02A194A2FC2BD
    * Update 1.0.463.1
    * 0xC97D787CE7726A2F
    * Update 1.0.505.2
    * 0x36ECDA4DD9A3F08D
    * Update 1.0.573.1
    * 0xE3C796DC28BC3254
    * Update 1.0.678.1
    * 0x2F14983962462691
    */
    @:pure static inline function RequestScaleformMovie(scaleformName: String): Int { return untyped __lua__('RequestScaleformMovie')(scaleformName); }
    
    /**
    * Also used by 0x67D02A194A2FC2BD
    */
    @:pure static inline function RequestScaleformMovieInstance(scaleformName: String): Int { return untyped __lua__('RequestScaleformMovieInstance')(scaleformName); }
    
    /**
    * Similar to REQUEST_SCALEFORM_MOVIE, but seems to be some kind of "interactive" scaleform movie?
    * These seem to be the only scaleforms ever requested by this native:
    * "breaking_news"
    * "desktop_pc"
    * "ECG_MONITOR"
    * "Hacking_PC"
    * "TEETH_PULLING"
    * Note: Unless this hash is out-of-order, this native is next-gen only.
    */
    @:pure static inline function RequestScaleformMovieInteractive(scaleformName: String): Int { return untyped __lua__('RequestScaleformMovieInteractive')(scaleformName); }
    
    /**
    * Similar to REQUEST_SCALEFORM_MOVIE, but seems to be some kind of "interactive" scaleform movie?
    * These seem to be the only scaleforms ever requested by this native:
    * "breaking_news"
    * "desktop_pc"
    * "ECG_MONITOR"
    * "Hacking_PC"
    * "TEETH_PULLING"
    * Note: Unless this hash is out-of-order, this native is next-gen only.
    */
    @:pure static inline function RequestScaleformMovie3(scaleformName: String): Int { return untyped __lua__('RequestScaleformMovie3')(scaleformName); }
    
    /**
    * For a full list, see here: pastebin.com/yLNWicUi
    */
    @:pure static inline function RequestScript(scriptName: String): Void { return untyped __lua__('RequestScript')(scriptName); }
    
    /**
    * All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: pastebin.com/AkmDAVn6
    */
    @:pure static inline function RequestScriptAudioBank(p0: String, p1: Bool): Int { return untyped __lua__('RequestScriptAudioBank')(p0, p1); }
    
    /**
    * formerly _REQUEST_STREAMED_SCRIPT
    */
    @:pure static inline function RequestScriptWithNameHash(scriptHash: EitherType<String, Int>): Void { return untyped __lua__('RequestScriptWithNameHash')(scriptHash); }
    
    /**
    * formerly _REQUEST_STREAMED_SCRIPT
    */
    @:pure static inline function RequestStreamedScript(scriptHash: EitherType<String, Int>): Void { return untyped __lua__('RequestStreamedScript')(scriptHash); }
    @:pure static inline function RequestStealthModeAsset(asset: String): Void { return untyped __lua__('RequestStealthModeAsset')(asset); }
    
    /**
    * last param isnt a toggle
    */
    @:pure static inline function RequestStreamedTextureDict(textureDict: String, p1: Bool): Void { return untyped __lua__('RequestStreamedTextureDict')(textureDict, p1); }
    
    /**
    * REQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3);
    * vehicle found that have asset's:
    * cargobob3
    * submersible
    * blazer
    */
    @:pure static inline function RequestVehicleAsset(vehicleHash: EitherType<String, Int>, vehicleAsset: Int): Void { return untyped __lua__('RequestVehicleAsset')(vehicleHash, vehicleAsset); }
    @:pure static inline function RequestVehicleHighDetailModel(vehicle: Int): Void { return untyped __lua__('RequestVehicleHighDetailModel')(vehicle); }
    @:pure static inline function RequestVehicleRecording(p0: Int, p1: Int): Void { return untyped __lua__('RequestVehicleRecording')(p0, p1); }
    
    /**
    * For a full list, see here: pastebin.com/Tp0XpBMN
    * For a full list of the points, see here: goo.gl/wIH0vn
    * Max number of loaded recordings is 32.
    */
    @:pure static inline function RequestWaypointRecording(name: String): Void { return untyped __lua__('RequestWaypointRecording')(name); }
    
    /**
    * Nearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0.
    * REQUEST_WEAPON_ASSET(iLocal_1888, 31, 26);
    */
    @:pure static inline function RequestWeaponAsset(weaponHash: EitherType<String, Int>, p1: Int, p2: Int): Void { return untyped __lua__('RequestWeaponAsset')(weaponHash, p1, p2); }
    @:pure static inline function RequestWeaponHighDetailModel(weaponObject: Int): Void { return untyped __lua__('RequestWeaponHighDetailModel')(weaponObject); }
    @:pure static inline function ReserveNetworkMissionObjects(p0: Int): Void { return untyped __lua__('ReserveNetworkMissionObjects')(p0); }
    @:pure static inline function ReserveNetworkMissionPeds(p0: Int): Void { return untyped __lua__('ReserveNetworkMissionPeds')(p0); }
    @:pure static inline function ReserveNetworkMissionVehicles(p0: Int): Void { return untyped __lua__('ReserveNetworkMissionVehicles')(p0); }
    @:pure static inline function ResetAiMeleeWeaponDamageModifier(): Void { return untyped __lua__('ResetAiMeleeWeaponDamageModifier')(); }
    @:pure static inline function ResetAiWeaponDamageModifier(): Void { return untyped __lua__('ResetAiWeaponDamageModifier')(); }
    @:pure static inline function ResetDispatchIdealSpawnDistance(): Void { return untyped __lua__('ResetDispatchIdealSpawnDistance')(); }
    @:pure static inline function ResetDispatchSpawnBlockingAreas(): Void { return untyped __lua__('ResetDispatchSpawnBlockingAreas')(); }
    
    /**
    * Sets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.
    */
    @:pure static inline function ResetEditorValues(): Void { return untyped __lua__('ResetEditorValues')(); }
    
    /**
    * Sets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.
    */
    @:pure static inline function N_0x3353d13f09307691(): Void { return untyped __lua__('N_0x3353d13f09307691')(); }
    @:pure static inline function ResetEntityAlpha(entity: Int): Int { return untyped __lua__('ResetEntityAlpha')(entity); }
    @:pure static inline function ResetExclusiveScenarioGroup(): Void { return untyped __lua__('ResetExclusiveScenarioGroup')(); }
    @:pure static inline function ResetGroupFormationDefaultSpacing(groupHandle: Int): Void { return untyped __lua__('ResetGroupFormationDefaultSpacing')(groupHandle); }
    @:pure static inline function ResetHudComponentValues(id: Int): Void { return untyped __lua__('ResetHudComponentValues')(id); }
    
    /**
    * Sets the localplayer playerinfo state back to playing (State 0)
    * States are:
    * -1: "Invalid"
    * 0: "Playing"
    * 1: "Died"
    * 2: "Arrested"
    * 3: "Failed Mission"
    * 4: "Left Game"
    * 5: "Respawn"
    * 6: "In MP Cutscene"
    */
    @:pure static inline function ResetLocalplayerState(): Void { return untyped __lua__('ResetLocalplayerState')(); }
    
    /**
    * console hash: 0x9E8D8B72
    * Resets the effect of _SET_PARTICLE_FX_ASSET_OLD_TO_NEW
    */
    @:pure static inline function ResetParticleFxAssetOldToNew(name: String): Void { return untyped __lua__('ResetParticleFxAssetOldToNew')(name); }
    
    /**
    * console hash: 0x9E8D8B72
    * Resets the effect of _SET_PARTICLE_FX_ASSET_OLD_TO_NEW
    */
    @:pure static inline function N_0x89c8553dd3274aae(name: String): Void { return untyped __lua__('N_0x89c8553dd3274aae')(name); }
    @:pure static inline function ResetPedAudioFlags(p0: Int): Void { return untyped __lua__('ResetPedAudioFlags')(p0); }
    @:pure static inline function ResetPedInVehicleContext(ped: Int): Void { return untyped __lua__('ResetPedInVehicleContext')(ped); }
    
    /**
    * Resets the value for the last vehicle driven by the Ped.
    */
    @:pure static inline function ResetPedLastVehicle(ped: Int): Void { return untyped __lua__('ResetPedLastVehicle')(ped); }
    
    /**
    * If p1 is 0.0, I believe you are back to normal.
    * If p1 is 1.0, it looks like you can only rotate the ped, not walk.
    * Using the following code to reset back to normal
    * PED::RESET_PED_MOVEMENT_CLIPSET(PLAYER::PLAYER_PED_ID(), 0.0);
    */
    @:pure static inline function ResetPedMovementClipset(ped: Int, p1: Int): Void { return untyped __lua__('ResetPedMovementClipset')(ped, p1); }
    
    /**
    * There seem to be 26 flags
    */
    @:pure static inline function ResetPedRagdollBlockingFlags(ped: Int, flags: Int): Void { return untyped __lua__('ResetPedRagdollBlockingFlags')(ped, flags); }
    
    /**
    * There seem to be 26 flags
    */
    @:pure static inline function N_0xd86d101fcfd00a4b(ped: Int, flags: Int): Void { return untyped __lua__('N_0xd86d101fcfd00a4b')(ped, flags); }
    @:pure static inline function ResetPedRagdollTimer(ped: Int): Void { return untyped __lua__('ResetPedRagdollTimer')(ped); }
    @:pure static inline function ResetPedStrafeClipset(ped: Int): Void { return untyped __lua__('ResetPedStrafeClipset')(ped); }
    @:pure static inline function ResetPedVisibleDamage(ped: Int): Int { return untyped __lua__('ResetPedVisibleDamage')(ped); }
    @:pure static inline function ResetPedWeaponMovementClipset(ped: Int): Void { return untyped __lua__('ResetPedWeaponMovementClipset')(ped); }
    @:pure static inline function ResetPlayerArrestState(player: Int): Void { return untyped __lua__('ResetPlayerArrestState')(player); }
    @:pure static inline function ResetPlayerInputGait(player: Int): Void { return untyped __lua__('ResetPlayerInputGait')(player); }
    @:pure static inline function ResetPlayerStamina(player: Int): Void { return untyped __lua__('ResetPlayerStamina')(player); }
    @:pure static inline function ResetReticuleValues(): Void { return untyped __lua__('ResetReticuleValues')(); }
    @:pure static inline function ResetScenarioGroupsEnabled(): Void { return untyped __lua__('ResetScenarioGroupsEnabled')(); }
    @:pure static inline function ResetScenarioTypesEnabled(): Void { return untyped __lua__('ResetScenarioTypesEnabled')(); }
    @:pure static inline function ResetTrevorRage(): Void { return untyped __lua__('ResetTrevorRage')(); }
    
    /**
    * The inner function has a switch on the second parameter. It's the stuck timer index.
    * Here's some pseudo code I wrote for the inner function:
    * void __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex)
    * {
    * switch (timerIndex)
    * {
    * case 0:
    * unknownClassInVehicle-&gt;FirstStuckTimer = (WORD)0u;
    * case 1:
    * unknownClassInVehicle-&gt;SecondStuckTimer = (WORD)0u;
    * case 2:
    * unknownClassInVehicle-&gt;ThirdStuckTimer = (WORD)0u;
    * case 3:
    * unknownClassInVehicle-&gt;FourthStuckTimer = (WORD)0u;
    * case 4:
    * unknownClassInVehicle-&gt;FirstStuckTimer = (WORD)0u;
    * unknownClassInVehicle-&gt;SecondStuckTimer = (WORD)0u;
    * unknownClassInVehicle-&gt;ThirdStuckTimer = (WORD)0u;
    * unknownClassInVehicle-&gt;FourthStuckTimer = (WORD)0u;
    * break;
    * };
    * }
    */
    @:pure static inline function ResetVehicleStuckTimer(vehicle: Int, nullAttributes: Int): Void { return untyped __lua__('ResetVehicleStuckTimer')(vehicle, nullAttributes); }
    @:pure static inline function ResetVehicleWheels(vehicle: Int, toggle: Bool): Void { return untyped __lua__('ResetVehicleWheels')(vehicle, toggle); }
    @:pure static inline function ResetWantedLevelDifficulty(player: Int): Void { return untyped __lua__('ResetWantedLevelDifficulty')(player); }
    
    /**
    * Sets the waves intensity back to original (1.0 in most cases).
    * console hash: 0x4AD23212
    * Most likely RESET_CURRENT_*
    */
    @:pure static inline function ResetWavesIntensity(): Void { return untyped __lua__('ResetWavesIntensity')(); }
    
    /**
    * Sets the waves intensity back to original (1.0 in most cases).
    * console hash: 0x4AD23212
    * Most likely RESET_CURRENT_*
    */
    @:pure static inline function N_0x5e5e99285ae812db(): Void { return untyped __lua__('N_0x5e5e99285ae812db')(); }
    
    /**
    * Please change back to _0xBD12C5EEE184C33 (hash collision)
    * actual native starts with SET_RADAR_ZOOM_...
    */
    @:pure static inline function RespondingAsTemp(p0: Int): Void { return untyped __lua__('RespondingAsTemp')(p0); }
    
    /**
    * Before using this native click the native above and look at the decription.
    * Example:
    * int GetHash = Function.Call&lt;int&gt;(Hash.GET_HASH_KEY, "fe_menu_version_corona_lobby");
    * Function.Call(Hash.ACTIVATE_FRONTEND_MENU, GetHash, 0, -1);
    * Function.Call(Hash.RESTART_FRONTEND_MENU(GetHash, -1);
    * This native refreshes the frontend menu.
    * p1 = Hash of Menu
    * p2 = Unknown but always works with -1.
    */
    @:pure static inline function RestartFrontendMenu(menuHash: EitherType<String, Int>, p1: Int): Void { return untyped __lua__('RestartFrontendMenu')(menuHash, p1); }
    @:pure static inline function RestartScriptedConversation(): Void { return untyped __lua__('RestartScriptedConversation')(); }
    @:pure static inline function RestorePlayerStamina(player: Int, p1: Int): Void { return untyped __lua__('RestorePlayerStamina')(player, p1); }
    
    /**
    * This function will simply bring the dead person back to life.
    * Try not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times).
    * Instead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player's current position.)
    * Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
    */
    @:pure static inline function ResurrectPed(ped: Int): Void { return untyped __lua__('ResurrectPed')(ped); }
    
    /**
    * It returns two lol
    * li r3, 2
    * blr
    * thats all it does.
    * mov dword ptr [rax], 2
    */
    @:pure static inline function ReturnTwo(p0: Int): Int { return untyped __lua__('ReturnTwo')(p0); }
    
    /**
    * It returns two lol
    * li r3, 2
    * blr
    * thats all it does.
    * mov dword ptr [rax], 2
    */
    @:pure static inline function N_0x40afb081f8add4ee(p0: Int): Int { return untyped __lua__('N_0x40afb081f8add4ee')(p0); }
    
    /**
    * It will revive/cure the injured ped. The condition is ped must not be dead.
    * Upon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100).
    * This function is well suited there.
    */
    @:pure static inline function ReviveInjuredPed(ped: Int): Void { return untyped __lua__('ReviveInjuredPed')(ped); }
    
    /**
    * windowIndex:
    * 0 = Front Right Window
    * 1 = Front Left Window
    * 2 = Back Right Window
    * 3 = Back Left Window
    */
    @:pure static inline function RollDownWindow(vehicle: Int, windowIndex: Int): Int { return untyped __lua__('RollDownWindow')(vehicle, windowIndex); }
    
    /**
    * Roll down all the windows of the vehicle passed through the first parameter.
    */
    @:pure static inline function RollDownWindows(vehicle: Int): Void { return untyped __lua__('RollDownWindows')(vehicle); }
    
    /**
    * 0 = Front Right Window
    * 1 = Front Left Window
    * 2 = Back Right Window
    * 3 = Back Left Window
    */
    @:pure static inline function RollUpWindow(vehicle: Int, windowIndex: Int): Int { return untyped __lua__('RollUpWindow')(vehicle, windowIndex); }
    @:pure static inline function RopeAreTexturesLoaded(): Int { return untyped __lua__('RopeAreTexturesLoaded')(); }
    @:pure static inline function RopeConvertToSimple(rope: Int): Void { return untyped __lua__('RopeConvertToSimple')(rope); }
    @:pure static inline function RopeDrawShadowEnabled(toggle: Bool): Int { return untyped __lua__('RopeDrawShadowEnabled')(toggle); }
    
    /**
    * Forces a rope to a certain length.
    */
    @:pure static inline function RopeForceLength(rope: Int, length: Int): Int { return untyped __lua__('RopeForceLength')(rope, length); }
    
    /**
    * Loads rope textures for all ropes in the current scene.
    */
    @:pure static inline function RopeLoadTextures(): Int { return untyped __lua__('RopeLoadTextures')(); }
    
    /**
    * Reset a rope to a certain length.
    */
    @:pure static inline function RopeResetLength(rope: Int, length: Bool): Int { return untyped __lua__('RopeResetLength')(rope, length); }
    @:pure static inline function RopeSetUpdatePinverts(rope: Int): Void { return untyped __lua__('RopeSetUpdatePinverts')(rope); }
    
    /**
    * Unloads rope textures for all ropes in the current scene.
    */
    @:pure static inline function RopeUnloadTextures(): Int { return untyped __lua__('RopeUnloadTextures')(); }
    @:pure static inline function Round(value: Int): Int { return untyped __lua__('Round')(value); }
    @:pure static inline function ScEmailMessageClearRecipList(): Void { return untyped __lua__('ScEmailMessageClearRecipList')(); }
    @:pure static inline function N_0x55df6db45179236e(): Void { return untyped __lua__('N_0x55df6db45179236e')(); }
    @:pure static inline function ScEmailMessagePushGamerToRecipList(player: Int): Void { return untyped __lua__('ScEmailMessagePushGamerToRecipList')(player); }
    
    /**
    * Returns the status of a _SC_START_CHECK_STRING_TASK task.
    * Possible return values:
    * 0: not a profane string
    * 1: a profane string
    * 3: server error occurred
    */
    @:pure static inline function ScGetCheckStringStatus(taskHandle: Int): Int { return untyped __lua__('ScGetCheckStringStatus')(taskHandle); }
    
    /**
    * Returns the status of a _SC_START_CHECK_STRING_TASK task.
    * Possible return values:
    * 0: not a profane string
    * 1: a profane string
    * 3: server error occurred
    */
    @:pure static inline function N_0x82e4a58babc15ae7(taskHandle: Int): Int { return untyped __lua__('N_0x82e4a58babc15ae7')(taskHandle); }
    
    /**
    * Returns the nickname of the logged-in Rockstar Social Club account.
    */
    @:pure static inline function ScGetNickname(): String { return untyped __lua__('ScGetNickname')(); }
    
    /**
    * Returns whether or not a task started with _SC_START_CHECK_STRING_TASK has completed.
    */
    @:pure static inline function ScHasCheckStringTaskCompleted(taskHandle: Int): Int { return untyped __lua__('ScHasCheckStringTaskCompleted')(taskHandle); }
    
    /**
    * Returns whether or not a task started with _SC_START_CHECK_STRING_TASK has completed.
    */
    @:pure static inline function N_0x1753344c770358ae(taskHandle: Int): Int { return untyped __lua__('N_0x1753344c770358ae')(taskHandle); }
    @:pure static inline function ScInboxGetEmails(offset: Int, limit: Int): Void { return untyped __lua__('ScInboxGetEmails')(offset, limit); }
    @:pure static inline function N_0x040addcbafa1018a(offset: Int, limit: Int): Void { return untyped __lua__('N_0x040addcbafa1018a')(offset, limit); }
    @:pure static inline function ScInboxMessageGetDataBool(p0: Int, p1: String): Int { return untyped __lua__('ScInboxMessageGetDataBool')(p0, p1); }
    @:pure static inline function N_0xffe5c16f402d851d(p0: Int, p1: String): Int { return untyped __lua__('N_0xffe5c16f402d851d')(p0, p1); }
    @:pure static inline function ScInboxMessageGetDataInt(p0: Int, context: String, out: Int): Int { return untyped __lua__('ScInboxMessageGetDataInt')(p0, context, out); }
    @:pure static inline function ScInboxMessageGetDataString(p0: Int, context: String, out: String): Int { return untyped __lua__('ScInboxMessageGetDataString')(p0, context, out); }
    @:pure static inline function ScInboxMessageGetString(p0: Int): String { return untyped __lua__('ScInboxMessageGetString')(p0); }
    @:pure static inline function N_0xf3e31d16cbdcb304(p0: Int): String { return untyped __lua__('N_0xf3e31d16cbdcb304')(p0); }
    @:pure static inline function ScInboxMessageGetUgcdata(p0: Int, p1: Int): Int { return untyped __lua__('ScInboxMessageGetUgcdata')(p0, p1); }
    @:pure static inline function ScInboxMessageInit(p0: Int): Int { return untyped __lua__('ScInboxMessageInit')(p0); }
    @:pure static inline function N_0xbb8ea16ecbc976c4(p0: Int): Int { return untyped __lua__('N_0xbb8ea16ecbc976c4')(p0); }
    @:pure static inline function ScInboxMessagePop(p0: Int): Int { return untyped __lua__('ScInboxMessagePop')(p0); }
    @:pure static inline function N_0x2c015348cf19ca1d(p0: Int): Int { return untyped __lua__('N_0x2c015348cf19ca1d')(p0); }
    @:pure static inline function ScInboxMessagePush(p0: Int): Int { return untyped __lua__('ScInboxMessagePush')(p0); }
    @:pure static inline function N_0x9a2c8064b6c1e41a(p0: Int): Int { return untyped __lua__('N_0x9a2c8064b6c1e41a')(p0); }
    
    /**
    * Starts a task to check an entered string for profanity on the ROS/Social Club services.
    * See also: 1753344C770358AE, 82E4A58BABC15AE7.
    */
    @:pure static inline function ScStartCheckStringTask(string: String, taskHandle: Int): Int { return untyped __lua__('ScStartCheckStringTask')(string, taskHandle); }
    
    /**
    * Starts a task to check an entered string for profanity on the ROS/Social Club services.
    * See also: 1753344C770358AE, 82E4A58BABC15AE7.
    */
    @:pure static inline function N_0x75632c5ecd7ed843(string: String, taskHandle: Int): Int { return untyped __lua__('N_0x75632c5ecd7ed843')(string, taskHandle); }
    
    /**
    * Seems to move all the drawn text on the screen to given coordinates.
    * It also removed all the drawn sprites of my screen so not to sure what the exact function is.
    */
    @:pure static inline function ScreenDrawPositionBegin(x: Int, y: Int): Void { return untyped __lua__('ScreenDrawPositionBegin')(x, y); }
    
    /**
    * Seems to move all the drawn text on the screen to given coordinates.
    * It also removed all the drawn sprites of my screen so not to sure what the exact function is.
    */
    @:pure static inline function SetScreenDrawPosition(x: Int, y: Int): Void { return untyped __lua__('SetScreenDrawPosition')(x, y); }
    @:pure static inline function ScreenDrawPositionEnd(): Void { return untyped __lua__('ScreenDrawPositionEnd')(); }
    @:pure static inline function N_0xe3a3db414a373dab(): Void { return untyped __lua__('N_0xe3a3db414a373dab')(); }
    @:pure static inline function ScreenDrawPositionRatio(x: Int, y: Int, p2: Int, p3: Int): Void { return untyped __lua__('ScreenDrawPositionRatio')(x, y, p2, p3); }
    @:pure static inline function N_0xf5a2c681787e579d(x: Int, y: Int, p2: Int, p3: Int): Void { return untyped __lua__('N_0xf5a2c681787e579d')(x, y, p2, p3); }
    
    /**
    * If bool Toggle = true so the mobile is hide to screen.
    * If bool Toggle = false so the mobile is show to screen.
    */
    @:pure static inline function ScriptIsMovingMobilePhoneOffscreen(toggle: Bool): Void { return untyped __lua__('ScriptIsMovingMobilePhoneOffscreen')(toggle); }
    @:pure static inline function SendNuiMessage(jsonString: String): Int { return untyped __lua__('SendNuiMessage')(jsonString); }
    @:pure static inline function SetAbilityBarValue(p0: Int, p1: Int): Void { return untyped __lua__('SetAbilityBarValue')(p0, p1); }
    @:pure static inline function SetActivateObjectPhysicsAsSoonAsItIsUnfrozen(object: Int, toggle: Bool): Void { return untyped __lua__('SetActivateObjectPhysicsAsSoonAsItIsUnfrozen')(object, toggle); }
    
    /**
    * Makes pedestrians sound their horn longer, faster and more agressive when they use their horn.
    */
    @:pure static inline function SetAggressiveHorns(toggle: Bool): Void { return untyped __lua__('SetAggressiveHorns')(toggle); }
    
    /**
    * Previously named _0x97C65887D4B37FA9.
    * Sets the maximum view distance for the AI BIP
    */
    @:pure static inline function SetAiBlipMaxDistance(ped: Int, distance: Int): Void { return untyped __lua__('SetAiBlipMaxDistance')(ped, distance); }
    
    /**
    * Previously named _0x97C65887D4B37FA9.
    * Sets the maximum view distance for the AI BIP
    */
    @:pure static inline function N_0x97c65887d4b37fa9(ped: Int, distance: Int): Void { return untyped __lua__('N_0x97c65887d4b37fa9')(ped, distance); }
    @:pure static inline function SetAiMeleeWeaponDamageModifier(modifier: Int): Void { return untyped __lua__('SetAiMeleeWeaponDamageModifier')(modifier); }
    @:pure static inline function SetAiWeaponDamageModifier(value: Int): Void { return untyped __lua__('SetAiWeaponDamageModifier')(value); }
    
    /**
    * This can be between 1.0f - 14.9f
    * You can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it's 14.9 max default.
    */
    @:pure static inline function SetAirDragMultiplierForPlayersVehicle(player: Int, multiplier: Int): Void { return untyped __lua__('SetAirDragMultiplierForPlayersVehicle')(player, multiplier); }
    @:pure static inline function SetAllLowPriorityVehicleGeneratorsActive(active: Bool): Void { return untyped __lua__('SetAllLowPriorityVehicleGeneratorsActive')(active); }
    @:pure static inline function SetAllRandomPedsFlee(player: Int, toggle: Bool): Void { return untyped __lua__('SetAllRandomPedsFlee')(player, toggle); }
    @:pure static inline function SetAllRandomPedsFleeThisFrame(player: Int): Void { return untyped __lua__('SetAllRandomPedsFleeThisFrame')(player); }
    @:pure static inline function SetAllVehicleGeneratorsActive(): Void { return untyped __lua__('SetAllVehicleGeneratorsActive')(); }
    @:pure static inline function SetAllVehicleGeneratorsActiveInArea(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, p6: Bool, p7: Bool): Void { return untyped __lua__('SetAllVehicleGeneratorsActiveInArea')(x1, y1, z1, x2, y2, z2, p6, p7); }
    
    /**
    * Most likely a hash collision
    */
    @:pure static inline function SetAllVehiclesSpawn(p0: Int, p1: Bool, p2: Bool, p3: Bool): Int { return untyped __lua__('SetAllVehiclesSpawn')(p0, p1, p2, p3); }
    
    /**
    * Audio List
    * gtaforums.com/topic/795622-audio-for-mods/
    * All found occurrences in b617d, sorted alphabetically and identical lines removed: pastebin.com/FTeAj4yZ
    * Yes
    */
    @:pure static inline function SetAmbientVoiceName(ped: Int, name: String): Void { return untyped __lua__('SetAmbientVoiceName')(ped, name); }
    @:pure static inline function SetAmbientZoneListState(p1: Bool, p2: Bool): Int { return untyped __lua__('SetAmbientZoneListState')(p1, p2); }
    
    /**
    * All occurrences found in b617d, sorted alphabetically and identical lines removed: pastebin.com/WkXDGgQL
    */
    @:pure static inline function SetAmbientZoneListStatePersistent(ambientZone: String, p1: Bool, p2: Bool): Void { return untyped __lua__('SetAmbientZoneListStatePersistent')(ambientZone, p1, p2); }
    @:pure static inline function SetAmbientZoneState(p1: Bool, p2: Bool): Int { return untyped __lua__('SetAmbientZoneState')(p1, p2); }
    
    /**
    * All occurrences found in b617d, sorted alphabetically and identical lines removed: pastebin.com/jYvw7N1S
    */
    @:pure static inline function SetAmbientZoneStatePersistent(ambientZone: String, p1: Bool, p2: Bool): Void { return untyped __lua__('SetAmbientZoneStatePersistent')(ambientZone, p1, p2); }
    @:pure static inline function SetAmmoInClip(ped: Int, weaponHash: EitherType<String, Int>, ammo: Int): Int { return untyped __lua__('SetAmmoInClip')(ped, weaponHash, ammo); }
    @:pure static inline function SetAnimLooped(p0: Int, p1: Bool, p2: Int, p3: Bool): Void { return untyped __lua__('SetAnimLooped')(p0, p1, p2, p3); }
    @:pure static inline function SetAnimRate(p0: Int, p1: Int, p2: Int, p3: Bool): Void { return untyped __lua__('SetAnimRate')(p0, p1, p2, p3); }
    @:pure static inline function SetAnimWeight(p0: Int, p1: Int, p2: Int, p3: Int, p4: Bool): Void { return untyped __lua__('SetAnimWeight')(p0, p1, p2, p3, p4); }
    
    /**
    * mood can be 0 or 1 (it's not a boolean value!). Effects audio of the animal.
    */
    @:pure static inline function SetAnimalMood(animal: Int, mood: Int): Void { return untyped __lua__('SetAnimalMood')(animal, mood); }
    
    /**
    * Possible flag names:
    * "ActivateSwitchWheelAudio"
    * "AllowAmbientSpeechInSlowMo"
    * "AllowCutsceneOverScreenFade"
    * "AllowForceRadioAfterRetune"
    * "AllowPainAndAmbientSpeechToPlayDuringCutscene"
    * "AllowPlayerAIOnMission"
    * "AllowPoliceScannerWhenPlayerHasNoControl"
    * "AllowRadioDuringSwitch"
    * "AllowRadioOverScreenFade"
    * "AllowScoreAndRadio"
    * "AllowScriptedSpeechInSlowMo"
    * "AvoidMissionCompleteDelay"
    * "DisableAbortConversationForDeathAndInjury"
    * "DisableAbortConversationForRagdoll"
    * "DisableBarks"
    * "DisableFlightMusic"
    * "DisableReplayScriptStreamRecording"
    * "EnableHeadsetBeep"
    * "ForceConversationInterrupt"
    * "ForceSeamlessRadioSwitch"
    * "ForceSniperAudio"
    * "FrontendRadioDisabled"
    * "HoldMissionCompleteWhenPrepared"
    * "IsDirectorModeActive"
    * "IsPlayerOnMissionForSpeech"
    * "ListenerReverbDisabled"
    * "LoadMPData"
    * "MobileRadioInGame"
    * "OnlyAllowScriptTriggerPoliceScanner"
    * "PlayMenuMusic"
    * "PoliceScannerDisabled"
    * "ScriptedConvListenerMaySpeak"
    * "SpeechDucksScore"
    * "SuppressPlayerScubaBreathing"
    * "WantedMusicDisabled"
    * "WantedMusicOnMission"
    * -------------------------------
    * No added flag names between b393d and b573d, including b573d.
    * #######################################################################
    * "IsDirectorModeActive" is an audio flag which will allow you to play speech infinitely without any pauses like in Director Mode.
    * -----------------------------------------------------------------------
    * All flag IDs and hashes:
    * ID: 01 | Hash: 0x20A7858F
    * ID: 02 | Hash: 0xA11C2259
    * ID: 03 | Hash: 0x08DE4700
    * ID: 04 | Hash: 0x989F652F
    * ID: 05 | Hash: 0x3C9E76BA
    * ID: 06 | Hash: 0xA805FEB0
    * ID: 07 | Hash: 0x4B94EA26
    * ID: 08 | Hash: 0x803ACD34
    * ID: 09 | Hash: 0x7C741226
    * ID: 10 | Hash: 0x31DB9EBD
    * ID: 11 | Hash: 0xDF386F18
    * ID: 12 | Hash: 0x669CED42
    * ID: 13 | Hash: 0x51F22743
    * ID: 14 | Hash: 0x2052B35C
    * ID: 15 | Hash: 0x071472DC
    * ID: 16 | Hash: 0xF9928BCC
    * ID: 17 | Hash: 0x7ADBDD48
    * ID: 18 | Hash: 0xA959BA1A
    * ID: 19 | Hash: 0xBBE89B60
    * ID: 20 | Hash: 0x87A08871
    * ID: 21 | Hash: 0xED1057CE
    * ID: 22 | Hash: 0x1584AD7A
    * ID: 23 | Hash: 0x8582CFCB
    * ID: 24 | Hash: 0x7E5E2FB0
    * ID: 25 | Hash: 0xAE4F72DB
    * ID: 26 | Hash: 0x5D16D1FA
    * ID: 27 | Hash: 0x06B2F4B8
    * ID: 28 | Hash: 0x5D4CDC96
    * ID: 29 | Hash: 0x8B5A48BA
    * ID: 30 | Hash: 0x98FBD539
    * ID: 31 | Hash: 0xD8CB0473
    * ID: 32 | Hash: 0x5CBB4874
    * ID: 33 | Hash: 0x2E9F93A9
    * ID: 34 | Hash: 0xD93BEA86
    * ID: 35 | Hash: 0x92109B7D
    * ID: 36 | Hash: 0xB7EC9E4D
    * ID: 37 | Hash: 0xCABDBB1D
    * ID: 38 | Hash: 0xB3FD4A52
    * ID: 39 | Hash: 0x370D94E5
    * ID: 40 | Hash: 0xA0F7938F
    * ID: 41 | Hash: 0xCBE1CE81
    * ID: 42 | Hash: 0xC27F1271
    * ID: 43 | Hash: 0x9E3258EB
    * ID: 44 | Hash: 0x551CDA5B
    * ID: 45 | Hash: 0xCB6D663C
    * ID: 46 | Hash: 0x7DACE87F
    * ID: 47 | Hash: 0xF9DE416F
    * ID: 48 | Hash: 0x882E6E9E
    * ID: 49 | Hash: 0x16B447E7
    * ID: 50 | Hash: 0xBD867739
    * ID: 51 | Hash: 0xA3A58604
    * ID: 52 | Hash: 0x7E046BBC
    * ID: 53 | Hash: 0xD95FDB98
    * ID: 54 | Hash: 0x5842C0ED
    * ID: 55 | Hash: 0x285FECC6
    * ID: 56 | Hash: 0x9351AC43
    * ID: 57 | Hash: 0x50032E75
    * ID: 58 | Hash: 0xAE6D0D59
    * ID: 59 | Hash: 0xD6351785
    * ID: 60 | Hash: 0xD25D71BC
    * ID: 61 | Hash: 0x1F7F6423
    * ID: 62 | Hash: 0xE24C3AA6
    * ID: 63 | Hash: 0xBFFDD2B7
    */
    @:pure static inline function SetAudioFlag(flagName: String, toggle: Bool): Void { return untyped __lua__('SetAudioFlag')(flagName, toggle); }
    @:pure static inline function SetAudioSceneVariable(scene: String, variable: String, value: Int): Void { return untyped __lua__('SetAudioSceneVariable')(scene, variable, value); }
    @:pure static inline function SetAudioVehiclePriority(vehicle: Int, p1: Int): Void { return untyped __lua__('SetAudioVehiclePriority')(vehicle, p1); }
    @:pure static inline function SetAutoGiveParachuteWhenEnterPlane(player: Int, toggle: Bool): Void { return untyped __lua__('SetAutoGiveParachuteWhenEnterPlane')(player, toggle); }
    @:pure static inline function SetBalanceAddMachine(): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('SetBalanceAddMachine')(); }
    @:pure static inline function SetBalanceAddMachines(p1: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('SetBalanceAddMachines')(p1); }
    
    /**
    * Only works on bikes, both X and Y work in the -1 - 1 range.
    * X forces the bike to turn left or right (-1, 1)
    * Y forces the bike to lean to the left or to the right (-1, 1)
    * Example with X -1/Y 1
    * http://i.imgur.com/TgIuAPJ.jpg
    */
    @:pure static inline function SetBikeLeanAngle(vehicle: Int, x: Int, y: Int): Void { return untyped __lua__('SetBikeLeanAngle')(vehicle, x, y); }
    
    /**
    * This sets bit [offset] of [address] to on.
    * The offsets used are different bits to be toggled on and off, typically there is only one address used in a script.
    * Example:
    * GAMEPLAY::SET_BIT(&amp;bitAddress, 1);
    * To check if this bit has been enabled:
    * GAMEPLAY::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards
    * Please note, this method may assign a value to [address] when used.
    */
    @:pure static inline function SetBit(offset: Int): Int { return untyped __lua__('SetBit')(offset); }
    @:pure static inline function SetBitsInRange(rangeStart: Int, rangeEnd: Int, p3: Int): Int { return untyped __lua__('SetBitsInRange')(rangeStart, rangeEnd, p3); }
    
    /**
    * Disables all emissive textures and lights like city lights, car lights, cop car lights. Particles still emit light
    * Used in Humane Labs Heist for EMP.
    */
    @:pure static inline function SetBlackout(enable: Bool): Void { return untyped __lua__('SetBlackout')(enable); }
    
    /**
    * Sets alpha-channel for blip color.
    * Example:
    * Blip blip = UI::ADD_BLIP_FOR_ENTITY(entity);
    * UI::SET_BLIP_COLOUR(blip , 3);
    * UI::SET_BLIP_ALPHA(blip , 64);
    */
    @:pure static inline function SetBlipAlpha(blip: Int, alpha: Int): Void { return untyped __lua__('SetBlipAlpha')(blip, alpha); }
    
    /**
    * false for enemy
    * true for friendly
    */
    @:pure static inline function SetBlipAsFriendly(blip: Int, toggle: Bool): Void { return untyped __lua__('SetBlipAsFriendly')(blip, toggle); }
    @:pure static inline function SetBlipAsMissionCreatorBlip(blip: Int, toggle: Bool): Void { return untyped __lua__('SetBlipAsMissionCreatorBlip')(blip, toggle); }
    @:pure static inline function SetBlipAsShortRange(blip: Int, toggle: Bool): Void { return untyped __lua__('SetBlipAsShortRange')(blip, toggle); }
    @:pure static inline function SetBlipBright(blip: Int, toggle: Bool): Void { return untyped __lua__('SetBlipBright')(blip, toggle); }
    
    /**
    * int index:
    * 1 = No Text on blip or Distance
    * 2 = Text on blip
    * 3 = No text, just distance
    * 4+ No Text on blip or distance
    */
    @:pure static inline function SetBlipCategory(blip: Int, index: Int): Void { return untyped __lua__('SetBlipCategory')(blip, index); }
    
    /**
    * Adds a green checkmark on top of a blip.
    */
    @:pure static inline function SetBlipChecked(blip: Int, toggle: Bool): Void { return untyped __lua__('SetBlipChecked')(blip, toggle); }
    
    /**
    * Adds a green checkmark on top of a blip.
    */
    @:pure static inline function N_0x74513ea3e505181e(blip: Int, toggle: Bool): Void { return untyped __lua__('N_0x74513ea3e505181e')(blip, toggle); }
    
    /**
    * Color:
    * 0: white
    * 1: red
    * 2: green
    * 3: blue
    * 17: orange
    * 19: purple
    * 20: grey
    * 21: brown
    * 23: pink
    * 25: dark green
    * 27: dark purple
    * 29: dark blue
    * Default (Function not used): yellow
    * Those are not the only ones. i.e: 17 is Trevor's orange.
    */
    @:pure static inline function SetBlipColour(blip: Int, color: Int): Void { return untyped __lua__('SetBlipColour')(blip, color); }
    @:pure static inline function SetBlipCoords(blip: Int, posX: Int, posY: Int, posZ: Int): Void { return untyped __lua__('SetBlipCoords')(blip, posX, posY, posZ); }
    
    /**
    * displayId = 8 : shows on radar
    * displayId:
    * 3 = Shows on Main map but not Radar (not selectable on map)
    * displayId = 2 (Shows on Main map + Radar + selectable)
    */
    @:pure static inline function SetBlipDisplay(blip: Int, displayId: Int): Void { return untyped __lua__('SetBlipDisplay')(blip, displayId); }
    @:pure static inline function SetBlipFade(blip: Int, opacity: Int, duration: Int): Void { return untyped __lua__('SetBlipFade')(blip, opacity, duration); }
    @:pure static inline function SetBlipFlashInterval(blip: Int, p1: Int): Void { return untyped __lua__('SetBlipFlashInterval')(blip, p1); }
    
    /**
    * Adds up after viewing multiple R* scripts. I believe that the duration is in miliseconds.
    */
    @:pure static inline function SetBlipFlashTimer(blip: Int, duration: Int): Void { return untyped __lua__('SetBlipFlashTimer')(blip, duration); }
    @:pure static inline function SetBlipFlashes(blip: Int, toggle: Bool): Void { return untyped __lua__('SetBlipFlashes')(blip, toggle); }
    @:pure static inline function SetBlipFlashesAlternate(blip: Int, toggle: Bool): Void { return untyped __lua__('SetBlipFlashesAlternate')(blip, toggle); }
    
    /**
    * Highlights a blip by a half cyan circle.
    */
    @:pure static inline function SetBlipFriend(blip: Int, toggle: Bool): Void { return untyped __lua__('SetBlipFriend')(blip, toggle); }
    
    /**
    * Highlights a blip by a half cyan circle.
    */
    @:pure static inline function N_0x23c3eb807312f01a(blip: Int, toggle: Bool): Void { return untyped __lua__('N_0x23c3eb807312f01a')(blip, toggle); }
    
    /**
    * Highlights a blip by a cyan color circle.
    * Color can be changed with SET_BLIP_SECONDARY_COLOUR
    */
    @:pure static inline function SetBlipFriendly(blip: Int, toggle: Bool): Void { return untyped __lua__('SetBlipFriendly')(blip, toggle); }
    
    /**
    * Highlights a blip by a cyan color circle.
    * Color can be changed with SET_BLIP_SECONDARY_COLOUR
    */
    @:pure static inline function N_0xb81656bc81fe24d1(blip: Int, toggle: Bool): Void { return untyped __lua__('N_0xb81656bc81fe24d1')(blip, toggle); }
    @:pure static inline function SetBlipHighDetail(blip: Int, toggle: Bool): Void { return untyped __lua__('SetBlipHighDetail')(blip, toggle); }
    
    /**
    * Doesn't work if the label text of gxtEntry is &gt;= 80.
    */
    @:pure static inline function SetBlipNameFromTextFile(blip: Int, gxtEntry: String): Void { return untyped __lua__('SetBlipNameFromTextFile')(blip, gxtEntry); }
    @:pure static inline function SetBlipNameToPlayerName(blip: Int, player: Int): Void { return untyped __lua__('SetBlipNameToPlayerName')(blip, player); }
    
    /**
    * See this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935
    */
    @:pure static inline function SetBlipPriority(blip: Int, priority: Int): Void { return untyped __lua__('SetBlipPriority')(blip, priority); }
    
    /**
    * After some testing, looks like you need to use UI:CEIL() on the rotation (vehicle/ped heading) before using it there.
    */
    @:pure static inline function SetBlipRotation(blip: Int, rotation: Int): Void { return untyped __lua__('SetBlipRotation')(blip, rotation); }
    
    /**
    * Enable / disable showing route for the Blip-object.
    */
    @:pure static inline function SetBlipRoute(blip: Int, enabled: Bool): Void { return untyped __lua__('SetBlipRoute')(blip, enabled); }
    @:pure static inline function SetBlipRouteColour(blip: Int, colour: Int): Void { return untyped __lua__('SetBlipRouteColour')(blip, colour); }
    @:pure static inline function SetBlipScale(blip: Int, scale: Int): Void { return untyped __lua__('SetBlipScale')(blip, scale); }
    @:pure static inline function SetBlipSecondaryColour(blip: Int, r: Int, g: Int, b: Int): Void { return untyped __lua__('SetBlipSecondaryColour')(blip, r, g, b); }
    @:pure static inline function SetBlipShowCone(blip: Int, toggle: Bool): Void { return untyped __lua__('SetBlipShowCone')(blip, toggle); }
    
    /**
    * Makes a blip go small when off the minimap.
    */
    @:pure static inline function SetBlipShrink(blip: Int, toggle: Bool): Void { return untyped __lua__('SetBlipShrink')(blip, toggle); }
    
    /**
    * Makes a blip go small when off the minimap.
    */
    @:pure static inline function N_0x2b6d467dab714e8d(blip: Int, toggle: Bool): Void { return untyped __lua__('N_0x2b6d467dab714e8d')(blip, toggle); }
    
    /**
    * Takes a blip object and adds a sprite to it on the map.
    * You may have your own list, but since dev-c didn't show it I was bored and started looking through scripts and functions to get a presumable almost positive list of a majority of blip IDs
    * h t t p://pastebin.com/Bpj9Sfft
    * Blips Images + IDs:
    * gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
    */
    @:pure static inline function SetBlipSprite(blip: Int, spriteId: Int): Void { return untyped __lua__('SetBlipSprite')(blip, spriteId); }
    
    /**
    * works with AI::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him
    */
    @:pure static inline function SetBlockingOfNonTemporaryEvents(ped: Int, toggle: Bool): Void { return untyped __lua__('SetBlockingOfNonTemporaryEvents')(ped, toggle); }
    @:pure static inline function SetBoatAnchor(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetBoatAnchor')(vehicle, toggle); }
    
    /**
    * Set camera as active/inactive.
    */
    @:pure static inline function SetCamActive(cam: Int, active: Bool): Void { return untyped __lua__('SetCamActive')(cam, active); }
    
    /**
    * Previous declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, BOOL easeLocation, BOOL easeRotation) is completely wrong. The last two params are integers not BOOLs...
    */
    @:pure static inline function SetCamActiveWithInterp(camTo: Int, camFrom: Int, duration: Int, easeLocation: Int, easeRotation: Int): Void { return untyped __lua__('SetCamActiveWithInterp')(camTo, camFrom, duration, easeLocation, easeRotation); }
    
    /**
    * Allows you to aim and shoot at the direction the camera is facing.
    */
    @:pure static inline function SetCamAffectsAiming(cam: Int, toggle: Bool): Void { return untyped __lua__('SetCamAffectsAiming')(cam, toggle); }
    @:pure static inline function SetCamAnimCurrentPhase(cam: Int, phase: Int): Void { return untyped __lua__('SetCamAnimCurrentPhase')(cam, phase); }
    
    /**
    * Sets the position of the cam.
    */
    @:pure static inline function SetCamCoord(cam: Int, posX: Int, posY: Int, posZ: Int): Void { return untyped __lua__('SetCamCoord')(cam, posX, posY, posZ); }
    
    /**
    * NOTE: Debugging functions are not present in the retail version of the game.
    */
    @:pure static inline function SetCamDebugName(camera: Int, name: String): Void { return untyped __lua__('SetCamDebugName')(camera, name); }
    
    /**
    * This native has its name defined inside its codE
    */
    @:pure static inline function SetCamDofFnumberOfLens(camera: Int, p1: Int): Void { return untyped __lua__('SetCamDofFnumberOfLens')(camera, p1); }
    
    /**
    * This native has its name defined inside its codE
    */
    @:pure static inline function N_0x7dd234d6f3914c5b(camera: Int, p1: Int): Void { return untyped __lua__('N_0x7dd234d6f3914c5b')(camera, p1); }
    
    /**
    * This native has a name defined inside its code
    */
    @:pure static inline function SetCamDofFocusDistanceBias(camera: Int, p1: Int): Void { return untyped __lua__('SetCamDofFocusDistanceBias')(camera, p1); }
    
    /**
    * This native has a name defined inside its code
    */
    @:pure static inline function N_0xc669eea5d031b7de(camera: Int, p1: Int): Void { return untyped __lua__('N_0xc669eea5d031b7de')(camera, p1); }
    
    /**
    * This native has a name defined inside its code
    */
    @:pure static inline function SetCamDofMaxNearInFocusDistance(camera: Int, p1: Int): Void { return untyped __lua__('SetCamDofMaxNearInFocusDistance')(camera, p1); }
    
    /**
    * This native has a name defined inside its code
    */
    @:pure static inline function N_0xc3654a441402562d(camera: Int, p1: Int): Void { return untyped __lua__('N_0xc3654a441402562d')(camera, p1); }
    
    /**
    * This native has a name defined inside its code
    */
    @:pure static inline function SetCamDofMaxNearInFocusDistanceBlendLevel(camera: Int, p1: Int): Void { return untyped __lua__('SetCamDofMaxNearInFocusDistanceBlendLevel')(camera, p1); }
    
    /**
    * This native has a name defined inside its code
    */
    @:pure static inline function N_0x2c654b4943bddf7c(camera: Int, p1: Int): Void { return untyped __lua__('N_0x2c654b4943bddf7c')(camera, p1); }
    @:pure static inline function SetCamDofPlanes(cam: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('SetCamDofPlanes')(cam, p1, p2, p3, p4); }
    @:pure static inline function SetCamDofStrength(cam: Int, dofStrength: Int): Void { return untyped __lua__('SetCamDofStrength')(cam, dofStrength); }
    
    /**
    * if p0 is 0, effect is cancelled
    * if p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled.
    * if p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled.
    */
    @:pure static inline function SetCamEffect(p0: Int): Void { return untyped __lua__('SetCamEffect')(p0); }
    @:pure static inline function SetCamFarClip(cam: Int, farClip: Int): Void { return untyped __lua__('SetCamFarClip')(cam, farClip); }
    @:pure static inline function SetCamFarDof(cam: Int, farDOF: Int): Void { return untyped __lua__('SetCamFarDof')(cam, farDOF); }
    
    /**
    * Sets the field of view of the cam.
    * ---------------------------------------------
    * Min: 1.0f
    * Max: 130.0f
    */
    @:pure static inline function SetCamFov(cam: Int, fieldOfView: Int): Void { return untyped __lua__('SetCamFov')(cam, fieldOfView); }
    
    /**
    * The native seems to only be called once.
    * The native is used as so,
    * CAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &amp;l_525, 4));
    * In the exile1 script.
    */
    @:pure static inline function SetCamInheritRollVehicle(cam: Int, p1: Bool): Void { return untyped __lua__('SetCamInheritRollVehicle')(cam, p1); }
    @:pure static inline function SetCamMotionBlurStrength(cam: Int, strength: Int): Void { return untyped __lua__('SetCamMotionBlurStrength')(cam, strength); }
    @:pure static inline function SetCamNearClip(cam: Int, nearClip: Int): Void { return untyped __lua__('SetCamNearClip')(cam, nearClip); }
    @:pure static inline function SetCamNearDof(cam: Int, nearDOF: Int): Void { return untyped __lua__('SetCamNearDof')(cam, nearDOF); }
    @:pure static inline function SetCamParams(cam: Int, posX: Int, posY: Int, posZ: Int, rotX: Int, rotY: Int, rotZ: Int, fieldOfView: Int, p8: Int, p9: Int, p10: Int, p11: Int): Void { return untyped __lua__('SetCamParams')(cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, p8, p9, p10, p11); }
    
    /**
    * Sets the rotation of the cam.
    * Last parameter unknown.
    * Last parameter seems to always be set to 2.
    */
    @:pure static inline function SetCamRot(cam: Int, rotX: Int, rotY: Int, rotZ: Int, rotationOrder: Int): Void { return untyped __lua__('SetCamRot')(cam, rotX, rotY, rotZ, rotationOrder); }
    @:pure static inline function SetCamShakeAmplitude(cam: Int, amplitude: Int): Void { return untyped __lua__('SetCamShakeAmplitude')(cam, amplitude); }
    
    /**
    * I named p1 as timeDuration as it is obvious. I'm assuming tho it is ran in ms(Milliseconds) as usual.
    */
    @:pure static inline function SetCamSplineDuration(cam: Int, timeDuration: Int): Void { return untyped __lua__('SetCamSplineDuration')(cam, timeDuration); }
    @:pure static inline function SetCamSplinePhase(cam: Int, p1: Int): Void { return untyped __lua__('SetCamSplinePhase')(cam, p1); }
    @:pure static inline function SetCamUseShallowDofMode(cam: Int, toggle: Bool): Void { return untyped __lua__('SetCamUseShallowDofMode')(cam, toggle); }
    @:pure static inline function SetCameraRange(cam: Int, range: Int): Void { return untyped __lua__('SetCameraRange')(cam, range); }
    @:pure static inline function N_0xf9d02130ecdd1d77(cam: Int, range: Int): Void { return untyped __lua__('N_0xf9d02130ecdd1d77')(cam, range); }
    
    /**
    * Setting ped to true allows the ped to shoot "friendlies".
    * p2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false.
    * p1 = false &amp; p2 = false for unable to aim at.
    * p1 = true &amp; p2 = false for able to aim at.
    */
    @:pure static inline function SetCanAttackFriendly(ped: Int, toggle: Bool, p2: Bool): Void { return untyped __lua__('SetCanAttackFriendly')(ped, toggle, p2); }
    
    /**
    * Hardcoded to not work in multiplayer.
    */
    @:pure static inline function SetCanResprayVehicle(vehicle: Int, state: Bool): Void { return untyped __lua__('SetCanResprayVehicle')(vehicle, state); }
    
    /**
    * Something to do with "high speed bump severity"?
    * if (!sub_87a46("SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER")) {
    * VEHICLE::_84FD40F56075E816(0.0);
    * sub_8795b("SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER", 1);
    * }
    */
    @:pure static inline function SetCarHighSpeedBumpSeverityMultiplier(multiplier: Int): Void { return untyped __lua__('SetCarHighSpeedBumpSeverityMultiplier')(multiplier); }
    
    /**
    * Something to do with "high speed bump severity"?
    * if (!sub_87a46("SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER")) {
    * VEHICLE::_84FD40F56075E816(0.0);
    * sub_8795b("SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER", 1);
    * }
    */
    @:pure static inline function N_0x84fd40f56075e816(multiplier: Int): Void { return untyped __lua__('N_0x84fd40f56075e816')(multiplier); }
    
    /**
    * For now, I changed the last one from bool to int.
    * According to scripts specifically 'fm_mission_controller' this last parameter is 'false/0' when its called after the create rope native above is called for the magnet and 'true/1' after the create rope native above is called for the hook.
    */
    @:pure static inline function SetCargobobHookPosition(p0: Int, p1: Int, p2: Int, state: Int): Void { return untyped __lua__('SetCargobobHookPosition')(p0, p1, p2, state); }
    
    /**
    * For now, I changed the last one from bool to int.
    * According to scripts specifically 'fm_mission_controller' this last parameter is 'false/0' when its called after the create rope native above is called for the magnet and 'true/1' after the create rope native above is called for the hook.
    */
    @:pure static inline function N_0x877c1eaeac531023(p0: Int, p1: Int, p2: Int, state: Int): Void { return untyped __lua__('N_0x877c1eaeac531023')(p0, p1, p2, state); }
    
    /**
    * Console Hash: 0xF57066DA
    * Won't attract or magnetize to any helicopters or planes of course, but that's common sense.
    */
    @:pure static inline function SetCargobobPickupMagnetActive(cargobob: Int, isActive: Bool): Void { return untyped __lua__('SetCargobobPickupMagnetActive')(cargobob, isActive); }
    
    /**
    * Console Hash: 0xF57066DA
    * Won't attract or magnetize to any helicopters or planes of course, but that's common sense.
    */
    @:pure static inline function CargobobMagnetGrabVehicle(cargobob: Int, isActive: Bool): Void { return untyped __lua__('CargobobMagnetGrabVehicle')(cargobob, isActive); }
    
    /**
    * console hash 0xCC3CF97D
    */
    @:pure static inline function SetCargobobPickupMagnetStrength(cargobob: Int, strength: Int): Void { return untyped __lua__('SetCargobobPickupMagnetStrength')(cargobob, strength); }
    
    /**
    * console hash 0xCC3CF97D
    */
    @:pure static inline function N_0xbcbfcd9d1dac19e2(cargobob: Int, strength: Int): Void { return untyped __lua__('N_0xbcbfcd9d1dac19e2')(cargobob, strength); }
    @:pure static inline function SetCgAtBoundcenter(rope: Int): Void { return untyped __lua__('SetCgAtBoundcenter')(rope); }
    @:pure static inline function SetCgoffset(rope: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('SetCgoffset')(rope, x, y, z); }
    
    /**
    * Sets the cylinder height of the checkpoint.
    * Parameters:
    * * nearHeight - The height of the checkpoint when inside of the radius.
    * * farHeight - The height of the checkpoint when outside of the radius.
    * * radius - The radius of the checkpoint.
    */
    @:pure static inline function SetCheckpointCylinderHeight(checkpoint: Int, nearHeight: Int, farHeight: Int, radius: Int): Void { return untyped __lua__('SetCheckpointCylinderHeight')(checkpoint, nearHeight, farHeight, radius); }
    
    /**
    * Sets the checkpoint icon color.
    */
    @:pure static inline function SetCheckpointIconRgba(checkpoint: Int, red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('SetCheckpointIconRgba')(checkpoint, red, green, blue, alpha); }
    
    /**
    * Sets the checkpoint color.
    */
    @:pure static inline function SetCheckpointRgba(checkpoint: Int, red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('SetCheckpointRgba')(checkpoint, red, green, blue, alpha); }
    @:pure static inline function SetCinematicButtonActive(p0: Bool): Void { return untyped __lua__('SetCinematicButtonActive')(p0); }
    @:pure static inline function SetCinematicCamShakeAmplitude(p0: Int): Void { return untyped __lua__('SetCinematicCamShakeAmplitude')(p0); }
    
    /**
    * p0 = 0/1 or true/false
    * It doesn't seems to work
    */
    @:pure static inline function SetCinematicModeActive(p0: Bool): Void { return untyped __lua__('SetCinematicModeActive')(p0); }
    @:pure static inline function SetClockDate(day: Int, month: Int, year: Int): Void { return untyped __lua__('SetClockDate')(day, month, year); }
    
    /**
    * SET_CLOCK_TIME(12, 34, 56);
    */
    @:pure static inline function SetClockTime(hour: Int, minute: Int, second: Int): Void { return untyped __lua__('SetClockTime')(hour, minute, second); }
    @:pure static inline function SetCloudHatOpacity(opacity: Int): Void { return untyped __lua__('SetCloudHatOpacity')(opacity); }
    @:pure static inline function N_0xf36199225d6d8c86(opacity: Int): Void { return untyped __lua__('N_0xf36199225d6d8c86')(opacity); }
    @:pure static inline function SetCloudHatTransition(type: String, transitionTime: Int): Void { return untyped __lua__('SetCloudHatTransition')(type, transitionTime); }
    
    /**
    * combatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.
    */
    @:pure static inline function SetCombatFloat(ped: Int, combatType: Int, p2: Int): Void { return untyped __lua__('SetCombatFloat')(ped, combatType, p2); }
    
    /**
    * This is for simulating player input.
    * amount is a float value from 0
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function SetControlNormal(inputGroup: Int, control: Int, amount: Int): Int { return untyped __lua__('SetControlNormal')(inputGroup, control, amount); }
    
    /**
    * This is for simulating player input.
    * amount is a float value from 0
    * 0, 1 and 2 used in the scripts. 0 is by far the most common of them.
    */
    @:pure static inline function N_0xe8a25867fba3b05e(inputGroup: Int, control: Int, amount: Int): Int { return untyped __lua__('N_0xe8a25867fba3b05e')(inputGroup, control, amount); }
    @:pure static inline function SetConvertibleRoof(vehicle: Int, p1: Bool): Void { return untyped __lua__('SetConvertibleRoof')(vehicle, p1); }
    @:pure static inline function SetCreateRandomCops(toggle: Bool): Void { return untyped __lua__('SetCreateRandomCops')(toggle); }
    @:pure static inline function SetCreateRandomCopsNotOnScenarios(toggle: Bool): Void { return untyped __lua__('SetCreateRandomCopsNotOnScenarios')(toggle); }
    @:pure static inline function SetCreateRandomCopsOnScenarios(toggle: Bool): Void { return untyped __lua__('SetCreateRandomCopsOnScenarios')(toggle); }
    @:pure static inline function SetCreditsActive(toggle: Bool): Void { return untyped __lua__('SetCreditsActive')(toggle); }
    @:pure static inline function SetCurrentPedVehicleWeapon(ped: Int, weaponHash: EitherType<String, Int>): Int { return untyped __lua__('SetCurrentPedVehicleWeapon')(ped, weaponHash); }
    @:pure static inline function SetCurrentPedWeapon(ped: Int, weaponHash: EitherType<String, Int>, equipNow: Bool): Void { return untyped __lua__('SetCurrentPedWeapon')(ped, weaponHash, equipNow); }
    
    /**
    * Renamed to SET_CURSOR_LOCATION (I previously named it _SET_CURSOR_POSTION) which is the correct name as far as I can tell.
    */
    @:pure static inline function SetCursorLocation(x: Int, y: Int): Int { return untyped __lua__('SetCursorLocation')(x, y); }
    
    /**
    * Renamed to SET_CURSOR_LOCATION (I previously named it _SET_CURSOR_POSTION) which is the correct name as far as I can tell.
    */
    @:pure static inline function N_0xfc695459d4d0e219(x: Int, y: Int): Int { return untyped __lua__('N_0xfc695459d4d0e219')(x, y); }
    
    /**
    * Changes the mouse cursor's sprite.
    * 1 = Normal
    * 6 = Left Arrow
    * 7 = Right Arrow
    */
    @:pure static inline function SetCursorSprite(spriteId: Int): Void { return untyped __lua__('SetCursorSprite')(spriteId); }
    
    /**
    * Changes the mouse cursor's sprite.
    * 1 = Normal
    * 6 = Left Arrow
    * 7 = Right Arrow
    */
    @:pure static inline function N_0x8db8cffd58b62552(spriteId: Int): Void { return untyped __lua__('N_0x8db8cffd58b62552')(spriteId); }
    
    /**
    * Specifies a custom respawn position to be used in conjunction with _SET_NEXT_RESPAWN_TO_CUSTOM
    */
    @:pure static inline function SetCustomRespawnPosition(x: Int, y: Int, z: Int, heading: Int): Void { return untyped __lua__('SetCustomRespawnPosition')(x, y, z, heading); }
    
    /**
    * Specifies a custom respawn position to be used in conjunction with _SET_NEXT_RESPAWN_TO_CUSTOM
    */
    @:pure static inline function N_0x706b5edcaa7fa663(x: Int, y: Int, z: Int, heading: Int): Void { return untyped __lua__('N_0x706b5edcaa7fa663')(x, y, z, heading); }
    
    /**
    * All occurrences found in b617d, sorted alphabetically and identical lines removed:
    * AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_AK");
    * AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_CUSTOM");
    * AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_TOOTHLESS");
    */
    @:pure static inline function SetCutsceneAudioOverride(p0: String): Void { return untyped __lua__('SetCutsceneAudioOverride')(p0); }
    @:pure static inline function SetCutsceneFadeValues(p0: Bool, p1: Bool, p2: Bool, p3: Bool): Void { return untyped __lua__('SetCutsceneFadeValues')(p0, p1, p2, p3); }
    
    /**
    * p3 could be heading. Needs more research.
    */
    @:pure static inline function SetCutsceneOrigin(x: Int, y: Int, z: Int, p3: Int, p4: Int): Void { return untyped __lua__('SetCutsceneOrigin')(x, y, z, p3, p4); }
    @:pure static inline function SetCutscenePedComponentVariation(cutsceneEntName: String, p1: Int, p2: Int, p3: Int, modelHash: EitherType<String, Int>): Void { return untyped __lua__('SetCutscenePedComponentVariation')(cutsceneEntName, p1, p2, p3, modelHash); }
    
    /**
    * Thanks R*! ;)
    * if ((l_161 == 0) || (l_161 == 2)) {
    * sub_2ea27("Trying to set Jimmy prop variation");
    * CUTSCENE::_0546524ADE2E9723("Jimmy_Boston", 1, 0, 0, 0);
    * }
    */
    @:pure static inline function SetCutscenePedPropVariation(cutsceneEntName: String, p1: Int, p2: Int, p3: Int, modelHash: EitherType<String, Int>): Void { return untyped __lua__('SetCutscenePedPropVariation')(cutsceneEntName, p1, p2, p3, modelHash); }
    
    /**
    * Thanks R*! ;)
    * if ((l_161 == 0) || (l_161 == 2)) {
    * sub_2ea27("Trying to set Jimmy prop variation");
    * CUTSCENE::_0546524ADE2E9723("Jimmy_Boston", 1, 0, 0, 0);
    * }
    */
    @:pure static inline function N_0x0546524ade2e9723(cutsceneEntName: String, p1: Int, p2: Int, p3: Int, modelHash: EitherType<String, Int>): Void { return untyped __lua__('N_0x0546524ade2e9723')(cutsceneEntName, p1, p2, p3, modelHash); }
    
    /**
    * Only used twice in R* scripts
    */
    @:pure static inline function SetCutsceneTriggerArea(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Void { return untyped __lua__('SetCutsceneTriggerArea')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function SetDamping(rope: Int, vertex: Int, value: Int): Void { return untyped __lua__('SetDamping')(rope, vertex, value); }
    
    /**
    * NOTE: Debugging functions are not present in the retail version of the game.
    */
    @:pure static inline function SetDebugLinesAndSpheresDrawingActive(enabled: Bool): Void { return untyped __lua__('SetDebugLinesAndSpheresDrawingActive')(enabled); }
    @:pure static inline function SetDecisionMaker(ped: Int, name: EitherType<String, Int>): Void { return untyped __lua__('SetDecisionMaker')(ped, name); }
    
    /**
    * Defines the state of a destructible object.
    * Use the "0xB48FCED898292E52" native to find an object's handle with its name / coords
    * State 2 == object just spawned
    * State 4 == Beginning of the animation
    * State 6 == Start animation
    * State 9 == End of the animation
    */
    @:pure static inline function SetDesObjectState(handle: Int, state: Int): Void { return untyped __lua__('SetDesObjectState')(handle, state); }
    
    /**
    * Defines the state of a destructible object.
    * Use the "0xB48FCED898292E52" native to find an object's handle with its name / coords
    * State 2 == object just spawned
    * State 4 == Beginning of the animation
    * State 6 == Start animation
    * State 9 == End of the animation
    */
    @:pure static inline function N_0x5c29f698d404c5e1(handle: Int, state: Int): Void { return untyped __lua__('N_0x5c29f698d404c5e1')(handle, state); }
    
    /**
    * If toggle is true, hides special ability bar / character name in the pause menu
    * If toggle is false, shows special ability bar / character name in the pause menu
    */
    @:pure static inline function SetDirectorMode(toggle: Bool): Void { return untyped __lua__('SetDirectorMode')(toggle); }
    
    /**
    * If toggle is true, hides special ability bar / character name in the pause menu
    * If toggle is false, shows special ability bar / character name in the pause menu
    */
    @:pure static inline function N_0x808519373fd336a3(toggle: Bool): Void { return untyped __lua__('N_0x808519373fd336a3')(toggle); }
    @:pure static inline function SetDisableAmbientMeleeMove(player: Int, toggle: Bool): Void { return untyped __lua__('SetDisableAmbientMeleeMove')(player, toggle); }
    @:pure static inline function SetDisableBreaking(rope: Int, enabled: Bool): Int { return untyped __lua__('SetDisableBreaking')(rope, enabled); }
    
    /**
    * sometimes used used with NET_TO_OBJ
    * hash collision last 2 words
    */
    @:pure static inline function SetDisableFragDamage(object: Int, toggle: Bool): Void { return untyped __lua__('SetDisableFragDamage')(object, toggle); }
    @:pure static inline function SetDisableVehiclePetrolTankDamage(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetDisableVehiclePetrolTankDamage')(vehicle, toggle); }
    @:pure static inline function SetDisableVehiclePetrolTankFires(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetDisableVehiclePetrolTankFires')(vehicle, toggle); }
    @:pure static inline function N_0x465bf26ab9684352(vehicle: Int, toggle: Bool): Void { return untyped __lua__('N_0x465bf26ab9684352')(vehicle, toggle); }
    @:pure static inline function SetDispatchCopsForPlayer(player: Int, toggle: Bool): Void { return untyped __lua__('SetDispatchCopsForPlayer')(player, toggle); }
    @:pure static inline function SetDispatchIdealSpawnDistance(p0: Int): Void { return untyped __lua__('SetDispatchIdealSpawnDistance')(p0); }
    @:pure static inline function SetDispatchTimeBetweenSpawnAttempts(p0: Int, p1: Int): Void { return untyped __lua__('SetDispatchTimeBetweenSpawnAttempts')(p0, p1); }
    @:pure static inline function SetDispatchTimeBetweenSpawnAttemptsMultiplier(p0: Int, p1: Int): Void { return untyped __lua__('SetDispatchTimeBetweenSpawnAttemptsMultiplier')(p0, p1); }
    
    /**
    * This is a NOP function. It does nothing at all.
    */
    @:pure static inline function SetDitchPoliceModels(toggle: Bool): Void { return untyped __lua__('SetDitchPoliceModels')(toggle); }
    
    /**
    * Sets the acceleration limit of a door.
    * How fast it can open, or the inverse hinge resistance.
    * A limit of 0 seems to lock doors.
    * p2 is always 0, p3 is always 1.
    */
    @:pure static inline function SetDoorAccelerationLimit(doorHash: EitherType<String, Int>, limit: Int, p2: Bool, p3: Bool): Void { return untyped __lua__('SetDoorAccelerationLimit')(doorHash, limit, p2, p3); }
    
    /**
    * Sets the acceleration limit of a door.
    * How fast it can open, or the inverse hinge resistance.
    * A limit of 0 seems to lock doors.
    * p2 is always 0, p3 is always 1.
    */
    @:pure static inline function N_0x6bab9442830c7f53(doorHash: EitherType<String, Int>, limit: Int, p2: Bool, p3: Bool): Void { return untyped __lua__('N_0x6bab9442830c7f53')(doorHash, limit, p2, p3); }
    
    /**
    * Sets the ajar angle of a door.
    * Ranges from -1.0 to 1.0, and 0.0 is closed / default.
    * p2 is always 0, p3 is always 1.
    */
    @:pure static inline function SetDoorAjarAngle(doorHash: EitherType<String, Int>, ajar: Int, p2: Bool, p3: Bool): Void { return untyped __lua__('SetDoorAjarAngle')(doorHash, ajar, p2, p3); }
    
    /**
    * Sets the ajar angle of a door.
    * Ranges from -1.0 to 1.0, and 0.0 is closed / default.
    * p2 is always 0, p3 is always 1.
    */
    @:pure static inline function N_0xb6e6fba95c7324ac(doorHash: EitherType<String, Int>, ajar: Int, p2: Bool, p3: Bool): Void { return untyped __lua__('N_0xb6e6fba95c7324ac')(doorHash, ajar, p2, p3); }
    
    /**
    * Sets the on-screen drawing origin for draw-functions (which is normally x=0,y=0 in the upper left corner of the screen) to a world coordinate.
    * From now on, the screen coordinate which displays the given world coordinate on the screen is seen as x=0,y=0.
    * Example in C#:
    * Vector3 boneCoord = somePed.GetBoneCoord(Bone.SKEL_Head);
    * Function.Call(Hash.SET_DRAW_ORIGIN, boneCoord.X, boneCoord.Y, boneCoord.Z, 0);
    * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, -0.015, 0.013, 0.013, 0.0, 255, 0, 0, 200);
    * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, -0.015, 0.013, 0.013, 90.0, 255, 0, 0, 200);
    * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, 0.015, 0.013, 0.013, 270.0, 255, 0, 0, 200);
    * Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, 0.015, 0.013, 0.013, 180.0, 255, 0, 0, 200);
    * Function.Call(Hash.CLEAR_DRAW_ORIGIN);
    * Result: www11.pic-upload.de/19.06.15/bkqohvil2uao.jpg
    * If the pedestrian starts walking around now, the sprites are always around her head, no matter where the head is displayed on the screen.
    * This function also effects the drawing of texts and other UI-elements.
    * The effect can be reset by calling GRAPHICS::CLEAR_DRAW_ORIGIN().
    */
    @:pure static inline function SetDrawOrigin(x: Int, y: Int, z: Int, p3: Int): Void { return untyped __lua__('SetDrawOrigin')(x, y, z, p3); }
    @:pure static inline function SetDriveTaskCruiseSpeed(driver: Int, cruiseSpeed: Int): Void { return untyped __lua__('SetDriveTaskCruiseSpeed')(driver, cruiseSpeed); }
    
    /**
    * This native is used to set the driving style for specific ped.
    * Driving styles id seems to be:
    * 786468
    * 262144
    * 786469
    * http://gtaforums.com/topic/822314-guide-driving-styles/
    */
    @:pure static inline function SetDriveTaskDrivingStyle(ped: Int, drivingStyle: Int): Void { return untyped __lua__('SetDriveTaskDrivingStyle')(ped, drivingStyle); }
    @:pure static inline function SetDriveTaskMaxCruiseSpeed(p0: Int, p1: Int): Void { return untyped __lua__('SetDriveTaskMaxCruiseSpeed')(p0, p1); }
    
    /**
    * For p1 &amp; p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives.
    */
    @:pure static inline function SetDrivebyTaskTarget(shootingPed: Int, targetPed: Int, targetVehicle: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('SetDrivebyTaskTarget')(shootingPed, targetPed, targetVehicle, x, y, z); }
    
    /**
    * The function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all.
    */
    @:pure static inline function SetDriverAbility(driver: Int, ability: Int): Void { return untyped __lua__('SetDriverAbility')(driver, ability); }
    
    /**
    * range 0.0f - 1.0f
    */
    @:pure static inline function SetDriverAggressiveness(driver: Int, aggressiveness: Int): Void { return untyped __lua__('SetDriverAggressiveness')(driver, aggressiveness); }
    @:pure static inline function SetEmitterRadioStation(emitterName: String, radioStation: String): Void { return untyped __lua__('SetEmitterRadioStation')(emitterName, radioStation); }
    @:pure static inline function SetEnableBoundAnkles(ped: Int, toggle: Bool): Void { return untyped __lua__('SetEnableBoundAnkles')(ped, toggle); }
    
    /**
    * ped can not pull out a weapon when true
    */
    @:pure static inline function SetEnableHandcuffs(ped: Int, toggle: Bool): Void { return untyped __lua__('SetEnableHandcuffs')(ped, toggle); }
    @:pure static inline function SetEnablePedEnveffScale(ped: Int, toggle: Bool): Void { return untyped __lua__('SetEnablePedEnveffScale')(ped, toggle); }
    
    /**
    * Enables diving motion when underwater.
    */
    @:pure static inline function SetEnableScuba(ped: Int, toggle: Bool): Void { return untyped __lua__('SetEnableScuba')(ped, toggle); }
    
    /**
    * skin - everything alpha except skin
    * Set entity alpha level. Ranging from 0 to 255 but chnages occur after every 20 percent (after every 51).
    */
    @:pure static inline function SetEntityAlpha(entity: Int, alphaLevel: Int, skin: Bool): Void { return untyped __lua__('SetEntityAlpha')(entity, alphaLevel, skin); }
    @:pure static inline function SetEntityAlwaysPrerender(entity: Int, toggle: Bool): Void { return untyped __lua__('SetEntityAlwaysPrerender')(entity, toggle); }
    
    /**
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    */
    @:pure static inline function SetEntityAnimCurrentTime(entity: Int, animDictionary: String, animName: String, time: Int): Void { return untyped __lua__('SetEntityAnimCurrentTime')(entity, animDictionary, animName, time); }
    
    /**
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    */
    @:pure static inline function SetEntityAnimSpeed(entity: Int, animDictionary: String, animName: String, speedMultiplier: Int): Void { return untyped __lua__('SetEntityAnimSpeed')(entity, animDictionary, animName, speedMultiplier); }
    
    /**
    * Makes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.
    * p1 has no effect when either its on or off
    * maybe a quick disassembly will tell us what it does
    * p2 has no effect when either its on or off
    * maybe a quick disassembly will tell us what it does
    */
    @:pure static inline function SetEntityAsMissionEntity(entity: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('SetEntityAsMissionEntity')(entity, p1, p2); }
    
    /**
    * Marks the specified entity (ped, vehicle or object) as no longer needed.
    * Entities marked as no longer needed, will be deleted as the engine sees fit.
    */
    @:pure static inline function SetEntityAsNoLongerNeeded(entity: Int): Void { return untyped __lua__('SetEntityAsNoLongerNeeded')(entity); }
    @:pure static inline function SetEntityCanBeDamaged(entity: Int, toggle: Bool): Void { return untyped __lua__('SetEntityCanBeDamaged')(entity, toggle); }
    @:pure static inline function SetEntityCanBeDamagedByRelationshipGroup(entity: Int, bCanBeDamaged: Bool, relGroup: Int): Void { return untyped __lua__('SetEntityCanBeDamagedByRelationshipGroup')(entity, bCanBeDamaged, relGroup); }
    
    /**
    * Sets whether the entity can be targeted without being in line-of-sight.
    */
    @:pure static inline function SetEntityCanBeTargetedWithoutLos(entity: Int, toggle: Bool): Void { return untyped __lua__('SetEntityCanBeTargetedWithoutLos')(entity, toggle); }
    @:pure static inline function SetEntityCollision(entity: Int, toggle: Bool, keepPhysics: Bool): Void { return untyped __lua__('SetEntityCollision')(entity, toggle, keepPhysics); }
    
    /**
    * p7 is always 1 in the scripts. Set to 1, an area around the destination coords for the moved entity is cleared from other entities.
    * Often ends with 1, 0, 0, 1); in the scripts. It works.
    * Axis - Invert Axis Flags
    */
    @:pure static inline function SetEntityCoords(entity: Int, xPos: Int, yPos: Int, zPos: Int, xAxis: Bool, yAxis: Bool, zAxis: Bool, clearArea: Bool): Void { return untyped __lua__('SetEntityCoords')(entity, xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea); }
    
    /**
    * Axis - Invert Axis Flags
    */
    @:pure static inline function SetEntityCoordsNoOffset(entity: Int, xPos: Int, yPos: Int, zPos: Int, xAxis: Bool, yAxis: Bool, zAxis: Bool): Void { return untyped __lua__('SetEntityCoordsNoOffset')(entity, xPos, yPos, zPos, xAxis, yAxis, zAxis); }
    
    /**
    * does the same as SET_ENTITY_COORDS.
    * Console Hash: 0x749B282E
    */
    @:pure static inline function SetEntityCoords_2(entity: Int, xPos: Int, yPos: Int, zPos: Int, xAxis: Bool, yAxis: Bool, zAxis: Bool, clearArea: Bool): Void { return untyped __lua__('SetEntityCoords_2')(entity, xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea); }
    @:pure static inline function SetEntityDynamic(entity: Int, toggle: Bool): Void { return untyped __lua__('SetEntityDynamic')(entity, toggle); }
    @:pure static inline function SetEntityHasGravity(entity: Int, toggle: Bool): Void { return untyped __lua__('SetEntityHasGravity')(entity, toggle); }
    @:pure static inline function SetEntityHeading(entity: Int, heading: Int): Void { return untyped __lua__('SetEntityHeading')(entity, heading); }
    
    /**
    * health &gt;= 0
    */
    @:pure static inline function SetEntityHealth(entity: Int, health: Int): Void { return untyped __lua__('SetEntityHealth')(entity, health); }
    @:pure static inline function SetEntityIconColor(entity: Int, red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('SetEntityIconColor')(entity, red, green, blue, alpha); }
    @:pure static inline function SetEntityIconVisibility(entity: Int, toggle: Bool): Void { return untyped __lua__('SetEntityIconVisibility')(entity, toggle); }
    
    /**
    * Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won't apply either.
    * If you use this for a ped and you want Ragdoll to stay enabled, then do:
    * *(DWORD *)(pedAddress + 0x188) |= (1 &lt;&lt; 9);
    * Use this if you want to get the invincibility status:
    * bool IsPedInvincible(Ped ped)
    * {
    * auto addr = getScriptHandleBaseAddress(ped);
    * if (addr)
    * {
    * DWORD flag = *(DWORD *)(addr + 0x188);
    * return ((flag &amp; (1 &lt;&lt; 8)) != 0) || ((flag &amp; (1 &lt;&lt; 9)) != 0);
    * }
    * return false;
    * }
    */
    @:pure static inline function SetEntityInvincible(entity: Int, toggle: Bool): Void { return untyped __lua__('SetEntityInvincible')(entity, toggle); }
    @:pure static inline function SetEntityIsTargetPriority(entity: Int, p1: Bool, p2: Int): Void { return untyped __lua__('SetEntityIsTargetPriority')(entity, p1, p2); }
    @:pure static inline function SetEntityLights(entity: Int, toggle: Bool): Void { return untyped __lua__('SetEntityLights')(entity, toggle); }
    @:pure static inline function SetEntityLoadCollisionFlag(entity: Int, toggle: Bool): Void { return untyped __lua__('SetEntityLoadCollisionFlag')(entity, toggle); }
    @:pure static inline function SetEntityLocallyInvisible(entity: Int): Void { return untyped __lua__('SetEntityLocallyInvisible')(entity); }
    @:pure static inline function SetEntityLocallyVisible(entity: Int): Void { return untyped __lua__('SetEntityLocallyVisible')(entity); }
    
    /**
    * LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
    */
    @:pure static inline function SetEntityLodDist(entity: Int, value: Int): Void { return untyped __lua__('SetEntityLodDist')(entity, value); }
    
    /**
    * For instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849
    */
    @:pure static inline function SetEntityMaxHealth(entity: Int, value: Int): Void { return untyped __lua__('SetEntityMaxHealth')(entity, value); }
    @:pure static inline function SetEntityMaxSpeed(entity: Int, speed: Int): Void { return untyped __lua__('SetEntityMaxSpeed')(entity, speed); }
    @:pure static inline function SetEntityMotionBlur(entity: Int, toggle: Bool): Void { return untyped __lua__('SetEntityMotionBlur')(entity, toggle); }
    
    /**
    * Calling this function, regardless of the "unknown" value, disabled collision between two entities.
    * Importance of entity1 and 2 order is unclear.
    */
    @:pure static inline function SetEntityNoCollisionEntity(entity1: Int, entity2: Int, unknown: Bool): Void { return untyped __lua__('SetEntityNoCollisionEntity')(entity1, entity2, unknown); }
    @:pure static inline function SetEntityOnlyDamagedByPlayer(entity: Int, toggle: Bool): Void { return untyped __lua__('SetEntityOnlyDamagedByPlayer')(entity, toggle); }
    @:pure static inline function SetEntityOnlyDamagedByRelationshipGroup(entity: Int, p1: Bool, p2: Int): Void { return untyped __lua__('SetEntityOnlyDamagedByRelationshipGroup')(entity, p1, p2); }
    
    /**
    * Enable / disable each type of damage.
    * Can't get drownProof to work.
    * --------------
    * p7 is to to '1' in am_mp_property_ext/int: entity::set_entity_proofs(uParam0-&gt;f_19, true, true, true, true, true, true, 1, true);
    */
    @:pure static inline function SetEntityProofs(entity: Int, bulletProof: Bool, fireProof: Bool, explosionProof: Bool, collisionProof: Bool, meleeProof: Bool, p6: Bool, p7: Bool, drownProof: Bool): Void { return untyped __lua__('SetEntityProofs')(entity, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, p6, p7, drownProof); }
    
    /**
    * w is the correct parameter name!
    */
    @:pure static inline function SetEntityQuaternion(entity: Int, x: Int, y: Int, z: Int, w: Int): Void { return untyped __lua__('SetEntityQuaternion')(entity, x, y, z, w); }
    @:pure static inline function SetEntityRecordsCollisions(entity: Int, toggle: Bool): Void { return untyped __lua__('SetEntityRecordsCollisions')(entity, toggle); }
    @:pure static inline function SetEntityRenderScorched(entity: Int, toggle: Bool): Void { return untyped __lua__('SetEntityRenderScorched')(entity, toggle); }
    
    /**
    * rotationOrder refers to the order yaw pitch roll is applied
    * value ranges from 0 to 5. What you use for rotationOrder when setting must be the same as rotationOrder when getting the rotation.
    * Unsure what value corresponds to what rotation order, more testing will be needed for that.
    * For the most part R* uses 1 or 2 as the order.
    * p5 is usually set as true
    */
    @:pure static inline function SetEntityRotation(entity: Int, pitch: Int, roll: Int, yaw: Int, rotationOrder: Int, p5: Bool): Void { return untyped __lua__('SetEntityRotation')(entity, pitch, roll, yaw, rotationOrder, p5); }
    
    /**
    * what does this native do?
    * bool IsEntitySomething(Entity entity)
    * {
    * auto addr = getScriptHandleBaseAddress(entity);
    * printf("addr: 0x%X \n", addr);
    * if (addr)
    * {
    * DWORD flag = *(DWORD *)(addr + 0x48D);
    * printf("flag: 0x%X \n", flag);
    * return ((flag &amp; (1 &lt;&lt; 3)) != 0) || ((flag &amp; (1 &lt;&lt; 30)) != 0);
    * }
    * return false;
    * }
    * wot ?
    */
    @:pure static inline function SetEntitySomething(entity: Int, toggle: Bool): Void { return untyped __lua__('SetEntitySomething')(entity, toggle); }
    
    /**
    * what does this native do?
    * bool IsEntitySomething(Entity entity)
    * {
    * auto addr = getScriptHandleBaseAddress(entity);
    * printf("addr: 0x%X \n", addr);
    * if (addr)
    * {
    * DWORD flag = *(DWORD *)(addr + 0x48D);
    * printf("flag: 0x%X \n", flag);
    * return ((flag &amp; (1 &lt;&lt; 3)) != 0) || ((flag &amp; (1 &lt;&lt; 30)) != 0);
    * }
    * return false;
    * }
    * wot ?
    */
    @:pure static inline function N_0x3910051ccecdb00c(entity: Int, toggle: Bool): Void { return untyped __lua__('N_0x3910051ccecdb00c')(entity, toggle); }
    
    /**
    * what does this native do?
    * bool IsEntitySomething(Entity entity)
    * {
    * auto addr = getScriptHandleBaseAddress(entity);
    * printf("addr: 0x%X \n", addr);
    * if (addr)
    * {
    * DWORD flag = *(DWORD *)(addr + 0x48D);
    * printf("flag: 0x%X \n", flag);
    * return ((flag &amp; (1 &lt;&lt; 3)) != 0) || ((flag &amp; (1 &lt;&lt; 30)) != 0);
    * }
    * return false;
    * }
    * wot ?
    */
    @:pure static inline function SetEntityRegister(entity: Int, toggle: Bool): Void { return untyped __lua__('SetEntityRegister')(entity, toggle); }
    
    /**
    * Example here: www.gtaforums.com/topic/830463-help-with-turning-lights-green-and-causing-peds-to-crash-into-each-other/#entry1068211340
    * 0 = green
    * 1 = red
    * 2 = yellow
    * changing lights may not change the behavior of vehicles
    */
    @:pure static inline function SetEntityTrafficlightOverride(entity: Int, state: Int): Void { return untyped __lua__('SetEntityTrafficlightOverride')(entity, state); }
    
    /**
    * Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
    */
    @:pure static inline function SetEntityVelocity(entity: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('SetEntityVelocity')(entity, x, y, z); }
    
    /**
    * unk was always 0.
    */
    @:pure static inline function SetEntityVisible(entity: Int, toggle: Bool, unk: Bool): Void { return untyped __lua__('SetEntityVisible')(entity, toggle, unk); }
    @:pure static inline function SetEntityVisibleInCutscene(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('SetEntityVisibleInCutscene')(p0, p1, p2); }
    @:pure static inline function SetEveryoneIgnorePlayer(player: Int, toggle: Bool): Void { return untyped __lua__('SetEveryoneIgnorePlayer')(player, toggle); }
    
    /**
    * In appcamera.c4, Line 106:
    * if (VEHICLE::IS_VEHICLE_DRIVEABLE(PED::SET_EXCLUSIVE_PHONE_RELATIONSHIPS(PLAYER::PLAYER_PED_ID()), 0))
    * So return type could be a vehicle?
    * !Hash collision - gets the vehicle handle from ped which is about entering the vehicle!
    * sfink: agreed, 100%
    * Proper name is GET_VEHICLE_PED_IS_ENTERING
    */
    @:pure static inline function SetExclusivePhoneRelationships(ped: Int): Int { return untyped __lua__('SetExclusivePhoneRelationships')(ped); }
    
    /**
    * Groups found in the scripts used with this native:
    * "AMMUNATION",
    * "QUARRY",
    * "Triathlon_1",
    * "Triathlon_2",
    * "Triathlon_3"
    */
    @:pure static inline function SetExclusiveScenarioGroup(scenarioGroup: String): Void { return untyped __lua__('SetExclusiveScenarioGroup')(scenarioGroup); }
    @:pure static inline function SetExplosiveAmmoThisFrame(player: Int): Int { return untyped __lua__('SetExplosiveAmmoThisFrame')(player); }
    @:pure static inline function SetExplosiveMeleeThisFrame(player: Int): Int { return untyped __lua__('SetExplosiveMeleeThisFrame')(player); }
    @:pure static inline function SetFacialIdleAnimOverride(ped: Int, animName: String, animDict: String): Void { return untyped __lua__('SetFacialIdleAnimOverride')(ped, animName, animDict); }
    
    /**
    * Sets whether the game should fade in after the player dies or is arrested.
    */
    @:pure static inline function SetFadeInAfterDeathArrest(toggle: Bool): Void { return untyped __lua__('SetFadeInAfterDeathArrest')(toggle); }
    @:pure static inline function SetFadeInAfterLoad(toggle: Bool): Void { return untyped __lua__('SetFadeInAfterLoad')(toggle); }
    
    /**
    * Sets whether the game should fade out after the player is arrested.
    */
    @:pure static inline function SetFadeOutAfterArrest(toggle: Bool): Void { return untyped __lua__('SetFadeOutAfterArrest')(toggle); }
    
    /**
    * Sets whether the game should fade out after the player dies.
    */
    @:pure static inline function SetFadeOutAfterDeath(toggle: Bool): Void { return untyped __lua__('SetFadeOutAfterDeath')(toggle); }
    
    /**
    * Sets a visually fake wanted level on the user interface. Used by Rockstar's scripts to "override" regular wanted levels and make custom ones while the real wanted level and multipliers are ignored.
    * Max is 5, anything above this makes it just 5. Also the mini-map gets the red &amp; blue flashing effect. I wish I could use this to fake I had 6 stars like a few of the old GTAs'
    */
    @:pure static inline function SetFakeWantedLevel(fakeWantedLevel: Int): Void { return untyped __lua__('SetFakeWantedLevel')(fakeWantedLevel); }
    @:pure static inline function SetFarDrawVehicles(toggle: Bool): Void { return untyped __lua__('SetFarDrawVehicles')(toggle); }
    
    /**
    * When this is set to ON, shadows only draw as you get nearer.
    * When OFF, they draw from a further distance.
    */
    @:pure static inline function SetFarShadowsSuppressed(toggle: Bool): Void { return untyped __lua__('SetFarShadowsSuppressed')(toggle); }
    @:pure static inline function SetFireAmmoThisFrame(player: Int): Int { return untyped __lua__('SetFireAmmoThisFrame')(player); }
    
    /**
    * Purpose of p0 and p1 unknown.
    */
    @:pure static inline function SetFlash(p0: Int, p1: Int, fadeIn: Int, duration: Int, fadeOut: Int): Void { return untyped __lua__('SetFlash')(p0, p1, fadeIn, duration, fadeOut); }
    @:pure static inline function SetFlashLightFadeDistance(distance: Int): Int { return untyped __lua__('SetFlashLightFadeDistance')(distance); }
    
    /**
    * Override the area where the camera will render the terrain.
    * p3, p4 and p5 are usually set to 0.0
    */
    @:pure static inline function SetFocusArea(x: Int, y: Int, z: Int, offsetX: Int, offsetY: Int, offsetZ: Int): Void { return untyped __lua__('SetFocusArea')(x, y, z, offsetX, offsetY, offsetZ); }
    
    /**
    * It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
    */
    @:pure static inline function SetFocusEntity(entity: Int): Void { return untyped __lua__('SetFocusEntity')(entity); }
    
    /**
    * From the b617d scripts:
    * CAM::SET_FOLLOW_PED_CAM_CUTSCENE_CHAT("FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA", 0);
    * CAM::SET_FOLLOW_PED_CAM_CUTSCENE_CHAT("FOLLOW_PED_ON_EXILE1_LADDER_CAMERA", 1500);
    * CAM::SET_FOLLOW_PED_CAM_CUTSCENE_CHAT("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
    * CAM::SET_FOLLOW_PED_CAM_CUTSCENE_CHAT("FOLLOW_PED_SKY_DIVING_CAMERA", 3000);
    * CAM::SET_FOLLOW_PED_CAM_CUTSCENE_CHAT("FOLLOW_PED_SKY_DIVING_FAMILY5_CAMERA", 0);
    * CAM::SET_FOLLOW_PED_CAM_CUTSCENE_CHAT("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
    */
    @:pure static inline function SetFollowPedCamCutsceneChat(p0: String, p1: Int): Int { return untyped __lua__('SetFollowPedCamCutsceneChat')(p0, p1); }
    
    /**
    * Sets the type of Player camera:
    * 0 - Third Person Close
    * 1 - Third Person Mid
    * 2 - Third Person Far
    * 4 - First Person
    */
    @:pure static inline function SetFollowPedCamViewMode(viewMode: Int): Void { return untyped __lua__('SetFollowPedCamViewMode')(viewMode); }
    
    /**
    * Sets the type of Player camera in vehicles:
    * 0 - Third Person Close
    * 1 - Third Person Mid
    * 2 - Third Person Far
    * 4 - First Person
    */
    @:pure static inline function SetFollowVehicleCamViewMode(viewMode: Int): Void { return untyped __lua__('SetFollowVehicleCamViewMode')(viewMode); }
    @:pure static inline function SetFollowVehicleCamZoomLevel(zoomLevel: Int): Void { return untyped __lua__('SetFollowVehicleCamZoomLevel')(zoomLevel); }
    @:pure static inline function SetForceHdVehicle(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetForceHdVehicle')(vehicle, toggle); }
    @:pure static inline function N_0x97ce68cb032583f0(vehicle: Int, toggle: Bool): Void { return untyped __lua__('N_0x97ce68cb032583f0')(vehicle, toggle); }
    @:pure static inline function SetForceObjectThisFrame(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('SetForceObjectThisFrame')(p0, p1, p2, p3); }
    
    /**
    * Forces footstep tracks on all surfaces.
    */
    @:pure static inline function SetForcePedFootstepsTracks(toggle: Bool): Void { return untyped __lua__('SetForcePedFootstepsTracks')(toggle); }
    
    /**
    * Forces vehicle trails on all surfaces.
    */
    @:pure static inline function SetForceVehicleTrails(toggle: Bool): Void { return untyped __lua__('SetForceVehicleTrails')(toggle); }
    @:pure static inline function SetFrontendActive(active: Bool): Void { return untyped __lua__('SetFrontendActive')(active); }
    @:pure static inline function SetFrontendRadioActive(active: Bool): Void { return untyped __lua__('SetFrontendRadioActive')(active); }
    @:pure static inline function SetFrozenRenderingDisabled(enabled: Bool): Void { return untyped __lua__('SetFrozenRenderingDisabled')(enabled); }
    @:pure static inline function EnableGameplayCam(enabled: Bool): Void { return untyped __lua__('EnableGameplayCam')(enabled); }
    
    /**
    * Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe
    */
    @:pure static inline function SetGamePaused(toggle: Bool): Void { return untyped __lua__('SetGamePaused')(toggle); }
    @:pure static inline function SetGamePausesForStreaming(toggle: Bool): Void { return untyped __lua__('SetGamePausesForStreaming')(toggle); }
    @:pure static inline function SetGameplayCamRawPitch(pitch: Int): Void { return untyped __lua__('SetGameplayCamRawPitch')(pitch); }
    
    /**
    * Does nothing
    */
    @:pure static inline function SetGameplayCamRawYaw(yaw: Int): Void { return untyped __lua__('SetGameplayCamRawYaw')(yaw); }
    
    /**
    * Sets the camera position relative to heading in float from -360 to +360.
    * Heading is alwyas 0 in aiming camera.
    */
    @:pure static inline function SetGameplayCamRelativeHeading(heading: Int): Void { return untyped __lua__('SetGameplayCamRelativeHeading')(heading); }
    
    /**
    * Sets the camera pitch.
    * Parameters:
    * x = pitches the camera on the x axis.
    * Value2 = always seems to be hex 0x3F800000 (1.000000 float).
    */
    @:pure static inline function SetGameplayCamRelativePitch(x: Int, Value2: Int): Int { return untyped __lua__('SetGameplayCamRelativePitch')(x, Value2); }
    
    /**
    * Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script "drunk_controller.ysc.c4" to simulate making the player drunk.
    */
    @:pure static inline function SetGameplayCamShakeAmplitude(amplitude: Int): Void { return untyped __lua__('SetGameplayCamShakeAmplitude')(amplitude); }
    @:pure static inline function SetGameplayCoordHint(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Void { return untyped __lua__('SetGameplayCoordHint')(p0, p1, p2, p3, p4, p5, p6); }
    
    /**
    * p6 &amp; p7 - possibly length or time
    */
    @:pure static inline function SetGameplayEntityHint(entity: Int, xOffset: Int, yOffset: Int, zOffset: Int, p4: Bool, p5: Int, p6: Int, p7: Int, p8: Int): Void { return untyped __lua__('SetGameplayEntityHint')(entity, xOffset, yOffset, zOffset, p4, p5, p6, p7, p8); }
    @:pure static inline function SetGameplayHintFov(FOV: Int): Void { return untyped __lua__('SetGameplayHintFov')(FOV); }
    @:pure static inline function SetGameplayObjectHint(p0: Int, p1: Int, p2: Int, p3: Int, p4: Bool, p5: Int, p6: Int, p7: Int): Void { return untyped __lua__('SetGameplayObjectHint')(p0, p1, p2, p3, p4, p5, p6, p7); }
    @:pure static inline function SetGameplayPedHint(p0: Int, x1: Int, y1: Int, z1: Int, p4: Bool, p5: Int, p6: Int, p7: Int): Void { return untyped __lua__('SetGameplayPedHint')(p0, x1, y1, z1, p4, p5, p6, p7); }
    @:pure static inline function SetGameplayVehicleHint(p0: Int, p1: Int, p2: Int, p3: Int, p4: Bool, p5: Int, p6: Int, p7: Int): Void { return untyped __lua__('SetGameplayVehicleHint')(p0, p1, p2, p3, p4, p5, p6, p7); }
    @:pure static inline function SetGarbageTrucks(toggle: Bool): Int { return untyped __lua__('SetGarbageTrucks')(toggle); }
    
    /**
    * Needs to be looped! And yes, it does work and is not a hash collision.
    * Birds will try to reach the given height.
    */
    @:pure static inline function SetGlobalMinBirdFlightHeight(height: Int): Void { return untyped __lua__('SetGlobalMinBirdFlightHeight')(height); }
    @:pure static inline function SetGpsActive(active: Bool): Void { return untyped __lua__('SetGpsActive')(active); }
    @:pure static inline function SetGpsDisabledZone(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Void { return untyped __lua__('SetGpsDisabledZone')(p0, p1, p2, p3, p4, p5); }
    
    /**
    * Only the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS.
    * Doesn't seem like the flags are actually read by the game at all.
    */
    @:pure static inline function SetGpsFlags(p0: Int, p1: Int): Void { return untyped __lua__('SetGpsFlags')(p0, p1); }
    @:pure static inline function SetGpsFlashes(toggle: Bool): Void { return untyped __lua__('SetGpsFlashes')(toggle); }
    
    /**
    * level can be from 0 to 3
    * 0: 9.8
    * 1: 2.4
    * 2: 0.1 - very low
    * 3: 0.0
    * //SuckMyCoke
    */
    @:pure static inline function SetGravityLevel(level: Int): Void { return untyped __lua__('SetGravityLevel')(level); }
    
    /**
    * 0: Default
    * 1: Circle Around Leader
    * 2: Alternative Circle Around Leader
    * 3: Line, with Leader at center
    */
    @:pure static inline function SetGroupFormation(groupId: Int, formationType: Int): Void { return untyped __lua__('SetGroupFormation')(groupId, formationType); }
    @:pure static inline function SetGroupFormationSpacing(groupId: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('SetGroupFormationSpacing')(groupId, p1, p2, p3); }
    
    /**
    * Sets the range at which members will automatically leave the group.
    */
    @:pure static inline function SetGroupSeparationRange(groupHandle: Int, separationRange: Int): Void { return untyped __lua__('SetGroupSeparationRange')(groupHandle, separationRange); }
    @:pure static inline function SetHdArea(x: Int, y: Int, z: Int, ground: Int): Void { return untyped __lua__('SetHdArea')(x, y, z, ground); }
    
    /**
    * Equivalent of SET_HELI_BLADES_SPEED(vehicleHandle, 1.0f);
    */
    @:pure static inline function SetHeliBladesFullSpeed(vehicle: Int): Void { return untyped __lua__('SetHeliBladesFullSpeed')(vehicle); }
    
    /**
    * Sets the speed of the helicopter blades in percentage of the full speed.
    * vehicleHandle: The helicopter.
    * speed: The speed in percentage, 0.0f being 0% and 1.0f being 100%.
    */
    @:pure static inline function SetHeliBladesSpeed(vehicle: Int, speed: Int): Void { return untyped __lua__('SetHeliBladesSpeed')(vehicle, speed); }
    
    /**
    * value between 0.0 and 1.0
    */
    @:pure static inline function SetHelicopterRollPitchYawMult(helicopter: Int, multiplier: Int): Void { return untyped __lua__('SetHelicopterRollPitchYawMult')(helicopter, multiplier); }
    
    /**
    * Makes the ped ragdoll like when falling from a great height
    */
    @:pure static inline function SetHighFallTask(ped: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('SetHighFallTask')(ped, p1, p2, p3); }
    @:pure static inline function SetHornEnabled(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetHornEnabled')(vehicle, toggle); }
    
    /**
    * HUD colors and their values: pastebin.com/d9aHPbXN
    */
    @:pure static inline function SetHudColour(hudColorIndex: Int, r: Int, g: Int, b: Int, a: Int): Void { return untyped __lua__('SetHudColour')(hudColorIndex, r, g, b, a); }
    
    /**
    * HUD colors and their values: pastebin.com/d9aHPbXN
    */
    @:pure static inline function N_0xf314cf4f0211894e(hudColorIndex: Int, r: Int, g: Int, b: Int, a: Int): Void { return untyped __lua__('N_0xf314cf4f0211894e')(hudColorIndex, r, g, b, a); }
    
    /**
    * HUD colors and their values: pastebin.com/d9aHPbXN
    * --------------------------------------------------
    * makes hudColorIndex2 color into hudColorIndex color
    */
    @:pure static inline function SetHudColoursSwitch(hudColorIndex: Int, hudColorIndex2: Int): Void { return untyped __lua__('SetHudColoursSwitch')(hudColorIndex, hudColorIndex2); }
    
    /**
    * HUD colors and their values: pastebin.com/d9aHPbXN
    * --------------------------------------------------
    * makes hudColorIndex2 color into hudColorIndex color
    */
    @:pure static inline function N_0x1ccc708f0f850613(hudColorIndex: Int, hudColorIndex2: Int): Void { return untyped __lua__('N_0x1ccc708f0f850613')(hudColorIndex, hudColorIndex2); }
    @:pure static inline function SetHudComponentPosition(id: Int, x: Int, y: Int): Void { return untyped __lua__('SetHudComponentPosition')(id, x, y); }
    @:pure static inline function SetIgnoreLowPriorityShockingEvents(player: Int, toggle: Bool): Void { return untyped __lua__('SetIgnoreLowPriorityShockingEvents')(player, toggle); }
    @:pure static inline function SetIgnoreNoGpsFlag(ignore: Bool): Void { return untyped __lua__('SetIgnoreNoGpsFlag')(ignore); }
    @:pure static inline function SetIkTarget(ped: Int, p1: Int, targetPed: Int, boneLookAt: Int, x: Int, y: Int, z: Int, p7: Int, duration: Int, duration1: Int): Void { return untyped __lua__('SetIkTarget')(ped, p1, targetPed, boneLookAt, x, y, z, p7, duration, duration1); }
    @:pure static inline function SetInitialPlayerStation(radioStation: String): Void { return untyped __lua__('SetInitialPlayerStation')(radioStation); }
    @:pure static inline function SetInputExclusive(inputGroup: Int, control: Int): Void { return untyped __lua__('SetInputExclusive')(inputGroup, control); }
    @:pure static inline function SetInteriorActive(interiorID: Int, toggle: Bool): Void { return untyped __lua__('SetInteriorActive')(interiorID, toggle); }
    @:pure static inline function SetLastDrivenVehicle(vehicle: Int): Void { return untyped __lua__('SetLastDrivenVehicle')(vehicle); }
    @:pure static inline function N_0xacfb2463cc22bed2(vehicle: Int): Void { return untyped __lua__('N_0xacfb2463cc22bed2')(vehicle); }
    
    /**
    * Initializes the text entry for the the text next to a loading prompt. All natives for for building UI texts can be used here
    * e.g
    * void StartLoadingMessage(char *text, int spinnerType = 3)
    * {
    * _SET_LOADING_PROMPT_TEXT_ENTRY("STRING");
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * _SHOW_LOADING_PROMPT(spinnerType);
    * }
    *  -- [[OR]]
    * void ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000)
    * {
    * _SET_LOADING_PROMPT_TEXT_ENTRY("STRING");
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * _SHOW_LOADING_PROMPT(spinnerType);
    * WAIT(timeMs);
    * _REMOVE_LOADING_PROMPT();
    * }
    * These are some localized strings used in the loading spinner.
    * "PM_WAIT"                   = Please Wait
    * "CELEB_WPLYRS"              = Waiting For Players.
    * "CELL_SPINNER2"             = Scanning storage.
    * "ERROR_CHECKYACHTNAME" = Registering your yacht's name. Please wait.
    * "ERROR_CHECKPROFANITY"   = Checking your text for profanity. Please wait.
    * "FM_COR_AUTOD"                        = Just spinner no text
    * "FM_IHELP_WAT2"                        = Waiting for other players
    * "FM_JIP_WAITO"                            = Game options are being set
    * "FMMC_DOWNLOAD"                    = Downloading
    * "FMMC_PLYLOAD"                         = Loading
    * "FMMC_STARTTRAN"                    = Launching session
    * "HUD_QUITTING"                           =  Quiting session
    * "KILL_STRIP_IDM"                         = Waiting for to accept
    * "MP_SPINLOADING"                      = Loading
    */
    @:pure static inline function SetLoadingPromptTextEntry(string: String): Void { return untyped __lua__('SetLoadingPromptTextEntry')(string); }
    
    /**
    * Initializes the text entry for the the text next to a loading prompt. All natives for for building UI texts can be used here
    * e.g
    * void StartLoadingMessage(char *text, int spinnerType = 3)
    * {
    * _SET_LOADING_PROMPT_TEXT_ENTRY("STRING");
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * _SHOW_LOADING_PROMPT(spinnerType);
    * }
    *  -- [[OR]]
    * void ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000)
    * {
    * _SET_LOADING_PROMPT_TEXT_ENTRY("STRING");
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * _SHOW_LOADING_PROMPT(spinnerType);
    * WAIT(timeMs);
    * _REMOVE_LOADING_PROMPT();
    * }
    * These are some localized strings used in the loading spinner.
    * "PM_WAIT"                   = Please Wait
    * "CELEB_WPLYRS"              = Waiting For Players.
    * "CELL_SPINNER2"             = Scanning storage.
    * "ERROR_CHECKYACHTNAME" = Registering your yacht's name. Please wait.
    * "ERROR_CHECKPROFANITY"   = Checking your text for profanity. Please wait.
    * "FM_COR_AUTOD"                        = Just spinner no text
    * "FM_IHELP_WAT2"                        = Waiting for other players
    * "FM_JIP_WAITO"                            = Game options are being set
    * "FMMC_DOWNLOAD"                    = Downloading
    * "FMMC_PLYLOAD"                         = Loading
    * "FMMC_STARTTRAN"                    = Launching session
    * "HUD_QUITTING"                           =  Quiting session
    * "KILL_STRIP_IDM"                         = Waiting for to accept
    * "MP_SPINLOADING"                      = Loading
    */
    @:pure static inline function N_0xaba17d7ce615adbf(string: String): Void { return untyped __lua__('N_0xaba17d7ce615adbf')(string); }
    @:pure static inline function SetLocalPlayerInvisibleLocally(p0: Bool): Void { return untyped __lua__('SetLocalPlayerInvisibleLocally')(p0); }
    @:pure static inline function SetLocalPlayerVisibleInCutscene(p0: Bool, p1: Bool): Void { return untyped __lua__('SetLocalPlayerVisibleInCutscene')(p0, p1); }
    @:pure static inline function SetLocalPlayerVisibleLocally(p0: Bool): Void { return untyped __lua__('SetLocalPlayerVisibleLocally')(p0); }
    
    /**
    * If toggle is true, the map is shown in full screen
    * If toggle is false, the map is shown in normal mode
    */
    @:pure static inline function SetMapFullScreen(toggle: Bool): Void { return untyped __lua__('SetMapFullScreen')(toggle); }
    
    /**
    * If toggle is true, the map is shown in full screen
    * If toggle is false, the map is shown in normal mode
    */
    @:pure static inline function N_0x5354c5ba2ea868a4(toggle: Bool): Void { return untyped __lua__('N_0x5354c5ba2ea868a4')(toggle); }
    @:pure static inline function SetMaxWantedLevel(maxWantedLevel: Int): Void { return untyped __lua__('SetMaxWantedLevel')(maxWantedLevel); }
    
    /**
    * If this is the correct name, what microphone? I know your TV isn't going to reach out and adjust your headset so..
    */
    @:pure static inline function SetMicrophonePosition(p0: Bool, x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, x3: Int, y3: Int, z3: Int): Void { return untyped __lua__('SetMicrophonePosition')(p0, x1, y1, z1, x2, y2, z2, x3, y3, z3); }
    @:pure static inline function SetMinigameInProgress(toggle: Bool): Void { return untyped __lua__('SetMinigameInProgress')(toggle); }
    
    /**
    * Argument must be 0.0f or above 38.0f, or it will be ignored.
    */
    @:pure static inline function SetMinimapAttitudeIndicatorLevel(altitude: Int, p1: Bool): Void { return untyped __lua__('SetMinimapAttitudeIndicatorLevel')(altitude, p1); }
    @:pure static inline function SetMinimapBlockWaypoint(toggle: Bool): Void { return untyped __lua__('SetMinimapBlockWaypoint')(toggle); }
    
    /**
    * Please change to void.
    * p2 appears to be always -1.
    */
    @:pure static inline function SetMinimapComponent(p0: Int, p1: Bool, p2: Int): Int { return untyped __lua__('SetMinimapComponent')(p0, p1, p2); }
    
    /**
    * If true, the entire map will be revealed.
    */
    @:pure static inline function SetMinimapRevealed(toggle: Bool): Void { return untyped __lua__('SetMinimapRevealed')(toggle); }
    
    /**
    * If true, the entire map will be revealed.
    */
    @:pure static inline function N_0xf8dee0a5600cbb93(toggle: Bool): Void { return untyped __lua__('N_0xf8dee0a5600cbb93')(toggle); }
    
    /**
    * If true, the player can't save the game.
    * If the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all.
    * ^ also, if the mission flag is already set, the function does nothing at all
    */
    @:pure static inline function SetMissionFlag(toggle: Bool): Void { return untyped __lua__('SetMissionFlag')(toggle); }
    @:pure static inline function SetMissionName(p0: Bool, name: String): Void { return untyped __lua__('SetMissionName')(p0, name); }
    
    /**
    * p1 is always 0
    */
    @:pure static inline function SetMissionTrainAsNoLongerNeeded(p1: Bool): Int { return untyped __lua__('SetMissionTrainAsNoLongerNeeded')(p1); }
    @:pure static inline function SetMissionTrainCoords(train: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('SetMissionTrainCoords')(train, x, y, z); }
    @:pure static inline function SetMobilePhonePosition(posX: Int, posY: Int, posZ: Int): Void { return untyped __lua__('SetMobilePhonePosition')(posX, posY, posZ); }
    @:pure static inline function SetMobilePhoneRadioState(state: Bool): Void { return untyped __lua__('SetMobilePhoneRadioState')(state); }
    
    /**
    * Last parameter is unknown and always zero.
    */
    @:pure static inline function SetMobilePhoneRotation(rotX: Int, rotY: Int, rotZ: Int, p3: Int): Void { return untyped __lua__('SetMobilePhoneRotation')(rotX, rotY, rotZ, p3); }
    
    /**
    * The minimum/default is 500.0f. If you plan to make it bigger set it's position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you'd need to call it everytime before you re-open the phone.
    */
    @:pure static inline function SetMobilePhoneScale(scale: Int): Void { return untyped __lua__('SetMobilePhoneScale')(scale); }
    
    /**
    * Enables Radio on phone.
    */
    @:pure static inline function SetMobileRadioEnabledDuringGameplay(Toggle: Bool): Void { return untyped __lua__('SetMobileRadioEnabledDuringGameplay')(Toggle); }
    
    /**
    * Unloads model from memory
    */
    @:pure static inline function SetModelAsNoLongerNeeded(model: EitherType<String, Int>): Void { return untyped __lua__('SetModelAsNoLongerNeeded')(model); }
    @:pure static inline function SetModelHeadlightConfiguration(modelHash: EitherType<String, Int>, ratePerSecond: Int, headlightRotation: Int, invertRotation: Bool): Void { return untyped __lua__('SetModelHeadlightConfiguration')(modelHash, ratePerSecond, headlightRotation, invertRotation); }
    
    /**
    * Note: Look in decompiled scripts and the times that p1 and p2 aren't 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa.
    */
    @:pure static inline function SetMountedWeaponTarget(shootingPed: Int, targetPed: Int, targetVehicle: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('SetMountedWeaponTarget')(shootingPed, targetPed, targetVehicle, x, y, z); }
    
    /**
    * Sets flag's sprite transparency. 0-255.
    */
    @:pure static inline function SetMpGamerTagAlpha(gamerTagId: Int, component: Int, alpha: Int): Void { return untyped __lua__('SetMpGamerTagAlpha')(gamerTagId, component, alpha); }
    
    /**
    * Sets flag's sprite transparency. 0-255.
    */
    @:pure static inline function N_0xd48fe545cd46f857(gamerTagId: Int, component: Int, alpha: Int): Void { return untyped __lua__('N_0xd48fe545cd46f857')(gamerTagId, component, alpha); }
    
    /**
    * Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
    */
    @:pure static inline function SetMpGamerTagColour(gamerTagId: Int, flag: Int, color: Int): Void { return untyped __lua__('SetMpGamerTagColour')(gamerTagId, flag, color); }
    
    /**
    * Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
    */
    @:pure static inline function N_0x613ed644950626ae(gamerTagId: Int, flag: Int, color: Int): Void { return untyped __lua__('N_0x613ed644950626ae')(gamerTagId, flag, color); }
    
    /**
    * Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
    * Should be enabled as flag (2). Has 0 opacity by default.
    * - This was _SET_MP_GAMER_TAG_HEALTH_BAR_COLOR,
    */
    @:pure static inline function SetMpGamerTagHealthBarColour(headDisplayId: Int, color: Int): Void { return untyped __lua__('SetMpGamerTagHealthBarColour')(headDisplayId, color); }
    
    /**
    * Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
    * Should be enabled as flag (2). Has 0 opacity by default.
    * - This was _SET_MP_GAMER_TAG_HEALTH_BAR_COLOR,
    */
    @:pure static inline function N_0x3158c77a7e888ab4(headDisplayId: Int, color: Int): Void { return untyped __lua__('N_0x3158c77a7e888ab4')(headDisplayId, color); }
    
    /**
    * Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
    * Should be enabled as flag (2). Has 0 opacity by default.
    * - This was _SET_MP_GAMER_TAG_HEALTH_BAR_COLOR,
    */
    @:pure static inline function SetMpGamerTagHealthBarColor(headDisplayId: Int, color: Int): Void { return untyped __lua__('SetMpGamerTagHealthBarColor')(headDisplayId, color); }
    @:pure static inline function SetMpGamerTagName(gamerTagId: Int, string: String): Void { return untyped __lua__('SetMpGamerTagName')(gamerTagId, string); }
    @:pure static inline function N_0xdea2b8283baa3944(gamerTagId: Int, string: String): Void { return untyped __lua__('N_0xdea2b8283baa3944')(gamerTagId, string); }
    
    /**
    * enum MpGamerTagComponent
    * {
    * GAMER_NAME = 0,
    * CREW_TAG,
    * healthArmour,
    * BIG_TEXT,
    * AUDIO_ICON,
    * MP_USING_MENU,
    * MP_PASSIVE_MODE,
    * WANTED_STARS,
    * MP_DRIVER,
    * MP_CO_DRIVER,
    * MP_TAGGED,
    * GAMER_NAME_NEARBY,
    * ARROW,
    * MP_PACKAGES,
    * INV_IF_PED_FOLLOWING,
    * RANK_TEXT,
    * MP_TYPING
    * };
    */
    @:pure static inline function SetMpGamerTagVisibility(gamerTagId: Int, component: Int, toggle: Bool): Void { return untyped __lua__('SetMpGamerTagVisibility')(gamerTagId, component, toggle); }
    
    /**
    * enum MpGamerTagComponent
    * {
    * GAMER_NAME = 0,
    * CREW_TAG,
    * healthArmour,
    * BIG_TEXT,
    * AUDIO_ICON,
    * MP_USING_MENU,
    * MP_PASSIVE_MODE,
    * WANTED_STARS,
    * MP_DRIVER,
    * MP_CO_DRIVER,
    * MP_TAGGED,
    * GAMER_NAME_NEARBY,
    * ARROW,
    * MP_PACKAGES,
    * INV_IF_PED_FOLLOWING,
    * RANK_TEXT,
    * MP_TYPING
    * };
    */
    @:pure static inline function N_0x63bb75abedc1f6a0(gamerTagId: Int, component: Int, toggle: Bool): Void { return untyped __lua__('N_0x63bb75abedc1f6a0')(gamerTagId, component, toggle); }
    
    /**
    * displays wanted star above head
    */
    @:pure static inline function SetMpGamerTagWantedLevel(gamerTagId: Int, wantedlvl: Int): Void { return untyped __lua__('SetMpGamerTagWantedLevel')(gamerTagId, wantedlvl); }
    
    /**
    * displays wanted star above head
    */
    @:pure static inline function N_0xcf228e2aa03099c3(gamerTagId: Int, wantedlvl: Int): Void { return untyped __lua__('N_0xcf228e2aa03099c3')(gamerTagId, wantedlvl); }
    @:pure static inline function SetMultiplayerBankCash(): Void { return untyped __lua__('SetMultiplayerBankCash')(); }
    @:pure static inline function SetMultiplayerHudCash(p0: Int, p1: Int): Void { return untyped __lua__('SetMultiplayerHudCash')(p0, p1); }
    
    /**
    * Whether or not another player is allowed to take control of the entity
    */
    @:pure static inline function SetNetworkIdCanMigrate(netId: Int, toggle: Bool): Void { return untyped __lua__('SetNetworkIdCanMigrate')(netId, toggle); }
    @:pure static inline function SetNetworkIdExistsOnAllMachines(netId: Int, toggle: Bool): Void { return untyped __lua__('SetNetworkIdExistsOnAllMachines')(netId, toggle); }
    
    /**
    * not tested....
    */
    @:pure static inline function SetNetworkIdSyncToPlayer(netId: Int, player: Int, toggle: Bool): Void { return untyped __lua__('SetNetworkIdSyncToPlayer')(netId, player, toggle); }
    
    /**
    * not tested....
    */
    @:pure static inline function N_0xa8a024587329f36a(netId: Int, player: Int, toggle: Bool): Void { return untyped __lua__('N_0xa8a024587329f36a')(netId, player, toggle); }
    @:pure static inline function SetNetworkIdVisibleInCutscene(netId: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('SetNetworkIdVisibleInCutscene')(netId, p1, p2); }
    @:pure static inline function SetNetworkVehicleRespotTimer(netId: Int, p1: Int): Void { return untyped __lua__('SetNetworkVehicleRespotTimer')(netId, p1); }
    @:pure static inline function SetNewWaypoint(x: Int, y: Int): Void { return untyped __lua__('SetNewWaypoint')(x, y); }
    
    /**
    * Not used in the scripts.
    * Bullshit! It's used in spawn_activities
    */
    @:pure static inline function SetNextDesiredMoveState(p0: Int): Void { return untyped __lua__('SetNextDesiredMoveState')(p0); }
    
    /**
    * Sets the next spawn location to the position supplied to _SET_CUSTOM_RESPAWN_POSITION.
    */
    @:pure static inline function SetNextRespawnToCustom(): Void { return untyped __lua__('SetNextRespawnToCustom')(); }
    
    /**
    * Sets the next spawn location to the position supplied to _SET_CUSTOM_RESPAWN_POSITION.
    */
    @:pure static inline function N_0xa2716d40842eaf79(): Void { return untyped __lua__('N_0xa2716d40842eaf79')(); }
    
    /**
    * Enables Night Vision.
    * Example:
    * C#: Function.Call(Hash.SET_NIGHTVISION, true);
    * C++: GRAPHICS::SET_NIGHTVISION(true);
    * BOOL toggle:
    * true = turns night vision on for your player.
    * false = turns night vision off for your player.
    */
    @:pure static inline function SetNightvision(toggle: Bool): Void { return untyped __lua__('SetNightvision')(toggle); }
    @:pure static inline function SetNoLoadingScreen(toggle: Bool): Void { return untyped __lua__('SetNoLoadingScreen')(toggle); }
    @:pure static inline function SetNoiseoveride(toggle: Bool): Void { return untyped __lua__('SetNoiseoveride')(toggle); }
    @:pure static inline function SetNoisinessoveride(value: Int): Void { return untyped __lua__('SetNoisinessoveride')(value); }
    
    /**
    * Toggles the North Yankton map
    */
    @:pure static inline function SetNorthYanktonMap(toggle: Bool): Void { return untyped __lua__('SetNorthYanktonMap')(toggle); }
    
    /**
    * Toggles the North Yankton map
    */
    @:pure static inline function SetDrawMapVisible(toggle: Bool): Void { return untyped __lua__('SetDrawMapVisible')(toggle); }
    
    /**
    * From the decompiled scripts:
    * UI::_92F0DA1E27DB96DC(6);
    * UI::_92F0DA1E27DB96DC(184);
    * UI::_92F0DA1E27DB96DC(190);
    * sets background color for the next notification
    * 6 = red
    * 184 = green
    * 190 = yellow
    * this seems to set the alpha to 255 automatically, if you have a work around let me know
    */
    @:pure static inline function SetNotificationBackgroundColor(hudIndex: Int): Void { return untyped __lua__('SetNotificationBackgroundColor')(hudIndex); }
    
    /**
    * From the decompiled scripts:
    * UI::_92F0DA1E27DB96DC(6);
    * UI::_92F0DA1E27DB96DC(184);
    * UI::_92F0DA1E27DB96DC(190);
    * sets background color for the next notification
    * 6 = red
    * 184 = green
    * 190 = yellow
    * this seems to set the alpha to 255 automatically, if you have a work around let me know
    */
    @:pure static inline function N_0x92f0da1e27db96dc(hudIndex: Int): Void { return untyped __lua__('N_0x92f0da1e27db96dc')(hudIndex); }
    
    /**
    * sets font color for the next notification
    */
    @:pure static inline function SetNotificationColorNext(p0: Int): Void { return untyped __lua__('SetNotificationColorNext')(p0); }
    
    /**
    * sets font color for the next notification
    */
    @:pure static inline function N_0x39bbf623fc803eac(p0: Int): Void { return untyped __lua__('N_0x39bbf623fc803eac')(p0); }
    
    /**
    * sets color for notification flash
    */
    @:pure static inline function SetNotificationFlashColor(red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('SetNotificationFlashColor')(red, green, blue, alpha); }
    
    /**
    * sets color for notification flash
    */
    @:pure static inline function N_0x17430b918701c342(red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('N_0x17430b918701c342')(red, green, blue, alpha); }
    
    /**
    * List of picNames: pastebin.com/XdpJVbHz
    * flash is a bool for fading in.
    * iconTypes:
    * 1 : Chat Box
    * 2 : Email
    * 3 : Add Friend Request
    * 4 : Nothing
    * 5 : Nothing
    * 6 : Nothing
    * 7 : Right Jumping Arrow
    * 8 : RP Icon
    * 9 : $ Icon
    * "sender" is the very top header. This can be any old string.
    * "subject" is the header under the sender.
    */
    @:pure static inline function SetNotificationMessage(picName1: String, picName2: String, flash: Bool, iconType: Int, sender: String, subject: String): Int { return untyped __lua__('SetNotificationMessage')(picName1, picName2, flash, iconType, sender, subject); }
    
    /**
    * List of picNames pastebin.com/XdpJVbHz
    * flash is a bool for fading in.
    * iconTypes:
    * 1 : Chat Box
    * 2 : Email
    * 3 : Add Friend Request
    * 4 : Nothing
    * 5 : Nothing
    * 6 : Nothing
    * 7 : Right Jumping Arrow
    * 8 : RP Icon
    * 9 : $ Icon
    * "sender" is the very top header. This can be any old string.
    * "subject" is the header under the sender.
    * "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
    * "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
    */
    @:pure static inline function SetNotificationMessageClanTag(picName1: String, picName2: String, flash: Bool, iconType: Int, sender: String, subject: String, duration: Int, clanTag: String): Int { return untyped __lua__('SetNotificationMessageClanTag')(picName1, picName2, flash, iconType, sender, subject, duration, clanTag); }
    
    /**
    * List of picNames: pastebin.com/XdpJVbHz
    * flash is a bool for fading in.
    * iconTypes:
    * 1 : Chat Box
    * 2 : Email
    * 3 : Add Friend Request
    * 4 : Nothing
    * 5 : Nothing
    * 6 : Nothing
    * 7 : Right Jumping Arrow
    * 8 : RP Icon
    * 9 : $ Icon
    * "sender" is the very top header. This can be any old string.
    * "subject" is the header under the sender.
    * "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
    * "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
    * iconType2 is a mirror of iconType. It shows in the "subject" line, right under the original iconType.
    * int IconNotification(char *text, char *text2, char *Subject)
    * {
    * _SET_NOTIFICATION_TEXT_ENTRY("STRING");
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * _SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 1, 7, text2, Subject, 1.0f, "__EXAMPLE", 7);
    * return _DRAW_NOTIFICATION(1, 1);
    * }
    */
    @:pure static inline function SetNotificationMessageClanTag_2(picName1: String, picName2: String, flash: Bool, iconType1: Int, sender: String, subject: String, duration: Int, clanTag: String, iconType2: Int, p9: Int): Int { return untyped __lua__('SetNotificationMessageClanTag_2')(picName1, picName2, flash, iconType1, sender, subject, duration, clanTag, iconType2, p9); }
    
    /**
    * List of picNames: pastebin.com/XdpJVbHz
    */
    @:pure static inline function SetNotificationMessage_2(p0: String, p1: Int, p2: Int, p3: Int, p4: Bool, picName1: String, picName2: String): Int { return untyped __lua__('SetNotificationMessage_2')(p0, p1, p2, p3, p4, picName1, picName2); }
    
    /**
    * List of picNames: pastebin.com/XdpJVbHz
    */
    @:pure static inline function N_0x2b7e9a4eaaa93c89(p0: String, p1: Int, p2: Int, p3: Int, p4: Bool, picName1: String, picName2: String): Int { return untyped __lua__('N_0x2b7e9a4eaaa93c89')(p0, p1, p2, p3, p4, picName1, picName2); }
    
    /**
    * Needs more research.
    * Only one type of usage in the scripts:
    * UI::_C6F580E4C94926AC("CHAR_ACTING_UP", "CHAR_ACTING_UP", 0, 0, "DI_FEED_CHAR", a_0);
    */
    @:pure static inline function SetNotificationMessage_3(picName1: String, picName2: String, p2: Bool, p3: Int, p4: String, p5: String): Int { return untyped __lua__('SetNotificationMessage_3')(picName1, picName2, p2, p3, p4, p5); }
    
    /**
    * Needs more research.
    * Only one type of usage in the scripts:
    * UI::_C6F580E4C94926AC("CHAR_ACTING_UP", "CHAR_ACTING_UP", 0, 0, "DI_FEED_CHAR", a_0);
    */
    @:pure static inline function N_0xc6f580e4c94926ac(picName1: String, picName2: String, p2: Bool, p3: Int, p4: String, p5: String): Int { return untyped __lua__('N_0xc6f580e4c94926ac')(picName1, picName2, p2, p3, p4, p5); }
    
    /**
    * NOTE: 'duration' is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
    * Example, only occurrence in the scripts:
    * v_8 = UI::_1E6611149DB3DB6B("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 0, 0, &amp;v_9, "", a_5);
    */
    @:pure static inline function SetNotificationMessage_4(picName1: String, picName2: String, flash: Bool, iconType: Int, sender: String, subject: String, duration: Int): Int { return untyped __lua__('SetNotificationMessage_4')(picName1, picName2, flash, iconType, sender, subject, duration); }
    
    /**
    * NOTE: 'duration' is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
    * Example, only occurrence in the scripts:
    * v_8 = UI::_1E6611149DB3DB6B("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 0, 0, &amp;v_9, "", a_5);
    */
    @:pure static inline function N_0x1e6611149db3db6b(picName1: String, picName2: String, flash: Bool, iconType: Int, sender: String, subject: String, duration: Int): Int { return untyped __lua__('N_0x1e6611149db3db6b')(picName1, picName2, flash, iconType, sender, subject, duration); }
    
    /**
    * Declares the entry type of a notification, for example "STRING".
    * int ShowNotification(char *text)
    * {
    * _SET_NOTIFICATION_TEXT_ENTRY("STRING");
    * ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
    * return _DRAW_NOTIFICATION(1, 1);
    * }
    */
    @:pure static inline function SetNotificationTextEntry(type: String): Void { return untyped __lua__('SetNotificationTextEntry')(type); }
    @:pure static inline function SetNuiFocus(hasFocus: Bool, hasCursor: Bool): Void { return untyped __lua__('SetNuiFocus')(hasFocus, hasCursor); }
    @:pure static inline function SetNumberOfParkedVehicles(value: Int): Int { return untyped __lua__('SetNumberOfParkedVehicles')(value); }
    
    /**
    * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
    */
    @:pure static inline function SetObjectAsNoLongerNeeded(object: Int): Void { return untyped __lua__('SetObjectAsNoLongerNeeded')(object); }
    
    /**
    * Adjust the physics parameters of a prop, or otherwise known as "object". This is useful for simulated gravity.
    * Other parameters seem to be unknown.
    * p2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?
    * p3: seems similar to p2
    * p4: makes obj fall slower the higher the value
    * p5: similar to p4
    */
    @:pure static inline function SetObjectPhysicsParams(object: Int, weight: Int, p2: Int, p3: Int, p4: Int, p5: Int, gravity: Int, p7: Int, p8: Int, p9: Int, p10: Int, buoyancy: Int): Void { return untyped __lua__('SetObjectPhysicsParams')(object, weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy); }
    @:pure static inline function SetObjectTargettable(object: Int, targettable: Bool): Int { return untyped __lua__('SetObjectTargettable')(object, targettable); }
    
    /**
    * enum ObjectPaintVariants
    * {
    * Pacific = 0,
    * Azure = 1,
    * Nautical = 2,
    * Continental = 3,
    * Battleship = 4,
    * Intrepid = 5,
    * Uniform = 6,
    * Classico = 7,
    * Mediterranean = 8,
    * Command = 9,
    * Mariner = 10,
    * Ruby = 11,
    * Vintage = 12,
    * Pristine = 13,
    * Merchant = 14,
    * Voyager = 15
    * };
    */
    @:pure static inline function SetObjectTextureVariant(object: Int, paintIndex: Int): Void { return untyped __lua__('SetObjectTextureVariant')(object, paintIndex); }
    
    /**
    * enum ObjectPaintVariants
    * {
    * Pacific = 0,
    * Azure = 1,
    * Nautical = 2,
    * Continental = 3,
    * Battleship = 4,
    * Intrepid = 5,
    * Uniform = 6,
    * Classico = 7,
    * Mediterranean = 8,
    * Command = 9,
    * Mariner = 10,
    * Ruby = 11,
    * Vintage = 12,
    * Pristine = 13,
    * Merchant = 14,
    * Voyager = 15
    * };
    */
    @:pure static inline function N_0x971da0055324d033(object: Int, paintIndex: Int): Void { return untyped __lua__('N_0x971da0055324d033')(object, paintIndex); }
    
    /**
    * Appears to have an optional bool parameter that is unused in the scripts.
    * If you pass true, something will be set to zero.
    */
    @:pure static inline function SetOverrideWeather(weatherType: String): Void { return untyped __lua__('SetOverrideWeather')(weatherType); }
    
    /**
    * p0 always seems to be 0
    * duration in milliseconds
    * frequency should range from about 10 (slow vibration) to 255 (very fast)
    * appears to be a hash collision, though it does do what it says
    * example:
    * SET_PAD_SHAKE(0, 100, 200);
    */
    @:pure static inline function SetPadShake(p0: Int, duration: Int, frequency: Int): Void { return untyped __lua__('SetPadShake')(p0, duration, frequency); }
    @:pure static inline function SetParachuteTaskTarget(ped: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('SetParachuteTaskTarget')(ped, x, y, z); }
    @:pure static inline function SetParachuteTaskThrust(ped: Int, thrust: Int): Void { return untyped __lua__('SetParachuteTaskThrust')(ped, thrust); }
    @:pure static inline function SetParkedVehicleDensityMultiplierThisFrame(multiplier: Int): Void { return untyped __lua__('SetParkedVehicleDensityMultiplierThisFrame')(multiplier); }
    
    /**
    * console hash: 0xC92719A7
    */
    @:pure static inline function SetParticleFxAssetOldToNew(oldAsset: String, newAsset: String): Void { return untyped __lua__('SetParticleFxAssetOldToNew')(oldAsset, newAsset); }
    
    /**
    * console hash: 0xC92719A7
    */
    @:pure static inline function SetPtfxAssetOld_2New(oldAsset: String, newAsset: String): Void { return untyped __lua__('SetPtfxAssetOld_2New')(oldAsset, newAsset); }
    
    /**
    * hash collision
    */
    @:pure static inline function SetParticleFxBloodScale(p0: Bool): Void { return untyped __lua__('SetParticleFxBloodScale')(p0); }
    @:pure static inline function SetParticleFxCamInsideNonplayerVehicle(p0: Int, p1: Bool): Void { return untyped __lua__('SetParticleFxCamInsideNonplayerVehicle')(p0, p1); }
    @:pure static inline function SetParticleFxCamInsideVehicle(p0: Bool): Void { return untyped __lua__('SetParticleFxCamInsideVehicle')(p0); }
    @:pure static inline function SetParticleFxLoopedAlpha(ptfxHandle: Int, alpha: Int): Void { return untyped __lua__('SetParticleFxLoopedAlpha')(ptfxHandle, alpha); }
    
    /**
    * only works on some fx's
    * p4 = 0
    */
    @:pure static inline function SetParticleFxLoopedColour(ptfxHandle: Int, r: Int, g: Int, b: Int, p4: Bool): Void { return untyped __lua__('SetParticleFxLoopedColour')(ptfxHandle, r, g, b, p4); }
    @:pure static inline function SetParticleFxLoopedEvolution(ptfxHandle: Int, propertyName: String, amount: Int, Id: Bool): Void { return untyped __lua__('SetParticleFxLoopedEvolution')(ptfxHandle, propertyName, amount, Id); }
    @:pure static inline function SetParticleFxLoopedOffsets(ptfxHandle: Int, x: Int, y: Int, z: Int, rotX: Int, rotY: Int, rotZ: Int): Void { return untyped __lua__('SetParticleFxLoopedOffsets')(ptfxHandle, x, y, z, rotX, rotY, rotZ); }
    @:pure static inline function SetParticleFxLoopedRange(ptfxHandle: Int, range: Int): Void { return untyped __lua__('SetParticleFxLoopedRange')(ptfxHandle, range); }
    @:pure static inline function SetParticleFxLoopedScale(ptfxHandle: Int, scale: Int): Void { return untyped __lua__('SetParticleFxLoopedScale')(ptfxHandle, scale); }
    
    /**
    * Usage example for C#:
    * Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f });
    * Note: the argument alpha ranges from 0.0f-1.0f !
    */
    @:pure static inline function SetParticleFxNonLoopedAlpha(alpha: Int): Void { return untyped __lua__('SetParticleFxNonLoopedAlpha')(alpha); }
    
    /**
    * only works on some fx's
    */
    @:pure static inline function SetParticleFxNonLoopedColour(r: Int, g: Int, b: Int): Void { return untyped __lua__('SetParticleFxNonLoopedColour')(r, g, b); }
    @:pure static inline function SetParticleFxShootoutBoat(p0: Int): Void { return untyped __lua__('SetParticleFxShootoutBoat')(p0); }
    @:pure static inline function SetPauseMenuActive(toggle: Bool): Void { return untyped __lua__('SetPauseMenuActive')(toggle); }
    
    /**
    * accuracy = 0-100, 100 being perfectly accurate
    */
    @:pure static inline function SetPedAccuracy(ped: Int, accuracy: Int): Int { return untyped __lua__('SetPedAccuracy')(ped, accuracy); }
    
    /**
    * value ranges from 0 to 3.
    */
    @:pure static inline function SetPedAlertness(ped: Int, value: Int): Void { return untyped __lua__('SetPedAlertness')(ped, value); }
    @:pure static inline function SetPedAllowVehiclesOverride(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedAllowVehiclesOverride')(ped, toggle); }
    @:pure static inline function SetPedAllowedToDuck(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedAllowedToDuck')(ped, toggle); }
    
    /**
    * stance:
    * 0 = idle
    * 1 = walk
    * 2 = running
    * p5 = usually set to true
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    */
    @:pure static inline function SetPedAlternateMovementAnim(ped: Int, stance: Int, animDictionary: String, animationName: String, p4: Int, p5: Bool): Void { return untyped __lua__('SetPedAlternateMovementAnim')(ped, stance, animDictionary, animationName, p4, p5); }
    @:pure static inline function SetPedAlternateWalkAnim(ped: Int, animDict: String, animName: String, p3: Int, p4: Bool): Void { return untyped __lua__('SetPedAlternateWalkAnim')(ped, animDict, animName, p3, p4); }
    @:pure static inline function SetPedAmmo(ped: Int, weaponHash: EitherType<String, Int>, ammo: Int): Void { return untyped __lua__('SetPedAmmo')(ped, weaponHash, ammo); }
    @:pure static inline function SetPedAmmoByType(ped: Int, ammoType: Int, ammo: Int): Void { return untyped __lua__('SetPedAmmoByType')(ped, ammoType, ammo); }
    @:pure static inline function SetPedAmmoToDrop(p0: Int, p1: Int): Void { return untyped __lua__('SetPedAmmoToDrop')(p0, p1); }
    @:pure static inline function SetPedAngledDefensiveArea(ped: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Bool, p9: Bool): Void { return untyped __lua__('SetPedAngledDefensiveArea')(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9); }
    
    /**
    * Sets the armor of the specified ped.
    * ped: The Ped to set the armor of.
    * amount: A value between 0 and 100 indicating the value to set the Ped's armor to.
    */
    @:pure static inline function SetPedArmour(ped: Int, amount: Int): Void { return untyped __lua__('SetPedArmour')(ped, amount); }
    
    /**
    * Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.
    */
    @:pure static inline function SetPedAsCop(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedAsCop')(ped, toggle); }
    @:pure static inline function SetPedAsEnemy(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedAsEnemy')(ped, toggle); }
    @:pure static inline function SetPedAsGroupLeader(ped: Int, groupId: Int): Void { return untyped __lua__('SetPedAsGroupLeader')(ped, groupId); }
    @:pure static inline function SetPedAsGroupMember(ped: Int, groupId: Int): Void { return untyped __lua__('SetPedAsGroupMember')(ped, groupId); }
    
    /**
    * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
    */
    @:pure static inline function SetPedAsNoLongerNeeded(ped: Int): Void { return untyped __lua__('SetPedAsNoLongerNeeded')(ped); }
    @:pure static inline function SetPedBlendFromParents(ped: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('SetPedBlendFromParents')(ped, p1, p2, p3, p4); }
    @:pure static inline function SetPedBoundsOrientation(ped: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Void { return untyped __lua__('SetPedBoundsOrientation')(ped, p1, p2, p3, p4, p5); }
    @:pure static inline function SetPedCanArmIk(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanArmIk')(ped, toggle); }
    @:pure static inline function SetPedCanBeDraggedOut(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanBeDraggedOut')(ped, toggle); }
    
    /**
    * 0 = can (bike)
    * 1 = can't (bike)
    * 2 = unk
    * 3 = unk
    */
    @:pure static inline function SetPedCanBeKnockedOffVehicle(ped: Int, state: Int): Void { return untyped __lua__('SetPedCanBeKnockedOffVehicle')(ped, state); }
    @:pure static inline function SetPedCanBeShotInVehicle(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanBeShotInVehicle')(ped, toggle); }
    @:pure static inline function SetPedCanBeTargetedWhenInjured(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanBeTargetedWhenInjured')(ped, toggle); }
    @:pure static inline function SetPedCanBeTargetedWithoutLos(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanBeTargetedWithoutLos')(ped, toggle); }
    @:pure static inline function SetPedCanBeTargetted(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanBeTargetted')(ped, toggle); }
    @:pure static inline function SetPedCanBeTargettedByPlayer(ped: Int, player: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanBeTargettedByPlayer')(ped, player, toggle); }
    @:pure static inline function SetPedCanBeTargettedByTeam(ped: Int, team: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanBeTargettedByTeam')(ped, team, toggle); }
    
    /**
    * It simply makes the said ped to cower behind cover object(wall, desk, car)
    * Peds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations.
    */
    @:pure static inline function SetPedCanCowerInCover(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanCowerInCover')(ped, toggle); }
    @:pure static inline function SetPedCanEvasiveDive(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanEvasiveDive')(ped, toggle); }
    @:pure static inline function SetPedCanHeadIk(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanHeadIk')(ped, toggle); }
    @:pure static inline function SetPedCanLegIk(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanLegIk')(ped, toggle); }
    @:pure static inline function SetPedCanPeekInCover(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanPeekInCover')(ped, toggle); }
    @:pure static inline function SetPedCanPlayAmbientAnims(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanPlayAmbientAnims')(ped, toggle); }
    @:pure static inline function SetPedCanPlayAmbientBaseAnims(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanPlayAmbientBaseAnims')(ped, toggle); }
    @:pure static inline function SetPedCanPlayGestureAnims(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanPlayGestureAnims')(ped, toggle); }
    
    /**
    * p2 usually 0
    */
    @:pure static inline function SetPedCanPlayVisemeAnims(ped: Int, toggle: Bool, p2: Bool): Void { return untyped __lua__('SetPedCanPlayVisemeAnims')(ped, toggle, p2); }
    @:pure static inline function SetPedCanRagdoll(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanRagdoll')(ped, toggle); }
    @:pure static inline function SetPedCanRagdollFromPlayerImpact(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanRagdollFromPlayerImpact')(ped, toggle); }
    @:pure static inline function SetPedCanSmashGlass(ped: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('SetPedCanSmashGlass')(ped, p1, p2); }
    @:pure static inline function SetPedCanSwitchWeapon(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanSwitchWeapon')(ped, toggle); }
    
    /**
    * This only will teleport the ped to the group leader if the group leader teleports (sets coords).
    * Only works in singleplayer
    */
    @:pure static inline function SetPedCanTeleportToGroupLeader(pedHandle: Int, groupHandle: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanTeleportToGroupLeader')(pedHandle, groupHandle, toggle); }
    @:pure static inline function SetPedCanTorsoIk(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanTorsoIk')(ped, toggle); }
    @:pure static inline function SetPedCanUseAutoConversationLookat(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedCanUseAutoConversationLookat')(ped, toggle); }
    
    /**
    * Overrides the ped's collision capsule radius for the current tick.
    * Must be called every tick to be effective.
    * Setting this to 0.001 will allow warping through some objects.
    */
    @:pure static inline function SetPedCapsule(ped: Int, value: Int): Void { return untyped __lua__('SetPedCapsule')(ped, value); }
    @:pure static inline function SetPedChanceOfFiringBlanks(ped: Int, xBias: Int, yBias: Int): Void { return untyped __lua__('SetPedChanceOfFiringBlanks')(ped, xBias, yBias); }
    @:pure static inline function SetPedClothProne(p0: Int, p1: Int): Void { return untyped __lua__('SetPedClothProne')(p0, p1); }
    @:pure static inline function N_0x82a3d6d9cc2cb8e3(p0: Int, p1: Int): Void { return untyped __lua__('N_0x82a3d6d9cc2cb8e3')(p0, p1); }
    
    /**
    * 100 would equal attack
    * less then 50ish would mean run away
    * Only the values 0, 1 and 2 occur in the decompiled scripts. Most likely refers directly to the values also described in combatbehaviour.meta:
    * 0: CA_Poor
    * 1: CA_Average
    * 2: CA_Professional
    * Tested this and got the same results as the first explanation here. Could not find any difference between 0, 1 and 2.
    */
    @:pure static inline function SetPedCombatAbility(ped: Int, p1: Int): Void { return untyped __lua__('SetPedCombatAbility')(ped, p1); }
    
    /**
    * These combat attributes seem to be the same as the BehaviourFlags from combatbehaviour.meta.
    * So far, these are the equivalents found:
    * enum CombatAttributes
    * {
    * BF_CanUseCover = 0,
    * BF_CanUseVehicles = 1,
    * BF_CanDoDrivebys = 2,
    * BF_CanLeaveVehicle = 3,
    * BF_CanFightArmedPedsWhenNotArmed = 5,
    * BF_CanTauntInVehicle = 20,
    * BF_AlwaysFight = 46,
    * BF_IgnoreTrafficWhenDriving = 52,
    * BF_FreezeMovement = 292,
    * BF_PlayerCanUseFiringWeapons = 1424
    * };
    * 8 = ?
    * 9 = ?
    * 13 = ?
    * 14 ?
    * Research thread: gtaforums.com/topic/833391-researchguide-combat-behaviour-flags/
    */
    @:pure static inline function SetPedCombatAttributes(ped: Int, attributeIndex: Int, enabled: Bool): Void { return untyped __lua__('SetPedCombatAttributes')(ped, attributeIndex, enabled); }
    
    /**
    * 0 - Stationary (Will just stand in place)
    * 1 - Defensive (Will try to find cover and very likely to blind fire)
    * 2 - Offensive (Will attempt to charge at enemy but take cover as well)
    * 3 - Suicidal Offensive (Will try to flank enemy in a suicidal attack)
    */
    @:pure static inline function SetPedCombatMovement(ped: Int, combatMovement: Int): Void { return untyped __lua__('SetPedCombatMovement')(ped, combatMovement); }
    
    /**
    * Only the values 0, 1 and 2 occur in the decompiled scripts. Most likely refers directly to the values also described as AttackRange in combatbehaviour.meta:
    * 0: CR_Near
    * 1: CR_Medium
    * 2: CR_Far
    */
    @:pure static inline function SetPedCombatRange(ped: Int, p1: Int): Void { return untyped __lua__('SetPedCombatRange')(ped, p1); }
    
    /**
    * paletteId/palletColor -  0 to 3.
    * enum PedVariationData
    * {
    * PED_VARIATION_FACE = 0,
    * PED_VARIATION_HEAD = 1,
    * PED_VARIATION_HAIR = 2,
    * PED_VARIATION_TORSO = 3,
    * PED_VARIATION_LEGS = 4,
    * PED_VARIATION_HANDS = 5,
    * PED_VARIATION_FEET = 6,
    * PED_VARIATION_EYES = 7,
    * PED_VARIATION_ACCESSORIES = 8,
    * PED_VARIATION_TASKS = 9,
    * PED_VARIATION_TEXTURES = 10,
    * PED_VARIATION_TORSO2 = 11
    * };
    * Usage:
    * SET_PED_COMPONENT_VARIATION(playerPed, PED_VARIATION_FACE, GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(playerPed, PED_VARIATION_FACE), GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(playerPed, PED_VARIATION_FACE, 0), 2);
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function SetPedComponentVariation(ped: Int, componentId: Int, drawableId: Int, textureId: Int, paletteId: Int): Void { return untyped __lua__('SetPedComponentVariation')(ped, componentId, drawableId, textureId, paletteId); }
    
    /**
    * Research help : pastebin.com/fPL1cSwB
    * New items added with underscore as first char
    * -----------------------------------------------------------------------
    * enum PedConfigFlags
    * {
    * PED_FLAG_CAN_FLY_THRU_WINDSCREEN = 32,
    * PED_FLAG_DIES_BY_RAGDOLL = 33,
    * PED_FLAG_NO_COLLISION = 52,
    * _PED_FLAG_IS_SHOOTING = 58,
    * _PED_FLAG_IS_ON_GROUND = 60,
    * PED_FLAG_NO_COLLIDE = 62,
    * PED_FLAG_DEAD = 71,
    * PED_FLAG_IS_SNIPER_SCOPE_ACTIVE = 72,
    * PED_FLAG_SUPER_DEAD = 73,
    * _PED_FLAG_IS_IN_AIR = 76,
    * PED_FLAG_IS_AIMING = 78,
    * PED_FLAG_DRUNK = 100,
    * _PED_FLAG_IS_NOT_RAGDOLL_AND_NOT_PLAYING_ANIM = 104,
    * PED_FLAG_NO_PLAYER_MELEE = 122,
    * PED_FLAG_NM_MESSAGE_466 = 125,
    * PED_FLAG_INJURED_LIMP = 166,
    * PED_FLAG_INJURED_LIMP_2 = 170,
    * PED_FLAG_INJURED_DOWN = 187,
    * PED_FLAG_SHRINK = 223,
    * PED_FLAG_MELEE_COMBAT = 224,
    * _PED_FLAG_IS_ON_STAIRS = 253,
    * _PED_FLAG_HAS_ONE_LEG_ON_GROUND = 276,
    * PED_FLAG_NO_WRITHE = 281,
    * PED_FLAG_FREEZE = 292,
    * PED_FLAG_IS_STILL = 301,
    * PED_FLAG_NO_PED_MELEE = 314,
    * _PED_SWITCHING_WEAPON = 331,
    * PED_FLAG_ALPHA = 410,
    * };
    * (*) When flagId is set to 33 and the bool value to true, peds will die by starting ragdoll, so you should set this flag to false when you resurrect a ped.
    * When flagId is set to 62 and the boolvalue to false this happens: Ped is taken out of vehicle and can't get back in when jacking their empty vehicle. If in a plane it falls from the sky and crashes. Sometimes peds vehicle continue to drive the route without its driver who's running after.
    * (*)
    * JUMPING CHANGES  60,61,104 TO FALSE
    * BEING ON WATER CHANGES 60,61 TO FALSE AND 65,66,168 TO TRUE
    * FALLING CHANGES 60,61,104,276 TO FALSE AND TO 76 TRUE
    * DYING CHANGES 60,61,104,276* TO FALSE AND (NONE) TO TRUE
    * DYING MAKES 60,61,104 TO FALSE
    * BEING IN A CAR CHANGES 60,79,104 TO FALSE AND 62 TO TRUE
    * (*)Maximum value for flagId is 0x1AA (426) in b944.
    * ID 0xF0 (240) appears to be a special flag which is handled different compared to the others IDs.
    */
    @:pure static inline function SetPedConfigFlag(ped: Int, flagId: Int, value: Bool): Void { return untyped __lua__('SetPedConfigFlag')(ped, flagId, value); }
    
    /**
    * teleports ped to coords along with the vehicle ped is in
    */
    @:pure static inline function SetPedCoordsKeepVehicle(ped: Int, posX: Int, posY: Int, posZ: Int): Void { return untyped __lua__('SetPedCoordsKeepVehicle')(ped, posX, posY, posZ); }
    @:pure static inline function SetPedCoordsNoGang(ped: Int, posX: Int, posY: Int, posZ: Int): Void { return untyped __lua__('SetPedCoordsNoGang')(ped, posX, posY, posZ); }
    
    /**
    * p1: Only "CODE_HUMAN_STAND_COWER" found in the b617d scripts.
    */
    @:pure static inline function SetPedCowerHash(ped: Int, p1: String): Void { return untyped __lua__('SetPedCowerHash')(ped, p1); }
    
    /**
    * Has 5 parameters since latest patches.
    */
    @:pure static inline function SetPedCurrentWeaponVisible(ped: Int, visible: Bool, deselectWeapon: Bool, p3: Bool, p4: Bool): Void { return untyped __lua__('SetPedCurrentWeaponVisible')(ped, visible, deselectWeapon, p3, p4); }
    
    /**
    * Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.
    * collection - PedDecorationCollection filename hash
    * overlay - Item name hash
    * Example:
    * Entry inside "mpbeach_overlays.xml" -
    * &lt;Item&gt;
    * &lt;uvPos x="0.500000" y="0.500000" /&gt;
    * &lt;scale x="0.600000" y="0.500000" /&gt;
    * &lt;rotation value="0.000000" /&gt;
    * &lt;nameHash&gt;FM_Hair_Fuzz&lt;/nameHash&gt;
    * &lt;txdHash&gt;mp_hair_fuzz&lt;/txdHash&gt;
    * &lt;txtHash&gt;mp_hair_fuzz&lt;/txtHash&gt;
    * &lt;zone&gt;ZONE_HEAD&lt;/zone&gt;
    * &lt;type&gt;TYPE_TATTOO&lt;/type&gt;
    * &lt;faction&gt;FM&lt;/faction&gt;
    * &lt;garment&gt;All&lt;/garment&gt;
    * &lt;gender&gt;GENDER_DONTCARE&lt;/gender&gt;
    * &lt;award /&gt;
    * &lt;awardLevel /&gt;
    * &lt;/Item&gt;
    * Code:
    * PED::_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("mpbeach_overlays"), GAMEPLAY::GET_HASH_KEY("fm_hair_fuzz"))
    */
    @:pure static inline function SetPedDecoration(ped: Int, collection: EitherType<String, Int>, overlay: EitherType<String, Int>): Void { return untyped __lua__('SetPedDecoration')(ped, collection, overlay); }
    
    /**
    * Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.
    * collection - PedDecorationCollection filename hash
    * overlay - Item name hash
    * Example:
    * Entry inside "mpbeach_overlays.xml" -
    * &lt;Item&gt;
    * &lt;uvPos x="0.500000" y="0.500000" /&gt;
    * &lt;scale x="0.600000" y="0.500000" /&gt;
    * &lt;rotation value="0.000000" /&gt;
    * &lt;nameHash&gt;FM_Hair_Fuzz&lt;/nameHash&gt;
    * &lt;txdHash&gt;mp_hair_fuzz&lt;/txdHash&gt;
    * &lt;txtHash&gt;mp_hair_fuzz&lt;/txtHash&gt;
    * &lt;zone&gt;ZONE_HEAD&lt;/zone&gt;
    * &lt;type&gt;TYPE_TATTOO&lt;/type&gt;
    * &lt;faction&gt;FM&lt;/faction&gt;
    * &lt;garment&gt;All&lt;/garment&gt;
    * &lt;gender&gt;GENDER_DONTCARE&lt;/gender&gt;
    * &lt;award /&gt;
    * &lt;awardLevel /&gt;
    * &lt;/Item&gt;
    * Code:
    * PED::_0x5F5D1665E352A839(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("mpbeach_overlays"), GAMEPLAY::GET_HASH_KEY("fm_hair_fuzz"))
    */
    @:pure static inline function ApplyPedOverlay(ped: Int, collection: EitherType<String, Int>, overlay: EitherType<String, Int>): Void { return untyped __lua__('ApplyPedOverlay')(ped, collection, overlay); }
    
    /**
    * Sets Ped Default Clothes
    */
    @:pure static inline function SetPedDefaultComponentVariation(ped: Int): Void { return untyped __lua__('SetPedDefaultComponentVariation')(ped); }
    @:pure static inline function SetPedDefensiveAreaAttachedToPed(ped: Int, attachPed: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Bool, p10: Bool): Void { return untyped __lua__('SetPedDefensiveAreaAttachedToPed')(ped, attachPed, p2, p3, p4, p5, p6, p7, p8, p9, p10); }
    @:pure static inline function SetPedDefensiveAreaDirection(ped: Int, p1: Int, p2: Int, p3: Int, p4: Bool): Void { return untyped __lua__('SetPedDefensiveAreaDirection')(ped, p1, p2, p3, p4); }
    @:pure static inline function SetPedDefensiveSphereAttachedToPed(ped: Int, target: Int, xOffset: Int, yOffset: Int, zOffset: Int, radius: Int, p6: Bool): Void { return untyped __lua__('SetPedDefensiveSphereAttachedToPed')(ped, target, xOffset, yOffset, zOffset, radius, p6); }
    @:pure static inline function N_0xf9b8f91aad3b953e(ped: Int, target: Int, xOffset: Int, yOffset: Int, zOffset: Int, radius: Int, p6: Bool): Void { return untyped __lua__('N_0xf9b8f91aad3b953e')(ped, target, xOffset, yOffset, zOffset, radius, p6); }
    
    /**
    * ??? Usage
    * ??? Use this native inside a looped function.
    * ??? Values:
    * ??? 0.0 = no peds on streets
    * ??? 1.0 = normal peds on streets
    */
    @:pure static inline function SetPedDensityMultiplierThisFrame(multiplier: Int): Void { return untyped __lua__('SetPedDensityMultiplierThisFrame')(multiplier); }
    @:pure static inline function SetPedDesiredHeading(ped: Int, heading: Int): Void { return untyped __lua__('SetPedDesiredHeading')(ped, heading); }
    @:pure static inline function SetPedDesiredMoveBlendRatio(ped: Int, p1: Int): Void { return untyped __lua__('SetPedDesiredMoveBlendRatio')(ped, p1); }
    @:pure static inline function SetPedDiesInSinkingVehicle(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedDiesInSinkingVehicle')(ped, toggle); }
    @:pure static inline function SetPedDiesInVehicle(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedDiesInVehicle')(ped, toggle); }
    @:pure static inline function SetPedDiesInWater(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedDiesInWater')(ped, toggle); }
    @:pure static inline function SetPedDiesInstantlyInWater(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedDiesInstantlyInWater')(ped, toggle); }
    @:pure static inline function SetPedDiesWhenInjured(ped: Int, toggle: Bool): Int { return untyped __lua__('SetPedDiesWhenInjured')(ped, toggle); }
    @:pure static inline function SetPedDriveByClipsetOverride(ped: Int, clipset: String): Void { return untyped __lua__('SetPedDriveByClipsetOverride')(ped, clipset); }
    @:pure static inline function SetPedDropsInventoryWeapon(ped: Int, weaponHash: EitherType<String, Int>, xOffset: Int, yOffset: Int, zOffset: Int, p5: Int): Void { return untyped __lua__('SetPedDropsInventoryWeapon')(ped, weaponHash, xOffset, yOffset, zOffset, p5); }
    @:pure static inline function SetPedDropsWeapon(ped: Int): Void { return untyped __lua__('SetPedDropsWeapon')(ped); }
    @:pure static inline function SetPedDropsWeaponsWhenDead(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedDropsWeaponsWhenDead')(ped, toggle); }
    
    /**
    * This is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false.
    */
    @:pure static inline function SetPedDucking(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedDucking')(ped, toggle); }
    @:pure static inline function SetPedEnableWeaponBlocking(ped: Int, toggle: Bool): Int { return untyped __lua__('SetPedEnableWeaponBlocking')(ped, toggle); }
    
    /**
    * This is a hash collision...
    * _IS_VEHICLE_NEAR_ENTITY
    */
    @:pure static inline function SetPedEnabledBikeRingtone(vehicle: Int, entity: Int): Int { return untyped __lua__('SetPedEnabledBikeRingtone')(vehicle, entity); }
    
    /**
    * Previously named _0xD30C50DF888D58B5, this native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives.
    * See gtaforums.com/topic/884370-native-research-ai-blips for further information.
    */
    @:pure static inline function SetPedEnemyAiBlip(pedHandle: Int, showViewCones: Bool): Void { return untyped __lua__('SetPedEnemyAiBlip')(pedHandle, showViewCones); }
    
    /**
    * Previously named _0xD30C50DF888D58B5, this native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives.
    * See gtaforums.com/topic/884370-native-research-ai-blips for further information.
    */
    @:pure static inline function N_0xd30c50df888d58b5(pedHandle: Int, showViewCones: Bool): Void { return untyped __lua__('N_0xd30c50df888d58b5')(pedHandle, showViewCones); }
    
    /**
    * Values look to be between 0.0 and 1.0
    * From decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0
    * You are correct, just looked in IDA it breaks from the function if it's less than 0.0f or greater than 1.0f.
    */
    @:pure static inline function SetPedEnveffScale(ped: Int, value: Int): Void { return untyped __lua__('SetPedEnveffScale')(ped, value); }
    
    /**
    * Used for freemode (online) characters.
    * For some reason, the scripts use a rounded float for the index.
    */
    @:pure static inline function SetPedEyeColor(ped: Int, index: Int): Void { return untyped __lua__('SetPedEyeColor')(ped, index); }
    
    /**
    * Sets the various freemode face features, e.g. nose length, chin shape. Scale ranges from -1.0 to 1.0.
    * Index can be 0
    */
    @:pure static inline function SetPedFaceFeature(ped: Int, index: Int, scale: Int): Void { return untyped __lua__('SetPedFaceFeature')(ped, index, scale); }
    
    /**
    * Console Hash: 0x8CD3E487
    */
    @:pure static inline function SetPedFacialDecoration(ped: Int, collection: EitherType<String, Int>, overlay: EitherType<String, Int>): Void { return untyped __lua__('SetPedFacialDecoration')(ped, collection, overlay); }
    
    /**
    * Console Hash: 0x8CD3E487
    */
    @:pure static inline function N_0x5619bfa07cfd7833(ped: Int, collection: EitherType<String, Int>, overlay: EitherType<String, Int>): Void { return untyped __lua__('N_0x5619bfa07cfd7833')(ped, collection, overlay); }
    
    /**
    * FIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 )
    * FIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 )
    * FIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 )
    * FIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 )
    * FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 )
    * FIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 )
    * FIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 )
    * FIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 )
    * FIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 )
    * FIRING_PATTERN_BURST_FIRE_RIFLE = 0x9C74B406 ( -1670073338 )
    * FIRING_PATTERN_BURST_FIRE_MG = 0xB573C5B4 ( -1250703948 )
    * FIRING_PATTERN_BURST_FIRE_PUMPSHOTGUN = 0x00BAC39B ( 12239771 )
    * FIRING_PATTERN_BURST_FIRE_HELI = 0x914E786F ( -1857128337 )
    * FIRING_PATTERN_BURST_FIRE_MICRO = 0x42EF03FD ( 1122960381 )
    * FIRING_PATTERN_SHORT_BURSTS = 0x1A92D7DF ( 445831135 )
    * FIRING_PATTERN_SLOW_FIRE_TANK = 0xE2CA3A71 ( -490063247 )
    * if anyone is interested firing pattern info: pastebin.com/Px036isB
    */
    @:pure static inline function SetPedFiringPattern(ped: Int, patternHash: EitherType<String, Int>): Void { return untyped __lua__('SetPedFiringPattern')(ped, patternHash); }
    
    /**
    * Bool probably has something to do with vehicles, maybe if the ped can use vehicle to flee?
    * Values used as attributes are those in sequence of powers of two, 1, 2, 4, 8, 16, 32, 64.... 65536.
    */
    @:pure static inline function SetPedFleeAttributes(ped: Int, attributes: Int, p2: Bool): Void { return untyped __lua__('SetPedFleeAttributes')(ped, attributes, p2); }
    
    /**
    * p1/gadgetHash was always 0xFBAB5776 ("GADGET_PARACHUTE").
    * p2 is always true.
    */
    @:pure static inline function SetPedGadget(ped: Int, gadgetHash: EitherType<String, Int>, p2: Bool): Void { return untyped __lua__('SetPedGadget')(ped, gadgetHash, p2); }
    @:pure static inline function SetPedGeneratesDeadBodyEvents(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedGeneratesDeadBodyEvents')(ped, toggle); }
    
    /**
    * From the scripts:
    * PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
    * "ANIM_GROUP_GESTURE_MISS_FRA0");
    * PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
    * "ANIM_GROUP_GESTURE_MISS_DocksSetup1");
    */
    @:pure static inline function SetPedGestureGroup(ped: Int, animGroupGesture: String): Void { return untyped __lua__('SetPedGestureGroup')(ped, animGroupGesture); }
    @:pure static inline function SetPedGetOutUpsideDownVehicle(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedGetOutUpsideDownVehicle')(ped, toggle); }
    @:pure static inline function SetPedGravity(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedGravity')(ped, toggle); }
    @:pure static inline function SetPedGroupMemberPassengerIndex(ped: Int, index: Int): Void { return untyped __lua__('SetPedGroupMemberPassengerIndex')(ped, index); }
    
    /**
    * Used for freemode (online) characters.
    */
    @:pure static inline function SetPedHairColor(ped: Int, colorID: Int, highlightColorID: Int): Void { return untyped __lua__('SetPedHairColor')(ped, colorID, highlightColorID); }
    
    /**
    * The "shape" parameters control the shape of the ped's face. The "skin" parameters control the skin tone. ShapeMix and skinMix control how much the first and second IDs contribute,(typically mother and father.) ThirdMix overrides the others in favor of the third IDs. IsParent is set for "children" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise.
    * The IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.
    * !!!Can someone add working example for this???
    * try this:
    * headBlendData headData;
    * _GET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), &amp;headData);
    * SET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), headData.shapeFirst, headData.shapeSecond, headData.shapeThird, headData.skinFirst, headData.skinSecond
    * , headData.skinThird, headData.shapeMix, headData.skinMix, headData.skinThird, 0);
    * For more info please refer to this topic.
    * gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained
    */
    @:pure static inline function SetPedHeadBlendData(ped: Int, shapeFirstID: Int, shapeSecondID: Int, shapeThirdID: Int, skinFirstID: Int, skinSecondID: Int, skinThirdID: Int, shapeMix: Int, skinMix: Int, thirdMix: Int, isParent: Bool): Void { return untyped __lua__('SetPedHeadBlendData')(ped, shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID, shapeMix, skinMix, thirdMix, isParent); }
    
    /**
    * OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0.
    * overlayID       Part                  Index, to disable
    * 0               Blemishes             0 - 23, 255
    * 1               Facial Hair           0 - 28, 255
    * 2               Eyebrows              0 - 33, 255
    * 3               Ageing                0 - 14, 255
    * 4               Makeup                0 - 74, 255
    * 5               Blush                 0 - 6, 255
    * 6               Complexion            0 - 11, 255
    * 7               Sun Damage            0 - 10, 255
    * 8               Lipstick              0 - 9, 255
    * 9               Moles/Freckles        0 - 17, 255
    * 10              Chest Hair            0 - 16, 255
    * 11              Body Blemishes        0 - 11, 255
    * 12              Add Body Blemishes    0 - 1, 255
    */
    @:pure static inline function SetPedHeadOverlay(ped: Int, overlayID: Int, index: Int, opacity: Int): Void { return untyped __lua__('SetPedHeadOverlay')(ped, overlayID, index, opacity); }
    
    /**
    * Used for freemode (online) characters.
    * ColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.
    * Called after SET_PED_HEAD_OVERLAY().
    */
    @:pure static inline function SetPedHeadOverlayColor(ped: Int, overlayID: Int, colorType: Int, colorID: Int, secondColorID: Int): Void { return untyped __lua__('SetPedHeadOverlayColor')(ped, overlayID, colorType, colorID, secondColorID); }
    @:pure static inline function SetPedHearingRange(ped: Int, value: Int): Void { return untyped __lua__('SetPedHearingRange')(ped, value); }
    @:pure static inline function SetPedHelmet(ped: Int, canWearHelmet: Bool): Void { return untyped __lua__('SetPedHelmet')(ped, canWearHelmet); }
    @:pure static inline function SetPedHelmetFlag(ped: Int, helmetFlag: Int): Void { return untyped __lua__('SetPedHelmetFlag')(ped, helmetFlag); }
    
    /**
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function SetPedHelmetPropIndex(ped: Int, propIndex: Int): Void { return untyped __lua__('SetPedHelmetPropIndex')(ped, propIndex); }
    @:pure static inline function SetPedHelmetTextureIndex(ped: Int, textureIndex: Int): Void { return untyped __lua__('SetPedHelmetTextureIndex')(ped, textureIndex); }
    @:pure static inline function SetPedIdRange(ped: Int, value: Int): Void { return untyped __lua__('SetPedIdRange')(ped, value); }
    
    /**
    * PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, GAMEPLAY::GET_HASH_KEY("MINI_PROSTITUTE_LOW_PASSENGER"));
    * PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, GAMEPLAY::GET_HASH_KEY("MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER"));
    * PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, GAMEPLAY::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT"));
    * PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, GAMEPLAY::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT_REAR"));
    * PED::SET_PED_IN_VEHICLE_CONTEXT(l_95, GAMEPLAY::GET_HASH_KEY("MISS_FAMILY2_JIMMY_BICYCLE"));
    * PED::SET_PED_IN_VEHICLE_CONTEXT(num3, GAMEPLAY::GET_HASH_KEY("MISSFBI2_MICHAEL_DRIVEBY"));
    * PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("MISS_ARMENIAN3_FRANKLIN_TENSE"));
    * PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("MISSFBI5_TREVOR_DRIVING"));
    */
    @:pure static inline function SetPedInVehicleContext(ped: Int, context: EitherType<String, Int>): Void { return untyped __lua__('SetPedInVehicleContext')(ped, context); }
    @:pure static inline function SetPedInfiniteAmmo(ped: Int, toggle: Bool, weaponHash: EitherType<String, Int>): Void { return untyped __lua__('SetPedInfiniteAmmo')(ped, toggle, weaponHash); }
    @:pure static inline function SetPedInfiniteAmmoClip(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedInfiniteAmmoClip')(ped, toggle); }
    
    /**
    * Ped: The ped to warp.
    * vehicle: The vehicle to warp the ped into.
    * Seat_Index: [-1 is driver seat, -2 first free passenger seat]
    * Moreinfo of Seat Index
    * DriverSeat = -1
    * Passenger = 0
    * Left Rear = 1
    * RightRear = 2
    */
    @:pure static inline function SetPedIntoVehicle(ped: Int, vehicle: Int, seatIndex: Int): Void { return untyped __lua__('SetPedIntoVehicle')(ped, vehicle, seatIndex); }
    
    /**
    * Sets the ped drunk sounds.  Only works with PLAYER_PED_ID
    * ====================================================
    * As mentioned above, this only sets the drunk sound to ped/player.
    * To give the Ped a drunk effect with drunk walking animation try using SET_PED_MOVEMENT_CLIPSET
    * Below is an example
    * if (!Function.Call&lt;bool&gt;(Hash.HAS_ANIM_SET_LOADED, "move_m@drunk@verydrunk"))
    * {
    * Function.Call(Hash.REQUEST_ANIM_SET, "move_m@drunk@verydrunk");
    * }
    * Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Ped.Handle, "move_m@drunk@verydrunk", 0x3E800000);
    * And to stop the effect use
    * RESET_PED_MOVEMENT_CLIPSET
    */
    @:pure static inline function SetPedIsDrunk(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedIsDrunk')(ped, toggle); }
    @:pure static inline function SetPedKeepTask(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedKeepTask')(ped, toggle); }
    
    /**
    * "IK" stands for "Inverse kinematics." I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1
    */
    @:pure static inline function SetPedLegIkMode(ped: Int, mode: Int): Void { return untyped __lua__('SetPedLegIkMode')(ped, mode); }
    @:pure static inline function SetPedLodMultiplier(ped: Int, multiplier: Int): Void { return untyped __lua__('SetPedLodMultiplier')(ped, multiplier); }
    @:pure static inline function SetPedMaxHealth(ped: Int, value: Int): Void { return untyped __lua__('SetPedMaxHealth')(ped, value); }
    @:pure static inline function SetPedMaxMoveBlendRatio(ped: Int, value: Int): Void { return untyped __lua__('SetPedMaxMoveBlendRatio')(ped, value); }
    @:pure static inline function SetPedMaxTimeInWater(ped: Int, value: Int): Void { return untyped __lua__('SetPedMaxTimeInWater')(ped, value); }
    @:pure static inline function SetPedMaxTimeUnderwater(ped: Int, value: Int): Void { return untyped __lua__('SetPedMaxTimeUnderwater')(ped, value); }
    
    /**
    * Ped will stay on the ground after being stunned for at lest ms time. (in milliseconds)
    */
    @:pure static inline function SetPedMinGroundTimeForStungun(ped: Int, ms: Int): Void { return untyped __lua__('SetPedMinGroundTimeForStungun')(ped, ms); }
    @:pure static inline function SetPedMinMoveBlendRatio(ped: Int, value: Int): Void { return untyped __lua__('SetPedMinMoveBlendRatio')(ped, value); }
    @:pure static inline function SetPedModelIsSuppressed(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedModelIsSuppressed')(ped, toggle); }
    
    /**
    * Maximum possible amount of money on MP is 2000. ~JX
    * -----------------------------------------------------------------------------
    * Maximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value.
    */
    @:pure static inline function SetPedMoney(ped: Int, amount: Int): Void { return untyped __lua__('SetPedMoney')(ped, amount); }
    @:pure static inline function SetPedMotionBlur(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedMotionBlur')(ped, toggle); }
    @:pure static inline function SetPedMoveAnimsBlendOut(ped: Int): Void { return untyped __lua__('SetPedMoveAnimsBlendOut')(ped); }
    
    /**
    * Min: 0.00
    * Max: 10.00
    * Can be used in combo with fast run cheat.
    * When value is set to 10.00:
    * Sprinting without fast run cheat: 66 m/s
    * Sprinting with fast run cheat: 77 m/s
    * Does not need to be looped!
    * Note: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f.
    */
    @:pure static inline function SetPedMoveRateOverride(ped: Int, value: Int): Void { return untyped __lua__('SetPedMoveRateOverride')(ped, value); }
    
    /**
    * p2 is usually 1.0f
    * EDIT 12/24/16:
    * p2 does absolutely nothing no matter what the value is.
    * List of movement clipsets:
    * Thanks to elsewhat for list.
    * "ANIM_GROUP_MOVE_BALLISTIC"
    * "ANIM_GROUP_MOVE_LEMAR_ALLEY"
    * "clipset@move@trash_fast_turn"
    * "FEMALE_FAST_RUNNER"
    * "missfbi4prepp1_garbageman"
    * "move_characters@franklin@fire"
    * "move_characters@Jimmy@slow@"
    * "move_characters@michael@fire"
    * "move_f@flee@a"
    * "move_f@scared"
    * "move_f@sexy@a"
    * "move_heist_lester"
    * "move_injured_generic"
    * "move_lester_CaneUp"
    * "move_m@bag"
    * "MOVE_M@BAIL_BOND_NOT_TAZERED"
    * "MOVE_M@BAIL_BOND_TAZERED"
    * "move_m@brave"
    * "move_m@casual@d"
    * "move_m@drunk@moderatedrunk"
    * "MOVE_M@DRUNK@MODERATEDRUNK"
    * "MOVE_M@DRUNK@MODERATEDRUNK_HEAD_UP"
    * "MOVE_M@DRUNK@SLIGHTLYDRUNK"
    * "MOVE_M@DRUNK@VERYDRUNK"
    * "move_m@fire"
    * "move_m@gangster@var_e"
    * "move_m@gangster@var_f"
    * "move_m@gangster@var_i"
    * "move_m@JOG@"
    * "MOVE_M@PRISON_GAURD"
    * "MOVE_P_M_ONE"
    * "MOVE_P_M_ONE_BRIEFCASE"
    * "move_p_m_zero_janitor"
    * "move_p_m_zero_slow"
    * "move_ped_bucket"
    * "move_ped_crouched"
    * "move_ped_mop"
    * "MOVE_M@FEMME@"
    * "MOVE_F@FEMME@"
    * "MOVE_M@GANGSTER@NG"
    * "MOVE_F@GANGSTER@NG"
    * "MOVE_M@POSH@"
    * "MOVE_F@POSH@"
    * "MOVE_M@TOUGH_GUY@"
    * "MOVE_F@TOUGH_GUY@"
    * ~ NotCrunchyTaco
    */
    @:pure static inline function SetPedMovementClipset(ped: Int, clipSet: String, p2: Int): Void { return untyped __lua__('SetPedMovementClipset')(ped, clipSet, p2); }
    
    /**
    * Stops speech.
    */
    @:pure static inline function SetPedMute(ped: Int): Void { return untyped __lua__('SetPedMute')(ped); }
    
    /**
    * Stops speech.
    */
    @:pure static inline function N_0x7a73d05a607734c7(ped: Int): Void { return untyped __lua__('N_0x7a73d05a607734c7')(ped); }
    
    /**
    * NOTE: Debugging functions are not present in the retail version of the game.
    * *untested but char *name could also be a hash for a localized string
    */
    @:pure static inline function SetPedNameDebug(ped: Int, name: String): Void { return untyped __lua__('SetPedNameDebug')(ped, name); }
    @:pure static inline function SetPedNeverLeavesGroup(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedNeverLeavesGroup')(ped, toggle); }
    
    /**
    * The distance between these points, is the diagonal of a box (remember it's 3D).
    */
    @:pure static inline function SetPedNonCreationArea(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int): Void { return untyped __lua__('SetPedNonCreationArea')(x1, y1, z1, x2, y2, z2); }
    @:pure static inline function SetPedParachuteTintIndex(ped: Int, tintIndex: Int): Void { return untyped __lua__('SetPedParachuteTintIndex')(ped, tintIndex); }
    @:pure static inline function SetPedPathAvoidFire(ped: Int, avoidFire: Bool): Void { return untyped __lua__('SetPedPathAvoidFire')(ped, avoidFire); }
    @:pure static inline function SetPedPathCanDropFromHeight(ped: Int, Toggle: Bool): Void { return untyped __lua__('SetPedPathCanDropFromHeight')(ped, Toggle); }
    @:pure static inline function SetPedPathCanUseClimbovers(ped: Int, Toggle: Bool): Int { return untyped __lua__('SetPedPathCanUseClimbovers')(ped, Toggle); }
    @:pure static inline function SetPedPathCanUseLadders(ped: Int, Toggle: Bool): Int { return untyped __lua__('SetPedPathCanUseLadders')(ped, Toggle); }
    @:pure static inline function SetPedPathPreferToAvoidWater(ped: Int, avoidWater: Bool): Void { return untyped __lua__('SetPedPathPreferToAvoidWater')(ped, avoidWater); }
    @:pure static inline function SetPedPathsBackToOriginal(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Void { return untyped __lua__('SetPedPathsBackToOriginal')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function SetPedPathsInArea(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, unknown: Bool): Void { return untyped __lua__('SetPedPathsInArea')(x1, y1, z1, x2, y2, z2, unknown); }
    
    /**
    * Hash collision!!! Actual name: SET_PED_PATH_MAY_ENTER_WATER
    */
    @:pure static inline function SetPedPathsWidthPlant(ped: Int, mayEnterWater: Bool): Void { return untyped __lua__('SetPedPathsWidthPlant')(ped, mayEnterWater); }
    
    /**
    * i could be time. Only example in the decompiled scripts uses it as -1.
    */
    @:pure static inline function SetPedPinnedDown(ped: Int, pinned: Bool, i: Int): Int { return untyped __lua__('SetPedPinnedDown')(ped, pinned, i); }
    
    /**
    * Points to the same function as for example GET_RANDOM_VEHICLE_MODEL_IN_MEMORY and it does absolutely nothing.
    */
    @:pure static inline function SetPedPlaysHeadOnHornAnimWhenDiesInVehicle(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedPlaysHeadOnHornAnimWhenDiesInVehicle')(ped, toggle); }
    @:pure static inline function SetPedPopulationBudget(p0: Int): Void { return untyped __lua__('SetPedPopulationBudget')(p0); }
    @:pure static inline function SetPedPreferredCoverSet(ped: Int, itemSet: Int): Void { return untyped __lua__('SetPedPreferredCoverSet')(ped, itemSet); }
    @:pure static inline function N_0x8421eb4da7e391b9(ped: Int, itemSet: Int): Void { return untyped __lua__('N_0x8421eb4da7e391b9')(ped, itemSet); }
    
    /**
    * This is only called once in the scripts.
    * sub_1CD9(&amp;l_49, 0, getElem(3, &amp;l_34, 4), "MICHAEL", 0, 1);
    * sub_1CA8("WORLD_HUMAN_SMOKING", 2);
    * PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &amp;l_34, 4), PLAYER::PLAYER_PED_ID());
    */
    @:pure static inline function SetPedPrimaryLookat(ped: Int, lookAt: Int): Void { return untyped __lua__('SetPedPrimaryLookat')(ped, lookAt); }
    
    /**
    * ComponentId can be set to various things based on what category you're wanting to set
    * enum PedPropsData
    * {
    * PED_PROP_HATS = 0,
    * PED_PROP_GLASSES = 1,
    * PED_PROP_EARS = 2,
    * PED_PROP_WATCHES = 3,
    * };
    * Usage: SET_PED_PROP_INDEX(playerPed, PED_PROP_HATS, GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(playerPed, PED_PROP_HATS), GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(playerPed, PED_PROP_HATS, 0), TRUE);
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function SetPedPropIndex(ped: Int, componentId: Int, drawableId: Int, TextureId: Int, attach: Bool): Void { return untyped __lua__('SetPedPropIndex')(ped, componentId, drawableId, TextureId, attach); }
    
    /**
    * Works for both player and peds, but some flags don't seem to work for the player (1, for example)
    * 1 - Blocks ragdolling when shot.
    * 2 - Blocks ragdolling when hit by a vehicle. The ped still might play a falling animation.
    * 4 - Blocks ragdolling when set on fire.
    * -----------------------------------------------------------------------
    * There seem to be 26 flags
    */
    @:pure static inline function SetPedRagdollBlockingFlags(ped: Int, flags: Int): Void { return untyped __lua__('SetPedRagdollBlockingFlags')(ped, flags); }
    
    /**
    * Works for both player and peds, but some flags don't seem to work for the player (1, for example)
    * 1 - Blocks ragdolling when shot.
    * 2 - Blocks ragdolling when hit by a vehicle. The ped still might play a falling animation.
    * 4 - Blocks ragdolling when set on fire.
    * -----------------------------------------------------------------------
    * There seem to be 26 flags
    */
    @:pure static inline function N_0x26695ec767728d84(ped: Int, flags: Int): Void { return untyped __lua__('N_0x26695ec767728d84')(ped, flags); }
    @:pure static inline function SetPedRagdollForceFall(ped: Int): Int { return untyped __lua__('SetPedRagdollForceFall')(ped); }
    
    /**
    * Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.
    */
    @:pure static inline function SetPedRagdollOnCollision(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedRagdollOnCollision')(ped, toggle); }
    
    /**
    * p1 is always false in R* scripts.
    * Quick disassembly seems to indicate that p1 is unused.
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function SetPedRandomComponentVariation(ped: Int, p1: Bool): Void { return untyped __lua__('SetPedRandomComponentVariation')(ped, p1); }
    
    /**
    * List of component/props ID
    * gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
    */
    @:pure static inline function SetPedRandomProps(ped: Int): Void { return untyped __lua__('SetPedRandomProps')(ped); }
    @:pure static inline function SetPedRelationshipGroupDefaultHash(ped: Int, hash: EitherType<String, Int>): Void { return untyped __lua__('SetPedRelationshipGroupDefaultHash')(ped, hash); }
    @:pure static inline function SetPedRelationshipGroupHash(ped: Int, hash: EitherType<String, Int>): Void { return untyped __lua__('SetPedRelationshipGroupHash')(ped, hash); }
    @:pure static inline function SetPedReserveParachuteTintIndex(ped: Int, p1: Int): Void { return untyped __lua__('SetPedReserveParachuteTintIndex')(ped, p1); }
    
    /**
    * PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);
    */
    @:pure static inline function SetPedResetFlag(ped: Int, flagId: Int, doReset: Bool): Void { return untyped __lua__('SetPedResetFlag')(ped, flagId, doReset); }
    
    /**
    * Assigns some ambient voice to the ped.
    */
    @:pure static inline function SetPedScream(ped: Int): Void { return untyped __lua__('SetPedScream')(ped); }
    
    /**
    * Assigns some ambient voice to the ped.
    */
    @:pure static inline function N_0x40cf0d12d142a9e8(ped: Int): Void { return untyped __lua__('N_0x40cf0d12d142a9e8')(ped); }
    @:pure static inline function SetPedSeeingRange(ped: Int, value: Int): Void { return untyped __lua__('SetPedSeeingRange')(ped, value); }
    
    /**
    * shootRate 0-1000
    */
    @:pure static inline function SetPedShootRate(ped: Int, shootRate: Int): Void { return untyped __lua__('SetPedShootRate')(ped, shootRate); }
    @:pure static inline function SetPedShootsAtCoord(ped: Int, x: Int, y: Int, z: Int, toggle: Bool): Void { return untyped __lua__('SetPedShootsAtCoord')(ped, x, y, z, toggle); }
    @:pure static inline function SetPedSphereDefensiveArea(ped: Int, x: Int, y: Int, z: Int, radius: Int, p5: Bool, p6: Bool): Void { return untyped __lua__('SetPedSphereDefensiveArea')(ped, x, y, z, radius, p5, p6); }
    @:pure static inline function SetPedStayInVehicleWhenJacked(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedStayInVehicleWhenJacked')(ped, toggle); }
    
    /**
    * p1 is usually 0 in the scripts. action is either 0 or a pointer to "DEFAULT_ACTION".
    */
    @:pure static inline function SetPedStealthMovement(ped: Int, p1: Bool, action: String): Void { return untyped __lua__('SetPedStealthMovement')(ped, p1, action); }
    @:pure static inline function SetPedSteersAroundObjects(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedSteersAroundObjects')(ped, toggle); }
    @:pure static inline function SetPedSteersAroundPeds(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedSteersAroundPeds')(ped, toggle); }
    @:pure static inline function SetPedSteersAroundVehicles(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedSteersAroundVehicles')(ped, toggle); }
    @:pure static inline function SetPedStrafeClipset(ped: Int, clipSet: String): Void { return untyped __lua__('SetPedStrafeClipset')(ped, clipSet); }
    
    /**
    * ped cannot be headshot if this is set to false
    */
    @:pure static inline function SetPedSuffersCriticalHits(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedSuffersCriticalHits')(ped, toggle); }
    
    /**
    * Sweat is set to 100.0 or 0.0 in the decompiled scripts.
    */
    @:pure static inline function SetPedSweat(ped: Int, sweat: Int): Void { return untyped __lua__('SetPedSweat')(ped, sweat); }
    
    /**
    * Speech related.
    */
    @:pure static inline function SetPedTalk(ped: Int): Void { return untyped __lua__('SetPedTalk')(ped); }
    
    /**
    * Speech related.
    */
    @:pure static inline function N_0x4ada3f19be4a6047(ped: Int): Void { return untyped __lua__('N_0x4ada3f19be4a6047')(ped); }
    
    /**
    * Only 1 and 2 appear in the scripts. combatbehaviour.meta seems to only have TLR_SearchForTarget for all peds, but we don't know if that's 1 or 2.
    */
    @:pure static inline function SetPedTargetLossResponse(ped: Int, responseType: Int): Void { return untyped __lua__('SetPedTargetLossResponse')(ped, responseType); }
    
    /**
    * destroyType is 1 for opens on damage, 2 for breaks on damage.
    */
    @:pure static inline function SetPedTargettableVehicleDestroy(vehicle: Int, vehicleComponent: Int, destroyType: Int): Void { return untyped __lua__('SetPedTargettableVehicleDestroy')(vehicle, vehicleComponent, destroyType); }
    @:pure static inline function SetPedToInformRespectedFriends(ped: Int, radius: Int, maxFriends: Int): Void { return untyped __lua__('SetPedToInformRespectedFriends')(ped, radius, maxFriends); }
    @:pure static inline function SetPedToLoadCover(ped: Int, toggle: Bool): Void { return untyped __lua__('SetPedToLoadCover')(ped, toggle); }
    
    /**
    * time1- Time Ped is in ragdoll mode(ms)
    * time2- Unknown time, in milliseconds
    * ragdollType-
    * 0 : Normal ragdoll
    * 1 : Falls with stiff legs/body
    * 2 : Narrow leg stumble(may not fall)
    * 3 : Wide leg stumble(may not fall)
    * p4, p5, p6- No idea. In R*'s scripts they are usually either "true, true, false" or "false, false, false".
    * EDIT 3/11/16: unclear what 'mircoseconds' mean-- a microsecond is 1000x a ms, so time2 must be 1000x time1?  more testing needed.  -sob
    * Edit Mar 21, 2017: removed part about time2 being the microseconds version of time1. this just isn't correct. time2 is in milliseconds, and time1 and time2 don't seem to be connected in any way.
    */
    @:pure static inline function SetPedToRagdoll(ped: Int, time1: Int, time2: Int, ragdollType: Int, p4: Bool, p5: Bool, p6: Bool): Int { return untyped __lua__('SetPedToRagdoll')(ped, time1, time2, ragdollType, p4, p5, p6); }
    
    /**
    * Return variable is never used in R*'s scripts.
    * Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.
    * x, y, and z are coordinates, most likely to where the ped will fall.
    * p7 is probably the force of the fall, but untested, so I left the variable name the same.
    * p8 to p13 are always 0f in R*'s scripts.
    * (Simplified) Example of the usage of the function from R*'s scripts:
    * ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);
    */
    @:pure static inline function SetPedToRagdollWithFall(ped: Int, time: Int, p2: Int, ragdollType: Int, x: Int, y: Int, z: Int, p7: Int, p8: Int, p9: Int, p10: Int, p11: Int, p12: Int, p13: Int): Int { return untyped __lua__('SetPedToRagdollWithFall')(ped, time, p2, ragdollType, x, y, z, p7, p8, p9, p10, p11, p12, p13); }
    
    /**
    * p2 is usually -1 in the scripts. action is either 0 or "DEFAULT_ACTION".
    */
    @:pure static inline function SetPedUsingActionMode(ped: Int, p1: Bool, p2: Int, action: String): Void { return untyped __lua__('SetPedUsingActionMode')(ped, p1, p2, action); }
    @:pure static inline function SetPedVisualFieldCenterAngle(ped: Int, angle: Int): Void { return untyped __lua__('SetPedVisualFieldCenterAngle')(ped, angle); }
    @:pure static inline function SetPedVisualFieldMaxAngle(ped: Int, value: Int): Void { return untyped __lua__('SetPedVisualFieldMaxAngle')(ped, value); }
    
    /**
    * This native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them.
    */
    @:pure static inline function SetPedVisualFieldMaxElevationAngle(ped: Int, angle: Int): Void { return untyped __lua__('SetPedVisualFieldMaxElevationAngle')(ped, angle); }
    @:pure static inline function SetPedVisualFieldMinAngle(ped: Int, value: Int): Void { return untyped __lua__('SetPedVisualFieldMinAngle')(ped, value); }
    
    /**
    * This native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.
    */
    @:pure static inline function SetPedVisualFieldMinElevationAngle(ped: Int, angle: Int): Void { return untyped __lua__('SetPedVisualFieldMinElevationAngle')(ped, angle); }
    @:pure static inline function SetPedVisualFieldPeripheralRange(ped: Int, range: Int): Void { return untyped __lua__('SetPedVisualFieldPeripheralRange')(ped, range); }
    @:pure static inline function SetPedWaypointRouteOffset(p0: Int, p1: Int, p2: Int, p3: Int): Int { return untyped __lua__('SetPedWaypointRouteOffset')(p0, p1, p2, p3); }
    @:pure static inline function SetPedWeaponMovementClipset(ped: Int, clipSet: String): Void { return untyped __lua__('SetPedWeaponMovementClipset')(ped, clipSet); }
    
    /**
    * tintIndex can be the following:
    * 1
    * 2
    * 3
    * 4
    * 5
    * 6
    * 7
    */
    @:pure static inline function SetPedWeaponTintIndex(ped: Int, weaponHash: EitherType<String, Int>, tintIndex: Int): Void { return untyped __lua__('SetPedWeaponTintIndex')(ped, weaponHash, tintIndex); }
    
    /**
    * combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function
    */
    @:pure static inline function SetPedWetnessEnabledThisFrame(ped: Int): Void { return untyped __lua__('SetPedWetnessEnabledThisFrame')(ped); }
    
    /**
    * It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.
    */
    @:pure static inline function SetPedWetnessHeight(ped: Int, height: Int): Void { return untyped __lua__('SetPedWetnessHeight')(ped, height); }
    
    /**
    * if the bool "Toggle" is "true" so the phone is lean.
    * if the bool "Toggle" is "false" so the phone is not lean.
    */
    @:pure static inline function SetPhoneLean(Toggle: Bool): Void { return untyped __lua__('SetPhoneLean')(Toggle); }
    @:pure static inline function SetPickupRegenerationTime(p0: Int, p1: Int): Void { return untyped __lua__('SetPickupRegenerationTime')(p0, p1); }
    @:pure static inline function SetPlaneMinHeightAboveGround(plane: Int, height: Int): Void { return untyped __lua__('SetPlaneMinHeightAboveGround')(plane, height); }
    @:pure static inline function N_0xb893215d8d4c015b(plane: Int, height: Int): Void { return untyped __lua__('N_0xb893215d8d4c015b')(plane, height); }
    @:pure static inline function SetPlaybackSpeed(vehicle: Int, speed: Int): Void { return untyped __lua__('SetPlaybackSpeed')(vehicle, speed); }
    @:pure static inline function SetPlaybackToUseAi(vehicle: Int, flag: Int): Void { return untyped __lua__('SetPlaybackToUseAi')(vehicle, flag); }
    @:pure static inline function SetPlaybackToUseAiTryToRevertBackLater(p0: Int, p1: Int, p2: Int, p3: Bool): Void { return untyped __lua__('SetPlaybackToUseAiTryToRevertBackLater')(p0, p1, p2, p3); }
    
    /**
    * Hash collision! Disables speech.
    */
    @:pure static inline function SetPlayerAngry(playerPed: Int, disabled: Bool): Void { return untyped __lua__('SetPlayerAngry')(playerPed, disabled); }
    
    /**
    * Sets the position of the arrow icon representing the player on both the minimap and world map.
    * Too bad this wouldn't work over the network (obviously not). Could spoof where we would be.
    */
    @:pure static inline function SetPlayerBlipPositionThisFrame(x: Int, y: Int): Void { return untyped __lua__('SetPlayerBlipPositionThisFrame')(x, y); }
    
    /**
    * Sets whether this player can be hassled by gangs.
    */
    @:pure static inline function SetPlayerCanBeHassledByGangs(player: Int, toggle: Bool): Void { return untyped __lua__('SetPlayerCanBeHassledByGangs')(player, toggle); }
    
    /**
    * Set whether this player should be able to do drive-bys.
    * "A drive-by is when a ped is aiming/shooting from vehicle. This includes middle finger taunts. By setting this value to false I confirm the player is unable to do all that. Tested on tick."
    */
    @:pure static inline function SetPlayerCanDoDriveBy(player: Int, toggle: Bool): Void { return untyped __lua__('SetPlayerCanDoDriveBy')(player, toggle); }
    @:pure static inline function SetPlayerCanLeaveParachuteSmokeTrail(player: Int, enabled: Bool): Void { return untyped __lua__('SetPlayerCanLeaveParachuteSmokeTrail')(player, enabled); }
    
    /**
    * Sets whether this player can take cover.
    */
    @:pure static inline function SetPlayerCanUseCover(player: Int, toggle: Bool): Int { return untyped __lua__('SetPlayerCanUseCover')(player, toggle); }
    
    /**
    * Displays cash change notifications on HUD.
    */
    @:pure static inline function SetPlayerCashChange(cash: Int, bank: Int): Void { return untyped __lua__('SetPlayerCashChange')(cash, bank); }
    
    /**
    * Displays cash change notifications on HUD.
    */
    @:pure static inline function SetSingleplayerHudCash(cash: Int, bank: Int): Void { return untyped __lua__('SetSingleplayerHudCash')(cash, bank); }
    
    /**
    * 6 matches across 4 scripts. 5 occurrences were 240. The other was 255.
    */
    @:pure static inline function SetPlayerClothLockCounter(value: Int): Void { return untyped __lua__('SetPlayerClothLockCounter')(value); }
    
    /**
    * Every occurrence was either 0 or 2.
    */
    @:pure static inline function SetPlayerClothPackageIndex(index: Int): Void { return untyped __lua__('SetPlayerClothPackageIndex')(index); }
    
    /**
    * Every occurrence of p1 I found was true.1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
    */
    @:pure static inline function SetPlayerClothPinFrames(player: Int, toggle: Bool): Void { return untyped __lua__('SetPlayerClothPinFrames')(player, toggle); }
    
    /**
    * Flags used in the scripts: 0,4,16,24,32,56,60,64,128,134,256,260,384,512,640,768,896,900,952,1024,1280,2048,2560
    * Note to people who needs this with camera mods, etc.:
    * Flags(0, 4, 16, 24, 32, 56, 60, 64, 128, 134, 512, 640, 1024, 2048, 2560)
    * - Disables camera rotation as well.
    * Flags(256, 260, 384, 768, 896, 900, 952, 1280)
    */
    @:pure static inline function SetPlayerControl(player: Int, toggle: Bool, possiblyFlags: Int): Void { return untyped __lua__('SetPlayerControl')(player, toggle, possiblyFlags); }
    @:pure static inline function SetPlayerForceSkipAimIntro(player: Int, toggle: Bool): Void { return untyped __lua__('SetPlayerForceSkipAimIntro')(player, toggle); }
    @:pure static inline function SetPlayerForcedAim(player: Int, toggle: Bool): Void { return untyped __lua__('SetPlayerForcedAim')(player, toggle); }
    @:pure static inline function SetPlayerForcedZoom(player: Int, toggle: Bool): Void { return untyped __lua__('SetPlayerForcedZoom')(player, toggle); }
    @:pure static inline function SetPlayerHasReserveParachute(player: Int): Void { return untyped __lua__('SetPlayerHasReserveParachute')(player); }
    @:pure static inline function SetPlayerHealthRechargeMultiplier(player: Int, regenRate: Int): Void { return untyped __lua__('SetPlayerHealthRechargeMultiplier')(player, regenRate); }
    
    /**
    * Hash collision
    */
    @:pure static inline function SetPlayerInvertedUp(): Int { return untyped __lua__('SetPlayerInvertedUp')(); }
    
    /**
    * Simply sets you as invincible (Health will not deplete).
    * Use 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:
    * *(DWORD *)(playerPedAddress + 0x188) |= (1 &lt;&lt; 9);
    */
    @:pure static inline function SetPlayerInvincible(player: Int, toggle: Bool): Void { return untyped __lua__('SetPlayerInvincible')(player, toggle); }
    @:pure static inline function SetPlayerInvisibleLocally(player: Int, toggle: Bool): Void { return untyped __lua__('SetPlayerInvisibleLocally')(player, toggle); }
    
    /**
    * Example from fm_mission_controler.ysc.c4:
    * PLAYER::SET_PLAYER_LOCKON(PLAYER::PLAYER_ID(), 1);
    * All other decompiled scripts using this seem to be using the player id as the first parameter, so I feel the need to confirm it as so.
    * No need to confirm it says PLAYER_ID() so it uses PLAYER_ID() lol.
    */
    @:pure static inline function SetPlayerLockon(player: Int, toggle: Bool): Void { return untyped __lua__('SetPlayerLockon')(player, toggle); }
    
    /**
    * Affects the range of auto aim target.
    */
    @:pure static inline function SetPlayerLockonRangeOverride(player: Int, range: Int): Void { return untyped __lua__('SetPlayerLockonRangeOverride')(player, range); }
    
    /**
    * Default is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4
    */
    @:pure static inline function SetPlayerMaxArmour(player: Int, value: Int): Void { return untyped __lua__('SetPlayerMaxArmour')(player, value); }
    @:pure static inline function SetPlayerMayNotEnterAnyVehicle(player: Int): Void { return untyped __lua__('SetPlayerMayNotEnterAnyVehicle')(player); }
    @:pure static inline function SetPlayerMayOnlyEnterThisVehicle(player: Int, vehicle: Int): Void { return untyped __lua__('SetPlayerMayOnlyEnterThisVehicle')(player, vehicle); }
    @:pure static inline function SetPlayerMeleeWeaponDamageModifier(player: Int, modifier: Int): Void { return untyped __lua__('SetPlayerMeleeWeaponDamageModifier')(player, modifier); }
    @:pure static inline function SetPlayerMeleeWeaponDefenseModifier(player: Int, modifier: Int): Void { return untyped __lua__('SetPlayerMeleeWeaponDefenseModifier')(player, modifier); }
    
    /**
    * Make sure to request the model first and wait until it has loaded.
    */
    @:pure static inline function SetPlayerModel(player: Int, model: EitherType<String, Int>): Void { return untyped __lua__('SetPlayerModel')(player, model); }
    @:pure static inline function SetPlayerNoiseMultiplier(player: Int, multiplier: Int): Void { return untyped __lua__('SetPlayerNoiseMultiplier')(player, multiplier); }
    
    /**
    * example:
    * PLAYER::SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(PLAYER::PLAYER_ID(), 0x73268708);
    */
    @:pure static inline function SetPlayerParachuteModelOverride(player: Int, model: EitherType<String, Int>): Void { return untyped __lua__('SetPlayerParachuteModelOverride')(player, model); }
    @:pure static inline function SetPlayerParachutePackModelOverride(player: Int, model: EitherType<String, Int>): Void { return untyped __lua__('SetPlayerParachutePackModelOverride')(player, model); }
    
    /**
    * tints 0
    * 1
    * 2
    * 3
    * 4
    */
    @:pure static inline function SetPlayerParachutePackTintIndex(player: Int, tintIndex: Int): Void { return untyped __lua__('SetPlayerParachutePackTintIndex')(player, tintIndex); }
    @:pure static inline function SetPlayerParachuteSmokeTrailColor(player: Int, r: Int, g: Int, b: Int): Void { return untyped __lua__('SetPlayerParachuteSmokeTrailColor')(player, r, g, b); }
    
    /**
    * Tints:
    * None = -1,
    * Rainbow = 0,
    * Red = 1,
    * SeasideStripes = 2,
    * WidowMaker = 3,
    * Patriot = 4,
    * Blue = 5,
    * Black = 6,
    * Hornet = 7,
    * AirFocce = 8,
    * Desert = 9,
    * Shadow = 10,
    * HighAltitude = 11,
    * Airbone = 12,
    * Sunrise = 13,
    */
    @:pure static inline function SetPlayerParachuteTintIndex(player: Int, tintIndex: Int): Void { return untyped __lua__('SetPlayerParachuteTintIndex')(player, tintIndex); }
    
    /**
    * p1 was always 5.
    * p4 was always false.
    */
    @:pure static inline function SetPlayerParachuteVariationOverride(player: Int, p1: Int, p2: Int, p3: Int, p4: Bool): Void { return untyped __lua__('SetPlayerParachuteVariationOverride')(player, p1, p2, p3, p4); }
    
    /**
    * Tints:
    * None = -1,
    * Rainbow = 0,
    * Red = 1,
    * SeasideStripes = 2,
    * WidowMaker = 3,
    * Patriot = 4,
    * Blue = 5,
    * Black = 6,
    * Hornet = 7,
    * AirFocce = 8,
    * Desert = 9,
    * Shadow = 10,
    * HighAltitude = 11,
    * Airbone = 12,
    * Sunrise = 13,
    */
    @:pure static inline function SetPlayerReserveParachuteTintIndex(player: Int, index: Int): Void { return untyped __lua__('SetPlayerReserveParachuteTintIndex')(player, index); }
    
    /**
    * example:
    * flags: 0-6
    * PLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(PLAYER::PLAYER_ID(), 6);
    * wouldnt the flag be the seatIndex?
    */
    @:pure static inline function SetPlayerResetFlagPreferRearSeats(player: Int, flags: Int): Void { return untyped __lua__('SetPlayerResetFlagPreferRearSeats')(player, flags); }
    @:pure static inline function SetPlayerSimulateAiming(player: Int, toggle: Bool): Void { return untyped __lua__('SetPlayerSimulateAiming')(player, toggle); }
    
    /**
    * Values around 1.0f to 2.0f used in game scripts.
    */
    @:pure static inline function SetPlayerSneakingNoiseMultiplier(player: Int, multiplier: Int): Void { return untyped __lua__('SetPlayerSneakingNoiseMultiplier')(player, multiplier); }
    @:pure static inline function SetPlayerSprint(player: Int, toggle: Bool): Void { return untyped __lua__('SetPlayerSprint')(player, toggle); }
    @:pure static inline function SetPlayerStealthPerceptionModifier(player: Int, value: Int): Void { return untyped __lua__('SetPlayerStealthPerceptionModifier')(player, value); }
    @:pure static inline function SetPlayerSwitchOutro(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int): Void { return untyped __lua__('SetPlayerSwitchOutro')(p0, p1, p2, p3, p4, p5, p6, p7, p8); }
    @:pure static inline function N_0xc208b673ce446b61(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int): Void { return untyped __lua__('N_0xc208b673ce446b61')(p0, p1, p2, p3, p4, p5, p6, p7, p8); }
    
    /**
    * Sets your targeting mode.
    * 0 = Traditional GTA
    * 1 = Assisted Aiming
    * 2 = Free Aim
    * Even tho gtaforums nor Alexander B supports this, if you're online in freemode already it's nice to have this since retail or otherwise you have to go to SP to change it.
    */
    @:pure static inline function SetPlayerTargetingMode(targetMode: Int): Void { return untyped __lua__('SetPlayerTargetingMode')(targetMode); }
    
    /**
    * Set player team on deathmatch and last team standing..
    */
    @:pure static inline function SetPlayerTeam(player: Int, team: Int): Void { return untyped __lua__('SetPlayerTeam')(player, team); }
    @:pure static inline function SetPlayerVehicleDamageModifier(player: Int, damageAmount: Int): Void { return untyped __lua__('SetPlayerVehicleDamageModifier')(player, damageAmount); }
    @:pure static inline function SetPlayerVehicleDefenseModifier(player: Int, modifier: Int): Void { return untyped __lua__('SetPlayerVehicleDefenseModifier')(player, modifier); }
    @:pure static inline function SetPlayerVisibleLocally(player: Int, toggle: Bool): Void { return untyped __lua__('SetPlayerVisibleLocally')(player, toggle); }
    
    /**
    * # Predominant call signatures
    * PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1));
    * # Parameter value ranges
    * P0: PLAYER::PLAYER_ID()
    * P1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)
    * P2: Not set by any call
    */
    @:pure static inline function SetPlayerWantedCentrePosition(player: Int, p2: Bool, p3: Bool): Array<Int> { return untyped __lua__('SetPlayerWantedCentrePosition')(player, p2, p3); }
    
    /**
    * Call SET_PLAYER_WANTED_LEVEL_NOW for immediate effect
    * wantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files
    * disableNoMission-  Disables When Off Mission- appears to always be false
    */
    @:pure static inline function SetPlayerWantedLevel(player: Int, wantedLevel: Int, disableNoMission: Bool): Void { return untyped __lua__('SetPlayerWantedLevel')(player, wantedLevel, disableNoMission); }
    
    /**
    * p2 is always false in R* scripts
    */
    @:pure static inline function SetPlayerWantedLevelNoDrop(player: Int, wantedLevel: Int, p2: Bool): Void { return untyped __lua__('SetPlayerWantedLevelNoDrop')(player, wantedLevel, p2); }
    
    /**
    * Forces any pending wanted level to be applied to the specified player immediately.
    * Call SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW.
    * Second parameter is unknown (always false).
    */
    @:pure static inline function SetPlayerWantedLevelNow(player: Int, p1: Bool): Void { return untyped __lua__('SetPlayerWantedLevelNow')(player, p1); }
    
    /**
    * This modifies the damage value of your weapon. Whether it is a multiplier or base damage is unknown.
    * Based on tests, it is unlikely to be a multiplier.
    */
    @:pure static inline function SetPlayerWeaponDamageModifier(player: Int, damageAmount: Int): Void { return untyped __lua__('SetPlayerWeaponDamageModifier')(player, damageAmount); }
    @:pure static inline function SetPlayerWeaponDefenseModifier(player: Int, modifier: Int): Void { return untyped __lua__('SetPlayerWeaponDefenseModifier')(player, modifier); }
    @:pure static inline function SetPlayerpadShakesWhenControllerDisabled(toggle: Bool): Void { return untyped __lua__('SetPlayerpadShakesWhenControllerDisabled')(toggle); }
    @:pure static inline function SetPlayersLastVehicle(vehicle: Int): Int { return untyped __lua__('SetPlayersLastVehicle')(vehicle); }
    @:pure static inline function SetPoliceIgnorePlayer(player: Int, toggle: Bool): Void { return untyped __lua__('SetPoliceIgnorePlayer')(player, toggle); }
    @:pure static inline function SetPoliceRadarBlips(toggle: Bool): Void { return untyped __lua__('SetPoliceRadarBlips')(toggle); }
    @:pure static inline function SetRadarAsExteriorThisFrame(): Void { return untyped __lua__('SetRadarAsExteriorThisFrame')(); }
    
    /**
    * List of interior hashes: pastebin.com/1FUyXNqY
    * Not for every interior zoom &gt; 0 available.
    */
    @:pure static inline function SetRadarAsInteriorThisFrame(interior: EitherType<String, Int>, x: Int, y: Int, z: Int, zoom: Int): Void { return untyped __lua__('SetRadarAsInteriorThisFrame')(interior, x, y, z, zoom); }
    
    /**
    * Toggles the big minimap state like in GTA:Online.
    */
    @:pure static inline function SetRadarBigmapEnabled(toggleBigMap: Bool, showFullMap: Bool): Void { return untyped __lua__('SetRadarBigmapEnabled')(toggleBigMap, showFullMap); }
    
    /**
    * zoomLevel ranges from 0 to 200
    */
    @:pure static inline function SetRadarZoom(zoomLevel: Int): Void { return untyped __lua__('SetRadarZoom')(zoomLevel); }
    @:pure static inline function SetRadarZoomLevelThisFrame(zoomLevel: Int): Void { return untyped __lua__('SetRadarZoomLevelThisFrame')(zoomLevel); }
    @:pure static inline function SetRadioAutoUnfreeze(toggle: Bool): Void { return untyped __lua__('SetRadioAutoUnfreeze')(toggle); }
    
    /**
    * Sets radio station by index.
    */
    @:pure static inline function SetRadioToStationIndex(radioStation: Int): Void { return untyped __lua__('SetRadioToStationIndex')(radioStation); }
    
    /**
    * For a full list, see here: pastebin.com/Kj9t38KF
    */
    @:pure static inline function SetRadioToStationName(stationName: String): Void { return untyped __lua__('SetRadioToStationName')(stationName); }
    
    /**
    * Only found this one in the decompiled scripts:
    * AUDIO::SET_RADIO_TRACK("RADIO_03_HIPHOP_NEW", "ARM1_RADIO_STARTS");
    */
    @:pure static inline function SetRadioTrack(radioStation: String, radioTrack: String): Void { return untyped __lua__('SetRadioTrack')(radioStation, radioTrack); }
    
    /**
    * puddles, rain fx on ground/buildings/puddles, rain sound
    */
    @:pure static inline function SetRainFxIntensity(intensity: Int): Void { return untyped __lua__('SetRainFxIntensity')(intensity); }
    @:pure static inline function SetRandomBoats(toggle: Bool): Int { return untyped __lua__('SetRandomBoats')(toggle); }
    
    /**
    * If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.
    * Does nothing if the mission flag is set.
    */
    @:pure static inline function SetRandomEventFlag(p0: Bool): Void { return untyped __lua__('SetRandomEventFlag')(p0); }
    @:pure static inline function SetRandomSeed(time: Int): Void { return untyped __lua__('SetRandomSeed')(time); }
    @:pure static inline function SetRandomTrains(toggle: Bool): Void { return untyped __lua__('SetRandomTrains')(toggle); }
    @:pure static inline function SetRandomVehicleDensityMultiplierThisFrame(multiplier: Int): Void { return untyped __lua__('SetRandomVehicleDensityMultiplierThisFrame')(multiplier); }
    @:pure static inline function SetRandomWeatherType(): Void { return untyped __lua__('SetRandomWeatherType')(); }
    @:pure static inline function SetReducePedModelBudget(toggle: Bool): Void { return untyped __lua__('SetReducePedModelBudget')(toggle); }
    @:pure static inline function SetReduceVehicleModelBudget(toggle: Bool): Void { return untyped __lua__('SetReduceVehicleModelBudget')(toggle); }
    
    /**
    * Sets the relationship between two groups. This should be called twice (once for each group).
    * Relationship types:
    * 0 = Companion
    * 1 = Respect
    * 2 = Like
    * 3 = Neutral
    * 4 = Dislike
    * 5 = Hate
    * 255 = Pedestrians
    * Example:
    * PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
    * PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
    */
    @:pure static inline function SetRelationshipBetweenGroups(relationship: Int, group1: EitherType<String, Int>, group2: EitherType<String, Int>): Void { return untyped __lua__('SetRelationshipBetweenGroups')(relationship, group1, group2); }
    
    /**
    * makes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations)
    */
    @:pure static inline function SetRenderTrainAsDerailed(train: Int, toggle: Bool): Void { return untyped __lua__('SetRenderTrainAsDerailed')(train, toggle); }
    @:pure static inline function SetResourceKvp(key: String, value: String): Void { return untyped __lua__('SetResourceKvp')(key, value); }
    @:pure static inline function SetResourceKvpFloat(key: String, value: Int): Void { return untyped __lua__('SetResourceKvpFloat')(key, value); }
    @:pure static inline function SetResourceKvpInt(key: String, value: Int): Void { return untyped __lua__('SetResourceKvpInt')(key, value); }
    
    /**
    * missing a last parameter int p6
    */
    @:pure static inline function SetRoadsBackToOriginal(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Void { return untyped __lua__('SetRoadsBackToOriginal')(p0, p1, p2, p3, p4, p5); }
    
    /**
    * bool p7 - always 1
    */
    @:pure static inline function SetRoadsBackToOriginalInAngledArea(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, p6: Int): Void { return untyped __lua__('SetRoadsBackToOriginalInAngledArea')(x1, y1, z1, x2, y2, z2, p6); }
    
    /**
    *  -- [[ Corrected conflicting parameter names ]]
    */
    @:pure static inline function SetRoadsInAngledArea(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, angle: Int, unknown1: Bool, unknown2: Bool, unknown3: Bool): Void { return untyped __lua__('SetRoadsInAngledArea')(x1, y1, z1, x2, y2, z2, angle, unknown1, unknown2, unknown3); }
    
    /**
    *  -- [[ Corrected conflicting parameter names ]]
    */
    @:pure static inline function SetRoadsInArea(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, unknown1: Bool, unknown2: Bool): Void { return untyped __lua__('SetRoadsInArea')(x1, y1, z1, x2, y2, z2, unknown1, unknown2); }
    
    /**
    * Multiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however.
    * Just call it one time, it is not required to be called once every tick.
    * Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
    */
    @:pure static inline function SetRunSprintMultiplierForPlayer(player: Int, multiplier: Int): Void { return untyped __lua__('SetRunSprintMultiplierForPlayer')(player, multiplier); }
    @:pure static inline function SetSaveHouse(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('SetSaveHouse')(p0, p1, p2); }
    
    /**
    * The bool is not a toggle!!!
    */
    @:pure static inline function SetSaveMenuActive(unk: Bool): Void { return untyped __lua__('SetSaveMenuActive')(unk); }
    @:pure static inline function SetScaleformMovieAsNoLongerNeeded(scaleformHandle: Int): Void { return untyped __lua__('SetScaleformMovieAsNoLongerNeeded')(scaleformHandle); }
    @:pure static inline function SetScaleformMovieToUseSystemTime(scaleform: Int, toggle: Bool): Void { return untyped __lua__('SetScaleformMovieToUseSystemTime')(scaleform, toggle); }
    
    /**
    * Occurrences in the b617d scripts: pastebin.com/Tvg2PRHU
    */
    @:pure static inline function SetScenarioGroupEnabled(scenarioGroup: String, p1: Bool): Void { return untyped __lua__('SetScenarioGroupEnabled')(scenarioGroup, p1); }
    @:pure static inline function SetScenarioPedDensityMultiplierThisFrame(p0: Int, p1: Int): Void { return untyped __lua__('SetScenarioPedDensityMultiplierThisFrame')(p0, p1); }
    @:pure static inline function SetScenarioPedsSpawnInSphereArea(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('SetScenarioPedsSpawnInSphereArea')(p0, p1, p2, p3, p4); }
    
    /**
    * Sets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED.
    */
    @:pure static inline function SetScenarioPedsToBeReturnedByNextCommand(value: Bool): Void { return untyped __lua__('SetScenarioPedsToBeReturnedByNextCommand')(value); }
    
    /**
    * seems to enable/disable specific scenario-types from happening in the game world.
    * Here are some scenario types from the scripts:
    * "WORLD_MOUNTAIN_LION_REST"
    * "WORLD_MOUNTAIN_LION_WANDER"
    * "DRIVE"
    * "WORLD_VEHICLE_POLICE_BIKE"
    * "WORLD_VEHICLE_POLICE_CAR"
    * "WORLD_VEHICLE_POLICE_NEXT_TO_CAR"
    * "WORLD_VEHICLE_DRIVE_SOLO"
    * "WORLD_VEHICLE_BIKER"
    * "WORLD_VEHICLE_DRIVE_PASSENGERS"
    * "WORLD_VEHICLE_SALTON_DIRT_BIKE"
    * "WORLD_VEHICLE_BICYCLE_MOUNTAIN"
    * "PROP_HUMAN_SEAT_CHAIR"
    * "WORLD_VEHICLE_ATTRACTOR"
    * "WORLD_HUMAN_LEANING"
    * "WORLD_HUMAN_HANG_OUT_STREET"
    * "WORLD_HUMAN_DRINKING"
    * "WORLD_HUMAN_SMOKING"
    * "WORLD_HUMAN_GUARD_STAND"
    * "WORLD_HUMAN_CLIPBOARD"
    * "WORLD_HUMAN_HIKER"
    * "WORLD_VEHICLE_EMPTY"
    * "WORLD_VEHICLE_BIKE_OFF_ROAD_RACE"
    * "WORLD_HUMAN_PAPARAZZI"
    * "WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN"
    * "WORLD_VEHICLE_PARK_PARALLEL"
    * "WORLD_VEHICLE_CONSTRUCTION_SOLO"
    * "WORLD_VEHICLE_CONSTRUCTION_PASSENGERS"
    * "WORLD_VEHICLE_TRUCK_LOGS"
    * -alphazolam
    * scenarioType could be the same as scenarioName, used in for example AI::TASK_START_SCENARIO_AT_POSITION.
    */
    @:pure static inline function SetScenarioTypeEnabled(scenarioType: String, toggle: Bool): Void { return untyped __lua__('SetScenarioTypeEnabled')(scenarioType, toggle); }
    
    /**
    * For a full list, see here: pastebin.com/yLNWicUi
    */
    @:pure static inline function SetScriptAsNoLongerNeeded(scriptName: String): Void { return untyped __lua__('SetScriptAsNoLongerNeeded')(scriptName); }
    
    /**
    * Only called once in the decompiled scripts. Presumably activates the specified generator.
    */
    @:pure static inline function SetScriptVehicleGenerator(vehicleGenerator: Int, enabled: Bool): Void { return untyped __lua__('SetScriptVehicleGenerator')(vehicleGenerator, enabled); }
    @:pure static inline function SetScriptWithNameHashAsNoLongerNeeded(scriptHash: EitherType<String, Int>): Void { return untyped __lua__('SetScriptWithNameHashAsNoLongerNeeded')(scriptHash); }
    @:pure static inline function SetStreamedScriptAsNoLongerNeeded(scriptHash: EitherType<String, Int>): Void { return untyped __lua__('SetStreamedScriptAsNoLongerNeeded')(scriptHash); }
    @:pure static inline function SetScriptedAnimSeatOffset(ped: Int, p1: Int): Void { return untyped __lua__('SetScriptedAnimSeatOffset')(ped, p1); }
    @:pure static inline function SetScriptedConversionCoordThisFrame(x: Int, y: Int, z: Int): Void { return untyped __lua__('SetScriptedConversionCoordThisFrame')(x, y, z); }
    
    /**
    * Toggles Heatvision on/off.
    */
    @:pure static inline function SetSeethrough(toggle: Bool): Void { return untyped __lua__('SetSeethrough')(toggle); }
    @:pure static inline function SetSequenceToRepeat(taskSequence: Int, repeat: Bool): Void { return untyped __lua__('SetSequenceToRepeat')(taskSequence, repeat); }
    @:pure static inline function SetSirenWithNoDriver(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetSirenWithNoDriver')(vehicle, toggle); }
    @:pure static inline function SetSnakeoilForEntry(name: String, path: String, data: String): Void { return untyped __lua__('SetSnakeoilForEntry')(name, path, data); }
    
    /**
    * Judging from the effect, this is some sort of vehicle density multiplier.
    */
    @:pure static inline function SetSomeVehicleDensityMultiplierThisFrame(value: Int): Void { return untyped __lua__('SetSomeVehicleDensityMultiplierThisFrame')(value); }
    
    /**
    * Judging from the effect, this is some sort of vehicle density multiplier.
    */
    @:pure static inline function N_0x90b6da738a9a25da(value: Int): Void { return untyped __lua__('N_0x90b6da738a9a25da')(value); }
    @:pure static inline function SetSpecialAbilityMultiplier(multiplier: Int): Void { return untyped __lua__('SetSpecialAbilityMultiplier')(multiplier); }
    @:pure static inline function SetSrlTime(p0: Int): Void { return untyped __lua__('SetSrlTime')(p0); }
    
    /**
    * Hardcoded to not work in multiplayer.
    * Used to lock/unlock doors to interior areas of the game.
    * (Possible) Door Types:
    * pastebin.com/9S2m3qA4
    * Heading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.
    * Locked means that the heading is locked.
    * p6 is always 0.
    * 225 door types, model names and coords found in stripclub.c4:
    * pastebin.com/gywnbzsH
    * get door info: pastebin.com/i14rbekD
    */
    @:pure static inline function SetStateOfClosestDoorOfType(type: EitherType<String, Int>, x: Int, y: Int, z: Int, locked: Bool, heading: Int, p6: Bool): Void { return untyped __lua__('SetStateOfClosestDoorOfType')(type, x, y, z, locked, heading, p6); }
    
    /**
    * Example:
    * AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_01_STAGE", false);	AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM", false);	AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM", false);
    * This turns off surrounding sounds not connected directly to peds.
    */
    @:pure static inline function SetStaticEmitterEnabled(emitterName: String, toggle: Bool): Void { return untyped __lua__('SetStaticEmitterEnabled')(emitterName, toggle); }
    
    /**
    * hash collision...
    */
    @:pure static inline function SetStoreEnabled(toggle: Bool): Void { return untyped __lua__('SetStoreEnabled')(toggle); }
    @:pure static inline function SetStreamedTextureDictAsNoLongerNeeded(textureDict: String): Void { return untyped __lua__('SetStreamedTextureDictAsNoLongerNeeded')(textureDict); }
    @:pure static inline function SetStreaming(toggle: Bool): Void { return untyped __lua__('SetStreaming')(toggle); }
    @:pure static inline function SetSuperJumpThisFrame(player: Int): Int { return untyped __lua__('SetSuperJumpThisFrame')(player); }
    
    /**
    * Swim speed multiplier.
    * Multiplier goes up to 1.49
    * Just call it one time, it is not required to be called once every tick. - Note copied from below native.
    * Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
    */
    @:pure static inline function SetSwimMultiplierForPlayer(player: Int, multiplier: Int): Void { return untyped __lua__('SetSwimMultiplierForPlayer')(player, multiplier); }
    
    /**
    * Sets the position of the audio event to the entity's position for one frame(?)
    * if (l_8C3 == 0) {
    * sub_27fd1(0, -1, 1);
    * if (PED::IS_SYNCHRONIZED_SCENE_RUNNING(l_87D)) {
    * AUDIO::STOP_SYNCHRONIZED_AUDIO_EVENT(l_87D);
    * }
    * if (sub_7dd(l_A00)) {
    * AUDIO::_950A154B8DAB6185("PAP2_IG1_POPPYSEX", l_A00);
    * }
    * sub_91c("TK************ SETTING SYNCH SCENE AUDIO POSITION THIS FRAME ************TK");
    * l_8C3 = 1;
    * }
    * --
    * Found in the b617d scripts, duplicates removed:
    * AUDIO::_950A154B8DAB6185("CAR_5_IG_6", l_7FE[1 -- [[1]] ]);
    * AUDIO::_950A154B8DAB6185("EX03_TRAIN_BIKE_LAND",   PLAYER::PLAYER_PED_ID());
    * AUDIO::_950A154B8DAB6185("FBI_2_MCS_1_LeadIn", l_40[2 -- [[1]] ]);
    * AUDIO::_950A154B8DAB6185("FIN_C2_MCS_1", l_24C[0 -- [[1]] ]);
    * AUDIO::_950A154B8DAB6185("MNT_DNC", l_5F);
    * AUDIO::_950A154B8DAB6185("PAP2_IG1_POPPYSEX", l_A00);
    */
    @:pure static inline function SetSynchronizedAudioEventPositionThisFrame(p0: String, p1: Int): Void { return untyped __lua__('SetSynchronizedAudioEventPositionThisFrame')(p0, p1); }
    
    /**
    * Sets the position of the audio event to the entity's position for one frame(?)
    * if (l_8C3 == 0) {
    * sub_27fd1(0, -1, 1);
    * if (PED::IS_SYNCHRONIZED_SCENE_RUNNING(l_87D)) {
    * AUDIO::STOP_SYNCHRONIZED_AUDIO_EVENT(l_87D);
    * }
    * if (sub_7dd(l_A00)) {
    * AUDIO::_950A154B8DAB6185("PAP2_IG1_POPPYSEX", l_A00);
    * }
    * sub_91c("TK************ SETTING SYNCH SCENE AUDIO POSITION THIS FRAME ************TK");
    * l_8C3 = 1;
    * }
    * --
    * Found in the b617d scripts, duplicates removed:
    * AUDIO::_950A154B8DAB6185("CAR_5_IG_6", l_7FE[1 -- [[1]] ]);
    * AUDIO::_950A154B8DAB6185("EX03_TRAIN_BIKE_LAND",   PLAYER::PLAYER_PED_ID());
    * AUDIO::_950A154B8DAB6185("FBI_2_MCS_1_LeadIn", l_40[2 -- [[1]] ]);
    * AUDIO::_950A154B8DAB6185("FIN_C2_MCS_1", l_24C[0 -- [[1]] ]);
    * AUDIO::_950A154B8DAB6185("MNT_DNC", l_5F);
    * AUDIO::_950A154B8DAB6185("PAP2_IG1_POPPYSEX", l_A00);
    */
    @:pure static inline function N_0x950a154b8dab6185(p0: String, p1: Int): Void { return untyped __lua__('N_0x950a154b8dab6185')(p0, p1); }
    @:pure static inline function SetSynchronizedSceneLooped(sceneID: Int, toggle: Bool): Void { return untyped __lua__('SetSynchronizedSceneLooped')(sceneID, toggle); }
    @:pure static inline function SetSynchronizedSceneOcclusionPortal(sceneID: Int, p1: Bool): Void { return untyped __lua__('SetSynchronizedSceneOcclusionPortal')(sceneID, p1); }
    @:pure static inline function N_0x394b9cd12435c981(sceneID: Int, p1: Bool): Void { return untyped __lua__('N_0x394b9cd12435c981')(sceneID, p1); }
    @:pure static inline function SetSynchronizedSceneOrigin(sceneID: Int, x: Int, y: Int, z: Int, roll: Int, pitch: Int, yaw: Int, p7: Bool): Void { return untyped __lua__('SetSynchronizedSceneOrigin')(sceneID, x, y, z, roll, pitch, yaw, p7); }
    @:pure static inline function SetSynchronizedScenePhase(sceneID: Int, phase: Int): Void { return untyped __lua__('SetSynchronizedScenePhase')(sceneID, phase); }
    @:pure static inline function SetSynchronizedSceneRate(sceneID: Int, rate: Int): Void { return untyped __lua__('SetSynchronizedSceneRate')(sceneID, rate); }
    @:pure static inline function SetTaskVehicleChaseBehaviorFlag(ped: Int, flag: Int, set: Bool): Void { return untyped __lua__('SetTaskVehicleChaseBehaviorFlag')(ped, flag, set); }
    @:pure static inline function SetTaskVehicleChaseIdealPursuitDistance(ped: Int, distance: Int): Void { return untyped __lua__('SetTaskVehicleChaseIdealPursuitDistance')(ped, distance); }
    
    /**
    * This is not tested - it's just an assumption.
    * Doesn't seem to work.  I'll try with an int instead. --JT
    * Read the scripts, im dumpass.
    * if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) {
    * VEHICLE::SET_TAXI_LIGHTS(l_115, 1);
    * }
    */
    @:pure static inline function SetTaxiLights(vehicle: Int, state: Bool): Void { return untyped __lua__('SetTaxiLights')(vehicle, state); }
    @:pure static inline function SetTeamPickupObject(object: Int, p1: Int, p2: Bool): Void { return untyped __lua__('SetTeamPickupObject')(object, p1, p2); }
    @:pure static inline function SetTextCentre(align: Bool): Void { return untyped __lua__('SetTextCentre')(align); }
    @:pure static inline function SetTextChatEnabled(enabled: Bool): Int { return untyped __lua__('SetTextChatEnabled')(enabled); }
    
    /**
    * Sets an unknown boolean value in the text chat.
    */
    @:pure static inline function SetTextChatUnk(p0: Bool): Void { return untyped __lua__('SetTextChatUnk')(p0); }
    
    /**
    * colors you input not same as you think?
    * A: for some reason its R B G A
    */
    @:pure static inline function SetTextColour(red: Int, green: Int, blue: Int, alpha: Int): Void { return untyped __lua__('SetTextColour')(red, green, blue, alpha); }
    @:pure static inline function SetTextDropShadow(): Void { return untyped __lua__('SetTextDropShadow')(); }
    
    /**
    * distance - shadow distance in pixels, both horizontal and vertical
    * r, g, b, a
    */
    @:pure static inline function SetTextDropshadow(distance: Int, r: Int, g: Int, b: Int, a: Int): Void { return untyped __lua__('SetTextDropshadow')(distance, r, g, b, a); }
    @:pure static inline function SetTextEdge(p0: Int, r: Int, g: Int, b: Int, a: Int): Void { return untyped __lua__('SetTextEdge')(p0, r, g, b, a); }
    
    /**
    * fonts that mess up your text where made for number values/misc stuff
    */
    @:pure static inline function SetTextFont(fontType: Int): Void { return untyped __lua__('SetTextFont')(fontType); }
    
    /**
    * Types -
    * 0: Center-Justify
    * 1: Left-Justify
    * 2: Right-Justify
    * Right-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen
    */
    @:pure static inline function SetTextJustification(justifyType: Int): Void { return untyped __lua__('SetTextJustification')(justifyType); }
    
    /**
    * Types -
    * 0: Center-Justify
    * 1: Left-Justify
    * 2: Right-Justify
    * Right-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen
    */
    @:pure static inline function N_0x4e096588b13ffeca(justifyType: Int): Void { return untyped __lua__('N_0x4e096588b13ffeca')(justifyType); }
    
    /**
    * from script am_mp_yacht.c int?
    * ui::set_text_leading(2);
    */
    @:pure static inline function SetTextLeading(p0: Bool): Void { return untyped __lua__('SetTextLeading')(p0); }
    @:pure static inline function SetTextOutline(): Void { return untyped __lua__('SetTextOutline')(); }
    @:pure static inline function SetTextProportional(p0: Bool): Void { return untyped __lua__('SetTextProportional')(p0); }
    @:pure static inline function SetTextRenderId(renderId: Int): Void { return untyped __lua__('SetTextRenderId')(renderId); }
    @:pure static inline function SetTextRightJustify(toggle: Bool): Void { return untyped __lua__('SetTextRightJustify')(toggle); }
    
    /**
    * Size range : 0F to 1.0F
    * p0 is unknown and doesn't seem to have an effect, yet in the game scripts it changes to 1.0F sometimes.
    */
    @:pure static inline function SetTextScale(p0: Int, size: Int): Void { return untyped __lua__('SetTextScale')(p0, size); }
    
    /**
    * It sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right.
    * start - left boundry on screen position (0.0 - 1.0)
    * end - right boundry on screen position (0.0 - 1.0)
    */
    @:pure static inline function SetTextWrap(start: Int, end: Int): Void { return untyped __lua__('SetTextWrap')(start, end); }
    @:pure static inline function SetThisScriptCanBePaused(toggle: Bool): Void { return untyped __lua__('SetThisScriptCanBePaused')(toggle); }
    @:pure static inline function SetThisScriptCanRemoveBlipsCreatedByAnyScript(toggle: Bool): Void { return untyped __lua__('SetThisScriptCanRemoveBlipsCreatedByAnyScript')(toggle); }
    
    /**
    * Hash collision. Please change back to _0x_
    */
    @:pure static inline function SetTimeExclusiveDisplayTexture(p0: Int, p1: Bool): Void { return untyped __lua__('SetTimeExclusiveDisplayTexture')(p0, p1); }
    
    /**
    * hash collision?
    */
    @:pure static inline function SetTimeIdleDrop(p0: Bool, p1: Bool): Void { return untyped __lua__('SetTimeIdleDrop')(p0, p1); }
    
    /**
    * hash collision?
    */
    @:pure static inline function N_0x9dfe13ecdc1ec196(p0: Bool, p1: Bool): Void { return untyped __lua__('N_0x9dfe13ecdc1ec196')(p0, p1); }
    
    /**
    * Maximum value is 1.
    * At a value of 0 the game will still run at a minimum time scale.
    * Slow Motion 1: 0.6
    * Slow Motion 2: 0.4
    * Slow Motion 3: 0.2
    */
    @:pure static inline function SetTimeScale(time: Int): Void { return untyped __lua__('SetTimeScale')(time); }
    
    /**
    * Loads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. "timecycle_mods_1.xml")
    * Parameters:
    * modifierName - The modifier to load (e.g. "V_FIB_IT3", "scanline_cam", etc.)
    * For a full list, see here: pastebin.com/kVPwMemE
    */
    @:pure static inline function SetTimecycleModifier(modifierName: String): Void { return untyped __lua__('SetTimecycleModifier')(modifierName); }
    @:pure static inline function SetTimecycleModifierStrength(strength: Int): Void { return untyped __lua__('SetTimecycleModifierStrength')(strength); }
    
    /**
    * Sets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.
    */
    @:pure static inline function SetTowTruckCraneHeight(towTruck: Int, height: Int): Void { return untyped __lua__('SetTowTruckCraneHeight')(towTruck, height); }
    
    /**
    * Sets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.
    */
    @:pure static inline function SetTowTruckCraneRaised(towTruck: Int, height: Int): Void { return untyped __lua__('SetTowTruckCraneRaised')(towTruck, height); }
    @:pure static inline function SetTrackedPointInfo(point: Int, x: Int, y: Int, z: Int, radius: Int): Int { return untyped __lua__('SetTrackedPointInfo')(point, x, y, z, radius); }
    @:pure static inline function SetTrainCruiseSpeed(train: Int, speed: Int): Int { return untyped __lua__('SetTrainCruiseSpeed')(train, speed); }
    @:pure static inline function SetTrainSpeed(train: Int, speed: Int): Int { return untyped __lua__('SetTrainSpeed')(train, speed); }
    
    /**
    * For a full list, see here: pastebin.com/kVPwMemE
    */
    @:pure static inline function SetTransitionTimecycleModifier(modifierName: String, transition: Int): Void { return untyped __lua__('SetTransitionTimecycleModifier')(modifierName, transition); }
    
    /**
    * Might be more appropriate in AUDIO?
    * Rockstar made it like this.
    * Probably changes tvs from being a 3d audio to being "global" audio
    */
    @:pure static inline function SetTvAudioFrontend(toggle: Bool): Void { return untyped __lua__('SetTvAudioFrontend')(toggle); }
    @:pure static inline function SetTvChannel(channel: Int): Void { return untyped __lua__('SetTvChannel')(channel); }
    @:pure static inline function SetTvVolume(volume: Int): Void { return untyped __lua__('SetTvVolume')(volume); }
    
    /**
    * Sets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to 9BAE5AD2508DF078.
    * Documented by NTAuthority (http://fivem.net/).
    */
    @:pure static inline function SetUnkMapFlag(flag: Int): Void { return untyped __lua__('SetUnkMapFlag')(flag); }
    @:pure static inline function SetUseHiDof(): Void { return untyped __lua__('SetUseHiDof')(); }
    @:pure static inline function SetUserRadioControlEnabled(toggle: Bool): Void { return untyped __lua__('SetUserRadioControlEnabled')(toggle); }
    
    /**
    * Hash collision! Please change back to _0xEF4CED81CEBEDC6D
    */
    @:pure static inline function SetUseridsUihidden(p0: Int, p1: Int): Int { return untyped __lua__('SetUseridsUihidden')(p0, p1); }
    @:pure static inline function SetVariableOnSound(soundId: Int, p2: Int): Int { return untyped __lua__('SetVariableOnSound')(soundId, p2); }
    
    /**
    * From the scripts, p0:
    * "ArmWrestlingIntensity",
    * "INOUT",
    * "Monkey_Stream",
    * "ZoomLevel"
    */
    @:pure static inline function SetVariableOnStream(p0: String, p1: Int): Void { return untyped __lua__('SetVariableOnStream')(p0, p1); }
    
    /**
    * For a full list, see here: pastebin.com/Kj9t38KF
    */
    @:pure static inline function SetVehRadioStation(vehicle: Int, radioStation: String): Void { return untyped __lua__('SetVehRadioStation')(vehicle, radioStation); }
    @:pure static inline function SetVehicleAlarm(vehicle: Int, state: Bool): Void { return untyped __lua__('SetVehicleAlarm')(vehicle, state); }
    @:pure static inline function SetVehicleAlarmTimeLeft(vehicle: Int, time: Int): Void { return untyped __lua__('SetVehicleAlarmTimeLeft')(vehicle, time); }
    
    /**
    * Makes the vehicle accept no passengers.
    */
    @:pure static inline function SetVehicleAllowNoPassengersLockon(veh: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleAllowNoPassengersLockon')(veh, toggle); }
    
    /**
    * This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
    */
    @:pure static inline function SetVehicleAsNoLongerNeeded(vehicle: Int): Void { return untyped __lua__('SetVehicleAsNoLongerNeeded')(vehicle); }
    
    /**
    * This native sets the audio of the specified vehicle to the audioName (p1).
    * Use the audioNameHash found in vehicles.meta
    * Example:
    * _SET_VEHICLE_AUDIO(veh, "ADDER");
    * The selected vehicle will now have the audio of the Adder.
    * FORCE_VEHICLE_???
    */
    @:pure static inline function SetVehicleAudio(vehicle: Int, audioName: String): Void { return untyped __lua__('SetVehicleAudio')(vehicle, audioName); }
    
    /**
    * This native sets the audio of the specified vehicle to the audioName (p1).
    * Use the audioNameHash found in vehicles.meta
    * Example:
    * _SET_VEHICLE_AUDIO(veh, "ADDER");
    * The selected vehicle will now have the audio of the Adder.
    * FORCE_VEHICLE_???
    */
    @:pure static inline function N_0x4f0c413926060b38(vehicle: Int, audioName: String): Void { return untyped __lua__('N_0x4f0c413926060b38')(vehicle, audioName); }
    
    /**
    * Please change to void.
    */
    @:pure static inline function SetVehicleAutomaticallyAttaches(vehicle: Int, p1: Int, p2: Int): Int { return untyped __lua__('SetVehicleAutomaticallyAttaches')(vehicle, p1, p2); }
    
    /**
    * p2 often set to 1000.0 in the decompiled scripts.
    */
    @:pure static inline function SetVehicleBodyHealth(vehicle: Int, value: Int): Void { return untyped __lua__('SetVehicleBodyHealth')(vehicle, value); }
    
    /**
    * SET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0);
    * SET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0);
    * Will give a boost-soundeffect.
    */
    @:pure static inline function SetVehicleBoostActive(vehicle: Int, Toggle: Bool): Void { return untyped __lua__('SetVehicleBoostActive')(vehicle, Toggle); }
    @:pure static inline function SetVehicleBrakeLights(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleBrakeLights')(vehicle, toggle); }
    
    /**
    * On accelerating, spins the driven wheels with the others braked, so you don't go anywhere.
    */
    @:pure static inline function SetVehicleBurnout(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleBurnout')(vehicle, toggle); }
    
    /**
    * This has not yet been tested - it's just an assumption of what the types could be.
    */
    @:pure static inline function SetVehicleCanBeTargetted(vehicle: Int, state: Bool): Void { return untyped __lua__('SetVehicleCanBeTargetted')(vehicle, state); }
    @:pure static inline function SetVehicleCanBeUsedByFleeingPeds(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleCanBeUsedByFleeingPeds')(vehicle, toggle); }
    @:pure static inline function N_0x300504b23bd3b711(vehicle: Int, toggle: Bool): Void { return untyped __lua__('N_0x300504b23bd3b711')(vehicle, toggle); }
    @:pure static inline function SetVehicleCanBeVisiblyDamaged(vehicle: Int, state: Bool): Void { return untyped __lua__('SetVehicleCanBeVisiblyDamaged')(vehicle, state); }
    @:pure static inline function SetVehicleCanBreak(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleCanBreak')(vehicle, toggle); }
    
    /**
    * Previously named GET_VEHICLE_DEFORMATION_GET_TREE (hash collision)
    * from Decrypted Scripts I found
    * VEHICLE::SET_VEHICLE_CEILING_HEIGHT(l_BD9[2 -- [[2]] ], 420.0);
    */
    @:pure static inline function SetVehicleCeilingHeight(vehicle: Int, p1: Int): Void { return untyped __lua__('SetVehicleCeilingHeight')(vehicle, p1); }
    
    /**
    * Previously named GET_VEHICLE_DEFORMATION_GET_TREE (hash collision)
    * from Decrypted Scripts I found
    * VEHICLE::SET_VEHICLE_CEILING_HEIGHT(l_BD9[2 -- [[2]] ], 420.0);
    */
    @:pure static inline function GetVehicleDeformationGetTree(vehicle: Int, p1: Int): Void { return untyped __lua__('GetVehicleDeformationGetTree')(vehicle, p1); }
    @:pure static inline function SetVehicleClutch(vehicle: Int, clutch: Int): Void { return untyped __lua__('SetVehicleClutch')(vehicle, clutch); }
    
    /**
    * dont be a dick
    */
    @:pure static inline function SetVehicleColourCombination(vehicle: Int, colorCombination: Int): Void { return untyped __lua__('SetVehicleColourCombination')(vehicle, colorCombination); }
    
    /**
    * colorPrimary &amp; colorSecondary are the paint index for the vehicle.
    * For a list of valid paint indexes, view: pastebin.com/pwHci0xK
    * -------------------------------------------------------------------------
    * Use this to get the number of color indices: pastebin.com/RQEeqTSM
    * Note: minimum color index is 0, maximum color index is (numColorIndices - 1)
    */
    @:pure static inline function SetVehicleColours(vehicle: Int, colorPrimary: Int, colorSecondary: Int): Void { return untyped __lua__('SetVehicleColours')(vehicle, colorPrimary, colorSecondary); }
    
    /**
    * Money pickups are created around cars when they explodes. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seems to give the same amount of money.
    * youtu.be/3arlUxzHl5Y
    * i.imgur.com/WrNpYFs.jpg
    * From the scripts:
    * VEHICLE::_068F64F2470F9656(l_36, 0);
    * Found a "correct" name for this :P
    * _dead_vehicle_pickups_dies_when_set_exploded_destroy_it_drops_on_money
    * SET_VEHICLE_D* or SET_VEHICLE_E*
    */
    @:pure static inline function SetVehicleCreatesMoneyPickupsWhenExploded(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleCreatesMoneyPickupsWhenExploded')(vehicle, toggle); }
    
    /**
    * Money pickups are created around cars when they explodes. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seems to give the same amount of money.
    * youtu.be/3arlUxzHl5Y
    * i.imgur.com/WrNpYFs.jpg
    * From the scripts:
    * VEHICLE::_068F64F2470F9656(l_36, 0);
    * Found a "correct" name for this :P
    * _dead_vehicle_pickups_dies_when_set_exploded_destroy_it_drops_on_money
    * SET_VEHICLE_D* or SET_VEHICLE_E*
    */
    @:pure static inline function N_0x068f64f2470f9656(vehicle: Int, toggle: Bool): Void { return untyped __lua__('N_0x068f64f2470f9656')(vehicle, toggle); }
    @:pure static inline function SetVehicleCurrentRpm(vehicle: Int, rpm: Int): Void { return untyped __lua__('SetVehicleCurrentRpm')(vehicle, rpm); }
    
    /**
    * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
    */
    @:pure static inline function SetVehicleCustomPrimaryColour(vehicle: Int, r: Int, g: Int, b: Int): Void { return untyped __lua__('SetVehicleCustomPrimaryColour')(vehicle, r, g, b); }
    
    /**
    * p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
    */
    @:pure static inline function SetVehicleCustomSecondaryColour(vehicle: Int, r: Int, g: Int, b: Int): Void { return untyped __lua__('SetVehicleCustomSecondaryColour')(vehicle, r, g, b); }
    
    /**
    * Apply damage to vehicle at a location. Location is relative to vehicle model (not world).
    * Radius of effect damage applied in a sphere at impact location
    */
    @:pure static inline function SetVehicleDamage(vehicle: Int, xOffset: Int, yOffset: Int, zOffset: Int, damage: Int, radius: Int, p6: Bool): Void { return untyped __lua__('SetVehicleDamage')(vehicle, xOffset, yOffset, zOffset, damage, radius, p6); }
    @:pure static inline function SetVehicleDeformationFixed(vehicle: Int): Void { return untyped __lua__('SetVehicleDeformationFixed')(vehicle); }
    
    /**
    * ??? Usage
    * ??? Use this native inside a looped function.
    * ??? Values:
    * ??? 0.0 = no vehicles on streets
    * ??? 1.0 = normal vehicles on streets
    */
    @:pure static inline function SetVehicleDensityMultiplierThisFrame(multiplier: Int): Void { return untyped __lua__('SetVehicleDensityMultiplierThisFrame')(multiplier); }
    
    /**
    * You can't use values greater than 15.0
    * You can see why here: pastebin.com/Wbn34fGD
    * Also, R* does (float)(rand() % 15) to get a random dirt level when generating a vehicle.
    */
    @:pure static inline function SetVehicleDirtLevel(vehicle: Int, dirtLevel: Int): Void { return untyped __lua__('SetVehicleDirtLevel')(vehicle, dirtLevel); }
    
    /**
    * doorIndex:
    * 0 = Front Right Door
    * 1 = Front Left Door
    * 2 = Back Right Door
    * 3 = Back Left Door
    * 4 = Hood
    * 5 = Trunk
    * Changed last paramater from CreateDoorObject To NoDoorOnTheFloor because when on false, the door object is created,and not created when on true...the former parameter name was counter intuitive...(by Calderon)
    */
    @:pure static inline function SetVehicleDoorBroken(vehicle: Int, doorIndex: Int, deleteDoor: Bool): Void { return untyped __lua__('SetVehicleDoorBroken')(vehicle, doorIndex, deleteDoor); }
    
    /**
    * Keeps Vehicle Doors/Hood/Trunk from breaking off
    */
    @:pure static inline function SetVehicleDoorCanBreak(vehicle: Int, doorIndex: Int, isBreakable: Bool): Void { return untyped __lua__('SetVehicleDoorCanBreak')(vehicle, doorIndex, isBreakable); }
    
    /**
    * Keeps Vehicle Doors/Hood/Trunk from breaking off
    */
    @:pure static inline function SetVehicleDoorBreakable(vehicle: Int, doorIndex: Int, isBreakable: Bool): Void { return untyped __lua__('SetVehicleDoorBreakable')(vehicle, doorIndex, isBreakable); }
    
    /**
    * doorIndex:
    * 0 = Front Left Door (driver door)
    * 1 = Front Right Door
    * 2 = Back Left Door
    * 3 = Back Right Door
    * 4 = Hood
    * 5 = Trunk
    * 6 = Trunk2
    * p2:
    * mostly use 0 and 1, very rare using 3 and 5
    * p3:
    * It seems it is an angle
    * Example in VB:
    * Public Shared Sub Set_Vehicle_Door_Angle(Vehicle As Vehicle, Door As VehicleDoor, Angle As Single)
    * Native.Function.Call(Hash.SET_VEHICLE_DOOR_CONTROL, Vehicle.Handle, Door, 1, Angle)
    * End Sub
    * I'm Not MentaL
    * sfink: p2 is speed, 5 is fast, 1 is slow 3 is medium
    */
    @:pure static inline function SetVehicleDoorControl(vehicle: Int, doorIndex: Int, speed: Int, angle: Int): Void { return untyped __lua__('SetVehicleDoorControl')(vehicle, doorIndex, speed, angle); }
    @:pure static inline function SetVehicleDoorLatched(vehicle: Int, doorIndex: Int, p2: Bool, p3: Bool, p4: Bool): Void { return untyped __lua__('SetVehicleDoorLatched')(vehicle, doorIndex, p2, p3, p4); }
    
    /**
    * doorIndex:
    * 0 = Front Left Door
    * 1 = Front Right Door
    * 2 = Back Left Door
    * 3 = Back Right Door
    * 4 = Hood
    * 5 = Trunk
    * 6 = Back
    * 7 = Back2
    */
    @:pure static inline function SetVehicleDoorOpen(vehicle: Int, doorIndex: Int, loose: Bool, openInstantly: Bool): Void { return untyped __lua__('SetVehicleDoorOpen')(vehicle, doorIndex, loose, openInstantly); }
    
    /**
    * doorIndex:
    * 0 = Front Left Door
    * 1 = Front Right Door
    * 2 = Back Left Door
    * 3 = Back Right Door
    * 4 = Hood
    * 5 = Trunk
    * 6 = Trunk2
    */
    @:pure static inline function SetVehicleDoorShut(vehicle: Int, doorIndex: Int, closeInstantly: Bool): Void { return untyped __lua__('SetVehicleDoorShut')(vehicle, doorIndex, closeInstantly); }
    
    /**
    * 1
    * 2 - CARLOCK_LOCKED (locked)
    * 3
    * 4 - CARLOCK_LOCKED_PLAYER_INSIDE (can get in, can't leave)
    * (maybe, these are leftovers from GTA:VC)
    * 5
    * 6
    * 7
    * (source: GTA VC miss2 leak, matching constants for 0/2/4, testing)
    * They use 10 in am_mp_property_int, don't know what it does atm.
    */
    @:pure static inline function SetVehicleDoorsLocked(vehicle: Int, doorLockStatus: Int): Void { return untyped __lua__('SetVehicleDoorsLocked')(vehicle, doorLockStatus); }
    
    /**
    * After some analysis, I've decided that these are what the parameters are.
    * We can see this being used in R* scripts such as "am_mp_property_int.ysc.c4":
    * l_11A1 = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 1);
    * ...
    * VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(l_11A1, 1);
    */
    @:pure static inline function SetVehicleDoorsLockedForAllPlayers(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleDoorsLockedForAllPlayers')(vehicle, toggle); }
    @:pure static inline function SetVehicleDoorsLockedForPlayer(vehicle: Int, player: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleDoorsLockedForPlayer')(vehicle, player, toggle); }
    @:pure static inline function SetVehicleDoorsLockedForTeam(vehicle: Int, team: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleDoorsLockedForTeam')(vehicle, team, toggle); }
    
    /**
    * Closes all doors of a vehicle:
    */
    @:pure static inline function SetVehicleDoorsShut(vehicle: Int, closeInstantly: Bool): Void { return untyped __lua__('SetVehicleDoorsShut')(vehicle, closeInstantly); }
    @:pure static inline function SetVehicleEngineCanDegrade(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleEngineCanDegrade')(vehicle, toggle); }
    
    /**
    * 1000 is max health
    * Begins leaking gas at around 650 health
    */
    @:pure static inline function SetVehicleEngineHealth(vehicle: Int, health: Int): Void { return untyped __lua__('SetVehicleEngineHealth')(vehicle, health); }
    
    /**
    * Starts or stops the engine on the specified vehicle.
    * vehicle: The vehicle to start or stop the engine on.
    * value: true to turn the vehicle on; false to turn it off.
    * instantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.
    * --------------------------------------
    * And what's with BOOL otherwise, what does it do???
    * --------------------------------------
    * I have no clue what 'otherwise' is either. Xbox360 of course ends at TU27 so that's our latest scripts and every script still only has the first 3 parameters.
    * Side Note: It would of been nice though if it was to handle jet engines instead of having that separate native for it.
    */
    @:pure static inline function SetVehicleEngineOn(vehicle: Int, value: Bool, instantly: Bool, otherwise: Bool): Void { return untyped __lua__('SetVehicleEngineOn')(vehicle, value, instantly, otherwise); }
    
    /**
    * Vehicle power multiplier.
    * Does not have to be looped each frame. Can be set once.
    * Values lower than 1f don't work.
    * Note: If the value is set with GET_RANDOM_FLOAT_IN_RANGE, the vehicle will have an absurdly high ammount of power, and will become almost undrivable for the player or NPCs. The range doesn't seem to matter.
    * An high value like 10000000000f will visually remove the wheels that apply the power (front wheels for FWD, rear wheels for RWD), but the power multiplier will still apply, and the wheels still work.
    */
    @:pure static inline function SetVehicleEnginePowerMultiplier(vehicle: Int, value: Int): Void { return untyped __lua__('SetVehicleEnginePowerMultiplier')(vehicle, value); }
    @:pure static inline function SetVehicleEngineTemperature(vehicle: Int, temperature: Int): Void { return untyped __lua__('SetVehicleEngineTemperature')(vehicle, temperature); }
    
    /**
    * &lt;1.0 - Decreased torque
    * =1.0 - Default torque
    * &gt;1.0 - Increased torque
    * Negative values will cause the vehicle to go backwards instead of forwards while accelerating.
    * value - is between 0.2 and 1.8 in the decompiled scripts.
    * This needs to be called every frame to take effect.
    */
    @:pure static inline function SetVehicleEngineTorqueMultiplier(vehicle: Int, value: Int): Void { return untyped __lua__('SetVehicleEngineTorqueMultiplier')(vehicle, value); }
    
    /**
    * formerly known as _SET_VEHICLE_PAINT_FADE
    * The parameter fade is a value from 0-1, where 0 is fresh paint.
    * ------------------------------------------------------------------------------------
    * The actual value isn't stored as a float but as an unsigned char (BYTE). More info here: pastebin.com/r0h6EM5s
    */
    @:pure static inline function SetVehicleEnveffScale(vehicle: Int, fade: Int): Void { return untyped __lua__('SetVehicleEnveffScale')(vehicle, fade); }
    
    /**
    * formerly known as _SET_VEHICLE_PAINT_FADE
    * The parameter fade is a value from 0-1, where 0 is fresh paint.
    * ------------------------------------------------------------------------------------
    * The actual value isn't stored as a float but as an unsigned char (BYTE). More info here: pastebin.com/r0h6EM5s
    */
    @:pure static inline function SetVehiclePaintFade(vehicle: Int, fade: Int): Void { return untyped __lua__('SetVehiclePaintFade')(vehicle, fade); }
    @:pure static inline function SetVehicleExclusiveDriver(vehicle: Int, p1: Bool): Void { return untyped __lua__('SetVehicleExclusiveDriver')(vehicle, p1); }
    @:pure static inline function N_0x41062318f23ed854(vehicle: Int, p1: Bool): Void { return untyped __lua__('N_0x41062318f23ed854')(vehicle, p1); }
    @:pure static inline function SetVehicleExclusiveDriver_2(vehicle: Int, ped: Int, p2: Int): Void { return untyped __lua__('SetVehicleExclusiveDriver_2')(vehicle, ped, p2); }
    @:pure static inline function N_0xb5c51b5502e85e83(vehicle: Int, ped: Int, p2: Int): Void { return untyped __lua__('N_0xb5c51b5502e85e83')(vehicle, ped, p2); }
    
    /**
    * Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
    */
    @:pure static inline function SetVehicleExplodesOnHighExplosionDamage(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleExplodesOnHighExplosionDamage')(vehicle, toggle); }
    
    /**
    * Note: only some vehicle have extras
    * extra ids are from 1 - 9 depending on the vehicle
    * -------------------------------------------------
    * ^ not sure if outdated or simply wrong. Max extra ID for b944 is 14
    * -------------------------------------------------
    * p2 is not a on/off toggle. mostly 0 means on and 1 means off.
    * not sure if it really should be a BOOL.
    */
    @:pure static inline function SetVehicleExtra(vehicle: Int, extraId: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleExtra')(vehicle, extraId, toggle); }
    
    /**
    * They use the same color indexs as SET_VEHICLE_COLOURS.
    */
    @:pure static inline function SetVehicleExtraColours(vehicle: Int, pearlescentColor: Int, wheelColor: Int): Void { return untyped __lua__('SetVehicleExtraColours')(vehicle, pearlescentColor, wheelColor); }
    @:pure static inline function SetVehicleFixed(vehicle: Int): Void { return untyped __lua__('SetVehicleFixed')(vehicle); }
    
    /**
    * SCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer.
    * Speed is in meters per second
    * You can convert meters/s to mph here:
    * http://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm
    */
    @:pure static inline function SetVehicleForwardSpeed(vehicle: Int, speed: Int): Void { return untyped __lua__('SetVehicleForwardSpeed')(vehicle, speed); }
    
    /**
    * Seems to be related to the metal parts, not tyres (like i was expecting lol)
    */
    @:pure static inline function SetVehicleFrictionOverride(vehicle: Int, friction: Int): Void { return untyped __lua__('SetVehicleFrictionOverride')(vehicle, friction); }
    @:pure static inline function SetVehicleFuelLevel(vehicle: Int, level: Int): Void { return untyped __lua__('SetVehicleFuelLevel')(vehicle, level); }
    
    /**
    * It switch to highbeam when p1 is set to true.
    */
    @:pure static inline function SetVehicleFullbeam(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleFullbeam')(vehicle, toggle); }
    @:pure static inline function SetVehicleGravity(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleGravity')(vehicle, toggle); }
    @:pure static inline function SetVehicleGravityAmount(vehicle: Int, gravity: Int): Void { return untyped __lua__('SetVehicleGravityAmount')(vehicle, gravity); }
    
    /**
    * This native makes the vehicle stop immediately, as happens when we enter a MP garage.
    * . distance defines how far it will travel until stopping. Garage doors use 3.0.
    * . If killEngine is set to 1, you cannot resume driving the vehicle once it stops. This looks like is a bitmapped integer.
    */
    @:pure static inline function SetVehicleHalt(vehicle: Int, distance: Int, killEngine: Int, unknown: Bool): Void { return untyped __lua__('SetVehicleHalt')(vehicle, distance, killEngine, unknown); }
    
    /**
    * This native makes the vehicle stop immediately, as happens when we enter a MP garage.
    * . distance defines how far it will travel until stopping. Garage doors use 3.0.
    * . If killEngine is set to 1, you cannot resume driving the vehicle once it stops. This looks like is a bitmapped integer.
    */
    @:pure static inline function N_0x260be8f09e326a20(vehicle: Int, distance: Int, killEngine: Int, unknown: Bool): Void { return untyped __lua__('N_0x260be8f09e326a20')(vehicle, distance, killEngine, unknown); }
    
    /**
    * does this work while in air?
    */
    @:pure static inline function SetVehicleHandbrake(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleHandbrake')(vehicle, toggle); }
    @:pure static inline function SetVehicleHasBeenOwnedByPlayer(vehicle: Int, owned: Bool): Void { return untyped __lua__('SetVehicleHasBeenOwnedByPlayer')(vehicle, owned); }
    
    /**
    * if true, axles won't bend.
    */
    @:pure static inline function SetVehicleHasStrongAxles(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleHasStrongAxles')(vehicle, toggle); }
    @:pure static inline function SetVehicleHighGear(vehicle: Int, gear: Int): Void { return untyped __lua__('SetVehicleHighGear')(vehicle, gear); }
    
    /**
    * console hash: 0x71CDD52F
    */
    @:pure static inline function SetVehicleHudSpecialAbilityBarActive(vehicle: Int, active: Bool): Void { return untyped __lua__('SetVehicleHudSpecialAbilityBarActive')(vehicle, active); }
    
    /**
    * console hash: 0x71CDD52F
    */
    @:pure static inline function N_0x99c82f8a139f3e4e(vehicle: Int, active: Bool): Void { return untyped __lua__('N_0x99c82f8a139f3e4e')(vehicle, active); }
    
    /**
    * Sets the turn signal enabled for a vehicle.
    * Set turnSignal to 1 for left light, 0 for right light.
    */
    @:pure static inline function SetVehicleIndicatorLights(vehicle: Int, turnSignal: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleIndicatorLights')(vehicle, turnSignal, toggle); }
    @:pure static inline function SetVehicleInteriorlight(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleInteriorlight')(vehicle, toggle); }
    
    /**
    * Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.
    */
    @:pure static inline function SetVehicleIsConsideredByPlayer(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleIsConsideredByPlayer')(vehicle, toggle); }
    @:pure static inline function SetVehicleIsStolen(vehicle: Int, isStolen: Bool): Int { return untyped __lua__('SetVehicleIsStolen')(vehicle, isStolen); }
    
    /**
    * Sets the wanted state of this vehicle.
    */
    @:pure static inline function SetVehicleIsWanted(vehicle: Int, state: Bool): Void { return untyped __lua__('SetVehicleIsWanted')(vehicle, state); }
    
    /**
    * VEHICLE::SET_VEHICLE_ENGINE_ON is not enough to start jet engines when not inside the vehicle. But with this native set to true it works: youtu.be/OK0ps2fDpxs
    * i.imgur.com/7XA14pX.png
    * Certain planes got jet engines.
    */
    @:pure static inline function SetVehicleJetEngineOn(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleJetEngineOn')(vehicle, toggle); }
    
    /**
    * VEHICLE::SET_VEHICLE_ENGINE_ON is not enough to start jet engines when not inside the vehicle. But with this native set to true it works: youtu.be/OK0ps2fDpxs
    * i.imgur.com/7XA14pX.png
    * Certain planes got jet engines.
    */
    @:pure static inline function N_0xb8fbc8b1330ca9b4(vehicle: Int, toggle: Bool): Void { return untyped __lua__('N_0xb8fbc8b1330ca9b4')(vehicle, toggle); }
    
    /**
    * multiplier = brightness of head lights.
    * this value isn't capped afaik.
    * multiplier = 0.0 no lights
    * multiplier = 1.0 default game value
    */
    @:pure static inline function SetVehicleLightMultiplier(vehicle: Int, multiplier: Int): Void { return untyped __lua__('SetVehicleLightMultiplier')(vehicle, multiplier); }
    
    /**
    * set's if the vehicle has lights or not.
    * not an on off toggle.
    * p1 = 0 ;vehicle normal lights, off then lowbeams, then highbeams
    * p1 = 1 ;vehicle doesn't have lights, always off
    * p1 = 2 ;vehicle has always on lights
    * p1 = 3 ;or even larger like 4,5,... normal lights like =1
    * note1: when using =2 on day it's lowbeam,highbeam
    * but at night it's lowbeam,lowbeam,highbeam
    * note2: when using =0 it's affected by day or night for highbeams don't exist in daytime.
    */
    @:pure static inline function SetVehicleLights(vehicle: Int, state: Int): Void { return untyped __lua__('SetVehicleLights')(vehicle, state); }
    
    /**
    * p1 can be either 0, 1 or 2.
    * Determines how vehicle lights behave when toggled.
    * 0 = Default (Lights can be toggled between off, normal and high beams)
    * 1 = Lights Disabled (Lights are fully disabled, cannot be toggled)
    * 2 = Always On (Lights can be toggled between normal and high beams)
    */
    @:pure static inline function SetVehicleLightsMode(vehicle: Int, p1: Int): Void { return untyped __lua__('SetVehicleLightsMode')(vehicle, p1); }
    
    /**
    * p1 can be either 0, 1 or 2.
    * Determines how vehicle lights behave when toggled.
    * 0 = Default (Lights can be toggled between off, normal and high beams)
    * 1 = Lights Disabled (Lights are fully disabled, cannot be toggled)
    * 2 = Always On (Lights can be toggled between normal and high beams)
    */
    @:pure static inline function N_0x1fd09e7390a74d54(vehicle: Int, p1: Int): Void { return untyped __lua__('N_0x1fd09e7390a74d54')(vehicle, p1); }
    
    /**
    * Note: Only seems to work on Emergency Vehicles
    */
    @:pure static inline function SetVehicleLivery(vehicle: Int, livery: Int): Void { return untyped __lua__('SetVehicleLivery')(vehicle, livery); }
    @:pure static inline function SetVehicleLodMultiplier(vehicle: Int, multiplier: Int): Void { return untyped __lua__('SetVehicleLodMultiplier')(vehicle, multiplier); }
    
    /**
    * In b944, there are 50 (0 - 49) mod types.
    * Sets the vehicle mod.
    * The vehicle must have a mod kit first.
    * Any out of range ModIndex is stock.
    * #Mod Type
    * Spoilers
    * Front Bumper
    * Rear Bumper
    * Side Skirt
    * Exhaust
    * Frame
    * Grille
    * Hood
    * Fender
    * Right Fender
    * Roof
    * Engine
    * Brakes
    * Transmission
    * Horns - 14 (modIndex from 0 to 51)
    * Suspension
    * Armor
    * Front Wheels
    * Back Wheels - 24 //only for motocycles
    * Plate holders
    * Trim Design
    * Ornaments
    * Dial Design
    * Steering Wheel
    * Shifter Leavers
    * Plaques
    * Hydraulics
    * Livery
    * ENUMS: pastebin.com/QzEAn02v
    */
    @:pure static inline function SetVehicleMod(vehicle: Int, modType: Int, modIndex: Int, customTires: Bool): Void { return untyped __lua__('SetVehicleMod')(vehicle, modType, modIndex, customTires); }
    
    /**
    * paintType:
    * 0: Normal
    * 1: Metallic
    * 2: Pearl
    * 3: Matte
    * 4: Metal
    * 5: Chrome
    * color: number of the color.
    * p3 seems to always be 0.
    */
    @:pure static inline function SetVehicleModColor_1(vehicle: Int, paintType: Int, color: Int, p3: Int): Void { return untyped __lua__('SetVehicleModColor_1')(vehicle, paintType, color, p3); }
    
    /**
    * Changes the secondary paint type and color
    * paintType:
    * 0: Normal
    * 1: Metallic
    * 2: Pearl
    * 3: Matte
    * 4: Metal
    * 5: Chrome
    * color: number of the color
    */
    @:pure static inline function SetVehicleModColor_2(vehicle: Int, paintType: Int, color: Int): Void { return untyped __lua__('SetVehicleModColor_2')(vehicle, paintType, color); }
    
    /**
    * Set modKit to 0 if you plan to call SET_VEHICLE_MOD. That's what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.
    */
    @:pure static inline function SetVehicleModKit(vehicle: Int, modKit: Int): Void { return untyped __lua__('SetVehicleModKit')(vehicle, modKit); }
    
    /**
    * seems to make the vehicle stop spawning naturally in traffic. Here's an essential example:
    * VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(GAMEPLAY::GET_HASH_KEY("taco"), true);
    * god I hate taco vans
    * Confirmed to work? Needs to be looped? Can not get it to work.
    */
    @:pure static inline function SetVehicleModelIsSuppressed(model: EitherType<String, Int>, suppressed: Bool): Void { return untyped __lua__('SetVehicleModelIsSuppressed')(model, suppressed); }
    
    /**
    * NOTE: Debugging functions are not present in the retail version of the game.
    */
    @:pure static inline function SetVehicleNameDebug(vehicle: Int, name: String): Void { return untyped __lua__('SetVehicleNameDebug')(vehicle, name); }
    @:pure static inline function SetVehicleNeedsToBeHotwired(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleNeedsToBeHotwired')(vehicle, toggle); }
    
    /**
    * Sets the neon lights of the specified vehicle on/off.
    * Indices:
    * 0 = Left
    * 1 = Right
    * 2 = Front
    * 3 = Back
    */
    @:pure static inline function SetVehicleNeonLightEnabled(vehicle: Int, index: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleNeonLightEnabled')(vehicle, index, toggle); }
    
    /**
    * Sets the color of the neon lights of the specified vehicle.
    * More info: pastebin.com/G49gqy8b
    */
    @:pure static inline function SetVehicleNeonLightsColour(vehicle: Int, r: Int, g: Int, b: Int): Void { return untyped __lua__('SetVehicleNeonLightsColour')(vehicle, r, g, b); }
    
    /**
    * Sets a vehicle's license plate text.  8 chars maximum.
    * Example:
    * Ped playerPed = PLAYER::PLAYER_PED_ID();
    * Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
    * char *plateText = "KING";
    * VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, plateText);
    */
    @:pure static inline function SetVehicleNumberPlateText(vehicle: Int, plateText: String): Void { return untyped __lua__('SetVehicleNumberPlateText')(vehicle, plateText); }
    
    /**
    * Plates:
    * Blue/White
    * Yellow/black
    * Yellow/Blue
    * Blue/White2
    * Blue/White3
    * Yankton
    */
    @:pure static inline function SetVehicleNumberPlateTextIndex(vehicle: Int, plateIndex: Int): Void { return untyped __lua__('SetVehicleNumberPlateTextIndex')(vehicle, plateIndex); }
    @:pure static inline function SetVehicleOilLevel(vehicle: Int, level: Int): Void { return untyped __lua__('SetVehicleOilLevel')(vehicle, level); }
    
    /**
    * Sets a vehicle on the ground on all wheels.  Returns whether or not the operation was successful.
    * sfink: This has an additional param(Vehicle vehicle, float p1) which is always set to 5.0f in the b944 scripts.
    */
    @:pure static inline function SetVehicleOnGroundProperly(vehicle: Int): Int { return untyped __lua__('SetVehicleOnGroundProperly')(vehicle); }
    
    /**
    * Tested on the player's current vehicle. Unless you kill the driver, the vehicle doesn't loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom.
    */
    @:pure static inline function SetVehicleOutOfControl(vehicle: Int, killDriver: Bool, explodeOnImpact: Bool): Void { return untyped __lua__('SetVehicleOutOfControl')(vehicle, killDriver, explodeOnImpact); }
    
    /**
    * 1000 is max health
    * Begins leaking gas at around 650 health
    */
    @:pure static inline function SetVehiclePetrolTankHealth(vehicle: Int, health: Int): Void { return untyped __lua__('SetVehiclePetrolTankHealth')(vehicle, health); }
    @:pure static inline function SetVehiclePopulationBudget(p0: Int): Void { return untyped __lua__('SetVehiclePopulationBudget')(p0); }
    @:pure static inline function SetVehicleProvidesCover(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleProvidesCover')(vehicle, toggle); }
    
    /**
    * can't seem to enable radio on cop cars etc
    */
    @:pure static inline function SetVehicleRadioEnabled(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleRadioEnabled')(vehicle, toggle); }
    @:pure static inline function SetVehicleRadioLoud(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleRadioLoud')(vehicle, toggle); }
    
    /**
    * Reduces grip significantly so it's hard to go anywhere.
    */
    @:pure static inline function SetVehicleReduceGrip(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleReduceGrip')(vehicle, toggle); }
    @:pure static inline function SetVehicleRudderBroken(vehicle: Int, p1: Bool): Void { return untyped __lua__('SetVehicleRudderBroken')(vehicle, p1); }
    
    /**
    * Only works during nighttime.
    */
    @:pure static inline function SetVehicleSearchlight(heli: Int, toggle: Bool, canBeUsedByAI: Bool): Void { return untyped __lua__('SetVehicleSearchlight')(heli, toggle, canBeUsedByAI); }
    
    /**
    * Commands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example:
    * WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,GAMEPLAY::GET_HASH_KEY("VEHICLE_WEAPON_PLANE_ROCKET"));						VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z);
    */
    @:pure static inline function SetVehicleShootAtTarget(driver: Int, entity: Int, xTarget: Int, yTarget: Int, zTarget: Int): Void { return untyped __lua__('SetVehicleShootAtTarget')(driver, entity, xTarget, yTarget, zTarget); }
    
    /**
    * If set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous.
    */
    @:pure static inline function SetVehicleSilent(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleSilent')(vehicle, toggle); }
    
    /**
    * If set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous.
    */
    @:pure static inline function N_0x9d44fcce98450843(vehicle: Int, toggle: Bool): Void { return untyped __lua__('N_0x9d44fcce98450843')(vehicle, toggle); }
    
    /**
    * Activate siren on vehicle (Only works if the vehicle has a siren).
    */
    @:pure static inline function SetVehicleSiren(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleSiren')(vehicle, toggle); }
    
    /**
    * Locks the vehicle's steering to the desired angle, explained below.
    * Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.
    * Steer bias:
    * -1.0 = full right
    * 0.0 = centered steering
    * 1.0 = full left
    */
    @:pure static inline function SetVehicleSteerBias(vehicle: Int, value: Int): Void { return untyped __lua__('SetVehicleSteerBias')(vehicle, value); }
    @:pure static inline function SetVehicleSteeringScale(vehicle: Int, scale: Int): Void { return untyped __lua__('SetVehicleSteeringScale')(vehicle, scale); }
    
    /**
    * If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
    */
    @:pure static inline function SetVehicleStrong(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleStrong')(vehicle, toggle); }
    
    /**
    * VEHICLE::SET_VEHICLE_TIMED_EXPLOSION(v_3, PLAYER::GET_PLAYER_PED(v_5), 1);
    */
    @:pure static inline function SetVehicleTimedExplosion(vehicle: Int, ped: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleTimedExplosion')(vehicle, ped, toggle); }
    @:pure static inline function SetVehicleTurboPressure(vehicle: Int, pressure: Int): Void { return untyped __lua__('SetVehicleTurboPressure')(vehicle, pressure); }
    
    /**
    * "To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0)
    * to burst all tyres type it 8 times where p1 = 0 to 7.
    * p3 seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them.
    * '0 = wheel_lf / bike, plane or jet front
    * '1 = wheel_rf
    * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
    * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
    * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
    * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
    * '45 = 6 wheels trailer mid wheel left
    * '47 = 6 wheels trailer mid wheel right
    */
    @:pure static inline function SetVehicleTyreBurst(vehicle: Int, index: Int, onRim: Bool, p3: Int): Void { return untyped __lua__('SetVehicleTyreBurst')(vehicle, index, onRim, p3); }
    
    /**
    * tyreIndex = 0 to 4 on normal vehicles
    * '0 = wheel_lf / bike, plane or jet front
    * '1 = wheel_rf
    * '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
    * '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
    * '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
    * '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
    * '45 = 6 wheels trailer mid wheel left
    * '47 = 6 wheels trailer mid wheel right
    */
    @:pure static inline function SetVehicleTyreFixed(vehicle: Int, tyreIndex: Int): Void { return untyped __lua__('SetVehicleTyreFixed')(vehicle, tyreIndex); }
    
    /**
    * Sets the tire smoke's color of this vehicle.
    * vehicle: The vehicle that is the target of this method.
    * r: The red level in the RGB color code.
    * g: The green level in the RGB color code.
    * b: The blue level in the RGB color code.
    * Note:
    * setting r,g,b to 0 will give the car independance day tyre smoke
    */
    @:pure static inline function SetVehicleTyreSmokeColor(vehicle: Int, r: Int, g: Int, b: Int): Void { return untyped __lua__('SetVehicleTyreSmokeColor')(vehicle, r, g, b); }
    
    /**
    * Allows you to toggle bulletproof tires.
    */
    @:pure static inline function SetVehicleTyresCanBurst(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleTyresCanBurst')(vehicle, toggle); }
    @:pure static inline function SetVehicleUndriveable(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleUndriveable')(vehicle, toggle); }
    @:pure static inline function SetVehicleWheelHealth(vehicle: Int, wheelIndex: Int, health: Int): Void { return untyped __lua__('SetVehicleWheelHealth')(vehicle, wheelIndex, health); }
    
    /**
    * 0: Sport
    * 1: Muscle
    * 2: Lowrider
    * 3: SUV
    * 4: Offroad
    * 5: Tuner
    * 6: Bike Wheels
    * 7: High End
    */
    @:pure static inline function SetVehicleWheelType(vehicle: Int, WheelType: Int): Void { return untyped __lua__('SetVehicleWheelType')(vehicle, WheelType); }
    @:pure static inline function SetVehicleWheelsCanBreak(vehicle: Int, enabled: Bool): Int { return untyped __lua__('SetVehicleWheelsCanBreak')(vehicle, enabled); }
    @:pure static inline function SetVehicleWheelsCanBreakOffWhenBlowUp(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleWheelsCanBreakOffWhenBlowUp')(vehicle, toggle); }
    @:pure static inline function SetVehicleMaxStrTrap(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SetVehicleMaxStrTrap')(vehicle, toggle); }
    
    /**
    * enum WindowTints
    * {
    * WINDOWTINT_NONE,
    * WINDOWTINT_PURE_BLACK,
    * WINDOWTINT_DARKSMOKE,
    * WINDOWTINT_LIGHTSMOKE,
    * WINDOWTINT_STOCK,
    * WINDOWTINT_LIMO,
    * WINDOWTINT_GREEN
    * };
    */
    @:pure static inline function SetVehicleWindowTint(vehicle: Int, tint: Int): Void { return untyped __lua__('SetVehicleWindowTint')(vehicle, tint); }
    
    /**
    * Max value is 1.0
    */
    @:pure static inline function SetWantedLevelDifficulty(player: Int, difficulty: Int): Void { return untyped __lua__('SetWantedLevelDifficulty')(player, difficulty); }
    @:pure static inline function SetWantedLevelMultiplier(multiplier: Int): Void { return untyped __lua__('SetWantedLevelMultiplier')(multiplier); }
    
    /**
    * You can only use text entries. No custom text.
    * Example: SET_WARNING_MESSAGE("t20", 3, "adder", false, -1, 0, 0, true);
    */
    @:pure static inline function SetWarningMessage(entryLine1: String, instructionalKey: Int, entryLine2: String, p3: Bool, p4: Int, background: Bool): { a0: Int, a1: Int } { return untyped __lua__('SetWarningMessage')(entryLine1, instructionalKey, entryLine2, p3, p4, background); }
    
    /**
    * You can only use text entries. No custom text.
    * [24/03/2017] by ins1de :
    * C# Example :
    * Function.Call(Hash._SET_WARNING_MESSAGE_2, "HUD_QUIT", "HUD_CGIGNORE", 2, "HUD_CGINVITE", 0, -1, 0, 0, 1);
    * @unknown, you can recreate this easily with scaleforms
    */
    @:pure static inline function SetWarningMessage_2(entryHeader: String, entryLine1: String, instructionalKey: Int, entryLine2: String, p4: Bool, p5: Int, background: Bool): { a0: Int, a1: Int } { return untyped __lua__('SetWarningMessage_2')(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, background); }
    
    /**
    * You can only use text entries. No custom text.
    */
    @:pure static inline function SetWarningMessage_3(entryHeader: String, entryLine1: String, instructionalKey: Int, entryLine2: String, p4: Bool, p5: Int, p6: Int, p9: Bool): { a0: Int, a1: Int } { return untyped __lua__('SetWarningMessage_3')(entryHeader, entryLine1, instructionalKey, entryLine2, p4, p5, p6, p9); }
    
    /**
    * Sets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.
    * Works only ~200 meters around the player.
    * console hash: 0x53B694B1
    * Most likely SET_CURRENT_*
    */
    @:pure static inline function SetWavesIntensity(intensity: Int): Void { return untyped __lua__('SetWavesIntensity')(intensity); }
    
    /**
    * Sets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.
    * Works only ~200 meters around the player.
    * console hash: 0x53B694B1
    * Most likely SET_CURRENT_*
    */
    @:pure static inline function N_0xb96b00e976be977f(intensity: Int): Void { return untyped __lua__('N_0xb96b00e976be977f')(intensity); }
    
    /**
    * This native removes the current waypoint from the map.
    * Example:
    * C#:
    * Function.Call(Hash.SET_WAYPOINT_OFF);
    * C++:
    * UI::SET_WAYPOINT_OFF();
    */
    @:pure static inline function SetWaypointOff(): Void { return untyped __lua__('SetWaypointOff')(); }
    
    /**
    * Changes the selected ped aiming animation style.
    * Note : You must use GET_HASH_KEY!
    * Strings to use with GET_HASH_KEY :
    * "Ballistic",
    * "Default",
    * "Fat",
    * "Female",
    * "FirstPerson",
    * "FirstPersonAiming",
    * "FirstPersonFranklin",
    * "FirstPersonFranklinAiming",
    * "FirstPersonFranklinRNG",
    * "FirstPersonFranklinScope",
    * "FirstPersonMPFemale",
    * "FirstPersonMichael",
    * "FirstPersonMichaelAiming",
    * "FirstPersonMichaelRNG",
    * "FirstPersonMichaelScope",
    * "FirstPersonRNG",
    * "FirstPersonScope",
    * "FirstPersonTrevor",
    * "FirstPersonTrevorAiming",
    * "FirstPersonTrevorRNG",
    * "FirstPersonTrevorScope",
    * "Franklin",
    * "Gang",
    * "Gang1H",
    * "GangFemale",
    * "Hillbilly",
    * "MP_F_Freemode",
    * "Michael",
    * "SuperFat",
    * "Trevor"
    */
    @:pure static inline function SetWeaponAnimationOverride(ped: Int, animStyle: EitherType<String, Int>): Void { return untyped __lua__('SetWeaponAnimationOverride')(ped, animStyle); }
    @:pure static inline function SetWeaponObjectTintIndex(weapon: Int, tintIndex: Int): Void { return untyped __lua__('SetWeaponObjectTintIndex')(weapon, tintIndex); }
    
    /**
    * Hash collision real name is: IS_FLASH_LIGHT_ON
    */
    @:pure static inline function SetWeaponSmokegrenadeAssigned(ped: Int): Int { return untyped __lua__('SetWeaponSmokegrenadeAssigned')(ped); }
    
    /**
    * The following weatherTypes are used in the scripts:
    * "CLEAR"
    * "EXTRASUNNY"
    * "CLOUDS"
    * "OVERCAST"
    * "RAIN"
    * "CLEARING"
    * "THUNDER"
    * "SMOG"
    * "FOGGY"
    * "XMAS"
    * "SNOWLIGHT"
    * "BLIZZARD"
    */
    @:pure static inline function SetWeatherTypeNow(weatherType: String): Void { return untyped __lua__('SetWeatherTypeNow')(weatherType); }
    
    /**
    * The following weatherTypes are used in the scripts:
    * "CLEAR"
    * "EXTRASUNNY"
    * "CLOUDS"
    * "OVERCAST"
    * "RAIN"
    * "CLEARING"
    * "THUNDER"
    * "SMOG"
    * "FOGGY"
    * "XMAS"
    * "SNOWLIGHT"
    * "BLIZZARD"
    */
    @:pure static inline function SetWeatherTypeNowPersist(weatherType: String): Void { return untyped __lua__('SetWeatherTypeNowPersist')(weatherType); }
    @:pure static inline function SetWeatherTypeOverTime(weatherType: String, time: Int): Void { return untyped __lua__('SetWeatherTypeOverTime')(weatherType, time); }
    
    /**
    * The following weatherTypes are used in the scripts:
    * "CLEAR"
    * "EXTRASUNNY"
    * "CLOUDS"
    * "OVERCAST"
    * "RAIN"
    * "CLEARING"
    * "THUNDER"
    * "SMOG"
    * "FOGGY"
    * "XMAS"
    * "SNOWLIGHT"
    * "BLIZZARD"
    */
    @:pure static inline function SetWeatherTypePersist(weatherType: String): Void { return untyped __lua__('SetWeatherTypePersist')(weatherType); }
    
    /**
    * Mixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:
    * execute "NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(""RAIN""), Game.GetHashKey(""SMOG""), 0.50f);
    * Note that unlike most of the other weather natives, this native takes the hash of the weather name, not the plain string. These are the weather names and their hashes:
    * CLEAR	0x36A83D84
    * EXTRASUNNY	0x97AA0A79
    * CLOUDS	0x30FDAF5C
    * OVERCAST	0xBB898D2D
    * RAIN	0x54A69840
    * CLEARING	0x6DB1A50D
    * THUNDER	0xB677829F
    * SMOG	0x10DCF4B5
    * FOGGY	0xAE737644
    * XMAS	0xAAC9C895
    * SNOWLIGHT	0x23FB812B
    * BLIZZARD	0x27EA2814
    *  -- [[ OLD INVALID INFO BELOW ]]
    * Not tested. Based purely on disassembly. Instantly sets the weather to sourceWeather, then transitions to targetWeather over the specified transitionTime in seconds.
    * If an invalid hash is specified for sourceWeather, the current weather type will be used.
    * If an invalid hash is specified for targetWeather, the next weather type will be used.
    * If an invalid hash is specified for both sourceWeather and targetWeather, the function just changes the transition time of the current transition.
    */
    @:pure static inline function SetWeatherTypeTransition(weatherType1: EitherType<String, Int>, weatherType2: EitherType<String, Int>, percentWeather2: Int): Void { return untyped __lua__('SetWeatherTypeTransition')(weatherType1, weatherType2, percentWeather2); }
    @:pure static inline function SetWidescreenBorders(p0: Bool, p1: Int): Int { return untyped __lua__('SetWidescreenBorders')(p0, p1); }
    @:pure static inline function SetWidescreenFormat(p0: Int): Void { return untyped __lua__('SetWidescreenFormat')(p0); }
    
    /**
    * Sets the the raw wind speed value.
    */
    @:pure static inline function SetWind(speed: Int): Void { return untyped __lua__('SetWind')(speed); }
    @:pure static inline function SetWindDirection(direction: Int): Void { return untyped __lua__('SetWindDirection')(direction); }
    
    /**
    * Using this native will clamp the wind speed value to a range of 0.0- 12.0. Using SET_WIND sets the same value but without the restriction.
    */
    @:pure static inline function SetWindSpeed(speed: Int): Void { return untyped __lua__('SetWindSpeed')(speed); }
    @:pure static inline function SetZoneEnabled(zoneId: Int, toggle: Bool): Void { return untyped __lua__('SetZoneEnabled')(zoneId, toggle); }
    
    /**
    * Called before drawing stuff.
    * Examples:
    * GRAPHICS::_61BB1D9B3A95D802(7);
    * GRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v_4, v_5, v_6, a_0._f172, 0);
    * GRAPHICS::_61BB1D9B3A95D802(1);
    * GRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0);
    * Appears to be the layer it's drawn on
    */
    @:pure static inline function Set_2dLayer(layer: Int): Void { return untyped __lua__('Set_2dLayer')(layer); }
    
    /**
    * Called before drawing stuff.
    * Examples:
    * GRAPHICS::_61BB1D9B3A95D802(7);
    * GRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v_4, v_5, v_6, a_0._f172, 0);
    * GRAPHICS::_61BB1D9B3A95D802(1);
    * GRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0);
    * Appears to be the layer it's drawn on
    */
    @:pure static inline function N_0x61bb1d9b3a95d802(layer: Int): Void { return untyped __lua__('N_0x61bb1d9b3a95d802')(layer); }
    @:pure static inline function Settimera(value: Int): Void { return untyped __lua__('Settimera')(value); }
    @:pure static inline function Settimerb(value: Int): Void { return untyped __lua__('Settimerb')(value); }
    
    /**
    * Possible shake types (updated b617d):
    * DEATH_FAIL_IN_EFFECT_SHAKE
    * DRUNK_SHAKE
    * FAMILY5_DRUG_TRIP_SHAKE
    * HAND_SHAKE
    * JOLT_SHAKE
    * LARGE_EXPLOSION_SHAKE
    * MEDIUM_EXPLOSION_SHAKE
    * SMALL_EXPLOSION_SHAKE
    * ROAD_VIBRATION_SHAKE
    * SKY_DIVING_SHAKE
    * VIBRATE_SHAKE
    */
    @:pure static inline function ShakeCam(cam: Int, type: String, amplitude: Int): Void { return untyped __lua__('ShakeCam')(cam, type, amplitude); }
    
    /**
    * p0 argument found in the b617d scripts: "DRUNK_SHAKE"
    */
    @:pure static inline function ShakeCinematicCam(p0: String, p1: Int): Void { return untyped __lua__('ShakeCinematicCam')(p0, p1); }
    
    /**
    * Possible shake types (updated b617d):
    * DEATH_FAIL_IN_EFFECT_SHAKE
    * DRUNK_SHAKE
    * FAMILY5_DRUG_TRIP_SHAKE
    * HAND_SHAKE
    * JOLT_SHAKE
    * LARGE_EXPLOSION_SHAKE
    * MEDIUM_EXPLOSION_SHAKE
    * SMALL_EXPLOSION_SHAKE
    * ROAD_VIBRATION_SHAKE
    * SKY_DIVING_SHAKE
    * VIBRATE_SHAKE
    */
    @:pure static inline function ShakeGameplayCam(shakeName: String, intensity: Int): Void { return untyped __lua__('ShakeGameplayCam')(shakeName, intensity); }
    @:pure static inline function ShiftLeft(value: Int, bitShift: Int): Int { return untyped __lua__('ShiftLeft')(value, bitShift); }
    @:pure static inline function ShiftRight(value: Int, bitShift: Int): Int { return untyped __lua__('ShiftRight')(value, bitShift); }
    @:pure static inline function ShootSingleBulletBetweenCoords(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, damage: Int, p7: Bool, weaponHash: EitherType<String, Int>, ownerPed: Int, isAudible: Bool, isInvisible: Bool, speed: Int): Void { return untyped __lua__('ShootSingleBulletBetweenCoords')(x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed); }
    
    /**
    * Shows the cursor on screen for the frame its called.
    */
    @:pure static inline function ShowCursorThisFrame(): Void { return untyped __lua__('ShowCursorThisFrame')(); }
    
    /**
    * Adds the GTA: Online player heading indicator to a blip.
    */
    @:pure static inline function ShowHeadingIndicatorOnBlip(blip: Int, toggle: Bool): Void { return untyped __lua__('ShowHeadingIndicatorOnBlip')(blip, toggle); }
    
    /**
    * Adds the GTA: Online player heading indicator to a blip.
    */
    @:pure static inline function N_0x5fbca48327b914df(blip: Int, toggle: Bool): Void { return untyped __lua__('N_0x5fbca48327b914df')(blip, toggle); }
    @:pure static inline function ShowHudComponentThisFrame(id: Int): Void { return untyped __lua__('ShowHudComponentThisFrame')(id); }
    
    /**
    * This does NOT get called per frame. Call it once to show, then use UI::_REMOVE_LOADING_PROMPT to remove it
    * Changes the the above native's (UI::_SET_LOADING_PROMPT_TEXT_ENTRY) spinning circle type.
    * Types:
    * enum LoadingPromptTypes
    * {
    * LOADING_PROMPT_LEFT,
    * LOADING_PROMPT_LEFT_2,
    * LOADING_PROMPT_LEFT_3,
    * SAVE_PROMPT_LEFT,
    * LOADING_PROMPT_RIGHT,
    * };
    */
    @:pure static inline function ShowLoadingPrompt(busySpinnerType: Int): Void { return untyped __lua__('ShowLoadingPrompt')(busySpinnerType); }
    
    /**
    * This does NOT get called per frame. Call it once to show, then use UI::_REMOVE_LOADING_PROMPT to remove it
    * Changes the the above native's (UI::_SET_LOADING_PROMPT_TEXT_ENTRY) spinning circle type.
    * Types:
    * enum LoadingPromptTypes
    * {
    * LOADING_PROMPT_LEFT,
    * LOADING_PROMPT_LEFT_2,
    * LOADING_PROMPT_LEFT_3,
    * SAVE_PROMPT_LEFT,
    * LOADING_PROMPT_RIGHT,
    * };
    */
    @:pure static inline function N_0xbd12f8228410d9b4(busySpinnerType: Int): Void { return untyped __lua__('N_0xbd12f8228410d9b4')(busySpinnerType); }
    @:pure static inline function ShowNumberOnBlip(blip: Int, number: Int): Void { return untyped __lua__('ShowNumberOnBlip')(blip, number); }
    
    /**
    * If toggle is true, the ped's head is shown in the pause menu
    * If toggle is false, the ped's head is not shown in the pause menu
    */
    @:pure static inline function ShowPedInPauseMenu(toggle: Bool): Void { return untyped __lua__('ShowPedInPauseMenu')(toggle); }
    
    /**
    * If toggle is true, the ped's head is shown in the pause menu
    * If toggle is false, the ped's head is not shown in the pause menu
    */
    @:pure static inline function N_0x4ebb7e87aa0dbed4(toggle: Bool): Void { return untyped __lua__('N_0x4ebb7e87aa0dbed4')(toggle); }
    
    /**
    * probs one frame
    */
    @:pure static inline function ShowSocialClubLegalScreen(): Void { return untyped __lua__('ShowSocialClubLegalScreen')(); }
    
    /**
    * Forces the weapon wheel to appear on screen.
    */
    @:pure static inline function ShowWeaponWheel(forcedShow: Bool): Void { return untyped __lua__('ShowWeaponWheel')(forcedShow); }
    
    /**
    * Forces the weapon wheel to appear on screen.
    */
    @:pure static inline function N_0xeb354e5376bc81a7(forcedShow: Bool): Void { return untyped __lua__('N_0xeb354e5376bc81a7')(forcedShow); }
    
    /**
    * Starts a new singleplayer game (at the prologue).
    */
    @:pure static inline function ShutdownAndLaunchSinglePlayerGame(): Void { return untyped __lua__('ShutdownAndLaunchSinglePlayerGame')(); }
    @:pure static inline function ShutdownCreatorBudget(): Void { return untyped __lua__('ShutdownCreatorBudget')(); }
    @:pure static inline function N_0xcce26000e9a6fad7(): Void { return untyped __lua__('N_0xcce26000e9a6fad7')(); }
    @:pure static inline function ShutdownLoadingScreen(): Void { return untyped __lua__('ShutdownLoadingScreen')(); }
    
    /**
    * This is to make the player walk without accepting input from INPUT.
    * gaitType is in increments of 100s. 2000, 500, 300, 200, etc.
    * p4 is always 1 and p5 is always 0.
    * C# Example :
    * Function.Call(Hash.SIMULATE_PLAYER_INPUT_GAIT, Game.Player, 1.0f, 100, 1.0f, 1, 0); //Player will go forward for 100ms
    */
    @:pure static inline function SimulatePlayerInputGait(player: Int, amount: Int, gaitType: Int, speed: Int, p4: Bool, p5: Bool): Void { return untyped __lua__('SimulatePlayerInputGait')(player, amount, gaitType, speed, p4, p5); }
    @:pure static inline function Sin(value: Int): Int { return untyped __lua__('Sin')(value); }
    
    /**
    * Unsurprisingly, this native is incorrectly named. Instead, this returns the name of the scaleform movie.
    * HASH COLLISION. PLEASE REMOVE NATIVE NAME.
    */
    @:pure static inline function SittingTv(scaleform: Int): String { return untyped __lua__('SittingTv')(scaleform); }
    @:pure static inline function SkipRadioForward(): Void { return untyped __lua__('SkipRadioForward')(); }
    @:pure static inline function SkipTimeInPlaybackRecordedVehicle(p0: Int, p1: Int): Void { return untyped __lua__('SkipTimeInPlaybackRecordedVehicle')(p0, p1); }
    @:pure static inline function SkipToEndAndStopPlaybackRecordedVehicle(p0: Int): Void { return untyped __lua__('SkipToEndAndStopPlaybackRecordedVehicle')(p0); }
    @:pure static inline function SkipToNextScriptedConversationLine(): Void { return untyped __lua__('SkipToNextScriptedConversationLine')(); }
    
    /**
    * Returns true if the object has finished moving.
    * If false, moves the object towards the specified X, Y and Z coordinates with the specified X, Y and Z speed.
    * See also: gtag.gtagaming.com/opcode-database/opcode/034E/
    */
    @:pure static inline function SlideObject(object: Int, toX: Int, toY: Int, toZ: Int, speedX: Int, speedY: Int, speedZ: Int, collision: Bool): Int { return untyped __lua__('SlideObject')(object, toX, toY, toZ, speedX, speedY, speedZ, collision); }
    @:pure static inline function SmashVehicleWindow(vehicle: Int, index: Int): Int { return untyped __lua__('SmashVehicleWindow')(vehicle, index); }
    @:pure static inline function SoundVehicleHornThisFrame(vehicle: Int): Void { return untyped __lua__('SoundVehicleHornThisFrame')(vehicle); }
    @:pure static inline function N_0x9c11908013ea4715(vehicle: Int): Void { return untyped __lua__('N_0x9c11908013ea4715')(vehicle); }
    
    /**
    * p1 appears as 5, 10, 15, 25, or 30. p2 is always true.
    */
    @:pure static inline function SpecialAbilityChargeAbsolute(player: Int, p1: Int, p2: Bool): Void { return untyped __lua__('SpecialAbilityChargeAbsolute')(player, p1, p2); }
    
    /**
    * p1 appears to always be 1 (only comes up twice)
    */
    @:pure static inline function SpecialAbilityChargeContinuous(player: Int, p2: Int): Void { return untyped __lua__('SpecialAbilityChargeContinuous')(player, p2); }
    
    /**
    * 2 matches. p1 was always true.
    */
    @:pure static inline function SpecialAbilityChargeLarge(player: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('SpecialAbilityChargeLarge')(player, p1, p2); }
    
    /**
    * Only 1 match. Both p1 &amp; p2 were true.
    */
    @:pure static inline function SpecialAbilityChargeMedium(player: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('SpecialAbilityChargeMedium')(player, p1, p2); }
    
    /**
    * normalizedValue is from 0.0 - 1.0
    * p2 is always 1
    */
    @:pure static inline function SpecialAbilityChargeNormalized(player: Int, normalizedValue: Int, p2: Bool): Void { return untyped __lua__('SpecialAbilityChargeNormalized')(player, normalizedValue, p2); }
    
    /**
    * normalizedValue is from 0.0 - 1.0
    * p2 is always 1
    */
    @:pure static inline function ResetSpecialAbilityControlsCinematic(player: Int, normalizedValue: Int, p2: Bool): Void { return untyped __lua__('ResetSpecialAbilityControlsCinematic')(player, normalizedValue, p2); }
    
    /**
    * Every occurrence of p1 &amp; p2 were both true.
    */
    @:pure static inline function SpecialAbilityChargeSmall(player: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('SpecialAbilityChargeSmall')(player, p1, p2); }
    @:pure static inline function SpecialAbilityDeactivate(player: Int): Void { return untyped __lua__('SpecialAbilityDeactivate')(player); }
    @:pure static inline function SpecialAbilityDeactivateFast(player: Int): Void { return untyped __lua__('SpecialAbilityDeactivateFast')(player); }
    
    /**
    * p1 was always true.
    */
    @:pure static inline function SpecialAbilityDepleteMeter(player: Int, p1: Bool): Void { return untyped __lua__('SpecialAbilityDepleteMeter')(player, p1); }
    
    /**
    * Also known as _RECHARGE_SPECIAL_ABILITY
    */
    @:pure static inline function SpecialAbilityFillMeter(player: Int, p1: Bool): Void { return untyped __lua__('SpecialAbilityFillMeter')(player, p1); }
    @:pure static inline function SpecialAbilityLock(playerModel: EitherType<String, Int>): Void { return untyped __lua__('SpecialAbilityLock')(playerModel); }
    @:pure static inline function SpecialAbilityReset(player: Int): Void { return untyped __lua__('SpecialAbilityReset')(player); }
    @:pure static inline function SpecialAbilityUnlock(playerModel: EitherType<String, Int>): Void { return untyped __lua__('SpecialAbilityUnlock')(playerModel); }
    
    /**
    * Hash collision!!! PLAY_STREAM_FROM_POSITION is the correct name!
    */
    @:pure static inline function SpecialFrontendEqual(x: Int, y: Int, z: Int): Void { return untyped __lua__('SpecialFrontendEqual')(x, y, z); }
    @:pure static inline function Sqrt(value: Int): Int { return untyped __lua__('Sqrt')(value); }
    
    /**
    * Example:
    * This will start the alarm at Fort Zancudo.
    * AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
    * First parameter (char) is the name of the alarm.
    * Second parameter (bool) is unknown, it does not seem to make a difference if this one is 0 or 1.
    * ----------
    * It DOES make a difference but it has to do with the duration or something I dunno yet
    * ----------
    * Found in the b617d scripts:
    * AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS", 0);
    * AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER", 1);
    * AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B", 0);
    * AUDIO::START_ALARM("BIG_SCORE_HEIST_VAULT_ALARMS", a_0);
    * AUDIO::START_ALARM("FBI_01_MORGUE_ALARMS", 1);
    * AUDIO::START_ALARM("FIB_05_BIOTECH_LAB_ALARMS", 0);
    * AUDIO::START_ALARM("JEWEL_STORE_HEIST_ALARMS", 0);
    * AUDIO::START_ALARM("PALETO_BAY_SCORE_ALARM", 1);
    * AUDIO::START_ALARM("PALETO_BAY_SCORE_CHICKEN_FACTORY_ALARM", 0);
    * AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
    * AUDIO::START_ALARM("PORT_OF_LS_HEIST_SHIP_ALARMS", 0);
    * AUDIO::START_ALARM("PRISON_ALARMS", 0);
    * AUDIO::START_ALARM("PROLOGUE_VAULT_ALARMS", 0);
    */
    @:pure static inline function StartAlarm(alarmName: String, p2: Bool): Void { return untyped __lua__('StartAlarm')(alarmName, p2); }
    
    /**
    * Used to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound.
    * List of all usable scene names found in b617d. Sorted alphabetically and identical names removed: pastebin.com/MtM9N9CC
    */
    @:pure static inline function StartAudioScene(scene: String): Int { return untyped __lua__('StartAudioScene')(scene); }
    
    /**
    * some kind of flag. Usually 0.
    */
    @:pure static inline function StartCutscene(p0: Int): Void { return untyped __lua__('StartCutscene')(p0); }
    
    /**
    * p3: some kind of flag. Usually 0.
    */
    @:pure static inline function StartCutsceneAtCoords(x: Int, y: Int, z: Int, p3: Int): Void { return untyped __lua__('StartCutsceneAtCoords')(x, y, z, p3); }
    @:pure static inline function StartEntityFire(entity: Int): Int { return untyped __lua__('StartEntityFire')(entity); }
    @:pure static inline function StartFindKvp(prefix: String): Int { return untyped __lua__('StartFindKvp')(prefix); }
    @:pure static inline function StartFiringAmnesty(duration: Int): Void { return untyped __lua__('StartFiringAmnesty')(duration); }
    
    /**
    * Examples:
    * g_384A = SYSTEM::START_NEW_SCRIPT("cellphone_flashhand", 1424);
    * l_10D = SYSTEM::START_NEW_SCRIPT("taxiService", 1828);
    * SYSTEM::START_NEW_SCRIPT("AM_MP_YACHT", 5000);
    * SYSTEM::START_NEW_SCRIPT("emergencycall", 512);
    * SYSTEM::START_NEW_SCRIPT("emergencycall", 512);
    * SYSTEM::START_NEW_SCRIPT("FM_maintain_cloud_header_data", 1424);
    * SYSTEM::START_NEW_SCRIPT("FM_Mission_Controller", 31000);
    * SYSTEM::START_NEW_SCRIPT("tennis_family", 3650);
    * SYSTEM::START_NEW_SCRIPT("Celebrations", 3650);
    * Decompiled examples of usage when starting a script:
    * SCRIPT::REQUEST_SCRIPT(a_0);
    * if (SCRIPT::HAS_SCRIPT_LOADED(a_0)) {
    * SYSTEM::START_NEW_SCRIPT(a_0, v_3);
    * SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(a_0);
    * return 1;
    * }
    * or:
    * v_2 = "MrsPhilips2";
    * SCRIPT::REQUEST_SCRIPT(v_2);
    * while (!SCRIPT::HAS_SCRIPT_LOADED(v_2)) {
    * SCRIPT::REQUEST_SCRIPT(v_2);
    * SYSTEM::WAIT(0);
    * }
    * sub_8792(36);
    * SYSTEM::START_NEW_SCRIPT(v_2, 17000);
    * SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(v_2);
    * All native script names: pastebin.com/K9adDsu4 and pastebin.com/yLNWicUi
    */
    @:pure static inline function StartNewScript(scriptName: String, stackSize: Int): Int { return untyped __lua__('StartNewScript')(scriptName, stackSize); }
    
    /**
    * return : script thread id, 0 if failed
    * Pass pointer to struct of args in p1, size of struct goes into p2
    */
    @:pure static inline function StartNewScriptWithArgs(scriptName: String, argCount: Int, stackSize: Int): { a0: Int, a1: Int } { return untyped __lua__('StartNewScriptWithArgs')(scriptName, argCount, stackSize); }
    @:pure static inline function StartNewScriptWithNameHash(scriptHash: EitherType<String, Int>, stackSize: Int): Int { return untyped __lua__('StartNewScriptWithNameHash')(scriptHash, stackSize); }
    @:pure static inline function StartNewStreamedScript(scriptHash: EitherType<String, Int>, stackSize: Int): Int { return untyped __lua__('StartNewStreamedScript')(scriptHash, stackSize); }
    @:pure static inline function StartNewScriptWithNameHashAndArgs(scriptHash: EitherType<String, Int>, argCount: Int, stackSize: Int): { a0: Int, a1: Int } { return untyped __lua__('StartNewScriptWithNameHashAndArgs')(scriptHash, argCount, stackSize); }
    @:pure static inline function StartNewStreamedScriptWithArgs(scriptHash: EitherType<String, Int>, argCount: Int, stackSize: Int): { a0: Int, a1: Int } { return untyped __lua__('StartNewStreamedScriptWithArgs')(scriptHash, argCount, stackSize); }
    
    /**
    * GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD("scr_fbi_falling_debris", 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0)
    */
    @:pure static inline function StartParticleFxLoopedAtCoord(effectName: String, x: Int, y: Int, z: Int, xRot: Int, yRot: Int, zRot: Int, scale: Int, xAxis: Bool, yAxis: Bool, zAxis: Bool, p11: Bool): Int { return untyped __lua__('StartParticleFxLoopedAtCoord')(effectName, x, y, z, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11); }
    
    /**
    * list: pastebin.com/N9unUFWY
    */
    @:pure static inline function StartParticleFxLoopedOnEntity(effectName: String, entity: Int, xOffset: Int, yOffset: Int, zOffset: Int, xRot: Int, yRot: Int, zRot: Int, scale: Int, xAxis: Bool, yAxis: Bool, zAxis: Bool): Int { return untyped __lua__('StartParticleFxLoopedOnEntity')(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis); }
    
    /**
    * Console Hash: 0x23BF0F9B
    */
    @:pure static inline function StartParticleFxLoopedOnEntityBone(effectName: String, entity: Int, xOffset: Int, yOffset: Int, zOffset: Int, xRot: Int, yRot: Int, zRot: Int, boneIndex: Int, scale: Int, xAxis: Bool, yAxis: Bool, zAxis: Bool): Int { return untyped __lua__('StartParticleFxLoopedOnEntityBone')(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis); }
    
    /**
    * Console Hash: 0xF478EFCF
    * network fx
    */
    @:pure static inline function StartParticleFxLoopedOnEntityBone_2(effectName: String, entity: Int, xOffset: Int, yOffset: Int, zOffset: Int, xRot: Int, yRot: Int, zRot: Int, boneIndex: Int, scale: Int, xAxis: Bool, yAxis: Bool, zAxis: Bool): Int { return untyped __lua__('StartParticleFxLoopedOnEntityBone_2')(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis); }
    
    /**
    * Console Hash: 0xF478EFCF
    * network fx
    */
    @:pure static inline function N_0xdde23f30cc5a0f03(effectName: String, entity: Int, xOffset: Int, yOffset: Int, zOffset: Int, xRot: Int, yRot: Int, zRot: Int, boneIndex: Int, scale: Int, xAxis: Bool, yAxis: Bool, zAxis: Bool): Int { return untyped __lua__('N_0xdde23f30cc5a0f03')(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis); }
    
    /**
    * network fx
    */
    @:pure static inline function StartParticleFxLoopedOnEntity_2(effectName: String, entity: Int, xOffset: Int, yOffset: Int, zOffset: Int, xRot: Int, yRot: Int, zRot: Int, scale: Int, xAxis: Bool, yAxis: Bool, zAxis: Bool): Int { return untyped __lua__('StartParticleFxLoopedOnEntity_2')(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis); }
    
    /**
    * network fx
    */
    @:pure static inline function N_0x6f60e89a7b64ee1d(effectName: String, entity: Int, xOffset: Int, yOffset: Int, zOffset: Int, xRot: Int, yRot: Int, zRot: Int, scale: Int, xAxis: Bool, yAxis: Bool, zAxis: Bool): Int { return untyped __lua__('N_0x6f60e89a7b64ee1d')(effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis); }
    @:pure static inline function StartParticleFxLoopedOnPedBone(effectName: String, ped: Int, xOffset: Int, yOffset: Int, zOffset: Int, xRot: Int, yRot: Int, zRot: Int, boneIndex: Int, scale: Int, xAxis: Bool, yAxis: Bool, zAxis: Bool): Int { return untyped __lua__('StartParticleFxLoopedOnPedBone')(effectName, ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis); }
    
    /**
    * GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_paleto_roof_impact", -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0);
    * Axis - Invert Axis Flags
    * list: pastebin.com/N9unUFWY
    * -------------------------------------------------------------------
    * C#
    * Function.Call&lt;int&gt;(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function.
    * char *effectname = This is an in-game effect name, for e.g. "scr_fbi4_trucks_crash" is used to give the effects when truck crashes etc
    * float x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates
    * float xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.
    * float scale = is declare the scale of the effect, this may vary as per the effects for e.g 1.0f
    * bool xaxis, yaxis, zaxis = To bool the axis values.
    * example:
    * Function.Call&lt;int&gt;(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, "scr_fbi4_trucks_crash", GTA.Game.Player.Character.Position.X, GTA.Game.Player.Character.Position.Y, GTA.Game.Player.Character.Position.Z + 4f, 0, 0, 0, 5.5f, 0, 0, 0);
    */
    @:pure static inline function StartParticleFxNonLoopedAtCoord(effectName: String, xPos: Int, yPos: Int, zPos: Int, xRot: Int, yRot: Int, zRot: Int, scale: Int, xAxis: Bool, yAxis: Bool, zAxis: Bool): Int { return untyped __lua__('StartParticleFxNonLoopedAtCoord')(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis); }
    
    /**
    * network fx
    */
    @:pure static inline function StartParticleFxNonLoopedAtCoord_2(effectName: String, xPos: Int, yPos: Int, zPos: Int, xRot: Int, yRot: Int, zRot: Int, scale: Int, xAxis: Bool, yAxis: Bool, zAxis: Bool): Int { return untyped __lua__('StartParticleFxNonLoopedAtCoord_2')(effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis); }
    
    /**
    * Starts a particle effect on an entity for example your player.
    * List: pastebin.com/N9unUFWY
    * Example:
    * C#:
    * Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_rcbarry2");                     Function.Call(Hash._SET_PTFX_ASSET_NEXT_CALL, "scr_rcbarry2");                             Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_clown_appears", Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
    * Internally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE
    * however it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native
    */
    @:pure static inline function StartParticleFxNonLoopedOnEntity(effectName: String, entity: Int, offsetX: Int, offsetY: Int, offsetZ: Int, rotX: Int, rotY: Int, rotZ: Int, scale: Int, axisX: Bool, axisY: Bool, axisZ: Bool): Int { return untyped __lua__('StartParticleFxNonLoopedOnEntity')(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ); }
    
    /**
    * Console hash: 0x469A2B4A
    * network fx
    */
    @:pure static inline function StartParticleFxNonLoopedOnEntity_2(effectName: String, entity: Int, offsetX: Int, offsetY: Int, offsetZ: Int, rotX: Int, rotY: Int, rotZ: Int, scale: Int, axisX: Bool, axisY: Bool, axisZ: Bool): Int { return untyped __lua__('StartParticleFxNonLoopedOnEntity_2')(effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ); }
    
    /**
    * GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE("scr_sh_bong_smoke", PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0);
    * Axis - Invert Axis Flags
    * list: pastebin.com/N9unUFWY
    */
    @:pure static inline function StartParticleFxNonLoopedOnPedBone(effectName: String, ped: Int, offsetX: Int, offsetY: Int, offsetZ: Int, rotX: Int, rotY: Int, rotZ: Int, boneIndex: Int, scale: Int, axisX: Bool, axisY: Bool, axisZ: Bool): Int { return untyped __lua__('StartParticleFxNonLoopedOnPedBone')(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ); }
    
    /**
    * network fx
    */
    @:pure static inline function StartParticleFxNonLoopedOnPedBone_2(effectName: String, ped: Int, offsetX: Int, offsetY: Int, offsetZ: Int, rotX: Int, rotY: Int, rotZ: Int, boneIndex: Int, scale: Int, axisX: Bool, axisY: Bool, axisZ: Bool): Int { return untyped __lua__('StartParticleFxNonLoopedOnPedBone_2')(effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ); }
    @:pure static inline function StartPlaybackRecordedVehicle(vehicle: Int, p1: Int, playback: String, p3: Bool): Void { return untyped __lua__('StartPlaybackRecordedVehicle')(vehicle, p1, playback, p3); }
    @:pure static inline function StartPlaybackRecordedVehicleUsingAi(p0: Int, p1: Int, p3: Int, p4: Int): Int { return untyped __lua__('StartPlaybackRecordedVehicleUsingAi')(p0, p1, p3, p4); }
    @:pure static inline function StartPlaybackRecordedVehicleWithFlags(vehicle: Int, p1: Int, playback: String, p3: Int, p4: Int, p5: Int): Void { return untyped __lua__('StartPlaybackRecordedVehicleWithFlags')(vehicle, p1, playback, p3, p4, p5); }
    
    /**
    * // this enum comes directly from R* so don't edit this
    * enum ePlayerSwitchTypes
    * {
    * SWITCH_TYPE_AUTO,
    * SWITCH_TYPE_LONG,
    * SWITCH_TYPE_MEDIUM,
    * SWITCH_TYPE_SHORT
    * };
    * Use GET_IDEAL_PLAYER_SWITCH_TYPE for the best switch type.
    * ----------------------------------------------------
    * Examples from the decompiled scripts:
    * STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 0, 3);
    * STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 2050, 3);
    * STREAMING::START_PLAYER_SWITCH(PLAYER::PLAYER_PED_ID(), l_832._f3, 1024, 3);
    * STREAMING::START_PLAYER_SWITCH(g_141F27, PLAYER::PLAYER_PED_ID(), 513, v_14);
    * Note: DO NOT, use SWITCH_TYPE_LONG with flag 513. It leaves you stuck in the clouds. You'll have to call STOP_PLAYER_SWITCH() to return to your ped.
    * Flag 8 w/ SWITCH_TYPE_LONG will zoom out 3 steps, then zoom in 2/3 steps and stop on the 3rd and just hang there.
    * Flag 8 w/ SWITCH_TYPE_MEDIUM will zoom out 1 step, and just hang there.
    */
    @:pure static inline function StartPlayerSwitch(from: Int, to: Int, flags: Int, switchType: Int): Void { return untyped __lua__('StartPlayerSwitch')(from, to, flags, switchType); }
    @:pure static inline function StartPlayerTeleport(player: Int, x: Int, y: Int, z: Int, heading: Int, p5: Bool, p6: Bool, p7: Bool): Void { return untyped __lua__('StartPlayerTeleport')(player, x, y, z, heading, p5, p6, p7); }
    @:pure static inline function StartPreloadedConversation(): Void { return untyped __lua__('StartPreloadedConversation')(); }
    
    /**
    * Starts recording a replay.
    * If mode is 0, turns on action replay.
    * If mode is 1, starts recording.
    * If already recording a replay, does nothing.
    */
    @:pure static inline function StartRecording(mode: Int): Void { return untyped __lua__('StartRecording')(mode); }
    
    /**
    * Starts recording a replay.
    * If mode is 0, turns on action replay.
    * If mode is 1, starts recording.
    * If already recording a replay, does nothing.
    */
    @:pure static inline function N_0xc3ac2fff9612ac81(mode: Int): Void { return untyped __lua__('N_0xc3ac2fff9612ac81')(mode); }
    @:pure static inline function StartRopeUnwindingFront(rope: Int): Void { return untyped __lua__('StartRopeUnwindingFront')(rope); }
    @:pure static inline function StartRopeWinding(rope: Int): Void { return untyped __lua__('StartRopeWinding')(rope); }
    
    /**
    * Second parameter might be length.
    */
    @:pure static inline function StartSaveArray(p1: Int, arrayName: String): Int { return untyped __lua__('StartSaveArray')(p1, arrayName); }
    @:pure static inline function StartSaveData(p1: Int, p2: Bool): Int { return untyped __lua__('StartSaveData')(p1, p2); }
    
    /**
    * Second parameter might be length.
    */
    @:pure static inline function StartSaveStruct(p1: Int, structName: String): Int { return untyped __lua__('StartSaveStruct')(p1, structName); }
    
    /**
    * playLength - is how long to play the effect for in milliseconds. If 0, it plays the default length
    * if loop is true, the effect wont stop until you call _STOP_SCREEN_EFFECT on it. (only loopable effects)
    * Example and list of screen FX: www.pastebin.com/dafBAjs0
    */
    @:pure static inline function StartScreenEffect(effectName: String, duration: Int, looped: Bool): Void { return untyped __lua__('StartScreenEffect')(effectName, duration, looped); }
    @:pure static inline function StartScriptConversation(p0: Bool, p1: Bool, p2: Bool, p3: Bool): Void { return untyped __lua__('StartScriptConversation')(p0, p1, p2, p3); }
    
    /**
    * Starts a fire:
    * xyz: Location of fire
    * maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
    * isGasFire: Whether or not the fire is powered by gasoline.
    */
    @:pure static inline function StartScriptFire(X: Int, Y: Int, Z: Int, maxChildren: Int, isGasFire: Bool): Int { return untyped __lua__('StartScriptFire')(X, Y, Z, maxChildren, isGasFire); }
    @:pure static inline function StartScriptPhoneConversation(p0: Bool, p1: Bool): Void { return untyped __lua__('StartScriptPhoneConversation')(p0, p1); }
    @:pure static inline function StartShapeTestBound(entity: Int, flags1: Int, flags2: Int): Int { return untyped __lua__('StartShapeTestBound')(entity, flags1, flags2); }
    @:pure static inline function N_0x37181417ce7c8900(entity: Int, flags1: Int, flags2: Int): Int { return untyped __lua__('N_0x37181417ce7c8900')(entity, flags1, flags2); }
    @:pure static inline function StartShapeTestBoundingBox(entity: Int, flags1: Int, flags2: Int): Int { return untyped __lua__('StartShapeTestBoundingBox')(entity, flags1, flags2); }
    @:pure static inline function N_0x052837721a854ec7(entity: Int, flags1: Int, flags2: Int): Int { return untyped __lua__('N_0x052837721a854ec7')(entity, flags1, flags2); }
    @:pure static inline function StartShapeTestBox(x: Int, y: Int, z: Int, x1: Int, y2: Int, z2: Int, rotX: Int, rotY: Int, rotZ: Int, p9: Int, p10: Int, entity: Int, p12: Int): Int { return untyped __lua__('StartShapeTestBox')(x, y, z, x1, y2, z2, rotX, rotY, rotZ, p9, p10, entity, p12); }
    @:pure static inline function N_0xfe466162c4401d18(x: Int, y: Int, z: Int, x1: Int, y2: Int, z2: Int, rotX: Int, rotY: Int, rotZ: Int, p9: Int, p10: Int, entity: Int, p12: Int): Int { return untyped __lua__('N_0xfe466162c4401d18')(x, y, z, x1, y2, z2, rotX, rotY, rotZ, p9, p10, entity, p12); }
    
    /**
    * Raycast from point to point, where the ray has a radius.
    * flags:
    * vehicles=10
    * peds =12
    * Iterating through flags yields many ped / vehicle/ object combinations
    * p9 = 7, but no idea what it does
    * Entity is an entity to ignore
    */
    @:pure static inline function StartShapeTestCapsule(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, radius: Int, flags: Int, entity: Int, p9: Int): Int { return untyped __lua__('StartShapeTestCapsule')(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9); }
    
    /**
    * Raycast from point to point, where the ray has a radius.
    * flags:
    * vehicles=10
    * peds =12
    * Iterating through flags yields many ped / vehicle/ object combinations
    * p9 = 7, but no idea what it does
    * Entity is an entity to ignore
    */
    @:pure static inline function Cast_3dRayPointToPoint(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, radius: Int, flags: Int, entity: Int, p9: Int): Int { return untyped __lua__('Cast_3dRayPointToPoint')(x1, y1, z1, x2, y2, z2, radius, flags, entity, p9); }
    
    /**
    * Returns a ray (?) going from x1, y1, z1 to x2, y2, z2.
    * entity = 0 most of the time.
    * p8 = 7 most of the time.
    * Result of this function is passed to WORLDPROBE::_GET_RAYCAST_RESULT as a first argument.
    */
    @:pure static inline function StartShapeTestLosProbe(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, flags: Int, entity: Int, p8: Int): Int { return untyped __lua__('StartShapeTestLosProbe')(x1, y1, z1, x2, y2, z2, flags, entity, p8); }
    
    /**
    * Returns a ray (?) going from x1, y1, z1 to x2, y2, z2.
    * entity = 0 most of the time.
    * p8 = 7 most of the time.
    * Result of this function is passed to WORLDPROBE::_GET_RAYCAST_RESULT as a first argument.
    */
    @:pure static inline function N_0x7ee9f5d83dd4f90e(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, flags: Int, entity: Int, p8: Int): Int { return untyped __lua__('N_0x7ee9f5d83dd4f90e')(x1, y1, z1, x2, y2, z2, flags, entity, p8); }
    
    /**
    * Not sure how or why this differs from 0x7EE9F5D83DD4F90E, but it does.
    * This function casts a ray from Point1 to Point2 and returns it's ray handle.  A simple ray cast will 'shoot' a line from point A to point B, and return whether or not the ray reached it's destination or if it hit anything and if it did hit anything, will return the handle of what it hit (entity handle) and coordinates of where the ray reached.
    * You can use _GET_RAYCAST_RESULT to get the result of the raycast
    * Entity is an entity to ignore, such as the player.
    * Flags are intersection bit flags.  They tell the ray what to care about and what not to care about when casting. Passing -1 will intersect with everything, presumably.
    * Flags:
    * 1: Intersect with map
    * 2: Intersect with vehicles (used to be mission entities?) (includes train)
    * 4: Intersect with peds? (same as 8)
    * 8: Intersect with peds? (same as 4)
    * 16: Intersect with objects
    * 32: Unknown
    * 64: Unknown
    * 128: Unknown
    * 256: Intersect with vegetation (plants, coral. trees not included)
    * NOTE: Raycasts that intersect with mission_entites (flag = 2) has limited range and will not register for far away entites. The range seems to be about 30 metres.
    */
    @:pure static inline function StartShapeTestRay(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, flags: Int, entity: Int, p8: Int): Int { return untyped __lua__('StartShapeTestRay')(x1, y1, z1, x2, y2, z2, flags, entity, p8); }
    
    /**
    * Not sure how or why this differs from 0x7EE9F5D83DD4F90E, but it does.
    * This function casts a ray from Point1 to Point2 and returns it's ray handle.  A simple ray cast will 'shoot' a line from point A to point B, and return whether or not the ray reached it's destination or if it hit anything and if it did hit anything, will return the handle of what it hit (entity handle) and coordinates of where the ray reached.
    * You can use _GET_RAYCAST_RESULT to get the result of the raycast
    * Entity is an entity to ignore, such as the player.
    * Flags are intersection bit flags.  They tell the ray what to care about and what not to care about when casting. Passing -1 will intersect with everything, presumably.
    * Flags:
    * 1: Intersect with map
    * 2: Intersect with vehicles (used to be mission entities?) (includes train)
    * 4: Intersect with peds? (same as 8)
    * 8: Intersect with peds? (same as 4)
    * 16: Intersect with objects
    * 32: Unknown
    * 64: Unknown
    * 128: Unknown
    * 256: Intersect with vegetation (plants, coral. trees not included)
    * NOTE: Raycasts that intersect with mission_entites (flag = 2) has limited range and will not register for far away entites. The range seems to be about 30 metres.
    */
    @:pure static inline function CastRayPointToPoint(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, flags: Int, entity: Int, p8: Int): Int { return untyped __lua__('CastRayPointToPoint')(x1, y1, z1, x2, y2, z2, flags, entity, p8); }
    @:pure static inline function StartVehicleAlarm(vehicle: Int): Int { return untyped __lua__('StartVehicleAlarm')(vehicle); }
    
    /**
    * Sounds the horn for the specified vehicle.
    * vehicle: The vehicle to activate the horn for.
    * mode: The hash of "NORMAL" or "HELDDOWN". Can be 0.
    * duration: The duration to sound the horn, in milliseconds.
    * Note: If a player is in the vehicle, it will only sound briefly.
    */
    @:pure static inline function StartVehicleHorn(vehicle: Int, duration: Int, mode: EitherType<String, Int>, forever: Bool): Void { return untyped __lua__('StartVehicleHorn')(vehicle, duration, mode, forever); }
    
    /**
    * Please change to "void"!
    * ---------------------------------
    * Example:
    * for (v_2 = 0; v_2 &lt;= 4; v_2 += 1) {
    * STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2);
    * }
    */
    @:pure static inline function StatClearSlotForReload(statSlot: Int): Int { return untyped __lua__('StatClearSlotForReload')(statSlot); }
    @:pure static inline function StatDeleteSlot(p0: Int): Int { return untyped __lua__('StatDeleteSlot')(p0); }
    @:pure static inline function StatGetBool(statHash: EitherType<String, Int>, p2: Int): { a0: Int, a1: Dynamic } { return untyped __lua__('StatGetBool')(statHash, p2); }
    
    /**
    * p2 - Default value? Seems to be -1 most of the time.
    */
    @:pure static inline function StatGetBoolMasked(statName: EitherType<String, Int>, mask: Int, p2: Int): Int { return untyped __lua__('StatGetBoolMasked')(statName, mask, p2); }
    @:pure static inline function StatGetDate(statHash: EitherType<String, Int>, p2: Int, p3: Int): { a0: Int, a1: Int } { return untyped __lua__('StatGetDate')(statHash, p2, p3); }
    @:pure static inline function StatGetFloat(statHash: EitherType<String, Int>, p2: Int): { a0: Int, a1: Int } { return untyped __lua__('StatGetFloat')(statHash, p2); }
    
    /**
    * p2 appears to always be -1
    */
    @:pure static inline function StatGetInt(statHash: EitherType<String, Int>, p2: Int): { a0: Int, a1: Int } { return untyped __lua__('StatGetInt')(statHash, p2); }
    @:pure static inline function StatGetLicensePlate(statName: EitherType<String, Int>): String { return untyped __lua__('StatGetLicensePlate')(statName); }
    @:pure static inline function StatGetMaskedInt(p0: Int, p2: Int, p3: Int, p4: Int): { a0: Int, a1: Int } { return untyped __lua__('StatGetMaskedInt')(p0, p2, p3, p4); }
    @:pure static inline function StatGetNumberOfDays(statName: EitherType<String, Int>): Int { return untyped __lua__('StatGetNumberOfDays')(statName); }
    @:pure static inline function N_0xe0e854f5280fb769(statName: EitherType<String, Int>): Int { return untyped __lua__('N_0xe0e854f5280fb769')(statName); }
    @:pure static inline function StatGetNumberOfHours(statName: EitherType<String, Int>): Int { return untyped __lua__('StatGetNumberOfHours')(statName); }
    @:pure static inline function N_0xf2d4b2fe415aafc3(statName: EitherType<String, Int>): Int { return untyped __lua__('N_0xf2d4b2fe415aafc3')(statName); }
    @:pure static inline function StatGetNumberOfMinutes(statName: EitherType<String, Int>): Int { return untyped __lua__('StatGetNumberOfMinutes')(statName); }
    @:pure static inline function N_0x7583b4be4c5a41b5(statName: EitherType<String, Int>): Int { return untyped __lua__('N_0x7583b4be4c5a41b5')(statName); }
    @:pure static inline function StatGetNumberOfSeconds(statName: EitherType<String, Int>): Int { return untyped __lua__('StatGetNumberOfSeconds')(statName); }
    @:pure static inline function N_0x2ce056ff3723f00b(statName: EitherType<String, Int>): Int { return untyped __lua__('N_0x2ce056ff3723f00b')(statName); }
    @:pure static inline function StatGetPos(p0: Int, p4: Int): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('StatGetPos')(p0, p4); }
    
    /**
    * p1 is always -1 in the script files
    */
    @:pure static inline function StatGetString(statHash: EitherType<String, Int>, p1: Int): String { return untyped __lua__('StatGetString')(statHash, p1); }
    
    /**
    * Needs more research. Seems to return "STAT_UNKNOWN" if no such user id exists.
    */
    @:pure static inline function StatGetUserId(p0: Int): String { return untyped __lua__('StatGetUserId')(p0); }
    @:pure static inline function StatIncrement(statName: EitherType<String, Int>, value: Int): Void { return untyped __lua__('StatIncrement')(statName, value); }
    @:pure static inline function StatLoad(p0: Int): Int { return untyped __lua__('StatLoad')(p0); }
    @:pure static inline function StatLoadPending(p0: Int): Int { return untyped __lua__('StatLoadPending')(p0); }
    @:pure static inline function StatSave(p0: Int, p1: Bool, p2: Int): Int { return untyped __lua__('StatSave')(p0, p1, p2); }
    @:pure static inline function StatSavePending(): Int { return untyped __lua__('StatSavePending')(); }
    @:pure static inline function StatSavePendingOrRequested(): Int { return untyped __lua__('StatSavePendingOrRequested')(); }
    @:pure static inline function StatSetBool(statName: EitherType<String, Int>, value: Bool, save: Bool): Int { return untyped __lua__('StatSetBool')(statName, value, save); }
    @:pure static inline function StatSetBoolMasked(statName: EitherType<String, Int>, value: Bool, mask: Int, save: Bool): Int { return untyped __lua__('StatSetBoolMasked')(statName, value, mask, save); }
    
    /**
    * p1 always true.
    */
    @:pure static inline function StatSetCurrentPosixTime(statName: EitherType<String, Int>, p1: Bool): Int { return untyped __lua__('StatSetCurrentPosixTime')(statName, p1); }
    
    /**
    * 'value' is a structure to a structure, 'numFields' is how many fields there are in said structure (usually 7).
    * The structure looks like this:
    * int year
    * int month
    * int day
    * int hour
    * int minute
    * int second
    * int millisecond
    * The decompiled scripts use TIME::GET_POSIX_TIME to fill this structure.
    */
    @:pure static inline function StatSetDate(statName: EitherType<String, Int>, numFields: Int, save: Bool): { a0: Int, a1: Int } { return untyped __lua__('StatSetDate')(statName, numFields, save); }
    @:pure static inline function StatSetFloat(statName: EitherType<String, Int>, value: Int, save: Bool): Int { return untyped __lua__('StatSetFloat')(statName, value, save); }
    
    /**
    * The following values have been found in the decompiled scripts:
    * "RC_ABI1"
    * "RC_ABI2"
    * "RC_BA1"
    * "RC_BA2"
    * "RC_BA3"
    * "RC_BA3A"
    * "RC_BA3C"
    * "RC_BA4"
    * "RC_DRE1"
    * "RC_EPS1"
    * "RC_EPS2"
    * "RC_EPS3"
    * "RC_EPS4"
    * "RC_EPS5"
    * "RC_EPS6"
    * "RC_EPS7"
    * "RC_EPS8"
    * "RC_EXT1"
    * "RC_EXT2"
    * "RC_EXT3"
    * "RC_EXT4"
    * "RC_FAN1"
    * "RC_FAN2"
    * "RC_FAN3"
    * "RC_HAO1"
    * "RC_HUN1"
    * "RC_HUN2"
    * "RC_JOS1"
    * "RC_JOS2"
    * "RC_JOS3"
    * "RC_JOS4"
    * "RC_MAU1"
    * "RC_MIN1"
    * "RC_MIN2"
    * "RC_MIN3"
    * "RC_MRS1"
    * "RC_MRS2"
    * "RC_NI1"
    * "RC_NI1A"
    * "RC_NI1B"
    * "RC_NI1C"
    * "RC_NI1D"
    * "RC_NI2"
    * "RC_NI3"
    * "RC_OME1"
    * "RC_OME2"
    * "RC_PA1"
    * "RC_PA2"
    * "RC_PA3"
    * "RC_PA3A"
    * "RC_PA3B"
    * "RC_PA4"
    * "RC_RAM1"
    * "RC_RAM2"
    * "RC_RAM3"
    * "RC_RAM4"
    * "RC_RAM5"
    * "RC_SAS1"
    * "RC_TON1"
    * "RC_TON2"
    * "RC_TON3"
    * "RC_TON4"
    * "RC_TON5"
    */
    @:pure static inline function StatSetGxtLabel(statName: EitherType<String, Int>, value: String, save: Bool): Int { return untyped __lua__('StatSetGxtLabel')(statName, value, save); }
    
    /**
    * Add Cash example:
    * for (int i = 0; i &lt; 3; i++)
    * {
    * char statNameFull[32];
    * sprintf_s(statNameFull, "SP%d_TOTAL_CASH", i);
    * Hash hash = GAMEPLAY::GET_HASH_KEY(statNameFull);
    * int val;
    * STATS::STAT_GET_INT(hash, &amp;val, -1);
    * val += 1000000;
    * STATS::STAT_SET_INT(hash, val, 1);
    * }
    */
    @:pure static inline function StatSetInt(statName: EitherType<String, Int>, value: Int, save: Bool): Int { return untyped __lua__('StatSetInt')(statName, value, save); }
    @:pure static inline function StatSetLicensePlate(statName: EitherType<String, Int>, str: String): Int { return untyped __lua__('StatSetLicensePlate')(statName, str); }
    @:pure static inline function StatSetMaskedInt(statName: EitherType<String, Int>, p1: Int, p2: Int, p3: Int, save: Bool): Int { return untyped __lua__('StatSetMaskedInt')(statName, p1, p2, p3, save); }
    @:pure static inline function StatSetPos(statName: EitherType<String, Int>, x: Int, y: Int, z: Int, save: Bool): Int { return untyped __lua__('StatSetPos')(statName, x, y, z, save); }
    
    /**
    * Does not take effect immediately, unfortunately.
    * profileSetting seems to only be 936, 937 and 938 in scripts
    */
    @:pure static inline function StatSetProfileSetting(profileSetting: Int, value: Int): Void { return untyped __lua__('StatSetProfileSetting')(profileSetting, value); }
    
    /**
    * Does not take effect immediately, unfortunately.
    * profileSetting seems to only be 936, 937 and 938 in scripts
    */
    @:pure static inline function N_0x68f01422be1d838f(profileSetting: Int, value: Int): Void { return untyped __lua__('N_0x68f01422be1d838f')(profileSetting, value); }
    @:pure static inline function StatSetString(statName: EitherType<String, Int>, value: String, save: Bool): Int { return untyped __lua__('StatSetString')(statName, value, save); }
    @:pure static inline function StatSetUserId(statName: EitherType<String, Int>, value: String, save: Bool): Int { return untyped __lua__('StatSetUserId')(statName, value, save); }
    @:pure static inline function StatSlotIsLoaded(p0: Int): Int { return untyped __lua__('StatSlotIsLoaded')(p0); }
    
    /**
    * This seems like a hash collision?
    * p1 (toggle) was always 1 (true) except in one case in the b678 scripts.
    */
    @:pure static inline function SteerUnlockBias(vehicle: Int, toggle: Bool): Void { return untyped __lua__('SteerUnlockBias')(vehicle, toggle); }
    
    /**
    * Example:
    * This will stop the alarm at Fort Zancudo.
    * AUDIO::STOP_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
    * First parameter (char) is the name of the alarm.
    * Second parameter (bool) has to be true (1) to have any effect.
    */
    @:pure static inline function StopAlarm(alarmName: String, toggle: Bool): Void { return untyped __lua__('StopAlarm')(alarmName, toggle); }
    @:pure static inline function StopAllAlarms(stop: Bool): Void { return untyped __lua__('StopAllAlarms')(stop); }
    @:pure static inline function StopAllGarageActivity(): Void { return untyped __lua__('StopAllGarageActivity')(); }
    @:pure static inline function StopAllScreenEffects(): Void { return untyped __lua__('StopAllScreenEffects')(); }
    @:pure static inline function StopAnimPlayback(ped: Int, p1: Int, p2: Bool): Void { return untyped __lua__('StopAnimPlayback')(ped, p1, p2); }
    @:pure static inline function StopAnimTask(ped: Int, animDictionary: String, animationName: String, p3: Int): Void { return untyped __lua__('StopAnimTask')(ped, animDictionary, animationName, p3); }
    @:pure static inline function StopAnyPedModelBeingSuppressed(): Void { return untyped __lua__('StopAnyPedModelBeingSuppressed')(); }
    @:pure static inline function StopAudioScene(scene: String): Void { return untyped __lua__('StopAudioScene')(scene); }
    
    /**
    * ??
    */
    @:pure static inline function StopAudioScenes(): Void { return untyped __lua__('StopAudioScenes')(); }
    @:pure static inline function StopCamPointing(cam: Int): Void { return untyped __lua__('StopCamPointing')(cam); }
    @:pure static inline function StopCamShaking(cam: Int, p1: Bool): Void { return untyped __lua__('StopCamShaking')(cam, p1); }
    @:pure static inline function StopCinematicCamShaking(p0: Bool): Void { return untyped __lua__('StopCinematicCamShaking')(p0); }
    @:pure static inline function StopCinematicShot(p0: Int): Void { return untyped __lua__('StopCinematicShot')(p0); }
    
    /**
    * Needs to be called every frame.
    */
    @:pure static inline function StopCurrentPlayingAmbientSpeech(ped: Int): Void { return untyped __lua__('StopCurrentPlayingAmbientSpeech')(ped); }
    @:pure static inline function StopCutscene(p0: Bool): Void { return untyped __lua__('StopCutscene')(p0); }
    @:pure static inline function StopCutsceneCamShaking(): Void { return untyped __lua__('StopCutsceneCamShaking')(); }
    @:pure static inline function StopCutsceneImmediately(): Void { return untyped __lua__('StopCutsceneImmediately')(); }
    
    /**
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    * RAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm
    */
    @:pure static inline function StopEntityAnim(entity: Int, animation: String, animGroup: String, p3: Int): Int { return untyped __lua__('StopEntityAnim')(entity, animation, animGroup, p3); }
    @:pure static inline function StopEntityFire(entity: Int): Void { return untyped __lua__('StopEntityFire')(entity); }
    @:pure static inline function StopFireInRange(x: Int, y: Int, z: Int, radius: Int): Void { return untyped __lua__('StopFireInRange')(x, y, z, radius); }
    @:pure static inline function StopGameplayCamShaking(p0: Bool): Void { return untyped __lua__('StopGameplayCamShaking')(p0); }
    @:pure static inline function StopGameplayHint(p0: Bool): Void { return untyped __lua__('StopGameplayHint')(p0); }
    @:pure static inline function StopPadShake(p0: Int): Void { return untyped __lua__('StopPadShake')(p0); }
    
    /**
    * p1 is always 0 in the native scripts
    */
    @:pure static inline function StopParticleFxLooped(ptfxHandle: Int, p1: Bool): Void { return untyped __lua__('StopParticleFxLooped')(ptfxHandle, p1); }
    @:pure static inline function StopPedRingtone(ped: Int): Void { return untyped __lua__('StopPedRingtone')(ped); }
    @:pure static inline function StopPedSpeaking(ped: Int, shaking: Bool): Void { return untyped __lua__('StopPedSpeaking')(ped, shaking); }
    @:pure static inline function StopPedWeaponFiringWhenDropped(ped: Int): Void { return untyped __lua__('StopPedWeaponFiringWhenDropped')(ped); }
    @:pure static inline function StopPlaybackRecordedVehicle(p0: Int): Void { return untyped __lua__('StopPlaybackRecordedVehicle')(p0); }
    @:pure static inline function StopPlayerSwitch(): Void { return untyped __lua__('StopPlayerSwitch')(); }
    
    /**
    * Disables the player's teleportation
    */
    @:pure static inline function StopPlayerTeleport(): Void { return untyped __lua__('StopPlayerTeleport')(); }
    
    /**
    * Stops recording and discards the recorded clip.
    */
    @:pure static inline function StopRecordingAndDiscardClip(): Void { return untyped __lua__('StopRecordingAndDiscardClip')(); }
    
    /**
    * Stops recording and discards the recorded clip.
    */
    @:pure static inline function N_0x88bb3507ed41a240(): Void { return untyped __lua__('N_0x88bb3507ed41a240')(); }
    
    /**
    * Stops recording and saves the recorded clip.
    */
    @:pure static inline function StopRecordingAndSaveClip(): Void { return untyped __lua__('StopRecordingAndSaveClip')(); }
    
    /**
    * Stops recording and saves the recorded clip.
    */
    @:pure static inline function StopRecording(): Void { return untyped __lua__('StopRecording')(); }
    @:pure static inline function StopRopeUnwindingFront(rope: Int): Void { return untyped __lua__('StopRopeUnwindingFront')(rope); }
    @:pure static inline function StopRopeWinding(rope: Int): Void { return untyped __lua__('StopRopeWinding')(rope); }
    @:pure static inline function StopSaveArray(): Void { return untyped __lua__('StopSaveArray')(); }
    @:pure static inline function StopSaveData(): Void { return untyped __lua__('StopSaveData')(); }
    @:pure static inline function StopSaveStruct(): Void { return untyped __lua__('StopSaveStruct')(); }
    @:pure static inline function StopScreenEffect(effectName: String): Void { return untyped __lua__('StopScreenEffect')(effectName); }
    
    /**
    * In drunk_controller.c4, sub_309
    * if (CAM::_C912AF078AF19212()) {
    * CAM::_1C9D7949FA533490(0);
    * }
    */
    @:pure static inline function StopScriptGlobalShaking(p0: Bool): Void { return untyped __lua__('StopScriptGlobalShaking')(p0); }
    
    /**
    * In drunk_controller.c4, sub_309
    * if (CAM::_C912AF078AF19212()) {
    * CAM::_1C9D7949FA533490(0);
    * }
    */
    @:pure static inline function N_0x1c9d7949fa533490(p0: Bool): Void { return untyped __lua__('N_0x1c9d7949fa533490')(p0); }
    @:pure static inline function StopScriptedConversation(p0: Bool): Int { return untyped __lua__('StopScriptedConversation')(p0); }
    @:pure static inline function StopSound(soundId: Int): Void { return untyped __lua__('StopSound')(soundId); }
    @:pure static inline function StopStream(): Void { return untyped __lua__('StopStream')(); }
    @:pure static inline function StopSynchronizedAudioEvent(p0: Int): Int { return untyped __lua__('StopSynchronizedAudioEvent')(p0); }
    
    /**
    * p1 sync task id?
    */
    @:pure static inline function StopSynchronizedEntityAnim(entity: Int, p1: Int, p2: Bool): Int { return untyped __lua__('StopSynchronizedEntityAnim')(entity, p1, p2); }
    @:pure static inline function StopSynchronizedMapEntityAnim(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Int { return untyped __lua__('StopSynchronizedMapEntityAnim')(p0, p1, p2, p3, p4, p5); }
    
    /**
    * Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.
    * If all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns.
    */
    @:pure static inline function StringToInt(string: String, outInteger: Int): Int { return untyped __lua__('StringToInt')(string, outInteger); }
    @:pure static inline function SuppressAgitationEventsNextFrame(): Void { return untyped __lua__('SuppressAgitationEventsNextFrame')(); }
    @:pure static inline function SuppressShockingEventTypeNextFrame(type: Int): Void { return untyped __lua__('SuppressShockingEventTypeNextFrame')(type); }
    @:pure static inline function SuppressShockingEventsNextFrame(): Void { return untyped __lua__('SuppressShockingEventsNextFrame')(); }
    
    /**
    * This was previously named as "RESERVE_ENTITY_EXPLODES_ON_HIGH_EXPLOSION_COMBO"
    * which is obviously incorrect.
    * Seems to only appear in scripts used in Singleplayer. p1 ranges from 2 - 46.
    * I assume this switches the crime type
    */
    @:pure static inline function SwitchCrimeType(player: Int, p1: Int): Void { return untyped __lua__('SwitchCrimeType')(player, p1); }
    
    /**
    * This was previously named as "RESERVE_ENTITY_EXPLODES_ON_HIGH_EXPLOSION_COMBO"
    * which is obviously incorrect.
    * Seems to only appear in scripts used in Singleplayer. p1 ranges from 2 - 46.
    * I assume this switches the crime type
    */
    @:pure static inline function N_0x9a987297ed8bd838(player: Int, p1: Int): Void { return untyped __lua__('N_0x9a987297ed8bd838')(player, p1); }
    
    /**
    * fucks up on mount chilliad
    */
    @:pure static inline function SwitchOutPlayer(ped: Int, flags: Int, unknown: Int): Void { return untyped __lua__('SwitchOutPlayer')(ped, flags, unknown); }
    
    /**
    * fucks up on mount chilliad
    */
    @:pure static inline function N_0xaab3200ed59016bc(ped: Int, flags: Int, unknown: Int): Void { return untyped __lua__('N_0xaab3200ed59016bc')(ped, flags, unknown); }
    @:pure static inline function SwitchTrainTrack(intersectionId: Int, state: Bool): Int { return untyped __lua__('SwitchTrainTrack')(intersectionId, state); }
    @:pure static inline function Tan(p0: Int): Int { return untyped __lua__('Tan')(p0); }
    
    /**
    * Makes the specified ped achieve the specified heading.
    * pedHandle: The handle of the ped to assign the task to.
    * heading: The desired heading.
    * timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.
    */
    @:pure static inline function TaskAchieveHeading(ped: Int, heading: Int, timeout: Int): Void { return untyped __lua__('TaskAchieveHeading')(ped, heading, timeout); }
    @:pure static inline function TaskAimGunAtCoord(ped: Int, x: Int, y: Int, z: Int, time: Int, p5: Bool, p6: Bool): Void { return untyped __lua__('TaskAimGunAtCoord')(ped, x, y, z, time, p5, p6); }
    
    /**
    * duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
    */
    @:pure static inline function TaskAimGunAtEntity(ped: Int, entity: Int, duration: Int, p3: Bool): Void { return untyped __lua__('TaskAimGunAtEntity')(ped, entity, duration, p3); }
    @:pure static inline function TaskAimGunScripted(ped: Int, scriptTask: EitherType<String, Int>, p2: Bool, p3: Bool): Void { return untyped __lua__('TaskAimGunScripted')(ped, scriptTask, p2, p3); }
    @:pure static inline function TaskAimGunScriptedWithTarget(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Bool, p7: Bool): Void { return untyped __lua__('TaskAimGunScriptedWithTarget')(p0, p1, p2, p3, p4, p5, p6, p7); }
    
    /**
    * Example from "me_amanda1.ysc.c4":
    * AI::TASK_ARREST_PED(l_19F  -- [[ This is a Ped ]]  , PLAYER::PLAYER_PED_ID());
    * Example from "armenian1.ysc.c4":
    * if (!PED::IS_PED_INJURED(l_B18[0 -- [[1]] ])) {
    * AI::TASK_ARREST_PED(l_B18[0 -- [[1]] ], PLAYER::PLAYER_PED_ID());
    * }
    * I would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod.
    * Looks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn't do anything if tasked to arrest another ped.
    */
    @:pure static inline function TaskArrestPed(ped: Int, target: Int): Void { return untyped __lua__('TaskArrestPed')(ped, target); }
    
    /**
    * You need to call PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS after TASK_BOAT_MISSION in order for the task to execute.
    * Working example
    * float vehicleMaxSpeed = VEHICLE::_GET_VEHICLE_MAX_SPEED(ENTITY::GET_ENTITY_MODEL(pedVehicle));
    * AI::TASK_BOAT_MISSION(pedDriver, pedVehicle, 0, 0, waypointCoord.x, waypointCoord.y, waypointCoord.z, 4, vehicleMaxSpeed, 786469, -1.0, 7);
    * PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(pedDriver, 1);
    * P8 appears to be driving style flag - see gtaforums.com/topic/822314-guide-driving-styles/ for documentation
    */
    @:pure static inline function TaskBoatMission(pedDriver: Int, boat: Int, p2: Int, p3: Int, x: Int, y: Int, z: Int, p7: Int, maxSpeed: Int, drivingStyle: Int, p10: Int, p11: Int): Void { return untyped __lua__('TaskBoatMission')(pedDriver, boat, p2, p3, x, y, z, p7, maxSpeed, drivingStyle, p10, p11); }
    
    /**
    * p2 tend to be 16, 17 or 1
    * p3 to p7 tend to be 0.0
    */
    @:pure static inline function TaskChatToPed(ped: Int, target: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int): Void { return untyped __lua__('TaskChatToPed')(ped, target, p2, p3, p4, p5, p6, p7); }
    @:pure static inline function TaskClearDefensiveArea(p0: Int): Void { return untyped __lua__('TaskClearDefensiveArea')(p0); }
    
    /**
    * Not clear what it actually does, but here's how script uses it -
    * if (OBJECT::HAS_PICKUP_BEEN_COLLECTED(...)
    * {
    * if(ENTITY::DOES_ENTITY_EXIST(PLAYER::PLAYER_PED_ID()))
    * {
    * AI::TASK_CLEAR_LOOK_AT(PLAYER::PLAYER_PED_ID());
    * }
    * ...
    * }
    * Another one where it doesn't "look" at current player -
    * AI::TASK_PLAY_ANIM(l_3ED, "missheist_agency2aig_2", "look_at_phone_a", 1000.0, -2.0, -1, 48, v_2, 0, 0, 0);
    * PED::_2208438012482A1A(l_3ED, 0, 0);
    * AI::TASK_CLEAR_LOOK_AT(l_3ED);
    */
    @:pure static inline function TaskClearLookAt(ped: Int): Void { return untyped __lua__('TaskClearLookAt')(ped); }
    
    /**
    * Climbs or vaults the nearest thing.
    */
    @:pure static inline function TaskClimb(ped: Int, unused: Bool): Void { return untyped __lua__('TaskClimb')(ped, unused); }
    @:pure static inline function TaskClimbLadder(ped: Int, p1: Int): Void { return untyped __lua__('TaskClimbLadder')(ped, p1); }
    
    /**
    * Despite its name, it only attacks ONE hated target. The one closest hated target.
    * p2 seems to be always 0
    */
    @:pure static inline function TaskCombatHatedTargetsAroundPed(ped: Int, radius: Int, p2: Int): Void { return untyped __lua__('TaskCombatHatedTargetsAroundPed')(ped, radius, p2); }
    @:pure static inline function TaskCombatHatedTargetsAroundPedTimed(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('TaskCombatHatedTargetsAroundPedTimed')(p0, p1, p2, p3); }
    
    /**
    * Despite its name, it only attacks ONE hated target. The one closest to the specified position.
    */
    @:pure static inline function TaskCombatHatedTargetsInArea(ped: Int, x: Int, y: Int, z: Int, radius: Int, p5: Int): Void { return untyped __lua__('TaskCombatHatedTargetsInArea')(ped, x, y, z, radius, p5); }
    
    /**
    * Makes the specified ped attack the target ped.
    * p2 should be 0
    * p3 should be 16
    */
    @:pure static inline function TaskCombatPed(ped: Int, targetPed: Int, p2: Int, p3: Int): Void { return untyped __lua__('TaskCombatPed')(ped, targetPed, p2, p3); }
    @:pure static inline function TaskCombatPedTimed(p0: Int, ped: Int, p2: Int, p3: Int): Void { return untyped __lua__('TaskCombatPedTimed')(p0, ped, p2, p3); }
    @:pure static inline function TaskCower(ped: Int, duration: Int): Void { return untyped __lua__('TaskCower')(ped, duration); }
    
    /**
    * Example:
    * AI::TASK_DRIVE_BY(l_467[1 -- [[22]] ], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});
    * Needs working example. Doesn't seem to do anything.
    * I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.
    * I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.
    * I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.
    */
    @:pure static inline function TaskDriveBy(driverPed: Int, targetPed: Int, targetVehicle: Int, targetX: Int, targetY: Int, targetZ: Int, distanceToShoot: Int, pedAccuracy: Int, p8: Bool, firingPattern: EitherType<String, Int>): Void { return untyped __lua__('TaskDriveBy')(driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8, firingPattern); }
    
    /**
    * speed 1.0 = walk, 2.0 = run
    * p5 1 = normal, 3 = teleport to vehicle, 16 = teleport directly into vehicle
    * p6 is always 0
    * Usage of seat
    * -1 = driver
    * 0 = passenger
    * 1 = left back seat
    * 2 = right back seat
    * 3 = outside left
    * 4 = outside right
    */
    @:pure static inline function TaskEnterVehicle(ped: Int, vehicle: Int, timeout: Int, seat: Int, speed: Int, p5: Int, p6: Int): Void { return untyped __lua__('TaskEnterVehicle')(ped, vehicle, timeout, seat, speed, p5, p6); }
    @:pure static inline function TaskEveryoneLeaveVehicle(vehicle: Int): Void { return untyped __lua__('TaskEveryoneLeaveVehicle')(vehicle); }
    @:pure static inline function TaskExitCover(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('TaskExitCover')(p0, p1, p2, p3, p4); }
    
    /**
    * MulleKD19: Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.
    * A maximum of 8 points can be added.
    */
    @:pure static inline function TaskExtendRoute(x: Int, y: Int, z: Int): Void { return untyped __lua__('TaskExtendRoute')(x, y, z); }
    
    /**
    * MulleKD19: Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.
    */
    @:pure static inline function TaskFlushRoute(): Void { return untyped __lua__('TaskFlushRoute')(); }
    
    /**
    * If no timeout, set timeout to -1.
    */
    @:pure static inline function TaskFollowNavMeshToCoord(ped: Int, x: Int, y: Int, z: Int, speed: Int, timeout: Int, stoppingRange: Int, persistFollowing: Bool, unk: Int): Void { return untyped __lua__('TaskFollowNavMeshToCoord')(ped, x, y, z, speed, timeout, stoppingRange, persistFollowing, unk); }
    @:pure static inline function TaskFollowNavMeshToCoordAdvanced(ped: Int, x: Int, y: Int, z: Int, speed: Int, timeout: Int, unkFloat: Int, unkInt: Int, unkX: Int, unkY: Int, unkZ: Int, unk_40000f: Int): Void { return untyped __lua__('TaskFollowNavMeshToCoordAdvanced')(ped, x, y, z, speed, timeout, unkFloat, unkInt, unkX, unkY, unkZ, unk_40000f); }
    
    /**
    * MulleKD19: Makes the ped go on the created point route.
    * ped: The ped to give the task to.
    * speed: The speed to move at in m/s.
    * int: Unknown. Can be 0, 1, 2 or 3.
    * Example:
    * TASK_FLUSH_ROUTE();
    * TASK_EXTEND_ROUTE(0f, 0f, 70f);
    * TASK_EXTEND_ROUTE(10f, 0f, 70f);
    * TASK_EXTEND_ROUTE(10f, 10f, 70f);
    * TASK_FOLLOW_POINT_ROUTE(GET_PLAYER_PED(), 1f, 0);
    */
    @:pure static inline function TaskFollowPointRoute(ped: Int, speed: Int, unknown: Int): Void { return untyped __lua__('TaskFollowPointRoute')(ped, speed, unknown); }
    
    /**
    * p6 always -1
    * p7 always 10.0
    * p8 always 1
    */
    @:pure static inline function TaskFollowToOffsetOfEntity(ped: Int, entity: Int, offsetX: Int, offsetY: Int, offsetZ: Int, movementSpeed: Int, timeout: Int, stoppingRange: Int, persistFollowing: Bool): Void { return untyped __lua__('TaskFollowToOffsetOfEntity')(ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing); }
    @:pure static inline function TaskFollowWaypointRecording(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('TaskFollowWaypointRecording')(p0, p1, p2, p3, p4); }
    
    /**
    * p2 always false
    * [30/03/2017] ins1de :
    * See dev-c.com/nativedb/func/info/f28965d04f570dca
    */
    @:pure static inline function TaskForceMotionState(ped: Int, state: EitherType<String, Int>, p2: Bool): Void { return untyped __lua__('TaskForceMotionState')(ped, state, p2); }
    
    /**
    * Jenkins of this native is 0x4293601F. This is the actual name.
    */
    @:pure static inline function TaskGetOffBoat(ped: Int, boat: Int): Void { return untyped __lua__('TaskGetOffBoat')(ped, boat); }
    @:pure static inline function TaskGoStraightToCoord(ped: Int, x: Int, y: Int, z: Int, speed: Int, timeout: Int, targetHeading: Int, distanceToSlide: Int): Void { return untyped __lua__('TaskGoStraightToCoord')(ped, x, y, z, speed, timeout, targetHeading, distanceToSlide); }
    @:pure static inline function TaskGoStraightToCoordRelativeToEntity(entity1: Int, entity2: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Void { return untyped __lua__('TaskGoStraightToCoordRelativeToEntity')(entity1, entity2, p2, p3, p4, p5, p6); }
    
    /**
    * The ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path.
    * If the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination.
    * If the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming.
    * The ped will stop aiming when he is closer than distanceToStopAt to goToLocation.
    * I still can't figure out what unkTrue is used for. I don't notice any difference if I set it to false but in the decompiled scripts is always true.
    * I think that unkFlag, like the driving styles, could be a flag that "work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function". What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don't know what behavior enable or disable this possible flag so I leave it at 0.
    * Note: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation.
    * The aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation).
    * Example:
    * enum AimFlag
    * {
    * AimAtFocusLocation,
    * AimAtGoToLocation
    * };
    * Vector3 goToLocation1 = { 996.2867f, 0, -2143.044f, 0, 28.4763f, 0 }; // remember the padding.
    * Vector3 goToLocation2 = { 990.2867f, 0, -2140.044f, 0, 28.4763f, 0 }; // remember the padding.
    * Vector3 focusLocation = { 994.3478f, 0, -2136.118f, 0, 29.2463f, 0 }; // the coord z should be a little higher, around +1.0f to avoid aiming at the ground
    * // 1st example
    * AI::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation1.x, goToLocation1.y, goToLocation1.z, focusLocation.x, focusLocation.y, focusLocation.z, 2.0f  -- [[run]] , true  -- [[shoot]] , 3.0f  -- [[stop at]] , 0.0f  -- [[noRoadsDistance]] , true  -- [[always true]] , 0  -- [[possible flag]] , AimFlag::AimAtGoToLocation, -957453492  -- [[FullAuto pattern]] );
    * // 2nd example
    * AI::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation2.x, goToLocation2.y, goToLocation2.z, focusLocation.x, focusLocation.y, focusLocation.z, 1.0f  -- [[walk]] , false  -- [[don't shoot]] , 3.0f  -- [[stop at]] , 0.0f  -- [[noRoadsDistance]] , true  -- [[always true]] , 0  -- [[possible flag]] , AimFlag::AimAtFocusLocation, -957453492  -- [[FullAuto pattern]] );
    * 1st example: The ped (pedhandle) will run towards goToLocation1. While running and aiming towards goToLocation1, the ped will shoot on sight to any enemy in his path, using "FullAuto" firing pattern. The ped will stop once he is closer than distanceToStopAt to goToLocation1.
    * 2nd example: The ped will walk towards goToLocation2. This time, while walking towards goToLocation2 and aiming at focusLocation, the ped will point his weapon on sight to any enemy in his path without shooting. The ped will stop once he is closer than distanceToStopAt to goToLocation2.
    */
    @:pure static inline function TaskGoToCoordAndAimAtHatedEntitiesNearCoord(pedHandle: Int, goToLocationX: Int, goToLocationY: Int, goToLocationZ: Int, focusLocationX: Int, focusLocationY: Int, focusLocationZ: Int, speed: Int, shootAtEnemies: Bool, distanceToStopAt: Int, noRoadsDistance: Int, unkTrue: Bool, unkFlag: Int, aimingFlag: Int, firingPattern: EitherType<String, Int>): Void { return untyped __lua__('TaskGoToCoordAndAimAtHatedEntitiesNearCoord')(pedHandle, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, unkTrue, unkFlag, aimingFlag, firingPattern); }
    
    /**
    * example from fm_mission_controller
    * AI::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);
    */
    @:pure static inline function TaskGoToCoordAnyMeans(ped: Int, x: Int, y: Int, z: Int, speed: Int, p5: Int, p6: Bool, walkingStyle: Int, p8: Int): Void { return untyped __lua__('TaskGoToCoordAnyMeans')(ped, x, y, z, speed, p5, p6, walkingStyle, p8); }
    @:pure static inline function TaskGoToCoordAnyMeansExtraParams(ped: Int, x: Int, y: Int, z: Int, speed: Int, p5: Int, p6: Bool, walkingStyle: Int, p8: Int, p9: Int, p10: Int, p11: Int): Void { return untyped __lua__('TaskGoToCoordAnyMeansExtraParams')(ped, x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11); }
    @:pure static inline function TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(ped: Int, x: Int, y: Int, z: Int, speed: Int, p5: Int, p6: Bool, walkingStyle: Int, p8: Int, p9: Int, p10: Int, p11: Int, p12: Int): Void { return untyped __lua__('TaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed')(ped, x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12); }
    
    /**
    * movement_speed: mostly 2f, but also 1/1.2f, etc.
    * p8: always false
    * p9: 2f
    * p10: 0.5f
    * p11: true
    * p12: 0 / 512 / 513, etc.
    * p13: 0
    * firing_pattern: ${firing_pattern_full_auto}, 0xC6EE6B4C
    */
    @:pure static inline function TaskGoToCoordWhileAimingAtCoord(ped: Int, x: Int, y: Int, z: Int, aimAtX: Int, aimAtY: Int, aimAtZ: Int, moveSpeed: Int, p8: Bool, p9: Int, p10: Int, p11: Bool, flags: Int, p13: Bool, firingPattern: EitherType<String, Int>): Void { return untyped __lua__('TaskGoToCoordWhileAimingAtCoord')(ped, x, y, z, aimAtX, aimAtY, aimAtZ, moveSpeed, p8, p9, p10, p11, flags, p13, firingPattern); }
    @:pure static inline function TaskGoToCoordWhileAimingAtEntity(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Bool, p7: Int, p8: Int, p9: Bool, p10: Int, p11: Bool, p12: Int, p13: Int): Void { return untyped __lua__('TaskGoToCoordWhileAimingAtEntity')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13); }
    
    /**
    * The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0
    * Note: I've only tested it on entity -&gt; ped and target -&gt; vehicle. It could work differently on other entities, didn't try it yet.
    * Example: AI::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)
    * Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).
    */
    @:pure static inline function TaskGoToEntity(entity: Int, target: Int, duration: Int, distance: Int, speed: Int, p5: Int, p6: Int): Void { return untyped __lua__('TaskGoToEntity')(entity, target, duration, distance, speed, p5, p6); }
    @:pure static inline function TaskGoToEntityWhileAimingAtCoord(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Bool, p7: Int, p8: Int, p9: Bool, p10: Bool, p11: Int): Void { return untyped __lua__('TaskGoToEntityWhileAimingAtCoord')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11); }
    
    /**
    * shootatEntity:
    * If true, peds will shoot at Entity till it is dead.
    * If false, peds will just walk till they reach the entity and will cease shooting.
    */
    @:pure static inline function TaskGoToEntityWhileAimingAtEntity(ped: Int, entityToWalkTo: Int, entityToAimAt: Int, speed: Int, shootatEntity: Bool, p5: Int, p6: Int, p7: Bool, p8: Bool, firingPattern: EitherType<String, Int>): Void { return untyped __lua__('TaskGoToEntityWhileAimingAtEntity')(ped, entityToWalkTo, entityToAimAt, speed, shootatEntity, p5, p6, p7, p8, firingPattern); }
    
    /**
    * eg
    * AI::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0);
    * ped = Ped you want to perform this task.
    * target = the Entity they should aim at.
    * distanceToStopAt = distance from the target, where the ped should stop to aim.
    * StartAimingDist = distance where the ped should start to aim.
    */
    @:pure static inline function TaskGotoEntityAiming(ped: Int, target: Int, distanceToStopAt: Int, StartAimingDist: Int): Void { return untyped __lua__('TaskGotoEntityAiming')(ped, target, distanceToStopAt, StartAimingDist); }
    @:pure static inline function TaskGotoEntityOffset(ped: Int, p1: Int, p2: Int, x: Int, y: Int, z: Int, duration: Int): Void { return untyped __lua__('TaskGotoEntityOffset')(ped, p1, p2, x, y, z, duration); }
    @:pure static inline function TaskGotoEntityOffsetXy(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int): Void { return untyped __lua__('TaskGotoEntityOffsetXy')(p0, p1, p2, p3, p4, p5, p6, p7); }
    @:pure static inline function TaskGuardAssignedDefensiveArea(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Void { return untyped __lua__('TaskGuardAssignedDefensiveArea')(p0, p1, p2, p3, p4, p5, p6); }
    
    /**
    * From re_prisonvanbreak:
    * AI::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1);
    */
    @:pure static inline function TaskGuardCurrentPosition(p0: Int, p1: Int, p2: Int, p3: Bool): Void { return untyped __lua__('TaskGuardCurrentPosition')(p0, p1, p2, p3); }
    
    /**
    * p0 - Guessing PedID
    * p1, p2, p3 - XYZ?
    * p4 - ???
    * p5 - Maybe the size of sphere from XYZ?
    * p6 - ???
    * p7, p8, p9 - XYZ again?
    * p10 - Maybe the size of sphere from second XYZ?
    */
    @:pure static inline function TaskGuardSphereDefensiveArea(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int, p10: Int): Void { return untyped __lua__('TaskGuardSphereDefensiveArea')(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10); }
    
    /**
    * In the scripts, p3 was always -1.
    * p3 seems to be duration or timeout of turn animation.
    * Also facingPed can be 0 or -1 so ped will just raise hands up.
    */
    @:pure static inline function TaskHandsUp(ped: Int, duration: Int, facingPed: Int, p3: Int, p4: Bool): Void { return untyped __lua__('TaskHandsUp')(ped, duration, facingPed, p3, p4); }
    
    /**
    * Ped pilot should be in a heli.
    * EntityToFollow can be a vehicle or Ped.
    * x,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane)
    * NOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given.
    */
    @:pure static inline function TaskHeliChase(pilot: Int, entityToFollow: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('TaskHeliChase')(pilot, entityToFollow, x, y, z); }
    
    /**
    * Needs more research.
    * Default value of p13 is -1.0 or 0xBF800000.
    * Default value of p14 is 0.
    * Modified examples from "fm_mission_controller.ysc", line ~203551:
    * AI::TASK_HELI_MISSION(ped, vehicle, 0, 0, posX, posY, posZ, 4, 1.0, -1.0, -1.0, 10, 10, 5.0, 0);
    * AI::TASK_HELI_MISSION(ped, vehicle, 0, 0, posX, posY, posZ, 4, 1.0, -1.0, -1.0, 0, ?, 5.0, 4096);
    * int mode seams to set mission type 4 = coords target, 23 = ped target.
    * int 14 set to 32 = ped will land at destination.
    * My findings:
    * mode 4 or 7 forces heli to snap to the heading set
    * 8 makes the heli flee from the ped.
    * 9 circles around ped with angle set
    * 10, 11 normal + imitate ped heading
    * 20 makes the heli land when he's near the ped. It won't resume chasing.
    * 21 emulates an helicopter crash
    * 23 makes the heli circle erratically around ped
    * I change p2 to 'vehicleToFollow' as it seems to work like the task natives to set targets. In the heli_taxi script where as the merryweather heli takes you to your waypoint it has no need to follow a vehicle or a ped, so of course both have 0 set.
    */
    @:pure static inline function TaskHeliMission(pilot: Int, vehicle: Int, vehicleToFollow: Int, pedToFollow: Int, posX: Int, posY: Int, posZ: Int, mode: Int, speed: Int, radius: Int, angle: Int, p11: Int, height: Int, p13: Int, p14: Int): Void { return untyped __lua__('TaskHeliMission')(pilot, vehicle, vehicleToFollow, pedToFollow, posX, posY, posZ, mode, speed, radius, angle, p11, height, p13, p14); }
    
    /**
    * Definition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4).
    * v350: Ped ped, bool unused
    * v678: Ped ped, bool unused, bool flag1, bool flag2
    * flag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true.
    */
    @:pure static inline function TaskJump(ped: Int, unused: Bool): Void { return untyped __lua__('TaskJump')(ped, unused); }
    @:pure static inline function TaskLeaveAnyVehicle(ped: Int, p1: Int, p2: Int): Void { return untyped __lua__('TaskLeaveAnyVehicle')(ped, p1, p2); }
    
    /**
    * Flags from decompiled scripts:
    * 0 = normal exit and closes door.
    * 1 = normal exit and closes door.
    * 16 = teleports outside, door kept closed.
    * 64 = normal exit and closes door, maybe a bit slower animation than 0.
    * 256 = normal exit but does not close the door.
    * 4160 = ped is throwing himself out, even when the vehicle is still.
    * 262144 = ped moves to passenger seat first, then exits normally
    * Others to be tried out: 320, 512, 131072.
    */
    @:pure static inline function TaskLeaveVehicle(ped: Int, vehicle: Int, flags: Int): Void { return untyped __lua__('TaskLeaveVehicle')(ped, vehicle, flags); }
    
    /**
    * p5 = 0, p6 = 2
    */
    @:pure static inline function TaskLookAtCoord(entity: Int, x: Int, y: Int, z: Int, duration: Int, p5: Int, p6: Int): Void { return untyped __lua__('TaskLookAtCoord')(entity, x, y, z, duration, p5, p6); }
    
    /**
    * param3: duration in ms, use -1 to look forever
    * param4: using 2048 is fine
    * param5: using 3 is fine
    */
    @:pure static inline function TaskLookAtEntity(ped: Int, lookAt: Int, duration: Int, unknown1: Int, unknown2: Int): Void { return untyped __lua__('TaskLookAtEntity')(ped, lookAt, duration, unknown1, unknown2); }
    
    /**
    * Example:
    * AI::_2D537BA194896636(PLAYER::PLAYER_PED_ID(), "arm_wrestling_sweep_paired_a_rev3", 0.0, 1, "mini@arm_wrestling", 0);
    */
    @:pure static inline function TaskMoveNetwork(ped: Int, task: String, multiplier: Int, p3: Bool, animDict: String, flags: Int): Void { return untyped __lua__('TaskMoveNetwork')(ped, task, multiplier, p3, animDict, flags); }
    
    /**
    * Example:
    * AI::_2D537BA194896636(PLAYER::PLAYER_PED_ID(), "arm_wrestling_sweep_paired_a_rev3", 0.0, 1, "mini@arm_wrestling", 0);
    */
    @:pure static inline function N_0x2d537ba194896636(ped: Int, task: String, multiplier: Int, p3: Bool, animDict: String, flags: Int): Void { return untyped __lua__('N_0x2d537ba194896636')(ped, task, multiplier, p3, animDict, flags); }
    
    /**
    * Example:
    * AI::_D5B35BEA41919ACB(PLAYER::PLAYER_PED_ID(), "minigame_tattoo_michael_parts", 324.13, 181.29, 102.6, 0.0, 0.0, 22.32, 2, 0, 0, 0, 0);
    */
    @:pure static inline function TaskMoveNetworkAdvanced(ped: Int, p1: String, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int, p10: Bool, animDict: String, flags: Int): Void { return untyped __lua__('TaskMoveNetworkAdvanced')(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, animDict, flags); }
    
    /**
    * Example:
    * AI::_D5B35BEA41919ACB(PLAYER::PLAYER_PED_ID(), "minigame_tattoo_michael_parts", 324.13, 181.29, 102.6, 0.0, 0.0, 22.32, 2, 0, 0, 0, 0);
    */
    @:pure static inline function N_0xd5b35bea41919acb(ped: Int, p1: String, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int, p10: Bool, animDict: String, flags: Int): Void { return untyped __lua__('N_0xd5b35bea41919acb')(ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, animDict, flags); }
    @:pure static inline function TaskOpenVehicleDoor(ped: Int, vehicle: Int, timeOut: Int, doorIndex: Int, speed: Int): Void { return untyped __lua__('TaskOpenVehicleDoor')(ped, vehicle, timeOut, doorIndex, speed); }
    
    /**
    * This function has a third parameter as well (bool).
    * Second parameter is unused.
    * seconds parameter was for jetpack in the early stages of gta and the hard coded code is now removed
    */
    @:pure static inline function TaskParachute(ped: Int, p1: Bool): Void { return untyped __lua__('TaskParachute')(ped, p1); }
    
    /**
    * makes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED
    */
    @:pure static inline function TaskParachuteToTarget(ped: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('TaskParachuteToTarget')(ped, x, y, z); }
    
    /**
    * After looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts:
    * "miss_Tower_01" (this went from 01 - 10)
    * "miss_Ass0" (0, 4, 6, 3)
    * "MISS_PATROL_8"
    * I think they're patrol routes, but I'm not sure. And I believe the 3rd parameter is a BOOL, but I can't confirm other than only seeing 0 and 1 being passed.
    * As far as I can see the patrol routes names such as "miss_Ass0" have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach.
    * From the scripts
    * AI::OPEN_PATROL_ROUTE("miss_Ass0");
    * AI::ADD_PATROL_ROUTE_NODE(0, "WORLD_HUMAN_GUARD_STAND", l_738[0 -- [[3]] ], -139.4076690673828, -993.4732055664062, 26.2754, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(5000, 10000));
    * AI::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_738[1 -- [[3]] ], -116.1391830444336, -987.4984130859375, 26.38541030883789, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(5000, 10000));
    * AI::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", l_738[2 -- [[3]] ], -128.46847534179688, -979.0340576171875, 26.2754, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(5000, 10000));
    * AI::ADD_PATROL_ROUTE_LINK(0, 1);
    * AI::ADD_PATROL_ROUTE_LINK(1, 2);
    * AI::ADD_PATROL_ROUTE_LINK(2, 0);
    * AI::CLOSE_PATROL_ROUTE();
    * AI::CREATE_PATROL_ROUTE();
    */
    @:pure static inline function TaskPatrol(ped: Int, p1: String, p2: Int, p3: Bool, p4: Bool): Void { return untyped __lua__('TaskPatrol')(ped, p1, p2, p3, p4); }
    
    /**
    * Stand still (?)
    */
    @:pure static inline function TaskPause(ped: Int, ms: Int): Void { return untyped __lua__('TaskPause')(ped, ms); }
    @:pure static inline function TaskPedSlideToCoord(ped: Int, x: Int, y: Int, z: Int, heading: Int, p5: Int): Void { return untyped __lua__('TaskPedSlideToCoord')(ped, x, y, z, heading, p5); }
    @:pure static inline function TaskPedSlideToCoordHdgRate(ped: Int, x: Int, y: Int, z: Int, heading: Int, p5: Int, p6: Int): Void { return untyped __lua__('TaskPedSlideToCoordHdgRate')(ped, x, y, z, heading, p5, p6); }
    @:pure static inline function TaskPerformSequence(ped: Int, taskSequence: Int): Int { return untyped __lua__('TaskPerformSequence')(ped, taskSequence); }
    @:pure static inline function TaskPerformSequenceFromProgress(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('TaskPerformSequenceFromProgress')(p0, p1, p2, p3); }
    @:pure static inline function TaskPlaneChase(pilot: Int, entityToFollow: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('TaskPlaneChase')(pilot, entityToFollow, x, y, z); }
    
    /**
    * Function.Call(Hash.TASK_PLANE_LAND, pilot, selectedAirplane, runwayStartPoint.X, runwayStartPoint.Y, runwayStartPoint.Z, runwayEndPoint.X, runwayEndPoint.Y, runwayEndPoint.Z);
    */
    @:pure static inline function TaskPlaneLand(pilot: Int, plane: Int, runwayStartX: Int, runwayStartY: Int, runwayStartZ: Int, runwayEndX: Int, runwayEndY: Int, runwayEndZ: Int): Void { return untyped __lua__('TaskPlaneLand')(pilot, plane, runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ); }
    
    /**
    * EXAMPLE USAGE:
    * Fly around target (Precautiously, keeps high altitude):
    * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, 200f);
    * Fly around target (Dangerously, keeps VERY low altitude):
    * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -500f);
    * Fly directly into target:
    * Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -5000f);
    * EXPANDED INFORMATION FOR ADVANCED USAGE (custom pilot)
    * 'physicsSpeed': (THIS IS NOT YOUR ORDINARY SPEED PARAMETER: READ!!)
    * Think of this -first- as a radius value, not a true speed value.  The ACTUAL effective speed of the plane will be that of the maximum speed permissible to successfully fly in a -circle- with a radius of 'physicsSpeed'.  This also means that the plane must complete a circle before it can begin its "bombing run", its straight line pass towards the target.  p9 appears to influence the angle at which a "bombing run" begins, although I can't confirm yet.
    * VERY IMPORTANT: A "bombing run" will only occur if a plane can successfully determine a possible navigable route (the slower the value of 'physicsSpeed', the more precise the pilot can be due to less influence of physics on flightpath).  Otherwise, the pilot will continue to patrol around Destination (be it a dynamic Entity position vector or a fixed world coordinate vector.)
    * 0 = Plane's physics are almost entirely frozen, plane appears to "orbit" around precise destination point
    * 1-299 = Blend of "frozen, small radius" vs. normal vs. "accelerated, hyperfast, large radius"
    * 300+ =  Vehicle behaves entirely like a normal gameplay plane.
    * 'patrolBlend' (The lower the value, the more the Destination is treated as a "fly AT" rather than a "fly AROUND point".)
    * Scenario: Destination is an Entity on ground level, wide open field
    * -5000 = Pilot kamikazes directly into Entity
    * -1000 = Pilot flies extremely low -around- Entity, very prone to crashing
    * -200 = Pilot flies lower than average around Entity.
    * 0 = Pilot flies around Entity, normal altitude
    * 200 = Pilot flies an extra eighty units or so higher than 0 while flying around Destination (this doesn't seem to correlate directly into distance units.)
    * -- Valid mission types found in the exe: --
    * 0 = None
    * 1 = Unk
    * 2 = CTaskVehicleRam
    * 3 = CTaskVehicleBlock
    * 4 = CTaskVehicleGoToPlane
    * 5 = CTaskVehicleStop
    * 6 = CTaskVehicleAttack
    * 7 = CTaskVehicleFollow
    * 8 = CTaskVehicleFleeAirborne
    * 9= CTaskVehicleCircle
    * 10 = CTaskVehicleEscort
    * 15 = CTaskVehicleFollowRecording
    * 16 = CTaskVehiclePoliceBehaviour
    * 17 = CTaskVehicleCrash
    */
    @:pure static inline function TaskPlaneMission(pilot: Int, plane: Int, targetVehicle: Int, targetPed: Int, destinationX: Int, destinationY: Int, destinationZ: Int, missionType: Int, vehicleSpeed: Int, p9: Int, heading: Int, maxAltitude: Int, minAltitude: Int): Void { return untyped __lua__('TaskPlaneMission')(pilot, plane, targetVehicle, targetPed, destinationX, destinationY, destinationZ, missionType, vehicleSpeed, p9, heading, maxAltitude, minAltitude); }
    @:pure static inline function TaskPlantBomb(ped: Int, x: Int, y: Int, z: Int, heading: Int): Void { return untyped __lua__('TaskPlantBomb')(ped, x, y, z, heading); }
    
    /**
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    * float speed &gt; normal speed is 8.0f
    * ----------------------
    * float speedMultiplier &gt; multiply the playback speed
    * ----------------------
    * int duration: time in millisecond
    * ----------------------
    * -1 _ _ _ _ _ _ _&gt; Default (see flag)
    * 0 _ _ _ _ _ _ _ &gt; Not play at all
    * Small value _ _ &gt; Slow down animation speed
    * Other _ _ _ _ _ &gt; freeze player control until specific time (ms) has
    * _ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be
    * _ _ _ _ _ _ _ _ _ controllable.)
    * int flag:
    * ----------------------
    * enum eAnimationFlags
    * {
    * ANIM_FLAG_NORMAL = 0,
    * ANIM_FLAG_REPEAT = 1,
    * ANIM_FLAG_STOP_LAST_FRAME = 2,
    * ANIM_FLAG_UPPERBODY = 16,
    * ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,
    * ANIM_FLAG_CANCELABLE = 120,
    * };
    * Odd number : loop infinitely
    * Even number : Freeze at last frame
    * Multiple of 4: Freeze at last frame but controllable
    * 01 to 15 &gt; Full body
    * 10 to 31 &gt; Upper body
    * 32 to 47 &gt; Full body &gt; Controllable
    * 48 to 63 &gt; Upper body &gt; Controllable
    * ...
    * 001 to 255 &gt; Normal
    * 256 to 511 &gt; Garbled
    * ...
    * playbackRate:
    * values are between 0.0 and 1.0
    * lockX:
    * 0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3
    * &gt; 1 for mini@sprunk
    * lockY:
    * 0 in most cases
    * 1 for missfam5_yoga, missfra1mcs_2_crew_react
    * lockZ:
    * 0 for single player
    * Can be 1 but only for MP
    */
    @:pure static inline function TaskPlayAnim(ped: Int, animDictionary: String, animationName: String, speed: Int, speedMultiplier: Int, duration: Int, flag: Int, playbackRate: Int, lockX: Bool, lockY: Bool, lockZ: Bool): Void { return untyped __lua__('TaskPlayAnim')(ped, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, lockX, lockY, lockZ); }
    
    /**
    * It's similar to the one above, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position). animTime is a float from 0.0 -&gt; 1.0, lets you start an animation from given point. The rest as in AI::TASK_PLAY_ANIM.
    * Rotation information : rotX and rotY don't seem to have any effect, only rotZ works.
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    */
    @:pure static inline function TaskPlayAnimAdvanced(ped: Int, animDict: String, animName: String, posX: Int, posY: Int, posZ: Int, rotX: Int, rotY: Int, rotZ: Int, speed: Int, speedMultiplier: Int, duration: Int, flag: Int, animTime: Int, p14: Int, p15: Int): Void { return untyped __lua__('TaskPlayAnimAdvanced')(ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, speed, speedMultiplier, duration, flag, animTime, p14, p15); }
    
    /**
    * Example from the scripts:
    * AI::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0);
    * =========================================================
    * ^^ No offense, but Idk how that would really help anyone.
    * As for the animDict &amp; animation, they're both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks.
    * Known boneMaskTypes'
    * "BONEMASK_HEADONLY"
    * "BONEMASK_HEAD_NECK_AND_ARMS"
    * "BONEMASK_HEAD_NECK_AND_L_ARM"
    * "BONEMASK_HEAD_NECK_AND_R_ARM"
    * p4 known args - 0.0f, 0.5f, 0.25f
    * p5 known args - 0.0f, 0.25f
    * p6 known args - 1 if a global if check is passed.
    * p7 known args - 1 if a global if check is passed.
    * The values found above, I found within the 5 scripts this is ever called in. (fmmc_launcher, fm_deathmatch_controller, fm_impromptu_dm_controller, fm_mission_controller, and freemode).
    * =========================================================
    */
    @:pure static inline function TaskPlayPhoneGestureAnimation(ped: Int, animDict: String, animation: String, boneMaskType: String, p4: Int, p5: Int, p6: Bool, p7: Bool): Void { return untyped __lua__('TaskPlayPhoneGestureAnimation')(ped, animDict, animation, boneMaskType, p4, p5, p6, p7); }
    @:pure static inline function TaskPutPedDirectlyIntoCover(ped: Int, x: Int, y: Int, z: Int, timeout: Int, p5: Bool, p6: Int, p7: Bool, p8: Bool, p9: Int, p10: Bool): Void { return untyped __lua__('TaskPutPedDirectlyIntoCover')(ped, x, y, z, timeout, p5, p6, p7, p8, p9, p10); }
    
    /**
    * from armenian3.c4
    * AI::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);
    */
    @:pure static inline function TaskPutPedDirectlyIntoMelee(ped: Int, meleeTarget: Int, p2: Int, p3: Int, p4: Int, p5: Bool): Void { return untyped __lua__('TaskPutPedDirectlyIntoMelee')(ped, meleeTarget, p2, p3, p4, p5); }
    
    /**
    * Only appears twice in the scripts.
    * AI::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 0x41200000);
    * AI::TASK_RAPPEL_FROM_HELI(a_0, 0x41200000);
    * Fixed, definitely not a float and since it's such a big number obviously not a bool. All though note when I thought it was a bool and set it to 1 it seemed to work that same as int 0x41200000.
    */
    @:pure static inline function TaskRappelFromHeli(ped: Int, unused: Int): Void { return untyped __lua__('TaskRappelFromHeli')(ped, unused); }
    @:pure static inline function TaskReactAndFleePed(ped: Int, fleeTarget: Int): Void { return untyped __lua__('TaskReactAndFleePed')(ped, fleeTarget); }
    
    /**
    * The 2nd param (unused) is not implemented.
    * -----------------------------------------------------------------------
    * The only occurrence I found in a R* script ("assassin_construction.ysc.c4"):
    * if (((v_3 &lt; v_4) &amp;&amp; (AI::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) &amp;&amp; (v_5 &gt; v_3)) {
    * AI::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1);
    * }
    */
    @:pure static inline function TaskReloadWeapon(ped: Int, unused: Bool): Void { return untyped __lua__('TaskReloadWeapon')(ped, unused); }
    
    /**
    * From fm_mission_controller.c:
    * reserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1);
    * vVar28 = {0.094f, 0.02f, -0.005f};
    * vVar29 = {-92.24f, 63.64f, 150.24f};
    * func_253(&amp;uVar30, joaat("prop_ld_case_01"), Global_1592429.imm_34757[iParam1 &lt;268&gt;], 1, 1, 0, 1);
    * set_entity_lod_dist(net_to_ent(uVar30), 500);
    * attach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1);
    * Var31.imm_4 = 1065353216;
    * Var31.imm_5 = 1065353216;
    * Var31.imm_9 = 1065353216;
    * Var31.imm_10 = 1065353216;
    * Var31.imm_14 = 1065353216;
    * Var31.imm_15 = 1065353216;
    * Var31.imm_17 = 1040187392;
    * Var31.imm_18 = 1040187392;
    * Var31.imm_19 = -1;
    * Var32.imm_4 = 1065353216;
    * Var32.imm_5 = 1065353216;
    * Var32.imm_9 = 1065353216;
    * Var32.imm_10 = 1065353216;
    * Var32.imm_14 = 1065353216;
    * Var32.imm_15 = 1065353216;
    * Var32.imm_17 = 1040187392;
    * Var32.imm_18 = 1040187392;
    * Var32.imm_19 = -1;
    * Var31 = 1;
    * Var31.imm_1 = "weapons@misc@jerrycan@mp_male";
    * Var31.imm_2 = "idle";
    * Var31.imm_20 = 1048633;
    * Var31.imm_4 = 0.5f;
    * Var31.imm_16 = get_hash_key("BONEMASK_ARMONLY_R");
    * task_scripted_animation(iParam0, &amp;Var31, &amp;Var32, &amp;Var32, 0f, 0.25f);
    * set_model_as_no_longer_needed(joaat("prop_ld_case_01"));
    * remove_anim_dict("anim@heists@biolab@");
    */
    @:pure static inline function TaskScriptedAnimation(ped: Int, p4: Int, p5: Int): { a0: Int, a1: Int, a2: Int } { return untyped __lua__('TaskScriptedAnimation')(ped, p4, p5); }
    @:pure static inline function TaskSeekCoverFromPed(ped: Int, target: Int, duration: Int, p3: Bool): Void { return untyped __lua__('TaskSeekCoverFromPed')(ped, target, duration, p3); }
    @:pure static inline function TaskSeekCoverFromPos(ped: Int, x: Int, y: Int, z: Int, duration: Int, p5: Bool): Void { return untyped __lua__('TaskSeekCoverFromPos')(ped, x, y, z, duration, p5); }
    
    /**
    * from michael2:
    * AI::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1);
    * appears to be shorter variation
    * from michael3:
    * AI::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0);
    */
    @:pure static inline function TaskSeekCoverToCoords(ped: Int, x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int, p7: Int, p8: Bool): Void { return untyped __lua__('TaskSeekCoverToCoords')(ped, x1, y1, z1, x2, y2, z2, p7, p8); }
    @:pure static inline function TaskSeekCoverToCoverPoint(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Bool): Void { return untyped __lua__('TaskSeekCoverToCoverPoint')(p0, p1, p2, p3, p4, p5, p6); }
    
    /**
    * I cant believe I have to define this, this is one of the best natives.
    * It makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee.
    * Since it is a task, every time the native is called the ped will stop for a moment.
    */
    @:pure static inline function TaskSetBlockingOfNonTemporaryEvents(ped: Int, toggle: Bool): Void { return untyped __lua__('TaskSetBlockingOfNonTemporaryEvents')(ped, toggle); }
    
    /**
    * p1 is always GET_HASH_KEY("empty") in scripts, for the rare times this is used
    */
    @:pure static inline function TaskSetDecisionMaker(p0: Int, p1: EitherType<String, Int>): Void { return untyped __lua__('TaskSetDecisionMaker')(p0, p1); }
    @:pure static inline function TaskSetSphereDefensiveArea(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('TaskSetSphereDefensiveArea')(p0, p1, p2, p3, p4); }
    @:pure static inline function TaskShockingEventReact(ped: Int, eventHandle: Int): Void { return untyped __lua__('TaskShockingEventReact')(ped, eventHandle); }
    @:pure static inline function TaskShootAtCoord(ped: Int, x: Int, y: Int, z: Int, duration: Int, firingPattern: EitherType<String, Int>): Void { return untyped __lua__('TaskShootAtCoord')(ped, x, y, z, duration, firingPattern); }
    
    /**
    * //this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds
    * Entity aimedentity;
    * Player player = PLAYER::PLAYER_ID();
    * PLAYER::_GET_AIMED_ENTITY(player, &amp;aimedentity);
    * //bg is an array of peds
    * AI::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, GAMEPLAY::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO"));
    * in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press event would be better.
    */
    @:pure static inline function TaskShootAtEntity(entity: Int, target: Int, duration: Int, firingPattern: EitherType<String, Int>): Void { return untyped __lua__('TaskShootAtEntity')(entity, target, duration, firingPattern); }
    
    /**
    * Makes the specified ped shuffle to the next vehicle seat.
    * The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.
    */
    @:pure static inline function TaskShuffleToNextVehicleSeat(ped: Int, vehicle: Int): Void { return untyped __lua__('TaskShuffleToNextVehicleSeat')(ped, vehicle); }
    @:pure static inline function TaskSkyDive(ped: Int): Void { return untyped __lua__('TaskSkyDive')(ped); }
    
    /**
    * Makes the specified ped flee the specified distance from the specified position.
    */
    @:pure static inline function TaskSmartFleeCoord(ped: Int, x: Int, y: Int, z: Int, distance: Int, time: Int, p6: Bool, p7: Bool): Void { return untyped __lua__('TaskSmartFleeCoord')(ped, x, y, z, distance, time, p6, p7); }
    
    /**
    * Makes a ped run away from another ped (fleeTarget).
    * distance = ped will flee this distance.
    * fleeTime = ped will flee for this amount of time, set to "-1" to flee forever
    */
    @:pure static inline function TaskSmartFleePed(ped: Int, fleeTarget: Int, distance: Int, fleeTime: Int, p4: Bool, p5: Bool): Void { return untyped __lua__('TaskSmartFleePed')(ped, fleeTarget, distance, fleeTime, p4, p5); }
    
    /**
    * scenarioName example: "WORLD_HUMAN_GUARD_STAND"
    */
    @:pure static inline function TaskStandGuard(ped: Int, x: Int, y: Int, z: Int, heading: Int, scenarioName: String): Void { return untyped __lua__('TaskStandGuard')(ped, x, y, z, heading, scenarioName); }
    
    /**
    * Makes the specified ped stand still for (time) milliseconds.
    */
    @:pure static inline function TaskStandStill(ped: Int, time: Int): Void { return untyped __lua__('TaskStandStill')(ped, time); }
    
    /**
    * List of scenarioNames: pastebin.com/6mrYTdQv
    * Also a few more listed at AI::TASK_START_SCENARIO_IN_PLACE just above.
    * ---------------
    * The first parameter in every scenario has always been a Ped of some sort. The second like TASK_START_SCENARIO_IN_PLACE is the name of the scenario.
    * The next 4 parameters were harder to decipher. After viewing "hairdo_shop_mp.ysc.c4", and being confused from seeing the case in other scripts, they passed the first three of the arguments as one array from a function, and it looked like it was obviously x, y, and z.
    * I haven't seen the sixth parameter go to or over 360, making me believe that it is rotation, but I really can't confirm anything.
    * I have no idea what the last 3 parameters are, but I'll try to find out.
    * -going on the last 3 parameters, they appear to always be "0, 0, 1"
    * p6 -1 also used in scrips
    * p7 used for sitting scenarios
    * p8 teleports ped to position
    */
    @:pure static inline function TaskStartScenarioAtPosition(ped: Int, scenarioName: String, x: Int, y: Int, z: Int, heading: Int, duration: Int, sittingScenario: Bool, teleport: Bool): Void { return untyped __lua__('TaskStartScenarioAtPosition')(ped, scenarioName, x, y, z, heading, duration, sittingScenario, teleport); }
    
    /**
    * Plays a scenario on a Ped at their current location.
    * unkDelay - Usually 0 or -1, doesn't seem to have any effect. Might be a delay between sequences.
    * playEnterAnim - Plays the "Enter" anim if true, otherwise plays the "Exit" anim. Scenarios that don't have any "Enter" anims won't play if this is set to true.
    * ----
    * From "am_hold_up.ysc.c4" at line 339:
    * AI::TASK_START_SCENARIO_IN_PLACE(NETWORK::NET_TO_PED(l_8D._f4), sub_adf(), 0, 1);
    * I'm unsure of what the last two parameters are, however sub_adf() randomly returns 1 of 3 scenarios, those being:
    * WORLD_HUMAN_SMOKING
    * WORLD_HUMAN_HANG_OUT_STREET
    * WORLD_HUMAN_STAND_MOBILE
    * This makes sense, as these are what I commonly see when going by a liquor store.
    * -------------------------
    * List of scenarioNames: pastebin.com/6mrYTdQv
    * (^ Thank you so fucking much for this)
    * Also these:
    * WORLD_FISH_FLEE
    * DRIVE
    * WORLD_HUMAN_HIKER
    * WORLD_VEHICLE_ATTRACTOR
    * WORLD_VEHICLE_BICYCLE_MOUNTAIN
    * WORLD_VEHICLE_BIKE_OFF_ROAD_RACE
    * WORLD_VEHICLE_BIKER
    * WORLD_VEHICLE_CONSTRUCTION_PASSENGERS
    * WORLD_VEHICLE_CONSTRUCTION_SOLO
    * WORLD_VEHICLE_DRIVE_PASSENGERS
    * WORLD_VEHICLE_DRIVE_SOLO
    * WORLD_VEHICLE_EMPTY
    * WORLD_VEHICLE_PARK_PARALLEL
    * WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN
    * WORLD_VEHICLE_POLICE_BIKE
    * WORLD_VEHICLE_POLICE_CAR
    * WORLD_VEHICLE_POLICE_NEXT_TO_CAR
    * WORLD_VEHICLE_SALTON_DIRT_BIKE
    * WORLD_VEHICLE_TRUCK_LOGS
    */
    @:pure static inline function TaskStartScenarioInPlace(ped: Int, scenarioName: String, unkDelay: Int, playEnterAnim: Bool): Void { return untyped __lua__('TaskStartScenarioInPlace')(ped, scenarioName, unkDelay, playEnterAnim); }
    
    /**
    * Makes the ped run to take cover
    */
    @:pure static inline function TaskStayInCover(ped: Int): Void { return untyped __lua__('TaskStayInCover')(ped); }
    
    /**
    * known "killTypes" are: "AR_stealth_kill_knife" and "AR_stealth_kill_a".
    */
    @:pure static inline function TaskStealthKill(killer: Int, target: Int, killType: EitherType<String, Int>, p3: Int, p4: Bool): Int { return untyped __lua__('TaskStealthKill')(killer, target, killType, p3, p4); }
    
    /**
    * TODO: add hash from x360
    * ^^^
    * I got you, x360 Hash: 0x5A32D4B4.
    * Note: Whoever named this I just compared it and the hash matches, it was the correct name thanks.
    * Note: Alexander Blade, needs to fix this site or his code one, as when we do find the right name the server throws an error saying the name is already in use. AB is a legend coder, so I'm sure this is a simple fix for him.
    */
    @:pure static inline function TaskStopPhoneGestureAnimation(ped: Int): Void { return untyped __lua__('TaskStopPhoneGestureAnimation')(ped); }
    @:pure static inline function TaskSwapWeapon(ped: Int, p1: Bool): Void { return untyped __lua__('TaskSwapWeapon')(ped, p1); }
    
    /**
    * This function is called on peds in vehicles.
    * anim: animation name
    * p2, p3, p4: "sweep_low", "sweep_med" or "sweep_high"
    * p5: no idea what it does but is usually -1
    */
    @:pure static inline function TaskSweepAimEntity(ped: Int, anim: String, p2: String, p3: String, p4: String, p5: Int, vehicle: Int, p7: Int, p8: Int): Void { return untyped __lua__('TaskSweepAimEntity')(ped, anim, p2, p3, p4, p5, vehicle, p7, p8); }
    @:pure static inline function TaskSweepAimPosition(p0: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int, p10: Int): { a0: Int, a1: Int, a2: Int, a3: Int } { return untyped __lua__('TaskSweepAimPosition')(p0, p5, p6, p7, p8, p9, p10); }
    
    /**
    * AI::TASK_SYNCHRONIZED_SCENE(ped, scene, "creatures@rottweiler@in_vehicle@std_car", "get_in", 1000.0, -8.0, 4, 0, 0x447a0000, 0);
    * Animations List : www.ls-multiplayer.com/dev/index.php?section=3
    */
    @:pure static inline function TaskSynchronizedScene(ped: Int, scene: Int, animDictionary: String, animationName: String, speed: Int, speedMultiplier: Int, duration: Int, flag: Int, playbackRate: Int, p9: Int): Void { return untyped __lua__('TaskSynchronizedScene')(ped, scene, animDictionary, animationName, speed, speedMultiplier, duration, flag, playbackRate, p9); }
    
    /**
    * In every case of this native, I've only seen the first parameter passed as 0, although I believe it's a Ped after seeing tasks around it using 0. That's because it's used in a Sequence Task.
    * The last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player's coordinates.
    * ---
    * It seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately).
    * It is possible, however, that this is how SWAT throws smoke grenades at the player when in cover.
    * ----------------------------------------------------
    * The first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 &lt;14&gt;] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 &lt;14&gt;] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason.
    */
    @:pure static inline function TaskThrowProjectile(ped: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('TaskThrowProjectile')(ped, x, y, z); }
    
    /**
    * used in sequence task
    * both parameters seems to be always 0
    */
    @:pure static inline function TaskToggleDuck(p0: Bool, p1: Bool): Void { return untyped __lua__('TaskToggleDuck')(p0, p1); }
    
    /**
    * duration in milliseconds
    */
    @:pure static inline function TaskTurnPedToFaceCoord(ped: Int, x: Int, y: Int, z: Int, duration: Int): Void { return untyped __lua__('TaskTurnPedToFaceCoord')(ped, x, y, z, duration); }
    
    /**
    * duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
    */
    @:pure static inline function TaskTurnPedToFaceEntity(ped: Int, entity: Int, duration: Int): Void { return untyped __lua__('TaskTurnPedToFaceEntity')(ped, entity, duration); }
    
    /**
    * Actually has 3 params, not 2.
    * p0: Ped
    * p1: int (or bool?)
    * p2: int
    */
    @:pure static inline function TaskUseMobilePhone(ped: Int, p1: Int): Void { return untyped __lua__('TaskUseMobilePhone')(ped, p1); }
    @:pure static inline function TaskUseMobilePhoneTimed(ped: Int, duration: Int): Void { return untyped __lua__('TaskUseMobilePhoneTimed')(ped, duration); }
    @:pure static inline function TaskUseNearestScenarioChainToCoord(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Void { return untyped __lua__('TaskUseNearestScenarioChainToCoord')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function TaskUseNearestScenarioChainToCoordWarp(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int): Void { return untyped __lua__('TaskUseNearestScenarioChainToCoordWarp')(p0, p1, p2, p3, p4, p5); }
    
    /**
    * Updated variables
    * An alternative to AI::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead.
    */
    @:pure static inline function TaskUseNearestScenarioToCoord(ped: Int, x: Int, y: Int, z: Int, distance: Int, duration: Int): Void { return untyped __lua__('TaskUseNearestScenarioToCoord')(ped, x, y, z, distance, duration); }
    @:pure static inline function TaskUseNearestScenarioToCoordWarp(ped: Int, x: Int, y: Int, z: Int, radius: Int, p5: Int): Void { return untyped __lua__('TaskUseNearestScenarioToCoordWarp')(ped, x, y, z, radius, p5); }
    @:pure static inline function TaskVehicleAimAtCoord(ped: Int, x: Int, y: Int, z: Int): Void { return untyped __lua__('TaskVehicleAimAtCoord')(ped, x, y, z); }
    @:pure static inline function TaskVehicleAimAtPed(ped: Int, target: Int): Void { return untyped __lua__('TaskVehicleAimAtPed')(ped, target); }
    
    /**
    * chases targetEnt fast and aggressively
    * --
    * Makes ped (needs to be in vehicle) chase targetEnt.
    */
    @:pure static inline function TaskVehicleChase(driver: Int, targetEnt: Int): Void { return untyped __lua__('TaskVehicleChase')(driver, targetEnt); }
    
    /**
    * info about driving modes: HTTP://gtaforums.com/topic/822314-guide-driving-styles/
    * ---------------------------------------------------------------
    * Passing P6 value as floating value didn't throw any errors, though unsure what is it exactly, looks like radius or something.
    * P10 though, it is mentioned as float, however, I used bool and set it to true, that too worked.
    * Here the e.g. code I used
    * Function.Call(Hash.TASK_VEHICLE_DRIVE_TO_COORD, Ped, Vehicle, Cor X, Cor Y, Cor Z, 30f, 1f, Vehicle.GetHashCode(), 16777216, 1f, true);
    */
    @:pure static inline function TaskVehicleDriveToCoord(ped: Int, vehicle: Int, x: Int, y: Int, z: Int, speed: Int, p6: Int, vehicleModel: EitherType<String, Int>, drivingMode: Int, stopRange: Int, p10: Int): Void { return untyped __lua__('TaskVehicleDriveToCoord')(ped, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, p10); }
    @:pure static inline function TaskVehicleDriveToCoordLongrange(ped: Int, vehicle: Int, x: Int, y: Int, z: Int, speed: Int, driveMode: Int, stopRange: Int): Void { return untyped __lua__('TaskVehicleDriveToCoordLongrange')(ped, vehicle, x, y, z, speed, driveMode, stopRange); }
    @:pure static inline function TaskVehicleDriveWander(ped: Int, vehicle: Int, speed: Int, drivingStyle: Int): Void { return untyped __lua__('TaskVehicleDriveWander')(ped, vehicle, speed, drivingStyle); }
    
    /**
    * Makes a ped follow the targetVehicle with &lt;minDistance&gt; in between.
    * note: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine.
    * Mode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.
    * -1 = behind
    * 0 = ahead
    * 1 = left
    * 2 = right
    * 3 = back left
    * 4 = back right
    * if the target is closer than noRoadsDistance, the driver will ignore pathing/roads and follow you directly.
    * Driving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/
    */
    @:pure static inline function TaskVehicleEscort(ped: Int, vehicle: Int, targetVehicle: Int, mode: Int, speed: Int, drivingStyle: Int, minDistance: Int, p7: Int, noRoadsDistance: Int): Void { return untyped __lua__('TaskVehicleEscort')(ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance); }
    
    /**
    * Makes a ped in a vehicle follow an entity (ped, vehicle, etc.)
    * drivingStyle:
    * 0 = Rushed
    * 1 = Ignore Traffic Lights
    * 2 = Fast
    * 3 = Normal (Stop in Traffic)
    * 4 = Fast avoid traffic
    * 5 = Fast, stops in traffic but overtakes sometimes
    * 6 = Fast avoids traffic extremely
    * Console Hash: 0xA8B917D7
    * AI::_TASK_VEHICLE_FOLLOW(l_244[3 -- [[1]] ], l_268[3 -- [[1]] ], l_278, 40.0, 262144, 10);
    * What is this known as in the decompiled scripts ffs. I need more examples. I've searched in all scripts for keywords suchas,
    * TASK_VEHICLE_FOLLOW, FC545A9F0626E3B6, 0xFC545A9F0626E3B6, all the parameters in the above example even just search the last few params '40.0, 262144, 10' and couldnt find where this native is used in scripts at all unless whoever decompiled the scripts gave it a whack a.. name.
    */
    @:pure static inline function TaskVehicleFollow(driver: Int, vehicle: Int, targetEntity: Int, drivingStyle: Int, speed: Int, minDistance: Int): Void { return untyped __lua__('TaskVehicleFollow')(driver, vehicle, targetEntity, drivingStyle, speed, minDistance); }
    
    /**
    * task_vehicle_follow_waypoint_recording(Ped p0, Vehicle p1, string p2, int p3, int p4, int p5, int p6, float.x p7, float.Y p8, float.Z p9, bool p10, int p11)
    * p2 = Waypoint recording string (found in update\update.rpf\x64\levels\gta5\waypointrec.rpf
    * p3 = 786468
    * p4 = 0
    * p5 = 16
    * p6 = -1 (angle?)
    * p7/8/9 = usually v3.zero
    * p10 = bool (repeat?)
    * p11 = 1073741824
    */
    @:pure static inline function TaskVehicleFollowWaypointRecording(ped: Int, vehicle: Int, WPRecording: String, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Bool, p9: Int): Void { return untyped __lua__('TaskVehicleFollowWaypointRecording')(ped, vehicle, WPRecording, p3, p4, p5, p6, p7, p8, p9); }
    
    /**
    * Differs from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other "road laws" into consideration.
    * WARNING:
    * A behaviorFlag value of 0 will result in a clunky, stupid driver!
    * Recommended settings:
    * speed = 30.0f,
    * behaviorFlag = 156,
    * stoppingRange = 5.0f;
    * If you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the event of interruption.
    * If using this to continually follow a Ped who is on foot:  You will need to run this in a tick loop.  Call it in with the Ped's updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn't get stuck.  If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck.  One way around this would be to implement an "anti-stuck" mechanism, which allows the driver to realize he's stuck, temporarily pause the tick, unstuck, then resume the tick.
    * EDIT:  This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/
    */
    @:pure static inline function TaskVehicleGotoNavmesh(ped: Int, vehicle: Int, x: Int, y: Int, z: Int, speed: Int, behaviorFlag: Int, stoppingRange: Int): Void { return untyped __lua__('TaskVehicleGotoNavmesh')(ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange); }
    
    /**
    * pilot, vehicle and altitude are rather self-explanatory.
    * p4: is unused variable in the function.
    * entityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them.
    * 'targetSpeed':  The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE.  As such, you'll want to modulate it as opposed to calling it via a hard-wired, constant #.
    * 'radius' isn't just "stop within radius of X of target" like with ground vehicles.  In this case, the pilot will fly an entire circle around 'radius' and continue to do so.
    * NOT CONFIRMED:  p7 appears to be a FlyingStyle enum.  Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc.
    * NOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter.
    */
    @:pure static inline function TaskVehicleHeliProtect(pilot: Int, vehicle: Int, entityToFollow: Int, targetSpeed: Int, p4: Int, radius: Int, altitude: Int, p7: Int): Void { return untyped __lua__('TaskVehicleHeliProtect')(pilot, vehicle, entityToFollow, targetSpeed, p4, radius, altitude, p7); }
    @:pure static inline function TaskVehicleMission(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Bool): Void { return untyped __lua__('TaskVehicleMission')(p0, p1, p2, p3, p4, p5, p6, p7, p8); }
    
    /**
    * Example from fm_mission_controller.c4:
    * AI::TASK_VEHICLE_MISSION_COORS_TARGET(l_65E1, l_65E2, 324.84588623046875, 325.09619140625, 104.3525, 4, 15.0, 802987, 5.0, 5.0, 0);
    */
    @:pure static inline function TaskVehicleMissionCoorsTarget(ped: Int, vehicle: Int, x: Int, y: Int, z: Int, p5: Int, p6: Int, p7: Int, p8: Int, p9: Int, p10: Bool): Void { return untyped __lua__('TaskVehicleMissionCoorsTarget')(ped, vehicle, x, y, z, p5, p6, p7, p8, p9, p10); }
    
    /**
    * Modes:
    * 8= flees
    * 1=drives around the ped
    * 4=drives and stops near
    * 7=follows
    * 10=follows to the left
    * 11=follows to the  right
    * 12 = follows behind
    * 13=follows ahead
    * 14=follows, stop when near
    */
    @:pure static inline function TaskVehicleMissionPedTarget(ped: Int, vehicle: Int, pedTarget: Int, mode: Int, maxSpeed: Int, drivingStyle: Int, minDistance: Int, p7: Int, p8: Bool): Void { return untyped __lua__('TaskVehicleMissionPedTarget')(ped, vehicle, pedTarget, mode, maxSpeed, drivingStyle, minDistance, p7, p8); }
    
    /**
    * Modes:
    * 0 - ignore heading
    * 1 - park forward
    * 2 - park backwards
    * Depending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle.
    * Radius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the radius is measured in centimeters or something.
    */
    @:pure static inline function TaskVehiclePark(ped: Int, vehicle: Int, x: Int, y: Int, z: Int, heading: Int, mode: Int, radius: Int, keepEngineOn: Bool): Void { return untyped __lua__('TaskVehiclePark')(ped, vehicle, x, y, z, heading, mode, radius, keepEngineOn); }
    
    /**
    * Most probably plays a specific animation on vehicle. For example getting chop out of van etc...
    * Here's how its used -
    * AI::TASK_VEHICLE_PLAY_ANIM(l_325, "rcmnigel1b", "idle_speedo");
    * AI::TASK_VEHICLE_PLAY_ANIM(l_556[0 -- [[1]] ], "missfra0_chop_drhome", "InCar_GetOutofBack_Speedo");
    * FYI : Speedo is the name of van in which chop was put in the mission.
    */
    @:pure static inline function TaskVehiclePlayAnim(vehicle: Int, animation_set: String, animation_name: String): Void { return untyped __lua__('TaskVehiclePlayAnim')(vehicle, animation_set, animation_name); }
    @:pure static inline function TaskVehicleShootAtCoord(ped: Int, x: Int, y: Int, z: Int, p4: Int): Void { return untyped __lua__('TaskVehicleShootAtCoord')(ped, x, y, z, p4); }
    @:pure static inline function TaskVehicleShootAtPed(ped: Int, target: Int, p2: Int): Void { return untyped __lua__('TaskVehicleShootAtPed')(ped, target, p2); }
    
    /**
    * '1
    * '3 - brake + reverse
    * '4 - turn left 90 + braking
    * '5 - turn right 90 + braking
    * '6 - brake strong (handbrake?) until time ends
    * '7 - turn left + accelerate
    * '7 - turn right + accelerate
    * '9 - weak acceleration
    * '10 - turn left + restore wheel pos to center in the end
    * '11 - turn right + restore wheel pos to center in the end
    * '13 - turn left + go reverse
    * '14 - turn left + go reverse
    * '16 - crash the game after like 2 seconds :)
    * '17 - keep actual state, game crashed after few tries
    * '18 - game crash
    * '19 - strong brake + turn left/right
    * '20 - weak brake + turn left then turn right
    * '21 - weak brake + turn right then turn left
    * '22 - brake + reverse
    * '23 - accelerate fast
    * '24
    * '25 - brake turning left then when almost stopping it turns left more
    * '26 - brake turning right then when almost stopping it turns right more
    * '27 - brake until car stop or until time ends
    * '28 - brake + strong reverse acceleration
    * '30 - performs a burnout (brake until stop + brake and accelerate)
    * '31 - accelerate + handbrake
    * '32 - accelerate very strong
    * Seems to be this:
    * Works on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), "time" will work, otherwise the task will be performed forever until tasked with something else
    */
    @:pure static inline function TaskVehicleTempAction(driver: Int, vehicle: Int, action: Int, time: Int): Void { return untyped __lua__('TaskVehicleTempAction')(driver, vehicle, action, time); }
    @:pure static inline function TaskWanderInArea(ped: Int, x: Int, y: Int, z: Int, radius: Int, minimalLength: Int, timeBetweenWalks: Int): Void { return untyped __lua__('TaskWanderInArea')(ped, x, y, z, radius, minimalLength, timeBetweenWalks); }
    
    /**
    * Makes ped walk around the area.
    * set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.
    */
    @:pure static inline function TaskWanderStandard(ped: Int, p1: Int, p2: Int): Void { return untyped __lua__('TaskWanderStandard')(ped, p1, p2); }
    
    /**
    * Seat Numbers
    * -------------------------------
    * Driver = -1
    * Any = -2
    * Left-Rear = 1
    * Right-Front = 0
    * Right-Rear = 2
    * Extra seats = 3-14(This may differ from vehicle type e.g. Firetruck Rear Stand, Ambulance Rear)
    */
    @:pure static inline function TaskWarpPedIntoVehicle(ped: Int, vehicle: Int, seat: Int): Void { return untyped __lua__('TaskWarpPedIntoVehicle')(ped, vehicle, seat); }
    
    /**
    * EX: Function.Call(Ped1, Ped2, Time, 0);
    * The last parameter is always 0 for some reason I do not know. The first parameter is the pedestrian who will writhe to the pedestrian in the other parameter. The third paremeter is how long until the Writhe task ends. When the task ends, the ped will die. If set to -1, he will not die automatically, and the task will continue until something causes it to end. This can be being touched by an entity, being shot, explosion, going into ragdoll, having task cleared. Anything that ends the current task will kill the ped at this point.
    * MulleDK19: Third parameter does not appear to be time. The last parameter is not implemented (It's not used, regardless of value).
    */
    @:pure static inline function TaskWrithe(ped: Int, target: Int, time: Int, p3: Int): Void { return untyped __lua__('TaskWrithe')(ped, target, time, p3); }
    
    /**
    * For a full list, see here: pastebin.com/yLNWicUi
    */
    @:pure static inline function TerminateAllScriptsWithThisName(scriptName: String): Void { return untyped __lua__('TerminateAllScriptsWithThisName')(scriptName); }
    @:pure static inline function TerminateThisThread(): Void { return untyped __lua__('TerminateThisThread')(); }
    @:pure static inline function TerminateThread(threadId: Int): Void { return untyped __lua__('TerminateThread')(threadId); }
    @:pure static inline function TestProbeAgainstAllWater(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int): Int { return untyped __lua__('TestProbeAgainstAllWater')(p0, p1, p2, p3, p4, p5, p6, p7); }
    @:pure static inline function TestProbeAgainstWater(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int): { a0: Int, a1: Array<Int> } { return untyped __lua__('TestProbeAgainstWater')(x1, y1, z1, x2, y2, z2); }
    @:pure static inline function TestVerticalProbeAgainstAllWater(x: Int, y: Int, z: Int, p3: Int, p4: Int): Int { return untyped __lua__('TestVerticalProbeAgainstAllWater')(x, y, z, p3, p4); }
    @:pure static inline function TextureDownloadGetName(p0: Int): String { return untyped __lua__('TextureDownloadGetName')(p0); }
    @:pure static inline function TextureDownloadHasFailed(p0: Int): Int { return untyped __lua__('TextureDownloadHasFailed')(p0); }
    @:pure static inline function N_0x5776ed562c134687(p0: Int): Int { return untyped __lua__('N_0x5776ed562c134687')(p0); }
    @:pure static inline function TextureDownloadRelease(p0: Int): Void { return untyped __lua__('TextureDownloadRelease')(p0); }
    @:pure static inline function TextureDownloadRequest(FilePath: String, Name: String, p3: Bool): { a0: Int, a1: Int } { return untyped __lua__('TextureDownloadRequest')(FilePath, Name, p3); }
    
    /**
    * Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
    */
    @:pure static inline function Timera(): Int { return untyped __lua__('Timera')(); }
    @:pure static inline function Timerb(): Int { return untyped __lua__('Timerb')(); }
    
    /**
    * Gets the current frame time.
    */
    @:pure static inline function Timestep(): Int { return untyped __lua__('Timestep')(); }
    @:pure static inline function ToFloat(value: Int): Int { return untyped __lua__('ToFloat')(value); }
    @:pure static inline function ToggleStealthRadar(toggle: Bool): Void { return untyped __lua__('ToggleStealthRadar')(toggle); }
    
    /**
    * Toggles:
    * UNK17
    * Turbo
    * UNK19
    * Tire Smoke
    * UNK21
    * Xenon Headlights
    */
    @:pure static inline function ToggleVehicleMod(vehicle: Int, modType: Int, toggle: Bool): Void { return untyped __lua__('ToggleVehicleMod')(vehicle, modType, toggle); }
    @:pure static inline function TrackObjectVisibility(p0: Int): Void { return untyped __lua__('TrackObjectVisibility')(p0); }
    
    /**
    * in script hook .net
    * Vehicle v = ...;
    * Function.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle);
    */
    @:pure static inline function TrackVehicleVisibility(vehicle: Int): Void { return untyped __lua__('TrackVehicleVisibility')(vehicle); }
    
    /**
    * time in ms to transition from fully blurred to normal
    */
    @:pure static inline function TransitionFromBlurred(transitionTime: Int): Int { return untyped __lua__('TransitionFromBlurred')(transitionTime); }
    
    /**
    * time in ms to transition to fully blurred screen
    */
    @:pure static inline function TransitionToBlurred(transitionTime: Int): Int { return untyped __lua__('TransitionToBlurred')(transitionTime); }
    
    /**
    * The backing function for TriggerEvent.
    */
    @:pure static inline function TriggerEventInternal(eventName: String, eventPayload: String, payloadLength: Int): Void { return untyped __lua__('TriggerEventInternal')(eventName, eventPayload, payloadLength); }
    
    /**
    * List of all usable event names found in b617d used with this native. Sorted alphabetically and identical names removed: pastebin.com/RzDFmB1W
    * All music event names found in the b617d scripts: pastebin.com/GnYt0R3P
    */
    @:pure static inline function TriggerMusicEvent(eventName: String): Int { return untyped __lua__('TriggerMusicEvent')(eventName); }
    
    /**
    * from scripts:
    * int bitFlag = 0;
    * int vVar0[3];
    * vVar0[0] = 2; //p0
    * vVar0[1] = PLAYER_ID(); //p1 0 player
    * vVar0[2] = 53; //p2
    * SET_BIT(&amp;bitFlag, selectedPlayer);
    * TRIGGER_SCRIPT_EVENT(1, vVar0, 3, bitFlag);
    */
    @:pure static inline function TriggerScriptEvent(p0: Bool, argCount: Int, bitset: Int): Int { return untyped __lua__('TriggerScriptEvent')(p0, argCount, bitset); }
    
    /**
    * The backing function for TriggerServerEvent.
    */
    @:pure static inline function TriggerServerEventInternal(eventName: String, eventPayload: String, payloadLength: Int): Void { return untyped __lua__('TriggerServerEventInternal')(eventName, eventPayload, payloadLength); }
    @:pure static inline function UnblockDecisionMakerEvent(name: EitherType<String, Int>, type: Int): Void { return untyped __lua__('UnblockDecisionMakerEvent')(name, type); }
    @:pure static inline function UncuffPed(ped: Int): Void { return untyped __lua__('UncuffPed')(ped); }
    @:pure static inline function UnfreezeRadioStation(radioStation: String): Void { return untyped __lua__('UnfreezeRadioStation')(radioStation); }
    
    /**
    * Returns the interior ID at the given coords, but only if the unknown variable is set to 0, otherwise it will return 0.
    */
    @:pure static inline function UnkGetInteriorAtCoords(x: Int, y: Int, z: Int, unk: Int): Int { return untyped __lua__('UnkGetInteriorAtCoords')(x, y, z, unk); }
    
    /**
    * Returns the interior ID at the given coords, but only if the unknown variable is set to 0, otherwise it will return 0.
    */
    @:pure static inline function N_0xf0f77adb9f67e79d(x: Int, y: Int, z: Int, unk: Int): Int { return untyped __lua__('N_0xf0f77adb9f67e79d')(x, y, z, unk); }
    @:pure static inline function UnlockMinimapAngle(): Void { return untyped __lua__('UnlockMinimapAngle')(); }
    @:pure static inline function UnlockMinimapPosition(): Void { return untyped __lua__('UnlockMinimapPosition')(); }
    
    /**
    * I see this as a native that would of been used back in GTA III when you finally unlocked the bridge to the next island and such.
    */
    @:pure static inline function UnlockMissionNewsStory(newsStory: Int): Void { return untyped __lua__('UnlockMissionNewsStory')(newsStory); }
    @:pure static inline function UnpausePlaybackRecordedVehicle(p0: Int): Void { return untyped __lua__('UnpausePlaybackRecordedVehicle')(p0); }
    
    /**
    * Does something similar to INTERIOR::DISABLE_INTERIOR.
    * You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside.
    */
    @:pure static inline function UnpinInterior(interiorID: Int): Void { return untyped __lua__('UnpinInterior')(interiorID); }
    @:pure static inline function UnpinRopeVertex(rope: Int, vertex: Int): Int { return untyped __lua__('UnpinRopeVertex')(rope, vertex); }
    
    /**
    * gtaforums.com/topic/885580-ped-headshotmugshot-txd/
    */
    @:pure static inline function UnregisterPedheadshot(handle: Int): Void { return untyped __lua__('UnregisterPedheadshot')(handle); }
    @:pure static inline function UnregisterScriptWithAudio(): Void { return untyped __lua__('UnregisterScriptWithAudio')(); }
    @:pure static inline function UpdateNavmeshBlockingObject(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p7: Int, p8: Int): Void { return untyped __lua__('UpdateNavmeshBlockingObject')(p0, p1, p2, p3, p4, p5, p6, p7, p8); }
    
    /**
    * Returns the current status of the onscreen keyboard, and updates the output.
    * Status Codes:
    * 0 - User still editing
    * 1 - User has finished editing
    * 2 - User has canceled editing
    * 3 - Keyboard isn't active
    */
    @:pure static inline function UpdateOnscreenKeyboard(): Int { return untyped __lua__('UpdateOnscreenKeyboard')(); }
    
    /**
    * See SET_PED_HEAD_BLEND_DATA().
    */
    @:pure static inline function UpdatePedHeadBlendData(ped: Int, shapeMix: Int, skinMix: Int, thirdMix: Int): Void { return untyped __lua__('UpdatePedHeadBlendData')(ped, shapeMix, skinMix, thirdMix); }
    @:pure static inline function UpdateTaskAimGunScriptedTarget(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int, p5: Bool): Void { return untyped __lua__('UpdateTaskAimGunScriptedTarget')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function UpdateTaskHandsUpDuration(ped: Int, duration: Int): Void { return untyped __lua__('UpdateTaskHandsUpDuration')(ped, duration); }
    @:pure static inline function UpdateTaskSweepAimEntity(ped: Int, entity: Int): Void { return untyped __lua__('UpdateTaskSweepAimEntity')(ped, entity); }
    @:pure static inline function UpdateTaskSweepAimPosition(p0: Int, p1: Int, p2: Int, p3: Int): Void { return untyped __lua__('UpdateTaskSweepAimPosition')(p0, p1, p2, p3); }
    
    /**
    * Formerly known as _LOWER_MAP_PROP_DENSITY and wrongly due to idiots as _ENABLE_MP_DLC_MAPS.
    * Sets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. Does not touch DLC map data at all.
    * In fact, I doubt this changes the flag whatsoever, that's the OTHER native idiots use together with this that does so, this one only causes a loading screen to show as it reloads map data.
    */
    @:pure static inline function UseFreemodeMapBehavior(toggle: Bool): Void { return untyped __lua__('UseFreemodeMapBehavior')(toggle); }
    
    /**
    * Formerly known as _LOWER_MAP_PROP_DENSITY and wrongly due to idiots as _ENABLE_MP_DLC_MAPS.
    * Sets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. Does not touch DLC map data at all.
    * In fact, I doubt this changes the flag whatsoever, that's the OTHER native idiots use together with this that does so, this one only causes a loading screen to show as it reloads map data.
    */
    @:pure static inline function EnableMpDlcMaps(toggle: Bool): Void { return untyped __lua__('EnableMpDlcMaps')(toggle); }
    
    /**
    * From the b678d decompiled scripts:
    * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("FM_Mission_Controler");
    * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_apartment_mp");
    * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_indep_fireworks");
    * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_mp_cig_plane");
    * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_mp_creator");
    * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_ornate_heist");
    * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_prison_break_heist_station");
    */
    @:pure static inline function UseParticleFxAssetNextCall(name: String): Void { return untyped __lua__('UseParticleFxAssetNextCall')(name); }
    
    /**
    * From the b678d decompiled scripts:
    * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("FM_Mission_Controler");
    * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_apartment_mp");
    * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_indep_fireworks");
    * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_mp_cig_plane");
    * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_mp_creator");
    * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_ornate_heist");
    * GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_prison_break_heist_station");
    */
    @:pure static inline function SetPtfxAssetNextCall(name: String): Void { return untyped __lua__('SetPtfxAssetNextCall')(name); }
    
    /**
    * hash collision?
    */
    @:pure static inline function UsePlayerColourInsteadOfTeamColour(toggle: Bool): Void { return untyped __lua__('UsePlayerColourInsteadOfTeamColour')(toggle); }
    @:pure static inline function UseSirenAsHorn(vehicle: Int, toggle: Bool): Void { return untyped __lua__('UseSirenAsHorn')(vehicle, toggle); }
    @:pure static inline function UseWaypointRecordingAsAssistedMovementRoute(p1: Bool, p2: Int, p3: Int): Int { return untyped __lua__('UseWaypointRecordingAsAssistedMovementRoute')(p1, p2, p3); }
    
    /**
    * Hash collision
    */
    @:pure static inline function UsingMissionCreator(toggle: Bool): Void { return untyped __lua__('UsingMissionCreator')(toggle); }
    
    /**
    * hash collision?
    */
    @:pure static inline function UsingNetworkWeapontype(p0: Int): Int { return untyped __lua__('UsingNetworkWeapontype')(p0); }
    
    /**
    * Calculates distance between vectors.
    */
    @:pure static inline function Vdist(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int): Int { return untyped __lua__('Vdist')(x1, y1, z1, x2, y2, z2); }
    
    /**
    * Calculates distance between vectors but does not perform Sqrt operations. (Its way faster)
    */
    @:pure static inline function Vdist2(x1: Int, y1: Int, z1: Int, x2: Int, y2: Int, z2: Int): Int { return untyped __lua__('Vdist2')(x1, y1, z1, x2, y2, z2); }
    
    /**
    * calls from vehicle to net.
    */
    @:pure static inline function VehToNet(vehicle: Int): Int { return untyped __lua__('VehToNet')(vehicle); }
    
    /**
    * Vehicle has landing gear?
    */
    @:pure static inline function VehicleHasLandingGear(vehicle: Int): Int { return untyped __lua__('VehicleHasLandingGear')(vehicle); }
    
    /**
    * Vehicle has landing gear?
    */
    @:pure static inline function N_0x4198ab0022b15f87(vehicle: Int): Int { return untyped __lua__('N_0x4198ab0022b15f87')(vehicle); }
    @:pure static inline function VehicleWaypointPlaybackOverrideSpeed(p0: Int, p1: Int): Void { return untyped __lua__('VehicleWaypointPlaybackOverrideSpeed')(p0, p1); }
    @:pure static inline function VehicleWaypointPlaybackPause(p0: Int): Void { return untyped __lua__('VehicleWaypointPlaybackPause')(p0); }
    @:pure static inline function VehicleWaypointPlaybackResume(p0: Int): Void { return untyped __lua__('VehicleWaypointPlaybackResume')(p0); }
    @:pure static inline function VehicleWaypointPlaybackUseDefaultSpeed(p0: Int): Void { return untyped __lua__('VehicleWaypointPlaybackUseDefaultSpeed')(p0); }
    
    /**
    * Calculates the magnitude of a vector.
    */
    @:pure static inline function Vmag(x: Int, y: Int, z: Int): Int { return untyped __lua__('Vmag')(x, y, z); }
    
    /**
    * Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
    */
    @:pure static inline function Vmag2(x: Int, y: Int, z: Int): Int { return untyped __lua__('Vmag2')(x, y, z); }
    
    /**
    * Pauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use
    * static void WAIT(DWORD time);
    * found in main.h
    * --------------------------------------------------------------------
    * It does not actually seem to wait the amount of milliseconds stated like the normal WAIT() command does, but it does seem to make task sequences work more smoothly
    * System native hashes do not change on gameupdate
    */
    @:pure static inline function Wait(ms: Int): Void { return untyped __lua__('Wait')(ms); }
    
    /**
    * Hash collision
    */
    @:pure static inline function WasCounterActivated(vehicle: Int, p1: Int): Int { return untyped __lua__('WasCounterActivated')(vehicle, p1); }
    @:pure static inline function WasCutsceneSkipped(): Int { return untyped __lua__('WasCutsceneSkipped')(); }
    
    /**
    * Returns whether or not the currently executing event was canceled. See https://wiki.fivem.net/wiki/WasEventCanceled
    * @return A boolean.
    */
    @:pure static inline function WasEventCanceled(): Int { return untyped __lua__('WasEventCanceled')(); }
    @:pure static inline function WasPedKilledByStealth(ped: Int): Int { return untyped __lua__('WasPedKilledByStealth')(ped); }
    @:pure static inline function WasPedKilledByTakedown(ped: Int): Int { return untyped __lua__('WasPedKilledByTakedown')(ped); }
    
    /**
    * Despite this function's name, it simply returns whether the specified handle is a Ped.
    */
    @:pure static inline function WasPedSkeletonUpdated(ped: Int): Int { return untyped __lua__('WasPedSkeletonUpdated')(ped); }
    @:pure static inline function WashDecalsFromVehicle(vehicle: Int, p1: Int): Void { return untyped __lua__('WashDecalsFromVehicle')(vehicle, p1); }
    @:pure static inline function WashDecalsInRange(p0: Int, p1: Int, p2: Int, p3: Int, p4: Int): Void { return untyped __lua__('WashDecalsInRange')(p0, p1, p2, p3, p4); }
    @:pure static inline function WaypointPlaybackGetIsPaused(p0: Int): Int { return untyped __lua__('WaypointPlaybackGetIsPaused')(p0); }
    @:pure static inline function WaypointPlaybackOverrideSpeed(p0: Int, p1: Int, p2: Bool): Void { return untyped __lua__('WaypointPlaybackOverrideSpeed')(p0, p1, p2); }
    @:pure static inline function WaypointPlaybackPause(p0: Int, p1: Bool, p2: Bool): Void { return untyped __lua__('WaypointPlaybackPause')(p0, p1, p2); }
    @:pure static inline function WaypointPlaybackResume(p0: Int, p1: Bool, p2: Int, p3: Int): Void { return untyped __lua__('WaypointPlaybackResume')(p0, p1, p2, p3); }
    @:pure static inline function WaypointPlaybackStartAimingAtCoord(p0: Int, p1: Int, p2: Int, p3: Int, p4: Bool): Void { return untyped __lua__('WaypointPlaybackStartAimingAtCoord')(p0, p1, p2, p3, p4); }
    @:pure static inline function WaypointPlaybackStartAimingAtPed(p0: Int, p1: Int, p2: Bool): Void { return untyped __lua__('WaypointPlaybackStartAimingAtPed')(p0, p1, p2); }
    @:pure static inline function WaypointPlaybackStartShootingAtCoord(p0: Int, p1: Int, p2: Int, p3: Int, p4: Bool, p5: Int): Void { return untyped __lua__('WaypointPlaybackStartShootingAtCoord')(p0, p1, p2, p3, p4, p5); }
    @:pure static inline function WaypointPlaybackStopAimingOrShooting(p0: Int): Void { return untyped __lua__('WaypointPlaybackStopAimingOrShooting')(p0); }
    @:pure static inline function WaypointPlaybackUseDefaultSpeed(p0: Int): Void { return untyped __lua__('WaypointPlaybackUseDefaultSpeed')(p0); }
    
    /**
    * For a full list, see here: pastebin.com/Tp0XpBMN
    * For a full list of the points, see here: goo.gl/wIH0vn
    */
    @:pure static inline function WaypointRecordingGetClosestWaypoint(name: String, x: Int, y: Int, z: Int, point: Int): Int { return untyped __lua__('WaypointRecordingGetClosestWaypoint')(name, x, y, z, point); }
    
    /**
    * For a full list, see here: pastebin.com/Tp0XpBMN
    * For a full list of the points, see here: goo.gl/wIH0vn
    */
    @:pure static inline function WaypointRecordingGetCoord(name: String, point: Int): { a0: Int, a1: Array<Int> } { return untyped __lua__('WaypointRecordingGetCoord')(name, point); }
    
    /**
    * For a full list, see here: pastebin.com/Tp0XpBMN
    * For a full list of the points, see here: goo.gl/wIH0vn
    */
    @:pure static inline function WaypointRecordingGetNumPoints(name: String, points: Int): Int { return untyped __lua__('WaypointRecordingGetNumPoints')(name, points); }
    @:pure static inline function WaypointRecordingGetSpeedAtPoint(name: String, point: Int): Int { return untyped __lua__('WaypointRecordingGetSpeedAtPoint')(name, point); }
    
    /**
    * First parameter was previously an Entity but after further research it is definitely a hash.
    */
    @:pure static inline function WouldEntityBeOccluded(entityModelHash: EitherType<String, Int>, x: Int, y: Int, z: Int, p4: Bool): Int { return untyped __lua__('WouldEntityBeOccluded')(entityModelHash, x, y, z, p4); }
}
